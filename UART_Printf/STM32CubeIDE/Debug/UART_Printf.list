
UART_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  080091e0  080091e0  000191e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096d8  080096d8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e0  080096e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080096f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001e0  080098d0  000201e0  2**2
                  ALLOC
 10 RAM1_region   00000000  200004f8  200004f8  000201e0  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  000201e0  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  200004f8  200004f8  000204f8  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 15 .debug_line   0001a85a  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 0000007c  00000000  00000000  0003aaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0001b5d1  00000000  00000000  0003ab23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00003788  00000000  00000000  000560f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00001b80  00000000  00000000  00059880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc5a8  00000000  00000000  0005b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000014ee  00000000  00000000  001179a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0001f4d5  00000000  00000000  00118e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00008528  00000000  00000000  0013836c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	080091c4 	.word	0x080091c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	080091c4 	.word	0x080091c4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b970 	b.w	8001444 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9e08      	ldr	r6, [sp, #32]
 8001182:	460d      	mov	r5, r1
 8001184:	4604      	mov	r4, r0
 8001186:	460f      	mov	r7, r1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d14a      	bne.n	8001222 <__udivmoddi4+0xa6>
 800118c:	428a      	cmp	r2, r1
 800118e:	4694      	mov	ip, r2
 8001190:	d965      	bls.n	800125e <__udivmoddi4+0xe2>
 8001192:	fab2 f382 	clz	r3, r2
 8001196:	b143      	cbz	r3, 80011aa <__udivmoddi4+0x2e>
 8001198:	fa02 fc03 	lsl.w	ip, r2, r3
 800119c:	f1c3 0220 	rsb	r2, r3, #32
 80011a0:	409f      	lsls	r7, r3
 80011a2:	fa20 f202 	lsr.w	r2, r0, r2
 80011a6:	4317      	orrs	r7, r2
 80011a8:	409c      	lsls	r4, r3
 80011aa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011ae:	fa1f f58c 	uxth.w	r5, ip
 80011b2:	fbb7 f1fe 	udiv	r1, r7, lr
 80011b6:	0c22      	lsrs	r2, r4, #16
 80011b8:	fb0e 7711 	mls	r7, lr, r1, r7
 80011bc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80011c0:	fb01 f005 	mul.w	r0, r1, r5
 80011c4:	4290      	cmp	r0, r2
 80011c6:	d90a      	bls.n	80011de <__udivmoddi4+0x62>
 80011c8:	eb1c 0202 	adds.w	r2, ip, r2
 80011cc:	f101 37ff 	add.w	r7, r1, #4294967295
 80011d0:	f080 811b 	bcs.w	800140a <__udivmoddi4+0x28e>
 80011d4:	4290      	cmp	r0, r2
 80011d6:	f240 8118 	bls.w	800140a <__udivmoddi4+0x28e>
 80011da:	3902      	subs	r1, #2
 80011dc:	4462      	add	r2, ip
 80011de:	1a12      	subs	r2, r2, r0
 80011e0:	b2a4      	uxth	r4, r4
 80011e2:	fbb2 f0fe 	udiv	r0, r2, lr
 80011e6:	fb0e 2210 	mls	r2, lr, r0, r2
 80011ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ee:	fb00 f505 	mul.w	r5, r0, r5
 80011f2:	42a5      	cmp	r5, r4
 80011f4:	d90a      	bls.n	800120c <__udivmoddi4+0x90>
 80011f6:	eb1c 0404 	adds.w	r4, ip, r4
 80011fa:	f100 32ff 	add.w	r2, r0, #4294967295
 80011fe:	f080 8106 	bcs.w	800140e <__udivmoddi4+0x292>
 8001202:	42a5      	cmp	r5, r4
 8001204:	f240 8103 	bls.w	800140e <__udivmoddi4+0x292>
 8001208:	4464      	add	r4, ip
 800120a:	3802      	subs	r0, #2
 800120c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001210:	1b64      	subs	r4, r4, r5
 8001212:	2100      	movs	r1, #0
 8001214:	b11e      	cbz	r6, 800121e <__udivmoddi4+0xa2>
 8001216:	40dc      	lsrs	r4, r3
 8001218:	2300      	movs	r3, #0
 800121a:	e9c6 4300 	strd	r4, r3, [r6]
 800121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001222:	428b      	cmp	r3, r1
 8001224:	d908      	bls.n	8001238 <__udivmoddi4+0xbc>
 8001226:	2e00      	cmp	r6, #0
 8001228:	f000 80ec 	beq.w	8001404 <__udivmoddi4+0x288>
 800122c:	2100      	movs	r1, #0
 800122e:	e9c6 0500 	strd	r0, r5, [r6]
 8001232:	4608      	mov	r0, r1
 8001234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001238:	fab3 f183 	clz	r1, r3
 800123c:	2900      	cmp	r1, #0
 800123e:	d149      	bne.n	80012d4 <__udivmoddi4+0x158>
 8001240:	42ab      	cmp	r3, r5
 8001242:	d302      	bcc.n	800124a <__udivmoddi4+0xce>
 8001244:	4282      	cmp	r2, r0
 8001246:	f200 80f7 	bhi.w	8001438 <__udivmoddi4+0x2bc>
 800124a:	1a84      	subs	r4, r0, r2
 800124c:	eb65 0203 	sbc.w	r2, r5, r3
 8001250:	2001      	movs	r0, #1
 8001252:	4617      	mov	r7, r2
 8001254:	2e00      	cmp	r6, #0
 8001256:	d0e2      	beq.n	800121e <__udivmoddi4+0xa2>
 8001258:	e9c6 4700 	strd	r4, r7, [r6]
 800125c:	e7df      	b.n	800121e <__udivmoddi4+0xa2>
 800125e:	b902      	cbnz	r2, 8001262 <__udivmoddi4+0xe6>
 8001260:	deff      	udf	#255	; 0xff
 8001262:	fab2 f382 	clz	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	f040 808f 	bne.w	800138a <__udivmoddi4+0x20e>
 800126c:	1a8a      	subs	r2, r1, r2
 800126e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001272:	fa1f fe8c 	uxth.w	lr, ip
 8001276:	2101      	movs	r1, #1
 8001278:	fbb2 f5f7 	udiv	r5, r2, r7
 800127c:	fb07 2015 	mls	r0, r7, r5, r2
 8001280:	0c22      	lsrs	r2, r4, #16
 8001282:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001286:	fb0e f005 	mul.w	r0, lr, r5
 800128a:	4290      	cmp	r0, r2
 800128c:	d908      	bls.n	80012a0 <__udivmoddi4+0x124>
 800128e:	eb1c 0202 	adds.w	r2, ip, r2
 8001292:	f105 38ff 	add.w	r8, r5, #4294967295
 8001296:	d202      	bcs.n	800129e <__udivmoddi4+0x122>
 8001298:	4290      	cmp	r0, r2
 800129a:	f200 80ca 	bhi.w	8001432 <__udivmoddi4+0x2b6>
 800129e:	4645      	mov	r5, r8
 80012a0:	1a12      	subs	r2, r2, r0
 80012a2:	b2a4      	uxth	r4, r4
 80012a4:	fbb2 f0f7 	udiv	r0, r2, r7
 80012a8:	fb07 2210 	mls	r2, r7, r0, r2
 80012ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012b0:	fb0e fe00 	mul.w	lr, lr, r0
 80012b4:	45a6      	cmp	lr, r4
 80012b6:	d908      	bls.n	80012ca <__udivmoddi4+0x14e>
 80012b8:	eb1c 0404 	adds.w	r4, ip, r4
 80012bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80012c0:	d202      	bcs.n	80012c8 <__udivmoddi4+0x14c>
 80012c2:	45a6      	cmp	lr, r4
 80012c4:	f200 80ba 	bhi.w	800143c <__udivmoddi4+0x2c0>
 80012c8:	4610      	mov	r0, r2
 80012ca:	eba4 040e 	sub.w	r4, r4, lr
 80012ce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80012d2:	e79f      	b.n	8001214 <__udivmoddi4+0x98>
 80012d4:	f1c1 0720 	rsb	r7, r1, #32
 80012d8:	408b      	lsls	r3, r1
 80012da:	fa22 fc07 	lsr.w	ip, r2, r7
 80012de:	ea4c 0c03 	orr.w	ip, ip, r3
 80012e2:	fa05 f401 	lsl.w	r4, r5, r1
 80012e6:	fa20 f307 	lsr.w	r3, r0, r7
 80012ea:	40fd      	lsrs	r5, r7
 80012ec:	4323      	orrs	r3, r4
 80012ee:	fa00 f901 	lsl.w	r9, r0, r1
 80012f2:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80012f6:	fa1f fe8c 	uxth.w	lr, ip
 80012fa:	fbb5 f8f0 	udiv	r8, r5, r0
 80012fe:	0c1c      	lsrs	r4, r3, #16
 8001300:	fb00 5518 	mls	r5, r0, r8, r5
 8001304:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001308:	fb08 f50e 	mul.w	r5, r8, lr
 800130c:	42a5      	cmp	r5, r4
 800130e:	fa02 f201 	lsl.w	r2, r2, r1
 8001312:	d90b      	bls.n	800132c <__udivmoddi4+0x1b0>
 8001314:	eb1c 0404 	adds.w	r4, ip, r4
 8001318:	f108 3aff 	add.w	sl, r8, #4294967295
 800131c:	f080 8087 	bcs.w	800142e <__udivmoddi4+0x2b2>
 8001320:	42a5      	cmp	r5, r4
 8001322:	f240 8084 	bls.w	800142e <__udivmoddi4+0x2b2>
 8001326:	f1a8 0802 	sub.w	r8, r8, #2
 800132a:	4464      	add	r4, ip
 800132c:	1b64      	subs	r4, r4, r5
 800132e:	b29d      	uxth	r5, r3
 8001330:	fbb4 f3f0 	udiv	r3, r4, r0
 8001334:	fb00 4413 	mls	r4, r0, r3, r4
 8001338:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800133c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001340:	45a6      	cmp	lr, r4
 8001342:	d908      	bls.n	8001356 <__udivmoddi4+0x1da>
 8001344:	eb1c 0404 	adds.w	r4, ip, r4
 8001348:	f103 30ff 	add.w	r0, r3, #4294967295
 800134c:	d26b      	bcs.n	8001426 <__udivmoddi4+0x2aa>
 800134e:	45a6      	cmp	lr, r4
 8001350:	d969      	bls.n	8001426 <__udivmoddi4+0x2aa>
 8001352:	3b02      	subs	r3, #2
 8001354:	4464      	add	r4, ip
 8001356:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800135a:	fba0 8302 	umull	r8, r3, r0, r2
 800135e:	eba4 040e 	sub.w	r4, r4, lr
 8001362:	429c      	cmp	r4, r3
 8001364:	46c6      	mov	lr, r8
 8001366:	461d      	mov	r5, r3
 8001368:	d355      	bcc.n	8001416 <__udivmoddi4+0x29a>
 800136a:	d052      	beq.n	8001412 <__udivmoddi4+0x296>
 800136c:	b156      	cbz	r6, 8001384 <__udivmoddi4+0x208>
 800136e:	ebb9 030e 	subs.w	r3, r9, lr
 8001372:	eb64 0405 	sbc.w	r4, r4, r5
 8001376:	fa04 f707 	lsl.w	r7, r4, r7
 800137a:	40cb      	lsrs	r3, r1
 800137c:	40cc      	lsrs	r4, r1
 800137e:	431f      	orrs	r7, r3
 8001380:	e9c6 7400 	strd	r7, r4, [r6]
 8001384:	2100      	movs	r1, #0
 8001386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800138a:	f1c3 0120 	rsb	r1, r3, #32
 800138e:	fa02 fc03 	lsl.w	ip, r2, r3
 8001392:	fa20 f201 	lsr.w	r2, r0, r1
 8001396:	fa25 f101 	lsr.w	r1, r5, r1
 800139a:	409d      	lsls	r5, r3
 800139c:	432a      	orrs	r2, r5
 800139e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013a2:	fa1f fe8c 	uxth.w	lr, ip
 80013a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80013aa:	fb07 1510 	mls	r5, r7, r0, r1
 80013ae:	0c11      	lsrs	r1, r2, #16
 80013b0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80013b4:	fb00 f50e 	mul.w	r5, r0, lr
 80013b8:	428d      	cmp	r5, r1
 80013ba:	fa04 f403 	lsl.w	r4, r4, r3
 80013be:	d908      	bls.n	80013d2 <__udivmoddi4+0x256>
 80013c0:	eb1c 0101 	adds.w	r1, ip, r1
 80013c4:	f100 38ff 	add.w	r8, r0, #4294967295
 80013c8:	d22f      	bcs.n	800142a <__udivmoddi4+0x2ae>
 80013ca:	428d      	cmp	r5, r1
 80013cc:	d92d      	bls.n	800142a <__udivmoddi4+0x2ae>
 80013ce:	3802      	subs	r0, #2
 80013d0:	4461      	add	r1, ip
 80013d2:	1b49      	subs	r1, r1, r5
 80013d4:	b292      	uxth	r2, r2
 80013d6:	fbb1 f5f7 	udiv	r5, r1, r7
 80013da:	fb07 1115 	mls	r1, r7, r5, r1
 80013de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013e2:	fb05 f10e 	mul.w	r1, r5, lr
 80013e6:	4291      	cmp	r1, r2
 80013e8:	d908      	bls.n	80013fc <__udivmoddi4+0x280>
 80013ea:	eb1c 0202 	adds.w	r2, ip, r2
 80013ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80013f2:	d216      	bcs.n	8001422 <__udivmoddi4+0x2a6>
 80013f4:	4291      	cmp	r1, r2
 80013f6:	d914      	bls.n	8001422 <__udivmoddi4+0x2a6>
 80013f8:	3d02      	subs	r5, #2
 80013fa:	4462      	add	r2, ip
 80013fc:	1a52      	subs	r2, r2, r1
 80013fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001402:	e739      	b.n	8001278 <__udivmoddi4+0xfc>
 8001404:	4631      	mov	r1, r6
 8001406:	4630      	mov	r0, r6
 8001408:	e709      	b.n	800121e <__udivmoddi4+0xa2>
 800140a:	4639      	mov	r1, r7
 800140c:	e6e7      	b.n	80011de <__udivmoddi4+0x62>
 800140e:	4610      	mov	r0, r2
 8001410:	e6fc      	b.n	800120c <__udivmoddi4+0x90>
 8001412:	45c1      	cmp	r9, r8
 8001414:	d2aa      	bcs.n	800136c <__udivmoddi4+0x1f0>
 8001416:	ebb8 0e02 	subs.w	lr, r8, r2
 800141a:	eb63 050c 	sbc.w	r5, r3, ip
 800141e:	3801      	subs	r0, #1
 8001420:	e7a4      	b.n	800136c <__udivmoddi4+0x1f0>
 8001422:	4645      	mov	r5, r8
 8001424:	e7ea      	b.n	80013fc <__udivmoddi4+0x280>
 8001426:	4603      	mov	r3, r0
 8001428:	e795      	b.n	8001356 <__udivmoddi4+0x1da>
 800142a:	4640      	mov	r0, r8
 800142c:	e7d1      	b.n	80013d2 <__udivmoddi4+0x256>
 800142e:	46d0      	mov	r8, sl
 8001430:	e77c      	b.n	800132c <__udivmoddi4+0x1b0>
 8001432:	3d02      	subs	r5, #2
 8001434:	4462      	add	r2, ip
 8001436:	e733      	b.n	80012a0 <__udivmoddi4+0x124>
 8001438:	4608      	mov	r0, r1
 800143a:	e70b      	b.n	8001254 <__udivmoddi4+0xd8>
 800143c:	4464      	add	r4, ip
 800143e:	3802      	subs	r0, #2
 8001440:	e743      	b.n	80012ca <__udivmoddi4+0x14e>
 8001442:	bf00      	nop

08001444 <__aeabi_idiv0>:
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800144c:	f001 ff6a 	bl	8003324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001476:	f006 f867 	bl	8007548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147a:	f000 f8d3 	bl	8001624 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   r0, =_estack
 8001480:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800148c:	080096f0 	.word	0x080096f0
  ldr r2, =_sbss
 8001490:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001494:	200004f8 	.word	0x200004f8

08001498 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC_IRQHandler>
	...

0800149c <HTS221_USER_Init>:
static HTS221_Object_t HTS221_OB_Handle;
static HTS221_IO_t HTS221_IO_Handle;

/* Init -----------------------------------------------------------*/
void HTS221_USER_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	HTS221_IO_Handle.Address=0xBE;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HTS221_USER_Init+0x40>)
 80014a2:	22be      	movs	r2, #190	; 0xbe
 80014a4:	731a      	strb	r2, [r3, #12]
	HTS221_IO_Handle.BusType=0;
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HTS221_USER_Init+0x40>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
	HTS221_IO_Handle.WriteReg=BSP_I2C2_WriteReg;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HTS221_USER_Init+0x40>)
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HTS221_USER_Init+0x44>)
 80014b0:	611a      	str	r2, [r3, #16]
	HTS221_IO_Handle.ReadReg=BSP_I2C2_ReadReg;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HTS221_USER_Init+0x40>)
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HTS221_USER_Init+0x48>)
 80014b6:	615a      	str	r2, [r3, #20]

	HTS221_RegisterBusIO(&HTS221_OB_Handle, &HTS221_IO_Handle);
 80014b8:	4908      	ldr	r1, [pc, #32]	; (80014dc <HTS221_USER_Init+0x40>)
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HTS221_USER_Init+0x4c>)
 80014bc:	f000 fc9e 	bl	8001dfc <HTS221_RegisterBusIO>
	HTS221_HUM_Enable(&HTS221_OB_Handle);
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HTS221_USER_Init+0x4c>)
 80014c2:	f000 fce5 	bl	8001e90 <HTS221_HUM_Enable>
	HTS221_TEMP_Enable(&HTS221_OB_Handle);
 80014c6:	4808      	ldr	r0, [pc, #32]	; (80014e8 <HTS221_USER_Init+0x4c>)
 80014c8:	f000 fd8c 	bl	8001fe4 <HTS221_TEMP_Enable>
	HTS221_TEMP_SetOutputDataRate(&HTS221_OB_Handle, 1);
 80014cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HTS221_USER_Init+0x4c>)
 80014d2:	f000 fdac 	bl	800202e <HTS221_TEMP_SetOutputDataRate>

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000230 	.word	0x20000230
 80014e0:	08001aa5 	.word	0x08001aa5
 80014e4:	08001b09 	.word	0x08001b09
 80014e8:	200001fc 	.word	0x200001fc

080014ec <HTS221_Read_Temperature>:

/* Read Temperature -----------------------------------------------------------*/
float HTS221_Read_Temperature(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	float hts221_temp = 0;
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
	HTS221_TEMP_GetTemperature(&HTS221_OB_Handle, &hts221_temp);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <HTS221_Read_Temperature+0x20>)
 80014fe:	f000 fda4 	bl	800204a <HTS221_TEMP_GetTemperature>
	return hts221_temp;
 8001502:	687b      	ldr	r3, [r7, #4]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200001fc 	.word	0x200001fc

08001510 <HTS221_Read_Humidity>:

/* Read Humidity -----------------------------------------------------------*/
float HTS221_Read_Humidity(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	float hts221_humi = 0;
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
	HTS221_HUM_GetHumidity(&HTS221_OB_Handle, &hts221_humi);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <HTS221_Read_Humidity+0x20>)
 8001522:	f000 fcdb 	bl	8001edc <HTS221_HUM_GetHumidity>
	return hts221_humi;
 8001526:	687b      	ldr	r3, [r7, #4]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200001fc 	.word	0x200001fc

08001534 <LSM6DSO_USER_Init>:
static LSM6DSO16IS_Object_t LSM6DSO_OB_Handle;
static LSM6DSO16IS_IO_t LSM6DSO_IO_Handle;

/* Init -----------------------------------------------------------*/
int32_t LSM6DSO_USER_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

	uint8_t t8_sup;
	float f_sup;

	LSM6DSO_IO_Handle.Address=0xD6;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <LSM6DSO_USER_Init+0x74>)
 800153c:	22d6      	movs	r2, #214	; 0xd6
 800153e:	731a      	strb	r2, [r3, #12]
	LSM6DSO_IO_Handle.BusType=0;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <LSM6DSO_USER_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
	LSM6DSO_IO_Handle.WriteReg=BSP_I2C2_WriteReg;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <LSM6DSO_USER_Init+0x74>)
 8001548:	4a18      	ldr	r2, [pc, #96]	; (80015ac <LSM6DSO_USER_Init+0x78>)
 800154a:	611a      	str	r2, [r3, #16]
	LSM6DSO_IO_Handle.ReadReg=BSP_I2C2_ReadReg;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <LSM6DSO_USER_Init+0x74>)
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <LSM6DSO_USER_Init+0x7c>)
 8001550:	615a      	str	r2, [r3, #20]

	LSM6DSO16IS_RegisterBusIO(&LSM6DSO_OB_Handle, &LSM6DSO_IO_Handle);
 8001552:	4915      	ldr	r1, [pc, #84]	; (80015a8 <LSM6DSO_USER_Init+0x74>)
 8001554:	4817      	ldr	r0, [pc, #92]	; (80015b4 <LSM6DSO_USER_Init+0x80>)
 8001556:	f001 f8a7 	bl	80026a8 <LSM6DSO16IS_RegisterBusIO>
	LSM6DSO16IS_Init(&LSM6DSO_OB_Handle);
 800155a:	4816      	ldr	r0, [pc, #88]	; (80015b4 <LSM6DSO_USER_Init+0x80>)
 800155c:	f001 f90a 	bl	8002774 <LSM6DSO16IS_Init>

	if(0 != LSM6DSO16IS_ReadID(&LSM6DSO_OB_Handle, &t8_sup)){
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	4619      	mov	r1, r3
 8001564:	4813      	ldr	r0, [pc, #76]	; (80015b4 <LSM6DSO_USER_Init+0x80>)
 8001566:	f001 f971 	bl	800284c <LSM6DSO16IS_ReadID>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <LSM6DSO_USER_Init+0x42>
		return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	e014      	b.n	80015a0 <LSM6DSO_USER_Init+0x6c>
	}
	if(0 != LSM6DSO16IS_ACC_Enable(&LSM6DSO_OB_Handle)){
 8001576:	480f      	ldr	r0, [pc, #60]	; (80015b4 <LSM6DSO_USER_Init+0x80>)
 8001578:	f001 f980 	bl	800287c <LSM6DSO16IS_ACC_Enable>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <LSM6DSO_USER_Init+0x54>
		return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e00b      	b.n	80015a0 <LSM6DSO_USER_Init+0x6c>
	}
	if(0 != LSM6DSO16IS_ACC_GetOutputDataRate(&LSM6DSO_OB_Handle, &f_sup)){
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <LSM6DSO_USER_Init+0x80>)
 800158e:	f001 f9e3 	bl	8002958 <LSM6DSO16IS_ACC_GetOutputDataRate>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <LSM6DSO_USER_Init+0x6a>
		return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e000      	b.n	80015a0 <LSM6DSO_USER_Init+0x6c>
	}
	return 0;
 800159e:	2300      	movs	r3, #0


}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000284 	.word	0x20000284
 80015ac:	08001aa5 	.word	0x08001aa5
 80015b0:	08001b09 	.word	0x08001b09
 80015b4:	20000250 	.word	0x20000250

080015b8 <LSM6DSO_USER_Acc_GetAxes>:

int32_t LSM6DSO_USER_Acc_GetAxes(int32_t *px, int32_t *py, int32_t *pz)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	LSM6DSO16IS_Axes_t acc;
	int32_t ret;

	ret = LSM6DSO16IS_ACC_GetAxes(&LSM6DSO_OB_Handle, &acc);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	4809      	ldr	r0, [pc, #36]	; (80015f0 <LSM6DSO_USER_Acc_GetAxes+0x38>)
 80015cc:	f001 fa40 	bl	8002a50 <LSM6DSO16IS_ACC_GetAxes>
 80015d0:	61f8      	str	r0, [r7, #28]

	*px = acc.x;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	601a      	str	r2, [r3, #0]
	*py = acc.y;
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	601a      	str	r2, [r3, #0]
	*pz = acc.z;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	601a      	str	r2, [r3, #0]

	return ret;
 80015e4:	69fb      	ldr	r3, [r7, #28]

}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000250 	.word	0x20000250

080015f4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4013      	ands	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001618:	68fb      	ldr	r3, [r7, #12]
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162a:	f001 fe81 	bl	8003330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162e:	f000 f865 	bl	80016fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize BSP Led for LED3 */
  BSP_LED_Init(LED3);
 8001632:	2002      	movs	r0, #2
 8001634:	f001 fe22 	bl	800327c <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f000 f90e 	bl	8001858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800163c:	f000 f8be 	bl	80017bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_I2C2_Init();
 8001640:	f000 f9f2 	bl	8001a28 <BSP_I2C2_Init>

  HTS221_USER_Init();
 8001644:	f7ff ff2a 	bl	800149c <HTS221_USER_Init>
  LSM6DSO_USER_Init();
 8001648:	f7ff ff74 	bl	8001534 <LSM6DSO_USER_Init>

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 800164c:	4821      	ldr	r0, [pc, #132]	; (80016d4 <main+0xb0>)
 800164e:	f005 fddd 	bl	800720c <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8001652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001656:	f001 fee1 	bl	800341c <HAL_Delay>
	  printf("App running\n\r");
 800165a:	481f      	ldr	r0, [pc, #124]	; (80016d8 <main+0xb4>)
 800165c:	f005 fdd6 	bl	800720c <iprintf>
	  temp = HTS221_Read_Temperature();
 8001660:	f7ff ff44 	bl	80014ec <HTS221_Read_Temperature>
 8001664:	4603      	mov	r3, r0
 8001666:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <main+0xb8>)
 8001668:	6013      	str	r3, [r2, #0]
	  humi = HTS221_Read_Humidity();
 800166a:	f7ff ff51 	bl	8001510 <HTS221_Read_Humidity>
 800166e:	4603      	mov	r3, r0
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <main+0xbc>)
 8001672:	6013      	str	r3, [r2, #0]
	  printf("> .. Temp: %f, Humi: %f\n\r", temp, humi);
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <main+0xb8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff3d 	bl	80004f8 <__aeabi_f2d>
 800167e:	4604      	mov	r4, r0
 8001680:	460d      	mov	r5, r1
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <main+0xbc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff36 	bl	80004f8 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	e9cd 2300 	strd	r2, r3, [sp]
 8001694:	4622      	mov	r2, r4
 8001696:	462b      	mov	r3, r5
 8001698:	4812      	ldr	r0, [pc, #72]	; (80016e4 <main+0xc0>)
 800169a:	f005 fdb7 	bl	800720c <iprintf>

	 if(0 != LSM6DSO_USER_Acc_GetAxes(&acc_x, &acc_y, &acc_z)){
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <main+0xc4>)
 80016a0:	4912      	ldr	r1, [pc, #72]	; (80016ec <main+0xc8>)
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <main+0xcc>)
 80016a4:	f7ff ff88 	bl	80015b8 <LSM6DSO_USER_Acc_GetAxes>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <main+0x96>
		 printf("Non va\n");
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <main+0xd0>)
 80016b0:	f005 fe12 	bl	80072d8 <puts>
		 return -1;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	e009      	b.n	80016ce <main+0xaa>
	 }
	 printf("Acc: %d, %d, %d\n\r", acc_x, acc_y, acc_z);
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <main+0xcc>)
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <main+0xc8>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <main+0xc4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <main+0xd4>)
 80016c8:	f005 fda0 	bl	800720c <iprintf>
	  HAL_Delay(1000);
 80016cc:	e7c1      	b.n	8001652 <main+0x2e>
    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdb0      	pop	{r4, r5, r7, pc}
 80016d4:	080091e0 	.word	0x080091e0
 80016d8:	08009230 	.word	0x08009230
 80016dc:	20000338 	.word	0x20000338
 80016e0:	2000033c 	.word	0x2000033c
 80016e4:	08009240 	.word	0x08009240
 80016e8:	20000348 	.word	0x20000348
 80016ec:	20000344 	.word	0x20000344
 80016f0:	20000340 	.word	0x20000340
 80016f4:	0800925c 	.word	0x0800925c
 80016f8:	08009264 	.word	0x08009264

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09a      	sub	sp, #104	; 0x68
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	2248      	movs	r2, #72	; 0x48
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fec4 	bl	8007498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <SystemClock_Config+0xbc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800172a:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <SystemClock_Config+0xbc>)
 800172c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <SystemClock_Config+0xbc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800173e:	2320      	movs	r3, #32
 8001740:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001742:	2301      	movs	r3, #1
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001746:	2300      	movs	r3, #0
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174e:	2302      	movs	r3, #2
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001752:	2301      	movs	r3, #1
 8001754:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001756:	2330      	movs	r3, #48	; 0x30
 8001758:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800175a:	2318      	movs	r3, #24
 800175c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800175e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001762:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001764:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001768:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800176a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800176e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	4618      	mov	r0, r3
 8001776:	f003 f9ad 	bl	8004ad4 <HAL_RCC_OscConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001780:	f000 f884 	bl	800188c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001784:	234f      	movs	r3, #79	; 0x4f
 8001786:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001788:	2303      	movs	r3, #3
 800178a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2102      	movs	r1, #2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fd19 	bl	80051d8 <HAL_RCC_ClockConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017ac:	f000 f86e 	bl	800188c <Error_Handler>
  }
}
 80017b0:	bf00      	nop
 80017b2:	3768      	adds	r7, #104	; 0x68
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	58000400 	.word	0x58000400

080017bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017c2:	4a24      	ldr	r2, [pc, #144]	; (8001854 <MX_USART2_UART_Init+0x98>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80017e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017e4:	220c      	movs	r2, #12
 80017e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_USART2_UART_Init+0x94>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_USART2_UART_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4812      	ldr	r0, [pc, #72]	; (8001850 <MX_USART2_UART_Init+0x94>)
 8001808:	f004 f9e1 	bl	8005bce <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001812:	f000 f83b 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <MX_USART2_UART_Init+0x94>)
 800181a:	f004 ff12 	bl	8006642 <HAL_UARTEx_SetTxFifoThreshold>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001824:	f000 f832 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <MX_USART2_UART_Init+0x94>)
 800182c:	f004 ff47 	bl	80066be <HAL_UARTEx_SetRxFifoThreshold>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001836:	f000 f829 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_USART2_UART_Init+0x94>)
 800183c:	f004 fec9 	bl	80065d2 <HAL_UARTEx_DisableFifoMode>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001846:	f000 f821 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002a4 	.word	0x200002a4
 8001854:	40004400 	.word	0x40004400

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff fec9 	bl	80015f4 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001870:	1d39      	adds	r1, r7, #4
 8001872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001876:	2201      	movs	r2, #1
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <__io_putchar+0x20>)
 800187a:	f004 f9f8 	bl	8005c6e <HAL_UART_Transmit>

  return ch;
 800187e:	687b      	ldr	r3, [r7, #4]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200002a4 	.word	0x200002a4

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8001890:	2002      	movs	r0, #2
 8001892:	f001 fd2d 	bl	80032f0 <BSP_LED_On>
  while (1);
 8001896:	e7fe      	b.n	8001896 <Error_Handler+0xa>

08001898 <LL_AHB2_GRP1_EnableClock>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018bc:	68fb      	ldr	r3, [r7, #12]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4313      	orrs	r3, r2
 80018de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ec:	68fb      	ldr	r3, [r7, #12]
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b096      	sub	sp, #88	; 0x58
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2238      	movs	r2, #56	; 0x38
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f005 fdb7 	bl	8007498 <memset>
  if(huart->Instance==USART2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_UART_MspInit+0x88>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d126      	bne.n	8001982 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001934:	2302      	movs	r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001938:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800193c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4618      	mov	r0, r3
 8001944:	f004 f808 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800194e:	f7ff ff9d 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001952:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001956:	f7ff ffb7 	bl	80018c8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff ff9c 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001960:	230c      	movs	r3, #12
 8001962:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001968:	2301      	movs	r3, #1
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001970:	2307      	movs	r3, #7
 8001972:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f001 fe53 	bl	8003628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3758      	adds	r7, #88	; 0x58
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40004400 	.word	0x40004400

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <HardFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019be:	f001 fd11 	bl	80033e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <LL_AHB2_GRP1_EnableClock>:
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4013      	ands	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <LL_APB1_GRP1_EnableClock>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <BSP_I2C2_Init+0x70>)
 8001a34:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <BSP_I2C2_Init+0x74>)
 8001a36:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <BSP_I2C2_Init+0x78>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	4918      	ldr	r1, [pc, #96]	; (8001aa0 <BSP_I2C2_Init+0x78>)
 8001a40:	600a      	str	r2, [r1, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d122      	bne.n	8001a8c <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001a46:	4814      	ldr	r0, [pc, #80]	; (8001a98 <BSP_I2C2_Init+0x70>)
 8001a48:	f002 fa2c 	bl	8003ea4 <HAL_I2C_GetState>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d11c      	bne.n	8001a8c <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001a52:	4811      	ldr	r0, [pc, #68]	; (8001a98 <BSP_I2C2_Init+0x70>)
 8001a54:	f000 f8ce 	bl	8001bf4 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001a5e:	480e      	ldr	r0, [pc, #56]	; (8001a98 <BSP_I2C2_Init+0x70>)
 8001a60:	f000 f884 	bl	8001b6c <MX_I2C2_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a6a:	f06f 0307 	mvn.w	r3, #7
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	e00c      	b.n	8001a8c <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <BSP_I2C2_Init+0x70>)
 8001a76:	f002 fcc5 	bl	8004404 <HAL_I2CEx_ConfigAnalogFilter>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a80:	f06f 0307 	mvn.w	r3, #7
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e001      	b.n	8001a8c <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000034c 	.word	0x2000034c
 8001a9c:	40005800 	.word	0x40005800
 8001aa0:	200003a0 	.word	0x200003a0

08001aa4 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af04      	add	r7, sp, #16
 8001aaa:	60ba      	str	r2, [r7, #8]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	81fb      	strh	r3, [r7, #14]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	81bb      	strh	r3, [r7, #12]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001abe:	89ba      	ldrh	r2, [r7, #12]
 8001ac0:	89f9      	ldrh	r1, [r7, #14]
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	480c      	ldr	r0, [pc, #48]	; (8001b04 <BSP_I2C2_WriteReg+0x60>)
 8001ad4:	f001 ffb8 	bl	8003a48 <HAL_I2C_Mem_Write>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001ade:	4809      	ldr	r0, [pc, #36]	; (8001b04 <BSP_I2C2_WriteReg+0x60>)
 8001ae0:	f002 f9ed 	bl	8003ebe <HAL_I2C_GetError>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d103      	bne.n	8001af2 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001aea:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e002      	b.n	8001af8 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001af2:	f06f 0303 	mvn.w	r3, #3
 8001af6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001af8:	697b      	ldr	r3, [r7, #20]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000034c 	.word	0x2000034c

08001b08 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	81fb      	strh	r3, [r7, #14]
 8001b16:	460b      	mov	r3, r1
 8001b18:	81bb      	strh	r3, [r7, #12]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001b22:	89ba      	ldrh	r2, [r7, #12]
 8001b24:	89f9      	ldrh	r1, [r7, #14]
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	480c      	ldr	r0, [pc, #48]	; (8001b68 <BSP_I2C2_ReadReg+0x60>)
 8001b38:	f002 f89a 	bl	8003c70 <HAL_I2C_Mem_Read>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <BSP_I2C2_ReadReg+0x60>)
 8001b44:	f002 f9bb 	bl	8003ebe <HAL_I2C_GetError>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d103      	bne.n	8001b56 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b4e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e002      	b.n	8001b5c <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b56:	f06f 0303 	mvn.w	r3, #3
 8001b5a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b5c:	697b      	ldr	r3, [r7, #20]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000034c 	.word	0x2000034c

08001b6c <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <MX_I2C2_Init+0x80>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x20303E5D;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <MX_I2C2_Init+0x84>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f001 feb1 	bl	8003916 <HAL_I2C_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f002 fc1f 	bl	8004404 <HAL_I2CEx_ConfigAnalogFilter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f002 fc60 	bl	8004498 <HAL_I2CEx_ConfigDigitalFilter>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40005800 	.word	0x40005800
 8001bf0:	20303e5d 	.word	0x20303e5d

08001bf4 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b096      	sub	sp, #88	; 0x58
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2238      	movs	r2, #56	; 0x38
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fc47 	bl	8007498 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c0e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fe9d 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fed1 	bl	80019c6 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c28:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2a:	2312      	movs	r3, #18
 8001c2c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001c36:	2304      	movs	r3, #4
 8001c38:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001c3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c44:	f001 fcf0 	bl	8003628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001c5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c62:	4619      	mov	r1, r3
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f001 fcde 	bl	8003628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c6c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001c70:	f7ff fec1 	bl	80019f6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001c74:	bf00      	nop
 8001c76:	3758      	adds	r7, #88	; 0x58
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
	return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <_kill>:

int _kill(int pid, int sig)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c94:	f005 fc52 	bl	800753c <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2216      	movs	r2, #22
 8001c9c:	601a      	str	r2, [r3, #0]
	return -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_exit>:

void _exit (int status)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffe7 	bl	8001c8a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cbc:	e7fe      	b.n	8001cbc <_exit+0x12>

08001cbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e00a      	b.n	8001ce6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cd0:	f3af 8000 	nop.w
 8001cd4:	4601      	mov	r1, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	60ba      	str	r2, [r7, #8]
 8001cdc:	b2ca      	uxtb	r2, r1
 8001cde:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	dbf0      	blt.n	8001cd0 <_read+0x12>
	}

return len;
 8001cee:	687b      	ldr	r3, [r7, #4]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e009      	b.n	8001d1e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	60ba      	str	r2, [r7, #8]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fda8 	bl	8001868 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	dbf1      	blt.n	8001d0a <_write+0x12>
	}
	return len;
 8001d26:	687b      	ldr	r3, [r7, #4]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_close>:

int _close(int file)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	return -1;
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d56:	605a      	str	r2, [r3, #4]
	return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <_isatty>:

int _isatty(int file)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <_sbrk>:
  *
  * @param incr Memory size
  * @return Pointer to allocated memory
  */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize  heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f005 fbbc 	bl	800753c <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20008000 	.word	0x20008000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	200003a4 	.word	0x200003a4
 8001df8:	200004f8 	.word	0x200004f8

08001dfc <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e034      	b.n	8001e7e <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	7b1a      	ldrb	r2, [r3, #12]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HTS221_RegisterBusIO+0x8c>)
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HTS221_RegisterBusIO+0x90>)
 8001e56:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4798      	blx	r3
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	e002      	b.n	8001e7e <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	080021fd 	.word	0x080021fd
 8001e8c:	0800225f 	.word	0x0800225f

08001e90 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e015      	b.n	8001ed2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3320      	adds	r3, #32
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fa9e 	bl	80023f8 <hts221_power_on_set>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e004      	b.n	8001ed2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3320      	adds	r3, #32
 8001eea:	f107 020c 	add.w	r2, r7, #12
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fb4d 	bl	8002590 <hts221_hum_adc_point_0_get>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
 8001f00:	e069      	b.n	8001fd6 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f103 0220 	add.w	r2, r3, #32
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4610      	mov	r0, r2
 8001f12:	f000 fa97 	bl	8002444 <hts221_hum_rh_point_0_get>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f20:	e059      	b.n	8001fd6 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f103 0220 	add.w	r2, r3, #32
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4610      	mov	r0, r2
 8001f32:	f000 fb50 	bl	80025d6 <hts221_hum_adc_point_1_get>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	e049      	b.n	8001fd6 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f103 0220 	add.w	r2, r3, #32
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f000 fa97 	bl	8002484 <hts221_hum_rh_point_1_get>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	e039      	b.n	8001fd6 <HTS221_HUM_GetHumidity+0xfa>
 8001f62:	2300      	movs	r3, #0
 8001f64:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3320      	adds	r3, #32
 8001f6a:	f107 021c 	add.w	r2, r7, #28
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f9fb 	bl	800236c <hts221_humidity_raw_get>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e029      	b.n	8001fd6 <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001f82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fea0 	bl	8000ccc <__aeabi_i2f>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f8ed 	bl	8002174 <Linear_Interpolation>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f881 	bl	80010b0 <__aeabi_fcmplt>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <HTS221_HUM_GetHumidity+0x104>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f892 	bl	80010ec <__aeabi_fcmpgt>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <HTS221_HUM_GetHumidity+0x104>)
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	42c80000 	.word	0x42c80000

08001fe4 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e015      	b.n	8002026 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3320      	adds	r3, #32
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f9f4 	bl	80023f8 <hts221_power_on_set>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e004      	b.n	8002026 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002038:	6839      	ldr	r1, [r7, #0]
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f86c 	bl	8002118 <HTS221_SetOutputDataRate>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b088      	sub	sp, #32
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3320      	adds	r3, #32
 8002058:	f107 020c 	add.w	r2, r7, #12
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fadc 	bl	800261c <hts221_temp_adc_point_0_get>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e04f      	b.n	8002110 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0220 	add.w	r2, r3, #32
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	3304      	adds	r3, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f000 fa20 	bl	80024c4 <hts221_temp_deg_point_0_get>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e03f      	b.n	8002110 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f103 0220 	add.w	r2, r3, #32
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	3308      	adds	r3, #8
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f000 fadf 	bl	8002662 <hts221_temp_adc_point_1_get>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	e02f      	b.n	8002110 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0220 	add.w	r2, r3, #32
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	330c      	adds	r3, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f000 fa33 	bl	800252a <hts221_temp_deg_point_1_get>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e01f      	b.n	8002110 <HTS221_TEMP_GetTemperature+0xc6>
 80020d0:	2300      	movs	r3, #0
 80020d2:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3320      	adds	r3, #32
 80020d8:	f107 021c 	add.w	r2, r7, #28
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f967 	bl	80023b2 <hts221_temperature_raw_get>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	e00f      	b.n	8002110 <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80020f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fde9 	bl	8000ccc <__aeabi_i2f>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f836 	bl	8002174 <Linear_Interpolation>
 8002108:	4602      	mov	r2, r0
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3720      	adds	r7, #32
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002122:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002126:	6838      	ldr	r0, [r7, #0]
 8002128:	f7fe ffcc 	bl	80010c4 <__aeabi_fcmple>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HTS221_SetOutputDataRate+0x1e>
 8002132:	2301      	movs	r3, #1
 8002134:	e009      	b.n	800214a <HTS221_SetOutputDataRate+0x32>
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <HTS221_SetOutputDataRate+0x58>)
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f7fe ffc3 	bl	80010c4 <__aeabi_fcmple>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HTS221_SetOutputDataRate+0x30>
 8002144:	2302      	movs	r3, #2
 8002146:	e000      	b.n	800214a <HTS221_SetOutputDataRate+0x32>
 8002148:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800214a:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3320      	adds	r3, #32
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f8e3 	bl	8002320 <hts221_data_rate_set>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	e000      	b.n	8002168 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40e00000 	.word	0x40e00000

08002174 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7fe fce9 	bl	8000b60 <__aeabi_fsub>
 800218e:	4603      	mov	r3, r0
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fdee 	bl	8000d74 <__aeabi_fmul>
 8002198:	4603      	mov	r3, r0
 800219a:	461c      	mov	r4, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f7fe fde4 	bl	8000d74 <__aeabi_fmul>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461d      	mov	r5, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f7fe fdda 	bl	8000d74 <__aeabi_fmul>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4628      	mov	r0, r5
 80021c6:	f7fe fccb 	bl	8000b60 <__aeabi_fsub>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4619      	mov	r1, r3
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7fe fcc8 	bl	8000b64 <__addsf3>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461c      	mov	r4, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f7fe fcbc 	bl	8000b60 <__aeabi_fsub>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4619      	mov	r1, r3
 80021ec:	4620      	mov	r0, r4
 80021ee:	f7fe fe75 	bl	8000edc <__aeabi_fdiv>
 80021f2:	4603      	mov	r3, r0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bdb0      	pop	{r4, r5, r7, pc}

080021fc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	460b      	mov	r3, r1
 800220a:	72fb      	strb	r3, [r7, #11]
 800220c:	4613      	mov	r3, r2
 800220e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10e      	bne.n	800223a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	695c      	ldr	r4, [r3, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	7b1b      	ldrb	r3, [r3, #12]
 8002224:	b298      	uxth	r0, r3
 8002226:	7afb      	ldrb	r3, [r7, #11]
 8002228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800222c:	b2db      	uxtb	r3, r3
 800222e:	b299      	uxth	r1, r3
 8002230:	893b      	ldrh	r3, [r7, #8]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	47a0      	blx	r4
 8002236:	4603      	mov	r3, r0
 8002238:	e00d      	b.n	8002256 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	695c      	ldr	r4, [r3, #20]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	7b1b      	ldrb	r3, [r3, #12]
 8002242:	b298      	uxth	r0, r3
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224a:	b2db      	uxtb	r3, r3
 800224c:	b299      	uxth	r1, r3
 800224e:	893b      	ldrh	r3, [r7, #8]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	47a0      	blx	r4
 8002254:	4603      	mov	r3, r0
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}

0800225e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800225e:	b590      	push	{r4, r7, lr}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	461a      	mov	r2, r3
 800226a:	460b      	mov	r3, r1
 800226c:	72fb      	strb	r3, [r7, #11]
 800226e:	4613      	mov	r3, r2
 8002270:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10e      	bne.n	800229c <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	691c      	ldr	r4, [r3, #16]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	7b1b      	ldrb	r3, [r3, #12]
 8002286:	b298      	uxth	r0, r3
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800228e:	b2db      	uxtb	r3, r3
 8002290:	b299      	uxth	r1, r3
 8002292:	893b      	ldrh	r3, [r7, #8]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	47a0      	blx	r4
 8002298:	4603      	mov	r3, r0
 800229a:	e00d      	b.n	80022b8 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	691c      	ldr	r4, [r3, #16]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	7b1b      	ldrb	r3, [r3, #12]
 80022a4:	b298      	uxth	r0, r3
 80022a6:	7afb      	ldrb	r3, [r7, #11]
 80022a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	b299      	uxth	r1, r3
 80022b0:	893b      	ldrh	r3, [r7, #8]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	47a0      	blx	r4
 80022b6:	4603      	mov	r3, r0
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	461a      	mov	r2, r3
 80022cc:	460b      	mov	r3, r1
 80022ce:	72fb      	strb	r3, [r7, #11]
 80022d0:	4613      	mov	r3, r2
 80022d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685c      	ldr	r4, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68d8      	ldr	r0, [r3, #12]
 80022dc:	893b      	ldrh	r3, [r7, #8]
 80022de:	7af9      	ldrb	r1, [r7, #11]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	47a0      	blx	r4
 80022e4:	6178      	str	r0, [r7, #20]

  return ret;
 80022e6:	697b      	ldr	r3, [r7, #20]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}

080022f0 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	72fb      	strb	r3, [r7, #11]
 8002300:	4613      	mov	r3, r2
 8002302:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681c      	ldr	r4, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	68d8      	ldr	r0, [r3, #12]
 800230c:	893b      	ldrh	r3, [r7, #8]
 800230e:	7af9      	ldrb	r1, [r7, #11]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	47a0      	blx	r4
 8002314:	6178      	str	r0, [r7, #20]

  return ret;
 8002316:	697b      	ldr	r3, [r7, #20]
}
 8002318:	4618      	mov	r0, r3
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd90      	pop	{r4, r7, pc}

08002320 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800232c:	f107 0208 	add.w	r2, r7, #8
 8002330:	2301      	movs	r3, #1
 8002332:	2120      	movs	r1, #32
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffc3 	bl	80022c0 <hts221_read_reg>
 800233a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10f      	bne.n	8002362 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	b2da      	uxtb	r2, r3
 800234a:	7a3b      	ldrb	r3, [r7, #8]
 800234c:	f362 0301 	bfi	r3, r2, #0, #2
 8002350:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002352:	f107 0208 	add.w	r2, r7, #8
 8002356:	2301      	movs	r3, #1
 8002358:	2120      	movs	r1, #32
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffc8 	bl	80022f0 <hts221_write_reg>
 8002360:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8002376:	f107 0208 	add.w	r2, r7, #8
 800237a:	2302      	movs	r3, #2
 800237c:	2128      	movs	r1, #40	; 0x28
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff9e 	bl	80022c0 <hts221_read_reg>
 8002384:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002386:	7a7b      	ldrb	r3, [r7, #9]
 8002388:	b21a      	sxth	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002394:	b29b      	uxth	r3, r3
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b29a      	uxth	r2, r3
 800239a:	7a3b      	ldrb	r3, [r7, #8]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4413      	add	r3, r2
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	801a      	strh	r2, [r3, #0]

  return ret;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80023bc:	f107 0208 	add.w	r2, r7, #8
 80023c0:	2302      	movs	r3, #2
 80023c2:	212a      	movs	r1, #42	; 0x2a
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff7b 	bl	80022c0 <hts221_read_reg>
 80023ca:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80023cc:	7a7b      	ldrb	r3, [r7, #9]
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b29a      	uxth	r2, r3
 80023e0:	7a3b      	ldrb	r3, [r7, #8]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002404:	f107 0208 	add.w	r2, r7, #8
 8002408:	2301      	movs	r3, #1
 800240a:	2120      	movs	r1, #32
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff57 	bl	80022c0 <hts221_read_reg>
 8002412:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	b2da      	uxtb	r2, r3
 8002422:	7a3b      	ldrb	r3, [r7, #8]
 8002424:	f362 13c7 	bfi	r3, r2, #7, #1
 8002428:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800242a:	f107 0208 	add.w	r2, r7, #8
 800242e:	2301      	movs	r3, #1
 8002430:	2120      	movs	r1, #32
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff5c 	bl	80022f0 <hts221_write_reg>
 8002438:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 800244e:	f107 020b 	add.w	r2, r7, #11
 8002452:	2301      	movs	r3, #1
 8002454:	2130      	movs	r1, #48	; 0x30
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ff32 	bl	80022c0 <hts221_read_reg>
 800245c:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fc33 	bl	8000ccc <__aeabi_i2f>
 8002466:	4603      	mov	r3, r0
 8002468:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fd35 	bl	8000edc <__aeabi_fdiv>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	601a      	str	r2, [r3, #0]

  return ret;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 800248e:	f107 020b 	add.w	r2, r7, #11
 8002492:	2301      	movs	r3, #1
 8002494:	2131      	movs	r1, #49	; 0x31
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ff12 	bl	80022c0 <hts221_read_reg>
 800249c:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800249e:	7afb      	ldrb	r3, [r7, #11]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fc13 	bl	8000ccc <__aeabi_i2f>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fd15 	bl	8000edc <__aeabi_fdiv>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	601a      	str	r2, [r3, #0]

  return ret;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80024ce:	f107 020f 	add.w	r2, r7, #15
 80024d2:	2301      	movs	r3, #1
 80024d4:	2132      	movs	r1, #50	; 0x32
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fef2 	bl	80022c0 <hts221_read_reg>
 80024dc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11d      	bne.n	8002520 <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80024e4:	f107 0210 	add.w	r2, r7, #16
 80024e8:	2301      	movs	r3, #1
 80024ea:	2135      	movs	r1, #53	; 0x35
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fee7 	bl	80022c0 <hts221_read_reg>
 80024f2:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80024f4:	7c3b      	ldrb	r3, [r7, #16]
 80024f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	4413      	add	r3, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fbe0 	bl	8000ccc <__aeabi_i2f>
 800250c:	4603      	mov	r3, r0
 800250e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fce2 	bl	8000edc <__aeabi_fdiv>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002520:	697b      	ldr	r3, [r7, #20]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002534:	f107 020f 	add.w	r2, r7, #15
 8002538:	2301      	movs	r3, #1
 800253a:	2133      	movs	r1, #51	; 0x33
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff febf 	bl	80022c0 <hts221_read_reg>
 8002542:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11d      	bne.n	8002586 <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800254a:	f107 0210 	add.w	r2, r7, #16
 800254e:	2301      	movs	r3, #1
 8002550:	2135      	movs	r1, #53	; 0x35
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff feb4 	bl	80022c0 <hts221_read_reg>
 8002558:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 800255a:	7c3b      	ldrb	r3, [r7, #16]
 800255c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002560:	b2db      	uxtb	r3, r3
 8002562:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	4413      	add	r3, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fbad 	bl	8000ccc <__aeabi_i2f>
 8002572:	4603      	mov	r3, r0
 8002574:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fcaf 	bl	8000edc <__aeabi_fdiv>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002586:	697b      	ldr	r3, [r7, #20]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 800259a:	f107 0208 	add.w	r2, r7, #8
 800259e:	2302      	movs	r3, #2
 80025a0:	2136      	movs	r1, #54	; 0x36
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fe8c 	bl	80022c0 <hts221_read_reg>
 80025a8:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80025aa:	7a7b      	ldrb	r3, [r7, #9]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	7a3b      	ldrb	r3, [r7, #8]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80025bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fb83 	bl	8000ccc <__aeabi_i2f>
 80025c6:	4602      	mov	r2, r0
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	601a      	str	r2, [r3, #0]

  return ret;
 80025cc:	68fb      	ldr	r3, [r7, #12]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80025e0:	f107 0208 	add.w	r2, r7, #8
 80025e4:	2302      	movs	r3, #2
 80025e6:	213a      	movs	r1, #58	; 0x3a
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fe69 	bl	80022c0 <hts221_read_reg>
 80025ee:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80025f0:	7a7b      	ldrb	r3, [r7, #9]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	7a3b      	ldrb	r3, [r7, #8]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002602:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fb60 	bl	8000ccc <__aeabi_i2f>
 800260c:	4602      	mov	r2, r0
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	601a      	str	r2, [r3, #0]

  return ret;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002626:	f107 0208 	add.w	r2, r7, #8
 800262a:	2302      	movs	r3, #2
 800262c:	213c      	movs	r1, #60	; 0x3c
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fe46 	bl	80022c0 <hts221_read_reg>
 8002634:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002636:	7a7b      	ldrb	r3, [r7, #9]
 8002638:	b29b      	uxth	r3, r3
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	b29a      	uxth	r2, r3
 800263e:	7a3b      	ldrb	r3, [r7, #8]
 8002640:	b29b      	uxth	r3, r3
 8002642:	4413      	add	r3, r2
 8002644:	b29b      	uxth	r3, r3
 8002646:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002648:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb3d 	bl	8000ccc <__aeabi_i2f>
 8002652:	4602      	mov	r2, r0
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	601a      	str	r2, [r3, #0]

  return ret;
 8002658:	68fb      	ldr	r3, [r7, #12]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800266c:	f107 0208 	add.w	r2, r7, #8
 8002670:	2302      	movs	r3, #2
 8002672:	213e      	movs	r1, #62	; 0x3e
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fe23 	bl	80022c0 <hts221_read_reg>
 800267a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800267c:	7a7b      	ldrb	r3, [r7, #9]
 800267e:	b29b      	uxth	r3, r3
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	b29a      	uxth	r2, r3
 8002684:	7a3b      	ldrb	r3, [r7, #8]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4413      	add	r3, r2
 800268a:	b29b      	uxth	r3, r3
 800268c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800268e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fb1a 	bl	8000ccc <__aeabi_i2f>
 8002698:	4602      	mov	r2, r0
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	601a      	str	r2, [r3, #0]

  return ret;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	e04d      	b.n	8002760 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	7b1a      	ldrb	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	699a      	ldr	r2, [r3, #24]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 8002706:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	629a      	str	r2, [r3, #40]	; 0x28

    if (pObj->IO.Init == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e020      	b.n	8002760 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4798      	blx	r3
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e016      	b.n	8002760 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d112      	bne.n	8002760 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002744:	230c      	movs	r3, #12
 8002746:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	461a      	mov	r2, r3
 800274c:	2112      	movs	r1, #18
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f9dd 	bl	8002b0e <LSM6DSO16IS_Write_Reg>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002760:	68fb      	ldr	r3, [r7, #12]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	08002b95 	.word	0x08002b95
 8002770:	08002bcb 	.word	0x08002bcb

08002774 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8002780:	2100      	movs	r1, #0
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f9e0 	bl	8002b48 <LSM6DSO16IS_Set_Mem_Bank>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3320      	adds	r3, #32
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fcbf 	bl	800311e <lsm6dso16is_auto_increment_set>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3320      	adds	r3, #32
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fcd9 	bl	800316a <lsm6dso16is_block_data_update_set>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3320      	adds	r3, #32
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fb0c 	bl	8002df0 <lsm6dso16is_xl_data_rate_set>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3320      	adds	r3, #32
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 faa1 	bl	8002d32 <lsm6dso16is_xl_full_scale_set>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2204      	movs	r2, #4
 8002800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3320      	adds	r3, #32
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fc48 	bl	80030a0 <lsm6dso16is_gy_data_rate_set>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3320      	adds	r3, #32
 8002820:	2103      	movs	r1, #3
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fc0c 	bl	8003040 <lsm6dso16is_gy_full_scale_set>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  return ret;
 8002842:	68fb      	ldr	r3, [r7, #12]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3320      	adds	r3, #32
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fa2f 	bl	8002cc4 <lsm6dso16is_device_id_get>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800288e:	2b01      	cmp	r3, #1
 8002890:	d102      	bne.n	8002898 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e013      	b.n	80028c0 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f103 0220 	add.w	r2, r3, #32
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 faa2 	bl	8002df0 <lsm6dso16is_xl_data_rate_set>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  return ret;
 80028c0:	68fb      	ldr	r3, [r7, #12]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3320      	adds	r3, #32
 80028de:	f107 020b 	add.w	r2, r7, #11
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fa4b 	bl	8002d80 <lsm6dso16is_xl_full_scale_get>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d81b      	bhi.n	8002934 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002915 	.word	0x08002915
 8002908:	0800292d 	.word	0x0800292d
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002925 	.word	0x08002925
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8002918:	601a      	str	r2, [r3, #0]
      break;
 800291a:	e00f      	b.n	800293c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8002920:	601a      	str	r2, [r3, #0]
      break;
 8002922:	e00b      	b.n	800293c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 8002928:	601a      	str	r2, [r3, #0]
      break;
 800292a:	e007      	b.n	800293c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8002930:	601a      	str	r2, [r3, #0]
      break;
 8002932:	e003      	b.n	800293c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
 8002938:	60fb      	str	r3, [r7, #12]
      break;
 800293a:	bf00      	nop
  }

  return ret;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	3d79db23 	.word	0x3d79db23
 800294c:	3df9db23 	.word	0x3df9db23
 8002950:	3e79db23 	.word	0x3e79db23
 8002954:	3ef9db23 	.word	0x3ef9db23

08002958 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3320      	adds	r3, #32
 800296a:	f107 020b 	add.w	r2, r7, #11
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fa7d 	bl	8002e70 <lsm6dso16is_xl_data_rate_get>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	2b0a      	cmp	r3, #10
 8002986:	d846      	bhi.n	8002a16 <LSM6DSO16IS_ACC_GetOutputDataRate+0xbe>
 8002988:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029bd 	.word	0x080029bd
 8002994:	080029c7 	.word	0x080029c7
 8002998:	080029cf 	.word	0x080029cf
 800299c:	080029d7 	.word	0x080029d7
 80029a0:	080029df 	.word	0x080029df
 80029a4:	080029e7 	.word	0x080029e7
 80029a8:	080029ef 	.word	0x080029ef
 80029ac:	080029f7 	.word	0x080029f7
 80029b0:	080029ff 	.word	0x080029ff
 80029b4:	08002a07 	.word	0x08002a07
 80029b8:	08002a0f 	.word	0x08002a0f
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
      break;
 80029c4:	e02b      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <LSM6DSO16IS_ACC_GetOutputDataRate+0xd0>)
 80029ca:	601a      	str	r2, [r3, #0]
      break;
 80029cc:	e027      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <LSM6DSO16IS_ACC_GetOutputDataRate+0xd4>)
 80029d2:	601a      	str	r2, [r3, #0]
      break;
 80029d4:	e023      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <LSM6DSO16IS_ACC_GetOutputDataRate+0xd8>)
 80029da:	601a      	str	r2, [r3, #0]
      break;
 80029dc:	e01f      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <LSM6DSO16IS_ACC_GetOutputDataRate+0xdc>)
 80029e2:	601a      	str	r2, [r3, #0]
      break;
 80029e4:	e01b      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <LSM6DSO16IS_ACC_GetOutputDataRate+0xe0>)
 80029ea:	601a      	str	r2, [r3, #0]
      break;
 80029ec:	e017      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <LSM6DSO16IS_ACC_GetOutputDataRate+0xe4>)
 80029f2:	601a      	str	r2, [r3, #0]
      break;
 80029f4:	e013      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	4a11      	ldr	r2, [pc, #68]	; (8002a40 <LSM6DSO16IS_ACC_GetOutputDataRate+0xe8>)
 80029fa:	601a      	str	r2, [r3, #0]
      break;
 80029fc:	e00f      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <LSM6DSO16IS_ACC_GetOutputDataRate+0xec>)
 8002a02:	601a      	str	r2, [r3, #0]
      break;
 8002a04:	e00b      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <LSM6DSO16IS_ACC_GetOutputDataRate+0xf0>)
 8002a0a:	601a      	str	r2, [r3, #0]
      break;
 8002a0c:	e007      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <LSM6DSO16IS_ACC_GetOutputDataRate+0xf4>)
 8002a12:	601a      	str	r2, [r3, #0]
      break;
 8002a14:	e003      	b.n	8002a1e <LSM6DSO16IS_ACC_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO16IS_ERROR;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	60fb      	str	r3, [r7, #12]
      break;
 8002a1c:	bf00      	nop
  }

  return ret;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	41480000 	.word	0x41480000
 8002a2c:	41d00000 	.word	0x41d00000
 8002a30:	42500000 	.word	0x42500000
 8002a34:	42d00000 	.word	0x42d00000
 8002a38:	43500000 	.word	0x43500000
 8002a3c:	43d00000 	.word	0x43d00000
 8002a40:	44504000 	.word	0x44504000
 8002a44:	44d06000 	.word	0x44d06000
 8002a48:	45505000 	.word	0x45505000
 8002a4c:	45d05800 	.word	0x45d05800

08002a50 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3320      	adds	r3, #32
 8002a68:	f107 020c 	add.w	r2, r7, #12
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fba1 	bl	80031b6 <lsm6dso16is_acceleration_raw_get>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ff20 	bl	80028cc <LSM6DSO16IS_ACC_GetSensitivity>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8002a98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe f915 	bl	8000ccc <__aeabi_i2f>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fe f963 	bl	8000d74 <__aeabi_fmul>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fb25 	bl	8001100 <__aeabi_f2iz>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8002abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe f903 	bl	8000ccc <__aeabi_i2f>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f7fe f951 	bl	8000d74 <__aeabi_fmul>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fb13 	bl	8001100 <__aeabi_f2iz>
 8002ada:	4602      	mov	r2, r0
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8002ae0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe f8f1 	bl	8000ccc <__aeabi_i2f>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f7fe f93f 	bl	8000d74 <__aeabi_fmul>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fb01 	bl	8001100 <__aeabi_f2iz>
 8002afe:	4602      	mov	r2, r0
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	609a      	str	r2, [r3, #8]

  return ret;
 8002b04:	697b      	ldr	r3, [r7, #20]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f103 0020 	add.w	r0, r3, #32
 8002b28:	1cba      	adds	r2, r7, #2
 8002b2a:	78f9      	ldrb	r1, [r7, #3]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f000 f87f 	bl	8002c30 <lsm6dso16is_write_reg>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d006      	beq.n	8002b6c <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d101      	bne.n	8002b68 <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8002b64:	2303      	movs	r3, #3
 8002b66:	e002      	b.n	8002b6e <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8002b6c:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8002b6e:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3320      	adds	r3, #32
 8002b74:	7afa      	ldrb	r2, [r7, #11]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f871 	bl	8002c60 <lsm6dso16is_mem_bank_set>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
 8002b88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	72fb      	strb	r3, [r7, #11]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	695c      	ldr	r4, [r3, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	7b1b      	ldrb	r3, [r3, #12]
 8002bb4:	b298      	uxth	r0, r3
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
 8002bb8:	b299      	uxth	r1, r3
 8002bba:	893b      	ldrh	r3, [r7, #8]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	47a0      	blx	r4
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}

08002bca <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002bca:	b590      	push	{r4, r7, lr}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	72fb      	strb	r3, [r7, #11]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	691c      	ldr	r4, [r3, #16]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	7b1b      	ldrb	r3, [r3, #12]
 8002bea:	b298      	uxth	r0, r3
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	b299      	uxth	r1, r3
 8002bf0:	893b      	ldrh	r3, [r7, #8]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	47a0      	blx	r4
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <lsm6dso16is_read_reg>:
  *
  */
int32_t lsm6dso16is_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	72fb      	strb	r3, [r7, #11]
 8002c10:	4613      	mov	r3, r2
 8002c12:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685c      	ldr	r4, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6898      	ldr	r0, [r3, #8]
 8002c1c:	893b      	ldrh	r3, [r7, #8]
 8002c1e:	7af9      	ldrb	r1, [r7, #11]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	47a0      	blx	r4
 8002c24:	6178      	str	r0, [r7, #20]

  return ret;
 8002c26:	697b      	ldr	r3, [r7, #20]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd90      	pop	{r4, r7, pc}

08002c30 <lsm6dso16is_write_reg>:
  *
  */
int32_t lsm6dso16is_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                              uint8_t *data,
                              uint16_t len)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	72fb      	strb	r3, [r7, #11]
 8002c40:	4613      	mov	r3, r2
 8002c42:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681c      	ldr	r4, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6898      	ldr	r0, [r3, #8]
 8002c4c:	893b      	ldrh	r3, [r7, #8]
 8002c4e:	7af9      	ldrb	r1, [r7, #11]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	47a0      	blx	r4
 8002c54:	6178      	str	r0, [r7, #20]

  return ret;
 8002c56:	697b      	ldr	r3, [r7, #20]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}

08002c60 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002c6c:	f107 0208 	add.w	r2, r7, #8
 8002c70:	2301      	movs	r3, #1
 8002c72:	2101      	movs	r1, #1
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ffc3 	bl	8002c00 <lsm6dso16is_read_reg>
 8002c7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11b      	bne.n	8002cba <lsm6dso16is_mem_bank_set+0x5a>
  {
    func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d101      	bne.n	8002c8c <lsm6dso16is_mem_bank_set+0x2c>
 8002c88:	2201      	movs	r2, #1
 8002c8a:	e000      	b.n	8002c8e <lsm6dso16is_mem_bank_set+0x2e>
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	7a3b      	ldrb	r3, [r7, #8]
 8002c90:	f362 1386 	bfi	r3, r2, #6, #1
 8002c94:	723b      	strb	r3, [r7, #8]
    func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d101      	bne.n	8002ca0 <lsm6dso16is_mem_bank_set+0x40>
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	e000      	b.n	8002ca2 <lsm6dso16is_mem_bank_set+0x42>
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	7a3b      	ldrb	r3, [r7, #8]
 8002ca4:	f362 13c7 	bfi	r3, r2, #7, #1
 8002ca8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002caa:	f107 0208 	add.w	r2, r7, #8
 8002cae:	2301      	movs	r3, #1
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffbc 	bl	8002c30 <lsm6dso16is_write_reg>
 8002cb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 8002cce:	2301      	movs	r3, #1
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff93 	bl	8002c00 <lsm6dso16is_read_reg>
 8002cda:	60f8      	str	r0, [r7, #12]

  return ret;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8002cf2:	f107 0208 	add.w	r2, r7, #8
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	2115      	movs	r1, #21
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ff80 	bl	8002c00 <lsm6dso16is_read_reg>
 8002d00:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10f      	bne.n	8002d28 <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	7a3b      	ldrb	r3, [r7, #8]
 8002d12:	f362 1304 	bfi	r3, r2, #4, #1
 8002d16:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8002d18:	f107 0208 	add.w	r2, r7, #8
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	2115      	movs	r1, #21
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff85 	bl	8002c30 <lsm6dso16is_write_reg>
 8002d26:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d28:	68fb      	ldr	r3, [r7, #12]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002d3e:	f107 0208 	add.w	r2, r7, #8
 8002d42:	2301      	movs	r3, #1
 8002d44:	2110      	movs	r1, #16
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ff5a 	bl	8002c00 <lsm6dso16is_read_reg>
 8002d4c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10f      	bne.n	8002d74 <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	7a3b      	ldrb	r3, [r7, #8]
 8002d5e:	f362 0383 	bfi	r3, r2, #2, #2
 8002d62:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002d64:	f107 0208 	add.w	r2, r7, #8
 8002d68:	2301      	movs	r3, #1
 8002d6a:	2110      	movs	r1, #16
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff5f 	bl	8002c30 <lsm6dso16is_write_reg>
 8002d72:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d74:	68fb      	ldr	r3, [r7, #12]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002d8a:	f107 0208 	add.w	r2, r7, #8
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2110      	movs	r1, #16
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ff34 	bl	8002c00 <lsm6dso16is_read_reg>
 8002d98:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 8002d9a:	7a3b      	ldrb	r3, [r7, #8]
 8002d9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d81a      	bhi.n	8002ddc <lsm6dso16is_xl_full_scale_get+0x5c>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <lsm6dso16is_xl_full_scale_get+0x2c>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002dd5 	.word	0x08002dd5
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dcd 	.word	0x08002dcd
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
      break;
 8002dc2:	e00f      	b.n	8002de4 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	701a      	strb	r2, [r3, #0]
      break;
 8002dca:	e00b      	b.n	8002de4 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	701a      	strb	r2, [r3, #0]
      break;
 8002dd2:	e007      	b.n	8002de4 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
      break;
 8002dda:	e003      	b.n	8002de4 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
      break;
 8002de2:	bf00      	nop
  }
  return ret;
 8002de4:	68fb      	ldr	r3, [r7, #12]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop

08002df0 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002dfc:	f107 0208 	add.w	r2, r7, #8
 8002e00:	2301      	movs	r3, #1
 8002e02:	2110      	movs	r1, #16
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fefb 	bl	8002c00 <lsm6dso16is_read_reg>
 8002e0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d128      	bne.n	8002e64 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx,
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff61 	bl	8002ce6 <lsm6dso16is_xl_hm_mode_set>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4413      	add	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e007      	b.n	8002e3e <lsm6dso16is_xl_data_rate_set+0x4e>
                                        LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx,
 8002e2e:	2100      	movs	r1, #0
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff58 	bl	8002ce6 <lsm6dso16is_xl_hm_mode_set>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
                                        LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	7a3b      	ldrb	r3, [r7, #8]
 8002e48:	f362 1307 	bfi	r3, r2, #4, #4
 8002e4c:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8002e4e:	f107 0208 	add.w	r2, r7, #8
 8002e52:	2301      	movs	r3, #1
 8002e54:	2110      	movs	r1, #16
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff feea 	bl	8002c30 <lsm6dso16is_write_reg>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
                                 1);
  }

  return ret;
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002e7a:	f107 0210 	add.w	r2, r7, #16
 8002e7e:	2301      	movs	r3, #1
 8002e80:	2110      	movs	r1, #16
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff febc 	bl	8002c00 <lsm6dso16is_read_reg>
 8002e88:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d107      	bne.n	8002ea0 <lsm6dso16is_xl_data_rate_get+0x30>
  {
    ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8002e90:	f107 020c 	add.w	r2, r7, #12
 8002e94:	2301      	movs	r3, #1
 8002e96:	2115      	movs	r1, #21
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff feb1 	bl	8002c00 <lsm6dso16is_read_reg>
 8002e9e:	6178      	str	r0, [r7, #20]
  }

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8002ea0:	7b3b      	ldrb	r3, [r7, #12]
 8002ea2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	7c3a      	ldrb	r2, [r7, #16]
 8002eac:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	2b1b      	cmp	r3, #27
 8002eb6:	f200 8093 	bhi.w	8002fe0 <lsm6dso16is_xl_data_rate_get+0x170>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <lsm6dso16is_xl_data_rate_get+0x50>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002f31 	.word	0x08002f31
 8002ec4:	08002f39 	.word	0x08002f39
 8002ec8:	08002f41 	.word	0x08002f41
 8002ecc:	08002f49 	.word	0x08002f49
 8002ed0:	08002f51 	.word	0x08002f51
 8002ed4:	08002f59 	.word	0x08002f59
 8002ed8:	08002f61 	.word	0x08002f61
 8002edc:	08002f69 	.word	0x08002f69
 8002ee0:	08002f71 	.word	0x08002f71
 8002ee4:	08002f79 	.word	0x08002f79
 8002ee8:	08002f81 	.word	0x08002f81
 8002eec:	08002fe1 	.word	0x08002fe1
 8002ef0:	08002fe1 	.word	0x08002fe1
 8002ef4:	08002fe1 	.word	0x08002fe1
 8002ef8:	08002fe1 	.word	0x08002fe1
 8002efc:	08002fe1 	.word	0x08002fe1
 8002f00:	08002fe1 	.word	0x08002fe1
 8002f04:	08002f89 	.word	0x08002f89
 8002f08:	08002f91 	.word	0x08002f91
 8002f0c:	08002f99 	.word	0x08002f99
 8002f10:	08002fa1 	.word	0x08002fa1
 8002f14:	08002fa9 	.word	0x08002fa9
 8002f18:	08002fb1 	.word	0x08002fb1
 8002f1c:	08002fb9 	.word	0x08002fb9
 8002f20:	08002fc1 	.word	0x08002fc1
 8002f24:	08002fc9 	.word	0x08002fc9
 8002f28:	08002fd1 	.word	0x08002fd1
 8002f2c:	08002fd9 	.word	0x08002fd9
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
      break;
 8002f36:	e057      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
      break;
 8002f3e:	e053      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2202      	movs	r2, #2
 8002f44:	701a      	strb	r2, [r3, #0]
      break;
 8002f46:	e04f      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	701a      	strb	r2, [r3, #0]
      break;
 8002f4e:	e04b      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2204      	movs	r2, #4
 8002f54:	701a      	strb	r2, [r3, #0]
      break;
 8002f56:	e047      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2205      	movs	r2, #5
 8002f5c:	701a      	strb	r2, [r3, #0]
      break;
 8002f5e:	e043      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2206      	movs	r2, #6
 8002f64:	701a      	strb	r2, [r3, #0]
      break;
 8002f66:	e03f      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	701a      	strb	r2, [r3, #0]
      break;
 8002f6e:	e03b      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2208      	movs	r2, #8
 8002f74:	701a      	strb	r2, [r3, #0]
      break;
 8002f76:	e037      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2209      	movs	r2, #9
 8002f7c:	701a      	strb	r2, [r3, #0]
      break;
 8002f7e:	e033      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	220a      	movs	r2, #10
 8002f84:	701a      	strb	r2, [r3, #0]
      break;
 8002f86:	e02f      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2211      	movs	r2, #17
 8002f8c:	701a      	strb	r2, [r3, #0]
      break;
 8002f8e:	e02b      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2212      	movs	r2, #18
 8002f94:	701a      	strb	r2, [r3, #0]
      break;
 8002f96:	e027      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2213      	movs	r2, #19
 8002f9c:	701a      	strb	r2, [r3, #0]
      break;
 8002f9e:	e023      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2214      	movs	r2, #20
 8002fa4:	701a      	strb	r2, [r3, #0]
      break;
 8002fa6:	e01f      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2215      	movs	r2, #21
 8002fac:	701a      	strb	r2, [r3, #0]
      break;
 8002fae:	e01b      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2216      	movs	r2, #22
 8002fb4:	701a      	strb	r2, [r3, #0]
      break;
 8002fb6:	e017      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2217      	movs	r2, #23
 8002fbc:	701a      	strb	r2, [r3, #0]
      break;
 8002fbe:	e013      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2218      	movs	r2, #24
 8002fc4:	701a      	strb	r2, [r3, #0]
      break;
 8002fc6:	e00f      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2219      	movs	r2, #25
 8002fcc:	701a      	strb	r2, [r3, #0]
      break;
 8002fce:	e00b      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	221a      	movs	r2, #26
 8002fd4:	701a      	strb	r2, [r3, #0]
      break;
 8002fd6:	e007      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	221b      	movs	r2, #27
 8002fdc:	701a      	strb	r2, [r3, #0]
      break;
 8002fde:	e003      	b.n	8002fe8 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
      break;
 8002fe6:	bf00      	nop
  }
  return ret;
 8002fe8:	697b      	ldr	r3, [r7, #20]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop

08002ff4 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8003000:	f107 0208 	add.w	r2, r7, #8
 8003004:	2301      	movs	r3, #1
 8003006:	2116      	movs	r1, #22
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fdf9 	bl	8002c00 <lsm6dso16is_read_reg>
 800300e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	7a3b      	ldrb	r3, [r7, #8]
 8003020:	f362 13c7 	bfi	r3, r2, #7, #1
 8003024:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8003026:	f107 0208 	add.w	r2, r7, #8
 800302a:	2301      	movs	r3, #1
 800302c:	2116      	movs	r1, #22
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fdfe 	bl	8002c30 <lsm6dso16is_write_reg>
 8003034:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800304c:	f107 0208 	add.w	r2, r7, #8
 8003050:	2301      	movs	r3, #1
 8003052:	2111      	movs	r1, #17
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fdd3 	bl	8002c00 <lsm6dso16is_read_reg>
 800305a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d119      	bne.n	8003096 <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	b2da      	uxtb	r2, r3
 800306a:	7a3b      	ldrb	r3, [r7, #8]
 800306c:	f362 0383 	bfi	r3, r2, #2, #2
 8003070:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	7a3b      	ldrb	r3, [r7, #8]
 8003080:	f362 0341 	bfi	r3, r2, #1, #1
 8003084:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003086:	f107 0208 	add.w	r2, r7, #8
 800308a:	2301      	movs	r3, #1
 800308c:	2111      	movs	r1, #17
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff fdce 	bl	8002c30 <lsm6dso16is_write_reg>
 8003094:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80030ac:	f107 0208 	add.w	r2, r7, #8
 80030b0:	2301      	movs	r3, #1
 80030b2:	2111      	movs	r1, #17
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fda3 	bl	8002c00 <lsm6dso16is_read_reg>
 80030ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d128      	bne.n	8003114 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx,
 80030cc:	2101      	movs	r1, #1
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ff90 	bl	8002ff4 <lsm6dso16is_gy_hm_mode_set>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e007      	b.n	80030ee <lsm6dso16is_gy_data_rate_set+0x4e>
                                        LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx,
 80030de:	2100      	movs	r1, #0
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff87 	bl	8002ff4 <lsm6dso16is_gy_hm_mode_set>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
                                        LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	7a3b      	ldrb	r3, [r7, #8]
 80030f8:	f362 1307 	bfi	r3, r2, #4, #4
 80030fc:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80030fe:	f107 0208 	add.w	r2, r7, #8
 8003102:	2301      	movs	r3, #1
 8003104:	2111      	movs	r1, #17
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fd92 	bl	8002c30 <lsm6dso16is_write_reg>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4413      	add	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003114:	68fb      	ldr	r3, [r7, #12]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800312a:	f107 0208 	add.w	r2, r7, #8
 800312e:	2301      	movs	r3, #1
 8003130:	2112      	movs	r1, #18
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff fd64 	bl	8002c00 <lsm6dso16is_read_reg>
 8003138:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10f      	bne.n	8003160 <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	b2da      	uxtb	r2, r3
 8003148:	7a3b      	ldrb	r3, [r7, #8]
 800314a:	f362 0382 	bfi	r3, r2, #2, #1
 800314e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003150:	f107 0208 	add.w	r2, r7, #8
 8003154:	2301      	movs	r3, #1
 8003156:	2112      	movs	r1, #18
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fd69 	bl	8002c30 <lsm6dso16is_write_reg>
 800315e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003160:	68fb      	ldr	r3, [r7, #12]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003176:	f107 0208 	add.w	r2, r7, #8
 800317a:	2301      	movs	r3, #1
 800317c:	2112      	movs	r1, #18
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fd3e 	bl	8002c00 <lsm6dso16is_read_reg>
 8003184:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10f      	bne.n	80031ac <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	b2da      	uxtb	r2, r3
 8003194:	7a3b      	ldrb	r3, [r7, #8]
 8003196:	f362 1386 	bfi	r3, r2, #6, #1
 800319a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800319c:	f107 0208 	add.w	r2, r7, #8
 80031a0:	2301      	movs	r3, #1
 80031a2:	2112      	movs	r1, #18
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fd43 	bl	8002c30 <lsm6dso16is_write_reg>
 80031aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031ac:	68fb      	ldr	r3, [r7, #12]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 80031c0:	f107 020c 	add.w	r2, r7, #12
 80031c4:	2306      	movs	r3, #6
 80031c6:	2128      	movs	r1, #40	; 0x28
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fd19 	bl	8002c00 <lsm6dso16is_read_reg>
 80031ce:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80031d0:	7b7b      	ldrb	r3, [r7, #13]
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	7b3b      	ldrb	r3, [r7, #12]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	b21a      	sxth	r2, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	3302      	adds	r3, #2
 80031f8:	b212      	sxth	r2, r2
 80031fa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	3302      	adds	r3, #2
 8003200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003204:	b29b      	uxth	r3, r3
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	b29a      	uxth	r2, r3
 800320a:	7bbb      	ldrb	r3, [r7, #14]
 800320c:	b29b      	uxth	r3, r3
 800320e:	4413      	add	r3, r2
 8003210:	b29a      	uxth	r2, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	3302      	adds	r3, #2
 8003216:	b212      	sxth	r2, r2
 8003218:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800321a:	7c7a      	ldrb	r2, [r7, #17]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	3304      	adds	r3, #4
 8003220:	b212      	sxth	r2, r2
 8003222:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	3304      	adds	r3, #4
 8003228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322c:	b29b      	uxth	r3, r3
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	b29a      	uxth	r2, r3
 8003232:	7c3b      	ldrb	r3, [r7, #16]
 8003234:	b29b      	uxth	r3, r3
 8003236:	4413      	add	r3, r2
 8003238:	b29a      	uxth	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3304      	adds	r3, #4
 800323e:	b212      	sxth	r2, r2
 8003240:	801a      	strh	r2, [r3, #0]

  return ret;
 8003242:	697b      	ldr	r3, [r7, #20]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <LL_AHB2_GRP1_EnableClock>:
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800325a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4313      	orrs	r3, r2
 8003262:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003270:	68fb      	ldr	r3, [r7, #12]
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003286:	f107 030c 	add.w	r3, r7, #12
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003296:	2002      	movs	r0, #2
 8003298:	f7ff ffd8 	bl	800324c <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <BSP_LED_Init+0x6c>)
 80032a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032a4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80032a6:	2301      	movs	r3, #1
 80032a8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ae:	2302      	movs	r3, #2
 80032b0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <BSP_LED_Init+0x70>)
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	f107 020c 	add.w	r2, r7, #12
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f9b1 	bl	8003628 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	4a08      	ldr	r2, [pc, #32]	; (80032ec <BSP_LED_Init+0x70>)
 80032ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <BSP_LED_Init+0x6c>)
 80032d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d6:	2200      	movs	r2, #0
 80032d8:	4619      	mov	r1, r3
 80032da:	f000 fb05 	bl	80038e8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	08009294 	.word	0x08009294
 80032ec:	20000000 	.word	0x20000000

080032f0 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	4a07      	ldr	r2, [pc, #28]	; (800331c <BSP_LED_On+0x2c>)
 80032fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	4a06      	ldr	r2, [pc, #24]	; (8003320 <BSP_LED_On+0x30>)
 8003306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	f000 faeb 	bl	80038e8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000000 	.word	0x20000000
 8003320:	08009294 	.word	0x08009294

08003324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800333a:	2003      	movs	r0, #3
 800333c:	f000 f942 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003340:	f002 f92c 	bl	800559c <HAL_RCC_GetHCLKFreq>
 8003344:	4603      	mov	r3, r0
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <HAL_Init+0x3c>)
 8003348:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800334a:	200f      	movs	r0, #15
 800334c:	f000 f810 	bl	8003370 <HAL_InitTick>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	71fb      	strb	r3, [r7, #7]
 800335a:	e001      	b.n	8003360 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800335c:	f7fe facc 	bl	80018f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003360:	79fb      	ldrb	r3, [r7, #7]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c

08003370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_InitTick+0x6c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d024      	beq.n	80033ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003384:	f002 f90a 	bl	800559c <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_InitTick+0x6c>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	4619      	mov	r1, r3
 8003390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003394:	fbb3 f3f1 	udiv	r3, r3, r1
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f936 	bl	800360e <HAL_SYSTICK_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10f      	bne.n	80033c8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d809      	bhi.n	80033c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ae:	2200      	movs	r2, #0
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	f04f 30ff 	mov.w	r0, #4294967295
 80033b6:	f000 f910 	bl	80035da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_InitTick+0x70>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e007      	b.n	80033d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
 80033c6:	e004      	b.n	80033d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e001      	b.n	80033d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000014 	.word	0x20000014
 80033e0:	20000010 	.word	0x20000010

080033e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_IncTick+0x1c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_IncTick+0x20>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	4a03      	ldr	r2, [pc, #12]	; (8003404 <HAL_IncTick+0x20>)
 80033f6:	6013      	str	r3, [r2, #0]
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	20000014 	.word	0x20000014
 8003404:	200003a8 	.word	0x200003a8

08003408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return uwTick;
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <HAL_GetTick+0x10>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	200003a8 	.word	0x200003a8

0800341c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7ff fff0 	bl	8003408 <HAL_GetTick>
 8003428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d005      	beq.n	8003442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_Delay+0x44>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003442:	bf00      	nop
 8003444:	f7ff ffe0 	bl	8003408 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	429a      	cmp	r2, r3
 8003452:	d8f7      	bhi.n	8003444 <HAL_Delay+0x28>
  {
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000014 	.word	0x20000014

08003464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003480:	4013      	ands	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800348c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003496:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	60d3      	str	r3, [r2, #12]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b0:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <__NVIC_GetPriorityGrouping+0x18>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	f003 0307 	and.w	r3, r3, #7
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	db0a      	blt.n	80034f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	490c      	ldr	r1, [pc, #48]	; (8003514 <__NVIC_SetPriority+0x4c>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	0112      	lsls	r2, r2, #4
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	440b      	add	r3, r1
 80034ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f0:	e00a      	b.n	8003508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4908      	ldr	r1, [pc, #32]	; (8003518 <__NVIC_SetPriority+0x50>)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	3b04      	subs	r3, #4
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	440b      	add	r3, r1
 8003506:	761a      	strb	r2, [r3, #24]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000e100 	.word	0xe000e100
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f1c3 0307 	rsb	r3, r3, #7
 8003536:	2b04      	cmp	r3, #4
 8003538:	bf28      	it	cs
 800353a:	2304      	movcs	r3, #4
 800353c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3304      	adds	r3, #4
 8003542:	2b06      	cmp	r3, #6
 8003544:	d902      	bls.n	800354c <NVIC_EncodePriority+0x30>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3b03      	subs	r3, #3
 800354a:	e000      	b.n	800354e <NVIC_EncodePriority+0x32>
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	f04f 32ff 	mov.w	r2, #4294967295
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	401a      	ands	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43d9      	mvns	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	4313      	orrs	r3, r2
         );
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003590:	d301      	bcc.n	8003596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <SysTick_Config+0x40>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359e:	210f      	movs	r1, #15
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f7ff ff90 	bl	80034c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <SysTick_Config+0x40>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <SysTick_Config+0x40>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff49 	bl	8003464 <__NVIC_SetPriorityGrouping>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff60 	bl	80034ac <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff92 	bl	800351c <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff61 	bl	80034c8 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ffb2 	bl	8003580 <SysTick_Config>
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003636:	e140      	b.n	80038ba <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8132 	beq.w	80038b4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d005      	beq.n	8003668 <HAL_GPIO_Init+0x40>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d130      	bne.n	80036ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800369e:	2201      	movs	r2, #1
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 0201 	and.w	r2, r3, #1
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d017      	beq.n	8003706 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d123      	bne.n	800375a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	08da      	lsrs	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3208      	adds	r2, #8
 800371a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800371e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	220f      	movs	r2, #15
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	08da      	lsrs	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3208      	adds	r2, #8
 8003754:	6939      	ldr	r1, [r7, #16]
 8003756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	2203      	movs	r2, #3
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0203 	and.w	r2, r3, #3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 808c 	beq.w	80038b4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800379c:	4a4e      	ldr	r2, [pc, #312]	; (80038d8 <HAL_GPIO_Init+0x2b0>)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	3302      	adds	r3, #2
 80037a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	2207      	movs	r2, #7
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037c6:	d00d      	beq.n	80037e4 <HAL_GPIO_Init+0x1bc>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a44      	ldr	r2, [pc, #272]	; (80038dc <HAL_GPIO_Init+0x2b4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d007      	beq.n	80037e0 <HAL_GPIO_Init+0x1b8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a43      	ldr	r2, [pc, #268]	; (80038e0 <HAL_GPIO_Init+0x2b8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_GPIO_Init+0x1b4>
 80037d8:	2302      	movs	r3, #2
 80037da:	e004      	b.n	80037e6 <HAL_GPIO_Init+0x1be>
 80037dc:	2307      	movs	r3, #7
 80037de:	e002      	b.n	80037e6 <HAL_GPIO_Init+0x1be>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_GPIO_Init+0x1be>
 80037e4:	2300      	movs	r3, #0
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	f002 0203 	and.w	r2, r2, #3
 80037ec:	0092      	lsls	r2, r2, #2
 80037ee:	4093      	lsls	r3, r2
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037f6:	4938      	ldr	r1, [pc, #224]	; (80038d8 <HAL_GPIO_Init+0x2b0>)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	3302      	adds	r3, #2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003804:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <HAL_GPIO_Init+0x2bc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003828:	4a2e      	ldr	r2, [pc, #184]	; (80038e4 <HAL_GPIO_Init+0x2bc>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800382e:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_GPIO_Init+0x2bc>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003852:	4a24      	ldr	r2, [pc, #144]	; (80038e4 <HAL_GPIO_Init+0x2bc>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003858:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_GPIO_Init+0x2bc>)
 800385a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800385e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800387e:	4a19      	ldr	r2, [pc, #100]	; (80038e4 <HAL_GPIO_Init+0x2bc>)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003886:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_GPIO_Init+0x2bc>)
 8003888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <HAL_GPIO_Init+0x2bc>)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3301      	adds	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f aeb7 	bne.w	8003638 <HAL_GPIO_Init+0x10>
  }
}
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40010000 	.word	0x40010000
 80038dc:	48000400 	.word	0x48000400
 80038e0:	48000800 	.word	0x48000800
 80038e4:	58000800 	.word	0x58000800

080038e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
 80038f4:	4613      	mov	r3, r2
 80038f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f8:	787b      	ldrb	r3, [r7, #1]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038fe:	887a      	ldrh	r2, [r7, #2]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003904:	e002      	b.n	800390c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e081      	b.n	8003a2c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f879 	bl	8003a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2224      	movs	r2, #36	; 0x24
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003966:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003976:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	e006      	b.n	800399e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800399c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d104      	bne.n	80039b0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69d9      	ldr	r1, [r3, #28]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	f040 80f9 	bne.w	8003c62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_I2C_Mem_Write+0x34>
 8003a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0ed      	b.n	8003c64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Mem_Write+0x4e>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e0e6      	b.n	8003c64 <HAL_I2C_Mem_Write+0x21c>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a9e:	f7ff fcb3 	bl	8003408 <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2319      	movs	r3, #25
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fada 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0d1      	b.n	8003c64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2221      	movs	r2, #33	; 0x21
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ae8:	88f8      	ldrh	r0, [r7, #6]
 8003aea:	893a      	ldrh	r2, [r7, #8]
 8003aec:	8979      	ldrh	r1, [r7, #10]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	4603      	mov	r3, r0
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f9eb 	bl	8003ed4 <I2C_RequestMemoryWrite>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0a9      	b.n	8003c64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2bff      	cmp	r3, #255	; 0xff
 8003b18:	d90e      	bls.n	8003b38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	22ff      	movs	r2, #255	; 0xff
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	8979      	ldrh	r1, [r7, #10]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fc37 	bl	80043a4 <I2C_TransferConfig>
 8003b36:	e00f      	b.n	8003b58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	8979      	ldrh	r1, [r7, #10]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fc26 	bl	80043a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fac4 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e07b      	b.n	8003c64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d034      	beq.n	8003c10 <HAL_I2C_Mem_Write+0x1c8>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d130      	bne.n	8003c10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fa56 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e04d      	b.n	8003c64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2bff      	cmp	r3, #255	; 0xff
 8003bd0:	d90e      	bls.n	8003bf0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	22ff      	movs	r2, #255	; 0xff
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	8979      	ldrh	r1, [r7, #10]
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fbdb 	bl	80043a4 <I2C_TransferConfig>
 8003bee:	e00f      	b.n	8003c10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	8979      	ldrh	r1, [r7, #10]
 8003c02:	2300      	movs	r3, #0
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fbca 	bl	80043a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d19e      	bne.n	8003b58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 faa3 	bl	800416a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e01a      	b.n	8003c64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2220      	movs	r2, #32
 8003c34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_I2C_Mem_Write+0x224>)
 8003c42:	400b      	ands	r3, r1
 8003c44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e000      	b.n	8003c64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
  }
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	fe00e800 	.word	0xfe00e800

08003c70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	817b      	strh	r3, [r7, #10]
 8003c82:	460b      	mov	r3, r1
 8003c84:	813b      	strh	r3, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	f040 80fd 	bne.w	8003e92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0x34>
 8003c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0f1      	b.n	8003e94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2C_Mem_Read+0x4e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0ea      	b.n	8003e94 <HAL_I2C_Mem_Read+0x224>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cc6:	f7ff fb9f 	bl	8003408 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2319      	movs	r3, #25
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f9c6 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0d5      	b.n	8003e94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2222      	movs	r2, #34	; 0x22
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2240      	movs	r2, #64	; 0x40
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d10:	88f8      	ldrh	r0, [r7, #6]
 8003d12:	893a      	ldrh	r2, [r7, #8]
 8003d14:	8979      	ldrh	r1, [r7, #10]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4603      	mov	r3, r0
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f92b 	bl	8003f7c <I2C_RequestMemoryRead>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0ad      	b.n	8003e94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2bff      	cmp	r3, #255	; 0xff
 8003d40:	d90e      	bls.n	8003d60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	8979      	ldrh	r1, [r7, #10]
 8003d50:	4b52      	ldr	r3, [pc, #328]	; (8003e9c <HAL_I2C_Mem_Read+0x22c>)
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fb23 	bl	80043a4 <I2C_TransferConfig>
 8003d5e:	e00f      	b.n	8003d80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	8979      	ldrh	r1, [r7, #10]
 8003d72:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <HAL_I2C_Mem_Read+0x22c>)
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fb12 	bl	80043a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	2200      	movs	r2, #0
 8003d88:	2104      	movs	r1, #4
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f96d 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07c      	b.n	8003e94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d034      	beq.n	8003e40 <HAL_I2C_Mem_Read+0x1d0>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d130      	bne.n	8003e40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	2200      	movs	r2, #0
 8003de6:	2180      	movs	r1, #128	; 0x80
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f93e 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e04d      	b.n	8003e94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2bff      	cmp	r3, #255	; 0xff
 8003e00:	d90e      	bls.n	8003e20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	; 0xff
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	2300      	movs	r3, #0
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fac3 	bl	80043a4 <I2C_TransferConfig>
 8003e1e:	e00f      	b.n	8003e40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	8979      	ldrh	r1, [r7, #10]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fab2 	bl	80043a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d19a      	bne.n	8003d80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f98b 	bl	800416a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e01a      	b.n	8003e94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2220      	movs	r2, #32
 8003e64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_I2C_Mem_Read+0x230>)
 8003e72:	400b      	ands	r3, r1
 8003e74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	80002400 	.word	0x80002400
 8003ea0:	fe00e800 	.word	0xfe00e800

08003ea4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb2:	b2db      	uxtb	r3, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	4608      	mov	r0, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	817b      	strh	r3, [r7, #10]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	813b      	strh	r3, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	8979      	ldrh	r1, [r7, #10]
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <I2C_RequestMemoryWrite+0xa4>)
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fa51 	bl	80043a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	69b9      	ldr	r1, [r7, #24]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f8ef 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e02c      	b.n	8003f70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
 8003f26:	e015      	b.n	8003f54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f28:	893b      	ldrh	r3, [r7, #8]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	69b9      	ldr	r1, [r7, #24]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f8d5 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e012      	b.n	8003f70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f4a:	893b      	ldrh	r3, [r7, #8]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2180      	movs	r1, #128	; 0x80
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f883 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	80002000 	.word	0x80002000

08003f7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	817b      	strh	r3, [r7, #10]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	813b      	strh	r3, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	8979      	ldrh	r1, [r7, #10]
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <I2C_RequestMemoryRead+0xa4>)
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f9fe 	bl	80043a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f89c 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e02c      	b.n	8004016 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc2:	893b      	ldrh	r3, [r7, #8]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
 8003fcc:	e015      	b.n	8003ffa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fce:	893b      	ldrh	r3, [r7, #8]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	69b9      	ldr	r1, [r7, #24]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f882 	bl	80040ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e012      	b.n	8004016 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff0:	893b      	ldrh	r3, [r7, #8]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2200      	movs	r2, #0
 8004002:	2140      	movs	r1, #64	; 0x40
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f830 	bl	800406a <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	80002000 	.word	0x80002000

08004024 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d103      	bne.n	8004042 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d007      	beq.n	8004060 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	619a      	str	r2, [r3, #24]
  }
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407a:	e022      	b.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d01e      	beq.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004084:	f7ff f9c0 	bl	8003408 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d302      	bcc.n	800409a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d113      	bne.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f043 0220 	orr.w	r2, r3, #32
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e00f      	b.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	bf0c      	ite	eq
 80040d2:	2301      	moveq	r3, #1
 80040d4:	2300      	movne	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d0cd      	beq.n	800407c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040f6:	e02c      	b.n	8004152 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f871 	bl	80041e4 <I2C_IsErrorOccurred>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e02a      	b.n	8004162 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d01e      	beq.n	8004152 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004114:	f7ff f978 	bl	8003408 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d113      	bne.n	8004152 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e007      	b.n	8004162 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d1cb      	bne.n	80040f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004176:	e028      	b.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f831 	bl	80041e4 <I2C_IsErrorOccurred>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e026      	b.n	80041da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418c:	f7ff f93c 	bl	8003408 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e007      	b.n	80041da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d1cf      	bne.n	8004178 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d068      	beq.n	80042e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2210      	movs	r2, #16
 8004216:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004218:	e049      	b.n	80042ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d045      	beq.n	80042ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7ff f8f1 	bl	8003408 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_IsErrorOccurred+0x54>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d13a      	bne.n	80042ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004242:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800424a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d121      	bne.n	80042a0 <I2C_IsErrorOccurred+0xbc>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004262:	d01d      	beq.n	80042a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	2b20      	cmp	r3, #32
 8004268:	d01a      	beq.n	80042a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004278:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800427a:	f7ff f8c5 	bl	8003408 <HAL_GetTick>
 800427e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004280:	e00e      	b.n	80042a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004282:	f7ff f8c1 	bl	8003408 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b19      	cmp	r3, #25
 800428e:	d907      	bls.n	80042a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	f043 0320 	orr.w	r3, r3, #32
 8004296:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800429e:	e006      	b.n	80042ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d1e9      	bne.n	8004282 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d003      	beq.n	80042c4 <I2C_IsErrorOccurred+0xe0>
 80042bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0aa      	beq.n	800421a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d103      	bne.n	80042d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2220      	movs	r2, #32
 80042d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004304:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f043 0308 	orr.w	r3, r3, #8
 800431c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004326:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004348:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01c      	beq.n	8004392 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fe63 	bl	8004024 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <I2C_IsErrorOccurred+0x1bc>)
 800436a:	400b      	ands	r3, r1
 800436c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	431a      	orrs	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004396:	4618      	mov	r0, r3
 8004398:	3728      	adds	r7, #40	; 0x28
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	fe00e800 	.word	0xfe00e800

080043a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	817b      	strh	r3, [r7, #10]
 80043b2:	4613      	mov	r3, r2
 80043b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043b6:	897b      	ldrh	r3, [r7, #10]
 80043b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043bc:	7a7b      	ldrb	r3, [r7, #9]
 80043be:	041b      	lsls	r3, r3, #16
 80043c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	0d5b      	lsrs	r3, r3, #21
 80043de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <I2C_TransferConfig+0x5c>)
 80043e4:	430b      	orrs	r3, r1
 80043e6:	43db      	mvns	r3, r3
 80043e8:	ea02 0103 	and.w	r1, r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	03ff63ff 	.word	0x03ff63ff

08004404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	d138      	bne.n	800448c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004424:	2302      	movs	r3, #2
 8004426:	e032      	b.n	800448e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d139      	bne.n	8004522 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e033      	b.n	8004524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2224      	movs	r2, #36	; 0x24
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
	...

08004530 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a03      	ldr	r2, [pc, #12]	; (8004548 <HAL_PWR_EnableBkUpAccess+0x18>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	58000400 	.word	0x58000400

0800454c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_PWREx_GetVoltageRange+0x14>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	58000400 	.word	0x58000400

08004564 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004574:	d101      	bne.n	800457a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr
 8004584:	58000400 	.word	0x58000400

08004588 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045b6:	6013      	str	r3, [r2, #0]
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80045c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d2:	d101      	bne.n	80045d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004610:	6013      	str	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800462c:	d101      	bne.n	8004632 <LL_RCC_HSE_IsReady+0x18>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <LL_RCC_HSE_IsReady+0x1a>
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800464a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464e:	6013      	str	r3, [r2, #0]
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004686:	d101      	bne.n	800468c <LL_RCC_HSI_IsReady+0x18>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <LL_RCC_HSI_IsReady+0x1a>
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr

08004696 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	061b      	lsls	r3, r3, #24
 80046ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d101      	bne.n	80046d6 <LL_RCC_LSE_IsReady+0x18>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_RCC_LSE_IsReady+0x1a>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d101      	bne.n	8004738 <LL_RCC_LSI_IsReady+0x18>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <LL_RCC_LSI_IsReady+0x1a>
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004742:	b480      	push	{r7}
 8004744:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6013      	str	r3, [r2, #0]
}
 8004756:	bf00      	nop
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6013      	str	r3, [r2, #0]
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d101      	bne.n	8004790 <LL_RCC_MSI_IsReady+0x16>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <LL_RCC_MSI_IsReady+0x18>
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr

0800479a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800479e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d101      	bne.n	80047b0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80047ba:	b480      	push	{r7}
 80047bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80047be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80047d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80047f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4313      	orrs	r3, r2
 800482a:	608b      	str	r3, [r1, #8]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004836:	b480      	push	{r7}
 8004838:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800483a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr

08004872 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80048a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048ac:	f023 020f 	bic.w	r2, r3, #15
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004922:	4618      	mov	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800492a:	b480      	push	{r7}
 800492c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800492e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004932:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004952:	4618      	mov	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800495a:	b480      	push	{r7}
 800495c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800495e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800497e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800499a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800499e:	6013      	str	r3, [r2, #0]
}
 80049a0:	bf00      	nop
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ba:	d101      	bne.n	80049c0 <LL_RCC_PLL_IsReady+0x18>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <LL_RCC_PLL_IsReady+0x1a>
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	0a1b      	lsrs	r3, r3, #8
 80049d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80049e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0303 	and.w	r3, r3, #3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d101      	bne.n	8004a3c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a5a:	d101      	bne.n	8004a60 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7e:	d101      	bne.n	8004a84 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa0:	d101      	bne.n	8004aa6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac2:	d101      	bne.n	8004ac8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e36f      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ae6:	f7ff fea6 	bl	8004836 <LL_RCC_GetSysClkSource>
 8004aea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aec:	f7ff ff8f 	bl	8004a0e <LL_RCC_PLL_GetMainSource>
 8004af0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80c4 	beq.w	8004c88 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_RCC_OscConfig+0x3e>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d176      	bne.n	8004bfa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d173      	bne.n	8004bfa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e353      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_OscConfig+0x68>
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3a:	e006      	b.n	8004b4a <HAL_RCC_OscConfig+0x76>
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d222      	bcs.n	8004b94 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fd5a 	bl	800560c <RCC_SetFlashLatencyFromMSIRange>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e331      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6c:	f043 0308 	orr.w	r3, r3, #8
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b84:	4313      	orrs	r3, r2
 8004b86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fe2b 	bl	80047e8 <LL_RCC_MSI_SetCalibTrimming>
 8004b92:	e021      	b.n	8004bd8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9e:	f043 0308 	orr.w	r3, r3, #8
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fe12 	bl	80047e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fd1f 	bl	800560c <RCC_SetFlashLatencyFromMSIRange>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e2f6      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004bd8:	f000 fce0 	bl	800559c <HAL_RCC_GetHCLKFreq>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4aa7      	ldr	r2, [pc, #668]	; (8004e7c <HAL_RCC_OscConfig+0x3a8>)
 8004be0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004be2:	4ba7      	ldr	r3, [pc, #668]	; (8004e80 <HAL_RCC_OscConfig+0x3ac>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fbc2 	bl	8003370 <HAL_InitTick>
 8004bec:	4603      	mov	r3, r0
 8004bee:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d047      	beq.n	8004c86 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004bf6:	7cfb      	ldrb	r3, [r7, #19]
 8004bf8:	e2e5      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02c      	beq.n	8004c5c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c02:	f7ff fd9e 	bl	8004742 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c06:	f7fe fbff 	bl	8003408 <HAL_GetTick>
 8004c0a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c0e:	f7fe fbfb 	bl	8003408 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e2d2      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c20:	f7ff fdab 	bl	800477a <LL_RCC_MSI_IsReady>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f1      	beq.n	8004c0e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c34:	f043 0308 	orr.w	r3, r3, #8
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fdc7 	bl	80047e8 <LL_RCC_MSI_SetCalibTrimming>
 8004c5a:	e015      	b.n	8004c88 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c5c:	f7ff fd7f 	bl	800475e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c60:	f7fe fbd2 	bl	8003408 <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c68:	f7fe fbce 	bl	8003408 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e2a5      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c7a:	f7ff fd7e 	bl	800477a <LL_RCC_MSI_IsReady>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f1      	bne.n	8004c68 <HAL_RCC_OscConfig+0x194>
 8004c84:	e000      	b.n	8004c88 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c86:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d058      	beq.n	8004d46 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d005      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1d2>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	d108      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d105      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d14b      	bne.n	8004d46 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e289      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd0:	d102      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x204>
 8004cd2:	f7ff fc86 	bl	80045e2 <LL_RCC_HSE_Enable>
 8004cd6:	e00d      	b.n	8004cf4 <HAL_RCC_OscConfig+0x220>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004ce0:	d104      	bne.n	8004cec <HAL_RCC_OscConfig+0x218>
 8004ce2:	f7ff fc51 	bl	8004588 <LL_RCC_HSE_EnableTcxo>
 8004ce6:	f7ff fc7c 	bl	80045e2 <LL_RCC_HSE_Enable>
 8004cea:	e003      	b.n	8004cf4 <HAL_RCC_OscConfig+0x220>
 8004cec:	f7ff fc87 	bl	80045fe <LL_RCC_HSE_Disable>
 8004cf0:	f7ff fc58 	bl	80045a4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d012      	beq.n	8004d22 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fe fb84 	bl	8003408 <HAL_GetTick>
 8004d00:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fe fb80 	bl	8003408 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e257      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d16:	f7ff fc80 	bl	800461a <LL_RCC_HSE_IsReady>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f1      	beq.n	8004d04 <HAL_RCC_OscConfig+0x230>
 8004d20:	e011      	b.n	8004d46 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d22:	f7fe fb71 	bl	8003408 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2a:	f7fe fb6d 	bl	8003408 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b64      	cmp	r3, #100	; 0x64
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e244      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d3c:	f7ff fc6d 	bl	800461a <LL_RCC_HSE_IsReady>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f1      	bne.n	8004d2a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d046      	beq.n	8004de0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_OscConfig+0x290>
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b0c      	cmp	r3, #12
 8004d5c:	d10e      	bne.n	8004d7c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d10b      	bne.n	8004d7c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e22a      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fc8e 	bl	8004696 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d7a:	e031      	b.n	8004de0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d019      	beq.n	8004db8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d84:	f7ff fc5a 	bl	800463c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fe fb3e 	bl	8003408 <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d90:	f7fe fb3a 	bl	8003408 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e211      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004da2:	f7ff fc67 	bl	8004674 <LL_RCC_HSI_IsReady>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0f1      	beq.n	8004d90 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fc70 	bl	8004696 <LL_RCC_HSI_SetCalibTrimming>
 8004db6:	e013      	b.n	8004de0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db8:	f7ff fc4e 	bl	8004658 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fe fb24 	bl	8003408 <HAL_GetTick>
 8004dc0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fe fb20 	bl	8003408 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1f7      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004dd6:	f7ff fc4d 	bl	8004674 <LL_RCC_HSI_IsReady>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f1      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d06e      	beq.n	8004eca <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d056      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d031      	beq.n	8004e70 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e1d0      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d013      	beq.n	8004e56 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004e2e:	f7ff fc67 	bl	8004700 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e32:	f7fe fae9 	bl	8003408 <HAL_GetTick>
 8004e36:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3a:	f7fe fae5 	bl	8003408 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b11      	cmp	r3, #17
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e1bc      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004e4c:	f7ff fc68 	bl	8004720 <LL_RCC_LSI_IsReady>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f1      	bne.n	8004e3a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5e:	f023 0210 	bic.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e70:	f7ff fc36 	bl	80046e0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e74:	f7fe fac8 	bl	8003408 <HAL_GetTick>
 8004e78:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004e7a:	e00c      	b.n	8004e96 <HAL_RCC_OscConfig+0x3c2>
 8004e7c:	2000000c 	.word	0x2000000c
 8004e80:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e84:	f7fe fac0 	bl	8003408 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b11      	cmp	r3, #17
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e197      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004e96:	f7ff fc43 	bl	8004720 <LL_RCC_LSI_IsReady>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f1      	beq.n	8004e84 <HAL_RCC_OscConfig+0x3b0>
 8004ea0:	e013      	b.n	8004eca <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea2:	f7ff fc2d 	bl	8004700 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea6:	f7fe faaf 	bl	8003408 <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eae:	f7fe faab 	bl	8003408 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b11      	cmp	r3, #17
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e182      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004ec0:	f7ff fc2e 	bl	8004720 <LL_RCC_LSI_IsReady>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f1      	bne.n	8004eae <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80d8 	beq.w	8005088 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ed8:	f7ff fb44 	bl	8004564 <LL_PWR_IsEnabledBkUpAccess>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d113      	bne.n	8004f0a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ee2:	f7ff fb25 	bl	8004530 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee6:	f7fe fa8f 	bl	8003408 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eee:	f7fe fa8b 	bl	8003408 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e162      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004f00:	f7ff fb30 	bl	8004564 <LL_PWR_IsEnabledBkUpAccess>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f1      	beq.n	8004eee <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d07b      	beq.n	800500a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b85      	cmp	r3, #133	; 0x85
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	2b05      	cmp	r3, #5
 8004f20:	d109      	bne.n	8004f36 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f2e:	f043 0304 	orr.w	r3, r3, #4
 8004f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f36:	f7fe fa67 	bl	8003408 <HAL_GetTick>
 8004f3a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004f50:	e00a      	b.n	8004f68 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f52:	f7fe fa59 	bl	8003408 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e12e      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004f68:	f7ff fba9 	bl	80046be <LL_RCC_LSE_IsReady>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ef      	beq.n	8004f52 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2b81      	cmp	r3, #129	; 0x81
 8004f78:	d003      	beq.n	8004f82 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b85      	cmp	r3, #133	; 0x85
 8004f80:	d121      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7fe fa41 	bl	8003408 <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fe fa33 	bl	8003408 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e108      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0ec      	beq.n	8004f9e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004fc4:	e060      	b.n	8005088 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc6:	f7fe fa1f 	bl	8003408 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7fe fa11 	bl	8003408 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0e6      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1ec      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x50e>
 8005008:	e03e      	b.n	8005088 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500a:	f7fe f9fd 	bl	8003408 <HAL_GetTick>
 800500e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800501c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005024:	e00a      	b.n	800503c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005026:	f7fe f9ef 	bl	8003408 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f241 3288 	movw	r2, #5000	; 0x1388
 8005034:	4293      	cmp	r3, r2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0c4      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ec      	bne.n	8005026 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504c:	f7fe f9dc 	bl	8003408 <HAL_GetTick>
 8005050:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005066:	e00a      	b.n	800507e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fe f9ce 	bl	8003408 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e0a3      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800507e:	f7ff fb1e 	bl	80046be <LL_RCC_LSE_IsReady>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ef      	bne.n	8005068 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8099 	beq.w	80051c4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b0c      	cmp	r3, #12
 8005096:	d06c      	beq.n	8005172 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	2b02      	cmp	r3, #2
 800509e:	d14b      	bne.n	8005138 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a0:	f7ff fc74 	bl	800498c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fe f9b0 	bl	8003408 <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fe f9ac 	bl	8003408 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b0a      	cmp	r3, #10
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e083      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80050be:	f7ff fc73 	bl	80049a8 <LL_RCC_PLL_IsReady>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f1      	bne.n	80050ac <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	4b40      	ldr	r3, [pc, #256]	; (80051d0 <HAL_RCC_OscConfig+0x6fc>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050da:	4311      	orrs	r1, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e0:	0212      	lsls	r2, r2, #8
 80050e2:	4311      	orrs	r1, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050e8:	4311      	orrs	r1, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050ee:	4311      	orrs	r1, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050f4:	430a      	orrs	r2, r1
 80050f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fe:	f7ff fc37 	bl	8004970 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005112:	f7fe f979 	bl	8003408 <HAL_GetTick>
 8005116:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511a:	f7fe f975 	bl	8003408 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b0a      	cmp	r3, #10
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e04c      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800512c:	f7ff fc3c 	bl	80049a8 <LL_RCC_PLL_IsReady>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f1      	beq.n	800511a <HAL_RCC_OscConfig+0x646>
 8005136:	e045      	b.n	80051c4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005138:	f7ff fc28 	bl	800498c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fe f964 	bl	8003408 <HAL_GetTick>
 8005140:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005144:	f7fe f960 	bl	8003408 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b0a      	cmp	r3, #10
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e037      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005156:	f7ff fc27 	bl	80049a8 <LL_RCC_PLL_IsReady>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f1      	bne.n	8005144 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800516a:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <HAL_RCC_OscConfig+0x700>)
 800516c:	4013      	ands	r3, r2
 800516e:	60cb      	str	r3, [r1, #12]
 8005170:	e028      	b.n	80051c4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e023      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f003 0203 	and.w	r2, r3, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	429a      	cmp	r2, r3
 8005192:	d115      	bne.n	80051c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	429a      	cmp	r2, r3
 80051a0:	d10e      	bne.n	80051c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d106      	bne.n	80051c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	11c1808c 	.word	0x11c1808c
 80051d4:	eefefffc 	.word	0xeefefffc

080051d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e12c      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051ec:	4b98      	ldr	r3, [pc, #608]	; (8005450 <HAL_RCC_ClockConfig+0x278>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d91b      	bls.n	8005232 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fa:	4b95      	ldr	r3, [pc, #596]	; (8005450 <HAL_RCC_ClockConfig+0x278>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 0207 	bic.w	r2, r3, #7
 8005202:	4993      	ldr	r1, [pc, #588]	; (8005450 <HAL_RCC_ClockConfig+0x278>)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	4313      	orrs	r3, r2
 8005208:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800520a:	f7fe f8fd 	bl	8003408 <HAL_GetTick>
 800520e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005210:	e008      	b.n	8005224 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005212:	f7fe f8f9 	bl	8003408 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e110      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005224:	4b8a      	ldr	r3, [pc, #552]	; (8005450 <HAL_RCC_ClockConfig+0x278>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d1ef      	bne.n	8005212 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fb02 	bl	800484c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005248:	f7fe f8de 	bl	8003408 <HAL_GetTick>
 800524c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005250:	f7fe f8da 	bl	8003408 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0f1      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005262:	f7ff fbdf 	bl	8004a24 <LL_RCC_IsActiveFlag_HPRE>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f1      	beq.n	8005250 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d016      	beq.n	80052a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff faf8 	bl	8004872 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005282:	f7fe f8c1 	bl	8003408 <HAL_GetTick>
 8005286:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800528a:	f7fe f8bd 	bl	8003408 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e0d4      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800529c:	f7ff fbd3 	bl	8004a46 <LL_RCC_IsActiveFlag_C2HPRE>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f1      	beq.n	800528a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d016      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff faf0 	bl	800489c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052bc:	f7fe f8a4 	bl	8003408 <HAL_GetTick>
 80052c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052c4:	f7fe f8a0 	bl	8003408 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0b7      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80052d6:	f7ff fbc8 	bl	8004a6a <LL_RCC_IsActiveFlag_SHDHPRE>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f1      	beq.n	80052c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d016      	beq.n	800531a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fae9 	bl	80048c8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052f6:	f7fe f887 	bl	8003408 <HAL_GetTick>
 80052fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052fe:	f7fe f883 	bl	8003408 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e09a      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005310:	f7ff fbbd 	bl	8004a8e <LL_RCC_IsActiveFlag_PPRE1>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f1      	beq.n	80052fe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d017      	beq.n	8005356 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff fade 	bl	80048ee <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005332:	f7fe f869 	bl	8003408 <HAL_GetTick>
 8005336:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800533a:	f7fe f865 	bl	8003408 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e07c      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800534c:	f7ff fbb0 	bl	8004ab0 <LL_RCC_IsActiveFlag_PPRE2>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f1      	beq.n	800533a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d043      	beq.n	80053ea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d106      	bne.n	8005378 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800536a:	f7ff f956 	bl	800461a <LL_RCC_HSE_IsReady>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d11e      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e066      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d106      	bne.n	800538e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005380:	f7ff fb12 	bl	80049a8 <LL_RCC_PLL_IsReady>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d113      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e05b      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005396:	f7ff f9f0 	bl	800477a <LL_RCC_MSI_IsReady>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d108      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e050      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80053a4:	f7ff f966 	bl	8004674 <LL_RCC_HSI_IsReady>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e049      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff fa2a 	bl	8004810 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053bc:	f7fe f824 	bl	8003408 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c2:	e00a      	b.n	80053da <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c4:	f7fe f820 	bl	8003408 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e035      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	f7ff fa2c 	bl	8004836 <LL_RCC_GetSysClkSource>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d1ec      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ea:	4b19      	ldr	r3, [pc, #100]	; (8005450 <HAL_RCC_ClockConfig+0x278>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d21b      	bcs.n	8005430 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f8:	4b15      	ldr	r3, [pc, #84]	; (8005450 <HAL_RCC_ClockConfig+0x278>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f023 0207 	bic.w	r2, r3, #7
 8005400:	4913      	ldr	r1, [pc, #76]	; (8005450 <HAL_RCC_ClockConfig+0x278>)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	4313      	orrs	r3, r2
 8005406:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005408:	f7fd fffe 	bl	8003408 <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	e008      	b.n	8005422 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005410:	f7fd fffa 	bl	8003408 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e011      	b.n	8005446 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <HAL_RCC_ClockConfig+0x278>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d1ef      	bne.n	8005410 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005430:	f000 f8b4 	bl	800559c <HAL_RCC_GetHCLKFreq>
 8005434:	4603      	mov	r3, r0
 8005436:	4a07      	ldr	r2, [pc, #28]	; (8005454 <HAL_RCC_ClockConfig+0x27c>)
 8005438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <HAL_RCC_ClockConfig+0x280>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fd ff96 	bl	8003370 <HAL_InitTick>
 8005444:	4603      	mov	r3, r0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	58004000 	.word	0x58004000
 8005454:	2000000c 	.word	0x2000000c
 8005458:	20000010 	.word	0x20000010

0800545c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800546a:	f7ff f9e4 	bl	8004836 <LL_RCC_GetSysClkSource>
 800546e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005470:	f7ff facd 	bl	8004a0e <LL_RCC_PLL_GetMainSource>
 8005474:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x2c>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d139      	bne.n	80054f6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d136      	bne.n	80054f6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005488:	f7ff f987 	bl	800479a <LL_RCC_MSI_IsEnabledRangeSelect>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d115      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x62>
 8005492:	f7ff f982 	bl	800479a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	d106      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x4e>
 800549c:	f7ff f98d 	bl	80047ba <LL_RCC_MSI_GetRange>
 80054a0:	4603      	mov	r3, r0
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	e005      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x5a>
 80054aa:	f7ff f991 	bl	80047d0 <LL_RCC_MSI_GetRangeAfterStandby>
 80054ae:	4603      	mov	r3, r0
 80054b0:	0a1b      	lsrs	r3, r3, #8
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	4a36      	ldr	r2, [pc, #216]	; (8005590 <HAL_RCC_GetSysClockFreq+0x134>)
 80054b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054bc:	e014      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x8c>
 80054be:	f7ff f96c 	bl	800479a <LL_RCC_MSI_IsEnabledRangeSelect>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_GetSysClockFreq+0x7a>
 80054c8:	f7ff f977 	bl	80047ba <LL_RCC_MSI_GetRange>
 80054cc:	4603      	mov	r3, r0
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	e005      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0x86>
 80054d6:	f7ff f97b 	bl	80047d0 <LL_RCC_MSI_GetRangeAfterStandby>
 80054da:	4603      	mov	r3, r0
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	4a2b      	ldr	r2, [pc, #172]	; (8005590 <HAL_RCC_GetSysClockFreq+0x134>)
 80054e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d115      	bne.n	800551c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054f4:	e012      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d102      	bne.n	8005502 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <HAL_RCC_GetSysClockFreq+0x138>)
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e00c      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d109      	bne.n	800551c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005508:	f7ff f85a 	bl	80045c0 <LL_RCC_HSE_IsEnabledDiv2>
 800550c:	4603      	mov	r3, r0
 800550e:	2b01      	cmp	r3, #1
 8005510:	d102      	bne.n	8005518 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005512:	4b20      	ldr	r3, [pc, #128]	; (8005594 <HAL_RCC_GetSysClockFreq+0x138>)
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e001      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005518:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <HAL_RCC_GetSysClockFreq+0x13c>)
 800551a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800551c:	f7ff f98b 	bl	8004836 <LL_RCC_GetSysClkSource>
 8005520:	4603      	mov	r3, r0
 8005522:	2b0c      	cmp	r3, #12
 8005524:	d12f      	bne.n	8005586 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005526:	f7ff fa72 	bl	8004a0e <LL_RCC_PLL_GetMainSource>
 800552a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d003      	beq.n	800553a <HAL_RCC_GetSysClockFreq+0xde>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d003      	beq.n	8005540 <HAL_RCC_GetSysClockFreq+0xe4>
 8005538:	e00d      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800553a:	4b16      	ldr	r3, [pc, #88]	; (8005594 <HAL_RCC_GetSysClockFreq+0x138>)
 800553c:	60fb      	str	r3, [r7, #12]
        break;
 800553e:	e00d      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005540:	f7ff f83e 	bl	80045c0 <LL_RCC_HSE_IsEnabledDiv2>
 8005544:	4603      	mov	r3, r0
 8005546:	2b01      	cmp	r3, #1
 8005548:	d102      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_RCC_GetSysClockFreq+0x138>)
 800554c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800554e:	e005      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005550:	4b11      	ldr	r3, [pc, #68]	; (8005598 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005552:	60fb      	str	r3, [r7, #12]
        break;
 8005554:	e002      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	60fb      	str	r3, [r7, #12]
        break;
 800555a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800555c:	f7ff fa35 	bl	80049ca <LL_RCC_PLL_GetN>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	fb03 f402 	mul.w	r4, r3, r2
 8005568:	f7ff fa46 	bl	80049f8 <LL_RCC_PLL_GetDivider>
 800556c:	4603      	mov	r3, r0
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	3301      	adds	r3, #1
 8005572:	fbb4 f4f3 	udiv	r4, r4, r3
 8005576:	f7ff fa34 	bl	80049e2 <LL_RCC_PLL_GetR>
 800557a:	4603      	mov	r3, r0
 800557c:	0f5b      	lsrs	r3, r3, #29
 800557e:	3301      	adds	r3, #1
 8005580:	fbb4 f3f3 	udiv	r3, r4, r3
 8005584:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005586:	697b      	ldr	r3, [r7, #20]
}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}
 8005590:	080092fc 	.word	0x080092fc
 8005594:	00f42400 	.word	0x00f42400
 8005598:	01e84800 	.word	0x01e84800

0800559c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800559c:	b598      	push	{r3, r4, r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80055a0:	f7ff ff5c 	bl	800545c <HAL_RCC_GetSysClockFreq>
 80055a4:	4604      	mov	r4, r0
 80055a6:	f7ff f9b5 	bl	8004914 <LL_RCC_GetAHBPrescaler>
 80055aa:	4603      	mov	r3, r0
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	4a03      	ldr	r2, [pc, #12]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80055b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd98      	pop	{r3, r4, r7, pc}
 80055c0:	0800929c 	.word	0x0800929c

080055c4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b598      	push	{r3, r4, r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80055c8:	f7ff ffe8 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055cc:	4604      	mov	r4, r0
 80055ce:	f7ff f9b9 	bl	8004944 <LL_RCC_GetAPB1Prescaler>
 80055d2:	4603      	mov	r3, r0
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	4a03      	ldr	r2, [pc, #12]	; (80055e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd98      	pop	{r3, r4, r7, pc}
 80055e4:	080092dc 	.word	0x080092dc

080055e8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e8:	b598      	push	{r3, r4, r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80055ec:	f7ff ffd6 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055f0:	4604      	mov	r4, r0
 80055f2:	f7ff f9b2 	bl	800495a <LL_RCC_GetAPB2Prescaler>
 80055f6:	4603      	mov	r3, r0
 80055f8:	0adb      	lsrs	r3, r3, #11
 80055fa:	4a03      	ldr	r2, [pc, #12]	; (8005608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005600:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd98      	pop	{r3, r4, r7, pc}
 8005608:	080092dc 	.word	0x080092dc

0800560c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	4a10      	ldr	r2, [pc, #64]	; (8005660 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005622:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005624:	f7ff f981 	bl	800492a <LL_RCC_GetAHB3Prescaler>
 8005628:	4603      	mov	r3, r0
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4a09      	ldr	r2, [pc, #36]	; (8005668 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0c9c      	lsrs	r4, r3, #18
 8005648:	f7fe ff80 	bl	800454c <HAL_PWREx_GetVoltageRange>
 800564c:	4603      	mov	r3, r0
 800564e:	4619      	mov	r1, r3
 8005650:	4620      	mov	r0, r4
 8005652:	f000 f80b 	bl	800566c <RCC_SetFlashLatency>
 8005656:	4603      	mov	r3, r0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bd90      	pop	{r4, r7, pc}
 8005660:	080092fc 	.word	0x080092fc
 8005664:	0800929c 	.word	0x0800929c
 8005668:	431bde83 	.word	0x431bde83

0800566c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	; 0x38
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005676:	4a3a      	ldr	r2, [pc, #232]	; (8005760 <RCC_SetFlashLatency+0xf4>)
 8005678:	f107 0320 	add.w	r3, r7, #32
 800567c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005680:	6018      	str	r0, [r3, #0]
 8005682:	3304      	adds	r3, #4
 8005684:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005686:	4a37      	ldr	r2, [pc, #220]	; (8005764 <RCC_SetFlashLatency+0xf8>)
 8005688:	f107 0318 	add.w	r3, r7, #24
 800568c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005690:	6018      	str	r0, [r3, #0]
 8005692:	3304      	adds	r3, #4
 8005694:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005696:	4a34      	ldr	r2, [pc, #208]	; (8005768 <RCC_SetFlashLatency+0xfc>)
 8005698:	f107 030c 	add.w	r3, r7, #12
 800569c:	ca07      	ldmia	r2, {r0, r1, r2}
 800569e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80056a2:	2300      	movs	r3, #0
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ac:	d11b      	bne.n	80056e6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
 80056b2:	e014      	b.n	80056de <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	3338      	adds	r3, #56	; 0x38
 80056ba:	443b      	add	r3, r7
 80056bc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80056c0:	461a      	mov	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d807      	bhi.n	80056d8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	3338      	adds	r3, #56	; 0x38
 80056ce:	443b      	add	r3, r7
 80056d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056d6:	e021      	b.n	800571c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	3301      	adds	r3, #1
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d9e7      	bls.n	80056b4 <RCC_SetFlashLatency+0x48>
 80056e4:	e01a      	b.n	800571c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80056e6:	2300      	movs	r3, #0
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ea:	e014      	b.n	8005716 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	3338      	adds	r3, #56	; 0x38
 80056f2:	443b      	add	r3, r7
 80056f4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80056f8:	461a      	mov	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d807      	bhi.n	8005710 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	3338      	adds	r3, #56	; 0x38
 8005706:	443b      	add	r3, r7
 8005708:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800570e:	e005      	b.n	800571c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	3301      	adds	r3, #1
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b02      	cmp	r3, #2
 800571a:	d9e7      	bls.n	80056ec <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800571c:	4b13      	ldr	r3, [pc, #76]	; (800576c <RCC_SetFlashLatency+0x100>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f023 0207 	bic.w	r2, r3, #7
 8005724:	4911      	ldr	r1, [pc, #68]	; (800576c <RCC_SetFlashLatency+0x100>)
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	4313      	orrs	r3, r2
 800572a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800572c:	f7fd fe6c 	bl	8003408 <HAL_GetTick>
 8005730:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005732:	e008      	b.n	8005746 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005734:	f7fd fe68 	bl	8003408 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e007      	b.n	8005756 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <RCC_SetFlashLatency+0x100>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005750:	429a      	cmp	r2, r3
 8005752:	d1ef      	bne.n	8005734 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3738      	adds	r7, #56	; 0x38
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	08009278 	.word	0x08009278
 8005764:	08009280 	.word	0x08009280
 8005768:	08009288 	.word	0x08009288
 800576c:	58004000 	.word	0x58004000

08005770 <LL_RCC_LSE_IsReady>:
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b02      	cmp	r3, #2
 8005782:	d101      	bne.n	8005788 <LL_RCC_LSE_IsReady+0x18>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <LL_RCC_LSE_IsReady+0x1a>
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <LL_RCC_SetUSARTClockSource>:
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800579a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	43db      	mvns	r3, r3
 80057a8:	401a      	ands	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <LL_RCC_SetI2SClockSource>:
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <LL_RCC_SetLPUARTClockSource>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <LL_RCC_SetI2CClockSource>:
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800581e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005822:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800582e:	43db      	mvns	r3, r3
 8005830:	401a      	ands	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800583a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <LL_RCC_SetLPTIMClockSource>:
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	43db      	mvns	r3, r3
 8005866:	401a      	ands	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	041b      	lsls	r3, r3, #16
 800586c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <LL_RCC_SetRNGClockSource>:
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <LL_RCC_SetADCClockSource>:
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <LL_RCC_SetRTCClockSource>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <LL_RCC_GetRTCClockSource>:
{
 80058fe:	b480      	push	{r7}
 8005900:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800590e:	4618      	mov	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <LL_RCC_ForceBackupDomainReset>:
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800591a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800592e:	bf00      	nop
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr

08005936 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005936:	b480      	push	{r7}
 8005938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800593a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800594e:	bf00      	nop
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr
	...

08005958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005964:	2300      	movs	r3, #0
 8005966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005968:	2300      	movs	r3, #0
 800596a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d058      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005978:	f7fe fdda 	bl	8004530 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800597c:	f7fd fd44 	bl	8003408 <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005982:	e009      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005984:	f7fd fd40 	bl	8003408 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d902      	bls.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	74fb      	strb	r3, [r7, #19]
        break;
 8005996:	e006      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005998:	4b7b      	ldr	r3, [pc, #492]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a4:	d1ee      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80059a6:	7cfb      	ldrb	r3, [r7, #19]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d13c      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80059ac:	f7ff ffa7 	bl	80058fe <LL_RCC_GetRTCClockSource>
 80059b0:	4602      	mov	r2, r0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d00f      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c8:	f7ff ffa5 	bl	8005916 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059cc:	f7ff ffb3 	bl	8005936 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d014      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fd fd10 	bl	8003408 <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80059ea:	e00b      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ec:	f7fd fd0c 	bl	8003408 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d902      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	74fb      	strb	r3, [r7, #19]
            break;
 8005a02:	e004      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005a04:	f7ff feb4 	bl	8005770 <LL_RCC_LSE_IsReady>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d1ee      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005a0e:	7cfb      	ldrb	r3, [r7, #19]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff ff5b 	bl	80058d4 <LL_RCC_SetRTCClockSource>
 8005a1e:	e004      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a20:	7cfb      	ldrb	r3, [r7, #19]
 8005a22:	74bb      	strb	r3, [r7, #18]
 8005a24:	e001      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	7cfb      	ldrb	r3, [r7, #19]
 8005a28:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fea9 	bl	8005792 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fe9e 	bl	8005792 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fec0 	bl	80057ec <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fee6 	bl	800584e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d004      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fedb 	bl	800584e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fed0 	bl	800584e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fea9 	bl	8005816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fe9e 	bl	8005816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fe93 	bl	8005816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d011      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fe5e 	bl	80057c2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0e:	d107      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fea5 	bl	8005880 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b4c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fea3 	bl	80058aa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005b7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	58000400 	.word	0x58000400

08005b8c <LL_RCC_GetUSARTClockSource>:
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	4313      	orrs	r3, r2
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <LL_RCC_GetLPUARTClockSource>:
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4013      	ands	r3, r2
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e042      	b.n	8005c66 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fb fe86 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	; 0x24
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f8b3 	bl	8005d7c <UART_SetConfig>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e022      	b.n	8005c66 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fb1b 	bl	8006264 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0201 	orr.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fba1 	bl	80063a6 <UART_CheckIdleState>
 8005c64:	4603      	mov	r3, r0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b08a      	sub	sp, #40	; 0x28
 8005c72:	af02      	add	r7, sp, #8
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d173      	bne.n	8005d70 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_UART_Transmit+0x26>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e06c      	b.n	8005d72 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2221      	movs	r2, #33	; 0x21
 8005ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ca8:	f7fd fbae 	bl	8003408 <HAL_GetTick>
 8005cac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc6:	d108      	bne.n	8005cda <HAL_UART_Transmit+0x6c>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e003      	b.n	8005ce2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ce2:	e02c      	b.n	8005d3e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fba7 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e039      	b.n	8005d72 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	3302      	adds	r3, #2
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	e007      	b.n	8005d2c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1cc      	bne.n	8005ce4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2200      	movs	r2, #0
 8005d52:	2140      	movs	r1, #64	; 0x40
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fb74 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e006      	b.n	8005d72 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e000      	b.n	8005d72 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d80:	b08c      	sub	sp, #48	; 0x30
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b94      	ldr	r3, [pc, #592]	; (8005ffc <UART_SetConfig+0x280>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a89      	ldr	r2, [pc, #548]	; (8006000 <UART_SetConfig+0x284>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de4:	4313      	orrs	r3, r2
 8005de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005df2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	f023 010f 	bic.w	r1, r3, #15
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a7a      	ldr	r2, [pc, #488]	; (8006004 <UART_SetConfig+0x288>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d127      	bne.n	8005e70 <UART_SetConfig+0xf4>
 8005e20:	2003      	movs	r0, #3
 8005e22:	f7ff feb3 	bl	8005b8c <LL_RCC_GetUSARTClockSource>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d81b      	bhi.n	8005e68 <UART_SetConfig+0xec>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0xbc>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e49 	.word	0x08005e49
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	08005e51 	.word	0x08005e51
 8005e44:	08005e61 	.word	0x08005e61
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4e:	e080      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005e50:	2302      	movs	r3, #2
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e56:	e07c      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5e:	e078      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e66:	e074      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e6e:	e070      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a64      	ldr	r2, [pc, #400]	; (8006008 <UART_SetConfig+0x28c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d138      	bne.n	8005eec <UART_SetConfig+0x170>
 8005e7a:	200c      	movs	r0, #12
 8005e7c:	f7ff fe86 	bl	8005b8c <LL_RCC_GetUSARTClockSource>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005e86:	2b0c      	cmp	r3, #12
 8005e88:	d82c      	bhi.n	8005ee4 <UART_SetConfig+0x168>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x114>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005ec5 	.word	0x08005ec5
 8005e94:	08005ee5 	.word	0x08005ee5
 8005e98:	08005ee5 	.word	0x08005ee5
 8005e9c:	08005ee5 	.word	0x08005ee5
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005ee5 	.word	0x08005ee5
 8005ea8:	08005ee5 	.word	0x08005ee5
 8005eac:	08005ee5 	.word	0x08005ee5
 8005eb0:	08005ecd 	.word	0x08005ecd
 8005eb4:	08005ee5 	.word	0x08005ee5
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	08005ee5 	.word	0x08005ee5
 8005ec0:	08005edd 	.word	0x08005edd
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eca:	e042      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ed2:	e03e      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eda:	e03a      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005edc:	2308      	movs	r3, #8
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee2:	e036      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eea:	e032      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a43      	ldr	r2, [pc, #268]	; (8006000 <UART_SetConfig+0x284>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d12a      	bne.n	8005f4c <UART_SetConfig+0x1d0>
 8005ef6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005efa:	f7ff fe59 	bl	8005bb0 <LL_RCC_GetLPUARTClockSource>
 8005efe:	4603      	mov	r3, r0
 8005f00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f04:	d01a      	beq.n	8005f3c <UART_SetConfig+0x1c0>
 8005f06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f0a:	d81b      	bhi.n	8005f44 <UART_SetConfig+0x1c8>
 8005f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f10:	d00c      	beq.n	8005f2c <UART_SetConfig+0x1b0>
 8005f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f16:	d815      	bhi.n	8005f44 <UART_SetConfig+0x1c8>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <UART_SetConfig+0x1a8>
 8005f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f20:	d008      	beq.n	8005f34 <UART_SetConfig+0x1b8>
 8005f22:	e00f      	b.n	8005f44 <UART_SetConfig+0x1c8>
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f2a:	e012      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f32:	e00e      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005f34:	2304      	movs	r3, #4
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f3a:	e00a      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f42:	e006      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005f44:	2310      	movs	r3, #16
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	e002      	b.n	8005f52 <UART_SetConfig+0x1d6>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a2a      	ldr	r2, [pc, #168]	; (8006000 <UART_SetConfig+0x284>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	f040 80a4 	bne.w	80060a6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d823      	bhi.n	8005fae <UART_SetConfig+0x232>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0x1f0>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005faf 	.word	0x08005faf
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005faf 	.word	0x08005faf
 8005f7c:	08005f9f 	.word	0x08005f9f
 8005f80:	08005faf 	.word	0x08005faf
 8005f84:	08005faf 	.word	0x08005faf
 8005f88:	08005faf 	.word	0x08005faf
 8005f8c:	08005fa7 	.word	0x08005fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7ff fb18 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8005f94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f96:	e010      	b.n	8005fba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f98:	4b1c      	ldr	r3, [pc, #112]	; (800600c <UART_SetConfig+0x290>)
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f9c:	e00d      	b.n	8005fba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f9e:	f7ff fa5d 	bl	800545c <HAL_RCC_GetSysClockFreq>
 8005fa2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fa4:	e009      	b.n	8005fba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fac:	e005      	b.n	8005fba <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8137 	beq.w	8006230 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <UART_SetConfig+0x294>)
 8005fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	4413      	add	r3, r2
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d305      	bcc.n	8005ff2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d910      	bls.n	8006014 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ff8:	e11a      	b.n	8006230 <UART_SetConfig+0x4b4>
 8005ffa:	bf00      	nop
 8005ffc:	cfff69f3 	.word	0xcfff69f3
 8006000:	40008000 	.word	0x40008000
 8006004:	40013800 	.word	0x40013800
 8006008:	40004400 	.word	0x40004400
 800600c:	00f42400 	.word	0x00f42400
 8006010:	0800933c 	.word	0x0800933c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	2200      	movs	r2, #0
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	60fa      	str	r2, [r7, #12]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	4a8e      	ldr	r2, [pc, #568]	; (800625c <UART_SetConfig+0x4e0>)
 8006022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006026:	b29b      	uxth	r3, r3
 8006028:	2200      	movs	r2, #0
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006036:	f7fb f889 	bl	800114c <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	020b      	lsls	r3, r1, #8
 800604c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006050:	0202      	lsls	r2, r0, #8
 8006052:	6979      	ldr	r1, [r7, #20]
 8006054:	6849      	ldr	r1, [r1, #4]
 8006056:	0849      	lsrs	r1, r1, #1
 8006058:	2000      	movs	r0, #0
 800605a:	460c      	mov	r4, r1
 800605c:	4605      	mov	r5, r0
 800605e:	eb12 0804 	adds.w	r8, r2, r4
 8006062:	eb43 0905 	adc.w	r9, r3, r5
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	469a      	mov	sl, r3
 800606e:	4693      	mov	fp, r2
 8006070:	4652      	mov	r2, sl
 8006072:	465b      	mov	r3, fp
 8006074:	4640      	mov	r0, r8
 8006076:	4649      	mov	r1, r9
 8006078:	f7fb f868 	bl	800114c <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4613      	mov	r3, r2
 8006082:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608a:	d308      	bcc.n	800609e <UART_SetConfig+0x322>
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006092:	d204      	bcs.n	800609e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6a3a      	ldr	r2, [r7, #32]
 800609a:	60da      	str	r2, [r3, #12]
 800609c:	e0c8      	b.n	8006230 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060a4:	e0c4      	b.n	8006230 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ae:	d167      	bne.n	8006180 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80060b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d828      	bhi.n	800610a <UART_SetConfig+0x38e>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x344>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	0800610b 	.word	0x0800610b
 80060d0:	080060fb 	.word	0x080060fb
 80060d4:	0800610b 	.word	0x0800610b
 80060d8:	0800610b 	.word	0x0800610b
 80060dc:	0800610b 	.word	0x0800610b
 80060e0:	08006103 	.word	0x08006103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7ff fa6e 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 80060e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060ea:	e014      	b.n	8006116 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ec:	f7ff fa7c 	bl	80055e8 <HAL_RCC_GetPCLK2Freq>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060f2:	e010      	b.n	8006116 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f4:	4b5a      	ldr	r3, [pc, #360]	; (8006260 <UART_SetConfig+0x4e4>)
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060f8:	e00d      	b.n	8006116 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fa:	f7ff f9af 	bl	800545c <HAL_RCC_GetSysClockFreq>
 80060fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006100:	e009      	b.n	8006116 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006108:	e005      	b.n	8006116 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8089 	beq.w	8006230 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	4a4e      	ldr	r2, [pc, #312]	; (800625c <UART_SetConfig+0x4e0>)
 8006124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006128:	461a      	mov	r2, r3
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006130:	005a      	lsls	r2, r3, #1
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	441a      	add	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006142:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2b0f      	cmp	r3, #15
 8006148:	d916      	bls.n	8006178 <UART_SetConfig+0x3fc>
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d212      	bcs.n	8006178 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f023 030f 	bic.w	r3, r3, #15
 800615a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	b29b      	uxth	r3, r3
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	b29a      	uxth	r2, r3
 8006168:	8bfb      	ldrh	r3, [r7, #30]
 800616a:	4313      	orrs	r3, r2
 800616c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	8bfa      	ldrh	r2, [r7, #30]
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	e05b      	b.n	8006230 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800617e:	e057      	b.n	8006230 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006184:	2b08      	cmp	r3, #8
 8006186:	d828      	bhi.n	80061da <UART_SetConfig+0x45e>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0x414>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061b5 	.word	0x080061b5
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061c5 	.word	0x080061c5
 800619c:	080061db 	.word	0x080061db
 80061a0:	080061cb 	.word	0x080061cb
 80061a4:	080061db 	.word	0x080061db
 80061a8:	080061db 	.word	0x080061db
 80061ac:	080061db 	.word	0x080061db
 80061b0:	080061d3 	.word	0x080061d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b4:	f7ff fa06 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 80061b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061ba:	e014      	b.n	80061e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061bc:	f7ff fa14 	bl	80055e8 <HAL_RCC_GetPCLK2Freq>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061c2:	e010      	b.n	80061e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c4:	4b26      	ldr	r3, [pc, #152]	; (8006260 <UART_SetConfig+0x4e4>)
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061c8:	e00d      	b.n	80061e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ca:	f7ff f947 	bl	800545c <HAL_RCC_GetSysClockFreq>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061d0:	e009      	b.n	80061e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061d8:	e005      	b.n	80061e6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061e4:	bf00      	nop
    }

    if (pclk != 0U)
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d021      	beq.n	8006230 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	4a1a      	ldr	r2, [pc, #104]	; (800625c <UART_SetConfig+0x4e0>)
 80061f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	441a      	add	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d909      	bls.n	800622a <UART_SetConfig+0x4ae>
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621c:	d205      	bcs.n	800622a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	b29a      	uxth	r2, r3
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60da      	str	r2, [r3, #12]
 8006228:	e002      	b.n	8006230 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2201      	movs	r2, #1
 8006234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2201      	movs	r2, #1
 800623c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2200      	movs	r2, #0
 800624a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800624c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006250:	4618      	mov	r0, r3
 8006252:	3730      	adds	r7, #48	; 0x30
 8006254:	46bd      	mov	sp, r7
 8006256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800625a:	bf00      	nop
 800625c:	0800933c 	.word	0x0800933c
 8006260:	00f42400 	.word	0x00f42400

08006264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01a      	beq.n	800637a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006362:	d10a      	bne.n	800637a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	605a      	str	r2, [r3, #4]
  }
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af02      	add	r7, sp, #8
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063b6:	f7fd f827 	bl	8003408 <HAL_GetTick>
 80063ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d10e      	bne.n	80063e8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f832 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e028      	b.n	800643a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d10e      	bne.n	8006414 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f81c 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e012      	b.n	800643a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b09c      	sub	sp, #112	; 0x70
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	4613      	mov	r3, r2
 8006450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006452:	e0a9      	b.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	f000 80a5 	beq.w	80065a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645e:	f7fc ffd3 	bl	8003408 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800646a:	429a      	cmp	r2, r3
 800646c:	d302      	bcc.n	8006474 <UART_WaitOnFlagUntilTimeout+0x32>
 800646e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006470:	2b00      	cmp	r3, #0
 8006472:	d140      	bne.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006488:	667b      	str	r3, [r7, #100]	; 0x64
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006494:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e6      	bne.n	8006474 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	663b      	str	r3, [r7, #96]	; 0x60
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80064c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e5      	bne.n	80064a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e069      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d051      	beq.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006512:	d149      	bne.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800651c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
 800653e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e6      	bne.n	800651e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	613b      	str	r3, [r7, #16]
   return(result);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	66bb      	str	r3, [r7, #104]	; 0x68
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006570:	623a      	str	r2, [r7, #32]
 8006572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	69f9      	ldr	r1, [r7, #28]
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	61bb      	str	r3, [r7, #24]
   return(result);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e5      	bne.n	8006550 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e010      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69da      	ldr	r2, [r3, #28]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4013      	ands	r3, r2
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	f43f af46 	beq.w	8006454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3770      	adds	r7, #112	; 0x70
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e027      	b.n	8006638 <HAL_UARTEx_DisableFifoMode+0x66>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2224      	movs	r2, #36	; 0x24
 80065f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0201 	bic.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006616:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr

08006642 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006656:	2302      	movs	r3, #2
 8006658:	e02d      	b.n	80066b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2224      	movs	r2, #36	; 0x24
 8006666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f850 	bl	800673c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e02d      	b.n	8006732 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2224      	movs	r2, #36	; 0x24
 80066e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f812 	bl	800673c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006748:	2b00      	cmp	r3, #0
 800674a:	d108      	bne.n	800675e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800675c:	e031      	b.n	80067c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800675e:	2308      	movs	r3, #8
 8006760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006762:	2308      	movs	r3, #8
 8006764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	0e5b      	lsrs	r3, r3, #25
 800676e:	b2db      	uxtb	r3, r3
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	0f5b      	lsrs	r3, r3, #29
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	7b3a      	ldrb	r2, [r7, #12]
 800678a:	4910      	ldr	r1, [pc, #64]	; (80067cc <UARTEx_SetNbDataToProcess+0x90>)
 800678c:	5c8a      	ldrb	r2, [r1, r2]
 800678e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006792:	7b3a      	ldrb	r2, [r7, #12]
 8006794:	490e      	ldr	r1, [pc, #56]	; (80067d0 <UARTEx_SetNbDataToProcess+0x94>)
 8006796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006798:	fb93 f3f2 	sdiv	r3, r3, r2
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	7b7a      	ldrb	r2, [r7, #13]
 80067a8:	4908      	ldr	r1, [pc, #32]	; (80067cc <UARTEx_SetNbDataToProcess+0x90>)
 80067aa:	5c8a      	ldrb	r2, [r1, r2]
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067b0:	7b7a      	ldrb	r2, [r7, #13]
 80067b2:	4907      	ldr	r1, [pc, #28]	; (80067d0 <UARTEx_SetNbDataToProcess+0x94>)
 80067b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr
 80067cc:	08009354 	.word	0x08009354
 80067d0:	0800935c 	.word	0x0800935c

080067d4 <__cvt>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	461f      	mov	r7, r3
 80067de:	4614      	mov	r4, r2
 80067e0:	bfb8      	it	lt
 80067e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80067e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80067ea:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80067ee:	bfb6      	itet	lt
 80067f0:	461f      	movlt	r7, r3
 80067f2:	2300      	movge	r3, #0
 80067f4:	232d      	movlt	r3, #45	; 0x2d
 80067f6:	7013      	strb	r3, [r2, #0]
 80067f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067fa:	f023 0820 	bic.w	r8, r3, #32
 80067fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006802:	d005      	beq.n	8006810 <__cvt+0x3c>
 8006804:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006808:	d100      	bne.n	800680c <__cvt+0x38>
 800680a:	3501      	adds	r5, #1
 800680c:	2302      	movs	r3, #2
 800680e:	e000      	b.n	8006812 <__cvt+0x3e>
 8006810:	2303      	movs	r3, #3
 8006812:	aa07      	add	r2, sp, #28
 8006814:	9204      	str	r2, [sp, #16]
 8006816:	aa06      	add	r2, sp, #24
 8006818:	e9cd a202 	strd	sl, r2, [sp, #8]
 800681c:	e9cd 3500 	strd	r3, r5, [sp]
 8006820:	4622      	mov	r2, r4
 8006822:	463b      	mov	r3, r7
 8006824:	f000 ff3c 	bl	80076a0 <_dtoa_r>
 8006828:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800682c:	4606      	mov	r6, r0
 800682e:	d102      	bne.n	8006836 <__cvt+0x62>
 8006830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006832:	07db      	lsls	r3, r3, #31
 8006834:	d522      	bpl.n	800687c <__cvt+0xa8>
 8006836:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800683a:	eb06 0905 	add.w	r9, r6, r5
 800683e:	d110      	bne.n	8006862 <__cvt+0x8e>
 8006840:	7833      	ldrb	r3, [r6, #0]
 8006842:	2b30      	cmp	r3, #48	; 0x30
 8006844:	d10a      	bne.n	800685c <__cvt+0x88>
 8006846:	2200      	movs	r2, #0
 8006848:	2300      	movs	r3, #0
 800684a:	4620      	mov	r0, r4
 800684c:	4639      	mov	r1, r7
 800684e:	f7fa f913 	bl	8000a78 <__aeabi_dcmpeq>
 8006852:	b918      	cbnz	r0, 800685c <__cvt+0x88>
 8006854:	f1c5 0501 	rsb	r5, r5, #1
 8006858:	f8ca 5000 	str.w	r5, [sl]
 800685c:	f8da 3000 	ldr.w	r3, [sl]
 8006860:	4499      	add	r9, r3
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4620      	mov	r0, r4
 8006868:	4639      	mov	r1, r7
 800686a:	f7fa f905 	bl	8000a78 <__aeabi_dcmpeq>
 800686e:	b108      	cbz	r0, 8006874 <__cvt+0xa0>
 8006870:	f8cd 901c 	str.w	r9, [sp, #28]
 8006874:	2230      	movs	r2, #48	; 0x30
 8006876:	9b07      	ldr	r3, [sp, #28]
 8006878:	454b      	cmp	r3, r9
 800687a:	d307      	bcc.n	800688c <__cvt+0xb8>
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006880:	1b9b      	subs	r3, r3, r6
 8006882:	4630      	mov	r0, r6
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	b008      	add	sp, #32
 8006888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688c:	1c59      	adds	r1, r3, #1
 800688e:	9107      	str	r1, [sp, #28]
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	e7f0      	b.n	8006876 <__cvt+0xa2>

08006894 <__exponent>:
 8006894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006896:	4603      	mov	r3, r0
 8006898:	2900      	cmp	r1, #0
 800689a:	bfb8      	it	lt
 800689c:	4249      	neglt	r1, r1
 800689e:	f803 2b02 	strb.w	r2, [r3], #2
 80068a2:	bfb4      	ite	lt
 80068a4:	222d      	movlt	r2, #45	; 0x2d
 80068a6:	222b      	movge	r2, #43	; 0x2b
 80068a8:	2909      	cmp	r1, #9
 80068aa:	7042      	strb	r2, [r0, #1]
 80068ac:	dd2a      	ble.n	8006904 <__exponent+0x70>
 80068ae:	f10d 0207 	add.w	r2, sp, #7
 80068b2:	4617      	mov	r7, r2
 80068b4:	260a      	movs	r6, #10
 80068b6:	4694      	mov	ip, r2
 80068b8:	fb91 f5f6 	sdiv	r5, r1, r6
 80068bc:	fb06 1415 	mls	r4, r6, r5, r1
 80068c0:	3430      	adds	r4, #48	; 0x30
 80068c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80068c6:	460c      	mov	r4, r1
 80068c8:	2c63      	cmp	r4, #99	; 0x63
 80068ca:	f102 32ff 	add.w	r2, r2, #4294967295
 80068ce:	4629      	mov	r1, r5
 80068d0:	dcf1      	bgt.n	80068b6 <__exponent+0x22>
 80068d2:	3130      	adds	r1, #48	; 0x30
 80068d4:	f1ac 0402 	sub.w	r4, ip, #2
 80068d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80068dc:	1c41      	adds	r1, r0, #1
 80068de:	4622      	mov	r2, r4
 80068e0:	42ba      	cmp	r2, r7
 80068e2:	d30a      	bcc.n	80068fa <__exponent+0x66>
 80068e4:	f10d 0209 	add.w	r2, sp, #9
 80068e8:	eba2 020c 	sub.w	r2, r2, ip
 80068ec:	42bc      	cmp	r4, r7
 80068ee:	bf88      	it	hi
 80068f0:	2200      	movhi	r2, #0
 80068f2:	4413      	add	r3, r2
 80068f4:	1a18      	subs	r0, r3, r0
 80068f6:	b003      	add	sp, #12
 80068f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80068fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006902:	e7ed      	b.n	80068e0 <__exponent+0x4c>
 8006904:	2330      	movs	r3, #48	; 0x30
 8006906:	3130      	adds	r1, #48	; 0x30
 8006908:	7083      	strb	r3, [r0, #2]
 800690a:	70c1      	strb	r1, [r0, #3]
 800690c:	1d03      	adds	r3, r0, #4
 800690e:	e7f1      	b.n	80068f4 <__exponent+0x60>

08006910 <_printf_float>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	b091      	sub	sp, #68	; 0x44
 8006916:	460c      	mov	r4, r1
 8006918:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800691c:	4616      	mov	r6, r2
 800691e:	461f      	mov	r7, r3
 8006920:	4605      	mov	r5, r0
 8006922:	f000 fdc1 	bl	80074a8 <_localeconv_r>
 8006926:	6803      	ldr	r3, [r0, #0]
 8006928:	9309      	str	r3, [sp, #36]	; 0x24
 800692a:	4618      	mov	r0, r3
 800692c:	f7f9 fc78 	bl	8000220 <strlen>
 8006930:	2300      	movs	r3, #0
 8006932:	930e      	str	r3, [sp, #56]	; 0x38
 8006934:	f8d8 3000 	ldr.w	r3, [r8]
 8006938:	900a      	str	r0, [sp, #40]	; 0x28
 800693a:	3307      	adds	r3, #7
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	f103 0208 	add.w	r2, r3, #8
 8006944:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006948:	f8d4 b000 	ldr.w	fp, [r4]
 800694c:	f8c8 2000 	str.w	r2, [r8]
 8006950:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006954:	4652      	mov	r2, sl
 8006956:	4643      	mov	r3, r8
 8006958:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800695c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006960:	930b      	str	r3, [sp, #44]	; 0x2c
 8006962:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006964:	4b9c      	ldr	r3, [pc, #624]	; (8006bd8 <_printf_float+0x2c8>)
 8006966:	f04f 32ff 	mov.w	r2, #4294967295
 800696a:	4650      	mov	r0, sl
 800696c:	f7fa f8b6 	bl	8000adc <__aeabi_dcmpun>
 8006970:	bb70      	cbnz	r0, 80069d0 <_printf_float+0xc0>
 8006972:	4b99      	ldr	r3, [pc, #612]	; (8006bd8 <_printf_float+0x2c8>)
 8006974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006976:	f04f 32ff 	mov.w	r2, #4294967295
 800697a:	4650      	mov	r0, sl
 800697c:	f7fa f890 	bl	8000aa0 <__aeabi_dcmple>
 8006980:	bb30      	cbnz	r0, 80069d0 <_printf_float+0xc0>
 8006982:	2200      	movs	r2, #0
 8006984:	2300      	movs	r3, #0
 8006986:	4650      	mov	r0, sl
 8006988:	4641      	mov	r1, r8
 800698a:	f7fa f87f 	bl	8000a8c <__aeabi_dcmplt>
 800698e:	b110      	cbz	r0, 8006996 <_printf_float+0x86>
 8006990:	232d      	movs	r3, #45	; 0x2d
 8006992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006996:	4a91      	ldr	r2, [pc, #580]	; (8006bdc <_printf_float+0x2cc>)
 8006998:	4b91      	ldr	r3, [pc, #580]	; (8006be0 <_printf_float+0x2d0>)
 800699a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800699e:	bf94      	ite	ls
 80069a0:	4690      	movls	r8, r2
 80069a2:	4698      	movhi	r8, r3
 80069a4:	2303      	movs	r3, #3
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	f02b 0304 	bic.w	r3, fp, #4
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	f04f 0a00 	mov.w	sl, #0
 80069b2:	9700      	str	r7, [sp, #0]
 80069b4:	4633      	mov	r3, r6
 80069b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80069b8:	4621      	mov	r1, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 f9d4 	bl	8006d68 <_printf_common>
 80069c0:	3001      	adds	r0, #1
 80069c2:	f040 808f 	bne.w	8006ae4 <_printf_float+0x1d4>
 80069c6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ca:	b011      	add	sp, #68	; 0x44
 80069cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d0:	4652      	mov	r2, sl
 80069d2:	4643      	mov	r3, r8
 80069d4:	4650      	mov	r0, sl
 80069d6:	4641      	mov	r1, r8
 80069d8:	f7fa f880 	bl	8000adc <__aeabi_dcmpun>
 80069dc:	b140      	cbz	r0, 80069f0 <_printf_float+0xe0>
 80069de:	f1b8 0f00 	cmp.w	r8, #0
 80069e2:	bfbc      	itt	lt
 80069e4:	232d      	movlt	r3, #45	; 0x2d
 80069e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069ea:	4a7e      	ldr	r2, [pc, #504]	; (8006be4 <_printf_float+0x2d4>)
 80069ec:	4b7e      	ldr	r3, [pc, #504]	; (8006be8 <_printf_float+0x2d8>)
 80069ee:	e7d4      	b.n	800699a <_printf_float+0x8a>
 80069f0:	6863      	ldr	r3, [r4, #4]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80069f8:	d142      	bne.n	8006a80 <_printf_float+0x170>
 80069fa:	2306      	movs	r3, #6
 80069fc:	6063      	str	r3, [r4, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	9206      	str	r2, [sp, #24]
 8006a02:	aa0e      	add	r2, sp, #56	; 0x38
 8006a04:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006a08:	aa0d      	add	r2, sp, #52	; 0x34
 8006a0a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006a0e:	9203      	str	r2, [sp, #12]
 8006a10:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006a14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4652      	mov	r2, sl
 8006a20:	4643      	mov	r3, r8
 8006a22:	4628      	mov	r0, r5
 8006a24:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a26:	f7ff fed5 	bl	80067d4 <__cvt>
 8006a2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a2c:	2947      	cmp	r1, #71	; 0x47
 8006a2e:	4680      	mov	r8, r0
 8006a30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a32:	d108      	bne.n	8006a46 <_printf_float+0x136>
 8006a34:	1cc8      	adds	r0, r1, #3
 8006a36:	db02      	blt.n	8006a3e <_printf_float+0x12e>
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	4299      	cmp	r1, r3
 8006a3c:	dd40      	ble.n	8006ac0 <_printf_float+0x1b0>
 8006a3e:	f1a9 0902 	sub.w	r9, r9, #2
 8006a42:	fa5f f989 	uxtb.w	r9, r9
 8006a46:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a4a:	d81f      	bhi.n	8006a8c <_printf_float+0x17c>
 8006a4c:	3901      	subs	r1, #1
 8006a4e:	464a      	mov	r2, r9
 8006a50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a54:	910d      	str	r1, [sp, #52]	; 0x34
 8006a56:	f7ff ff1d 	bl	8006894 <__exponent>
 8006a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a5c:	1813      	adds	r3, r2, r0
 8006a5e:	2a01      	cmp	r2, #1
 8006a60:	4682      	mov	sl, r0
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	dc02      	bgt.n	8006a6c <_printf_float+0x15c>
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	07d2      	lsls	r2, r2, #31
 8006a6a:	d501      	bpl.n	8006a70 <_printf_float+0x160>
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	6123      	str	r3, [r4, #16]
 8006a70:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d09c      	beq.n	80069b2 <_printf_float+0xa2>
 8006a78:	232d      	movs	r3, #45	; 0x2d
 8006a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a7e:	e798      	b.n	80069b2 <_printf_float+0xa2>
 8006a80:	2947      	cmp	r1, #71	; 0x47
 8006a82:	d1bc      	bne.n	80069fe <_printf_float+0xee>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1ba      	bne.n	80069fe <_printf_float+0xee>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e7b7      	b.n	80069fc <_printf_float+0xec>
 8006a8c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006a90:	d118      	bne.n	8006ac4 <_printf_float+0x1b4>
 8006a92:	2900      	cmp	r1, #0
 8006a94:	6863      	ldr	r3, [r4, #4]
 8006a96:	dd0b      	ble.n	8006ab0 <_printf_float+0x1a0>
 8006a98:	6121      	str	r1, [r4, #16]
 8006a9a:	b913      	cbnz	r3, 8006aa2 <_printf_float+0x192>
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	07d0      	lsls	r0, r2, #31
 8006aa0:	d502      	bpl.n	8006aa8 <_printf_float+0x198>
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	440b      	add	r3, r1
 8006aa6:	6123      	str	r3, [r4, #16]
 8006aa8:	65a1      	str	r1, [r4, #88]	; 0x58
 8006aaa:	f04f 0a00 	mov.w	sl, #0
 8006aae:	e7df      	b.n	8006a70 <_printf_float+0x160>
 8006ab0:	b913      	cbnz	r3, 8006ab8 <_printf_float+0x1a8>
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	07d2      	lsls	r2, r2, #31
 8006ab6:	d501      	bpl.n	8006abc <_printf_float+0x1ac>
 8006ab8:	3302      	adds	r3, #2
 8006aba:	e7f4      	b.n	8006aa6 <_printf_float+0x196>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e7f2      	b.n	8006aa6 <_printf_float+0x196>
 8006ac0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ac6:	4299      	cmp	r1, r3
 8006ac8:	db05      	blt.n	8006ad6 <_printf_float+0x1c6>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	6121      	str	r1, [r4, #16]
 8006ace:	07d8      	lsls	r0, r3, #31
 8006ad0:	d5ea      	bpl.n	8006aa8 <_printf_float+0x198>
 8006ad2:	1c4b      	adds	r3, r1, #1
 8006ad4:	e7e7      	b.n	8006aa6 <_printf_float+0x196>
 8006ad6:	2900      	cmp	r1, #0
 8006ad8:	bfd4      	ite	le
 8006ada:	f1c1 0202 	rsble	r2, r1, #2
 8006ade:	2201      	movgt	r2, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	e7e0      	b.n	8006aa6 <_printf_float+0x196>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	055a      	lsls	r2, r3, #21
 8006ae8:	d407      	bmi.n	8006afa <_printf_float+0x1ea>
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	4642      	mov	r2, r8
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	d12b      	bne.n	8006b50 <_printf_float+0x240>
 8006af8:	e765      	b.n	80069c6 <_printf_float+0xb6>
 8006afa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006afe:	f240 80dc 	bls.w	8006cba <_printf_float+0x3aa>
 8006b02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b06:	2200      	movs	r2, #0
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f7f9 ffb5 	bl	8000a78 <__aeabi_dcmpeq>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d033      	beq.n	8006b7a <_printf_float+0x26a>
 8006b12:	4a36      	ldr	r2, [pc, #216]	; (8006bec <_printf_float+0x2dc>)
 8006b14:	2301      	movs	r3, #1
 8006b16:	4631      	mov	r1, r6
 8006b18:	4628      	mov	r0, r5
 8006b1a:	47b8      	blx	r7
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	f43f af52 	beq.w	80069c6 <_printf_float+0xb6>
 8006b22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b26:	429a      	cmp	r2, r3
 8006b28:	db02      	blt.n	8006b30 <_printf_float+0x220>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	07d8      	lsls	r0, r3, #31
 8006b2e:	d50f      	bpl.n	8006b50 <_printf_float+0x240>
 8006b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f af43 	beq.w	80069c6 <_printf_float+0xb6>
 8006b40:	f04f 0800 	mov.w	r8, #0
 8006b44:	f104 091a 	add.w	r9, r4, #26
 8006b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	4543      	cmp	r3, r8
 8006b4e:	dc09      	bgt.n	8006b64 <_printf_float+0x254>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	079b      	lsls	r3, r3, #30
 8006b54:	f100 8103 	bmi.w	8006d5e <_printf_float+0x44e>
 8006b58:	68e0      	ldr	r0, [r4, #12]
 8006b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b5c:	4298      	cmp	r0, r3
 8006b5e:	bfb8      	it	lt
 8006b60:	4618      	movlt	r0, r3
 8006b62:	e732      	b.n	80069ca <_printf_float+0xba>
 8006b64:	2301      	movs	r3, #1
 8006b66:	464a      	mov	r2, r9
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af29 	beq.w	80069c6 <_printf_float+0xb6>
 8006b74:	f108 0801 	add.w	r8, r8, #1
 8006b78:	e7e6      	b.n	8006b48 <_printf_float+0x238>
 8006b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc37      	bgt.n	8006bf0 <_printf_float+0x2e0>
 8006b80:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <_printf_float+0x2dc>)
 8006b82:	2301      	movs	r3, #1
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f af1b 	beq.w	80069c6 <_printf_float+0xb6>
 8006b90:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006b94:	4313      	orrs	r3, r2
 8006b96:	d102      	bne.n	8006b9e <_printf_float+0x28e>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	07d9      	lsls	r1, r3, #31
 8006b9c:	d5d8      	bpl.n	8006b50 <_printf_float+0x240>
 8006b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b8      	blx	r7
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f43f af0c 	beq.w	80069c6 <_printf_float+0xb6>
 8006bae:	f04f 0900 	mov.w	r9, #0
 8006bb2:	f104 0a1a 	add.w	sl, r4, #26
 8006bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bb8:	425b      	negs	r3, r3
 8006bba:	454b      	cmp	r3, r9
 8006bbc:	dc01      	bgt.n	8006bc2 <_printf_float+0x2b2>
 8006bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bc0:	e794      	b.n	8006aec <_printf_float+0x1dc>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4628      	mov	r0, r5
 8006bca:	47b8      	blx	r7
 8006bcc:	3001      	adds	r0, #1
 8006bce:	f43f aefa 	beq.w	80069c6 <_printf_float+0xb6>
 8006bd2:	f109 0901 	add.w	r9, r9, #1
 8006bd6:	e7ee      	b.n	8006bb6 <_printf_float+0x2a6>
 8006bd8:	7fefffff 	.word	0x7fefffff
 8006bdc:	08009364 	.word	0x08009364
 8006be0:	08009368 	.word	0x08009368
 8006be4:	0800936c 	.word	0x0800936c
 8006be8:	08009370 	.word	0x08009370
 8006bec:	08009374 	.word	0x08009374
 8006bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	bfa8      	it	ge
 8006bf8:	461a      	movge	r2, r3
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	4691      	mov	r9, r2
 8006bfe:	dc37      	bgt.n	8006c70 <_printf_float+0x360>
 8006c00:	f04f 0b00 	mov.w	fp, #0
 8006c04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c08:	f104 021a 	add.w	r2, r4, #26
 8006c0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006c10:	ebaa 0309 	sub.w	r3, sl, r9
 8006c14:	455b      	cmp	r3, fp
 8006c16:	dc33      	bgt.n	8006c80 <_printf_float+0x370>
 8006c18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	db3b      	blt.n	8006c98 <_printf_float+0x388>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	07da      	lsls	r2, r3, #31
 8006c24:	d438      	bmi.n	8006c98 <_printf_float+0x388>
 8006c26:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006c2a:	eba2 0903 	sub.w	r9, r2, r3
 8006c2e:	eba2 020a 	sub.w	r2, r2, sl
 8006c32:	4591      	cmp	r9, r2
 8006c34:	bfa8      	it	ge
 8006c36:	4691      	movge	r9, r2
 8006c38:	f1b9 0f00 	cmp.w	r9, #0
 8006c3c:	dc34      	bgt.n	8006ca8 <_printf_float+0x398>
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c46:	f104 0a1a 	add.w	sl, r4, #26
 8006c4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	eba3 0309 	sub.w	r3, r3, r9
 8006c54:	4543      	cmp	r3, r8
 8006c56:	f77f af7b 	ble.w	8006b50 <_printf_float+0x240>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4628      	mov	r0, r5
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f aeae 	beq.w	80069c6 <_printf_float+0xb6>
 8006c6a:	f108 0801 	add.w	r8, r8, #1
 8006c6e:	e7ec      	b.n	8006c4a <_printf_float+0x33a>
 8006c70:	4613      	mov	r3, r2
 8006c72:	4631      	mov	r1, r6
 8006c74:	4642      	mov	r2, r8
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d1c0      	bne.n	8006c00 <_printf_float+0x2f0>
 8006c7e:	e6a2      	b.n	80069c6 <_printf_float+0xb6>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f ae9b 	beq.w	80069c6 <_printf_float+0xb6>
 8006c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c92:	f10b 0b01 	add.w	fp, fp, #1
 8006c96:	e7b9      	b.n	8006c0c <_printf_float+0x2fc>
 8006c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d1bf      	bne.n	8006c26 <_printf_float+0x316>
 8006ca6:	e68e      	b.n	80069c6 <_printf_float+0xb6>
 8006ca8:	464b      	mov	r3, r9
 8006caa:	eb08 020a 	add.w	r2, r8, sl
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d1c2      	bne.n	8006c3e <_printf_float+0x32e>
 8006cb8:	e685      	b.n	80069c6 <_printf_float+0xb6>
 8006cba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cbc:	2a01      	cmp	r2, #1
 8006cbe:	dc01      	bgt.n	8006cc4 <_printf_float+0x3b4>
 8006cc0:	07db      	lsls	r3, r3, #31
 8006cc2:	d539      	bpl.n	8006d38 <_printf_float+0x428>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f ae79 	beq.w	80069c6 <_printf_float+0xb6>
 8006cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f43f ae71 	beq.w	80069c6 <_printf_float+0xb6>
 8006ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2300      	movs	r3, #0
 8006cec:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006cf0:	f7f9 fec2 	bl	8000a78 <__aeabi_dcmpeq>
 8006cf4:	b9d8      	cbnz	r0, 8006d2e <_printf_float+0x41e>
 8006cf6:	f109 33ff 	add.w	r3, r9, #4294967295
 8006cfa:	f108 0201 	add.w	r2, r8, #1
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4628      	mov	r0, r5
 8006d02:	47b8      	blx	r7
 8006d04:	3001      	adds	r0, #1
 8006d06:	d10e      	bne.n	8006d26 <_printf_float+0x416>
 8006d08:	e65d      	b.n	80069c6 <_printf_float+0xb6>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	464a      	mov	r2, r9
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	f43f ae56 	beq.w	80069c6 <_printf_float+0xb6>
 8006d1a:	f108 0801 	add.w	r8, r8, #1
 8006d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d20:	3b01      	subs	r3, #1
 8006d22:	4543      	cmp	r3, r8
 8006d24:	dcf1      	bgt.n	8006d0a <_printf_float+0x3fa>
 8006d26:	4653      	mov	r3, sl
 8006d28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d2c:	e6df      	b.n	8006aee <_printf_float+0x1de>
 8006d2e:	f04f 0800 	mov.w	r8, #0
 8006d32:	f104 091a 	add.w	r9, r4, #26
 8006d36:	e7f2      	b.n	8006d1e <_printf_float+0x40e>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	e7df      	b.n	8006cfe <_printf_float+0x3ee>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	464a      	mov	r2, r9
 8006d42:	4631      	mov	r1, r6
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b8      	blx	r7
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f43f ae3c 	beq.w	80069c6 <_printf_float+0xb6>
 8006d4e:	f108 0801 	add.w	r8, r8, #1
 8006d52:	68e3      	ldr	r3, [r4, #12]
 8006d54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d56:	1a5b      	subs	r3, r3, r1
 8006d58:	4543      	cmp	r3, r8
 8006d5a:	dcf0      	bgt.n	8006d3e <_printf_float+0x42e>
 8006d5c:	e6fc      	b.n	8006b58 <_printf_float+0x248>
 8006d5e:	f04f 0800 	mov.w	r8, #0
 8006d62:	f104 0919 	add.w	r9, r4, #25
 8006d66:	e7f4      	b.n	8006d52 <_printf_float+0x442>

08006d68 <_printf_common>:
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	4699      	mov	r9, r3
 8006d70:	688a      	ldr	r2, [r1, #8]
 8006d72:	690b      	ldr	r3, [r1, #16]
 8006d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	bfb8      	it	lt
 8006d7c:	4613      	movlt	r3, r2
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d84:	4607      	mov	r7, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b10a      	cbz	r2, 8006d8e <_printf_common+0x26>
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	0699      	lsls	r1, r3, #26
 8006d92:	bf42      	ittt	mi
 8006d94:	6833      	ldrmi	r3, [r6, #0]
 8006d96:	3302      	addmi	r3, #2
 8006d98:	6033      	strmi	r3, [r6, #0]
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	f015 0506 	ands.w	r5, r5, #6
 8006da0:	d106      	bne.n	8006db0 <_printf_common+0x48>
 8006da2:	f104 0a19 	add.w	sl, r4, #25
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	6832      	ldr	r2, [r6, #0]
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	dc26      	bgt.n	8006dfe <_printf_common+0x96>
 8006db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006db4:	1e13      	subs	r3, r2, #0
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	bf18      	it	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	0692      	lsls	r2, r2, #26
 8006dbe:	d42b      	bmi.n	8006e18 <_printf_common+0xb0>
 8006dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	47c0      	blx	r8
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d01e      	beq.n	8006e0c <_printf_common+0xa4>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	6922      	ldr	r2, [r4, #16]
 8006dd2:	f003 0306 	and.w	r3, r3, #6
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	bf02      	ittt	eq
 8006dda:	68e5      	ldreq	r5, [r4, #12]
 8006ddc:	6833      	ldreq	r3, [r6, #0]
 8006dde:	1aed      	subeq	r5, r5, r3
 8006de0:	68a3      	ldr	r3, [r4, #8]
 8006de2:	bf0c      	ite	eq
 8006de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006de8:	2500      	movne	r5, #0
 8006dea:	4293      	cmp	r3, r2
 8006dec:	bfc4      	itt	gt
 8006dee:	1a9b      	subgt	r3, r3, r2
 8006df0:	18ed      	addgt	r5, r5, r3
 8006df2:	2600      	movs	r6, #0
 8006df4:	341a      	adds	r4, #26
 8006df6:	42b5      	cmp	r5, r6
 8006df8:	d11a      	bne.n	8006e30 <_printf_common+0xc8>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e008      	b.n	8006e10 <_printf_common+0xa8>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4652      	mov	r2, sl
 8006e02:	4649      	mov	r1, r9
 8006e04:	4638      	mov	r0, r7
 8006e06:	47c0      	blx	r8
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d103      	bne.n	8006e14 <_printf_common+0xac>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e14:	3501      	adds	r5, #1
 8006e16:	e7c6      	b.n	8006da6 <_printf_common+0x3e>
 8006e18:	18e1      	adds	r1, r4, r3
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	2030      	movs	r0, #48	; 0x30
 8006e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e22:	4422      	add	r2, r4
 8006e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	e7c7      	b.n	8006dc0 <_printf_common+0x58>
 8006e30:	2301      	movs	r3, #1
 8006e32:	4622      	mov	r2, r4
 8006e34:	4649      	mov	r1, r9
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c0      	blx	r8
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d0e6      	beq.n	8006e0c <_printf_common+0xa4>
 8006e3e:	3601      	adds	r6, #1
 8006e40:	e7d9      	b.n	8006df6 <_printf_common+0x8e>
	...

08006e44 <_printf_i>:
 8006e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	7e0f      	ldrb	r7, [r1, #24]
 8006e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e4c:	2f78      	cmp	r7, #120	; 0x78
 8006e4e:	4691      	mov	r9, r2
 8006e50:	4680      	mov	r8, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	469a      	mov	sl, r3
 8006e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e5a:	d807      	bhi.n	8006e6c <_printf_i+0x28>
 8006e5c:	2f62      	cmp	r7, #98	; 0x62
 8006e5e:	d80a      	bhi.n	8006e76 <_printf_i+0x32>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	f000 80d4 	beq.w	800700e <_printf_i+0x1ca>
 8006e66:	2f58      	cmp	r7, #88	; 0x58
 8006e68:	f000 80c0 	beq.w	8006fec <_printf_i+0x1a8>
 8006e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e74:	e03a      	b.n	8006eec <_printf_i+0xa8>
 8006e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e7a:	2b15      	cmp	r3, #21
 8006e7c:	d8f6      	bhi.n	8006e6c <_printf_i+0x28>
 8006e7e:	a101      	add	r1, pc, #4	; (adr r1, 8006e84 <_printf_i+0x40>)
 8006e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006e6d 	.word	0x08006e6d
 8006e90:	08006e6d 	.word	0x08006e6d
 8006e94:	08006e6d 	.word	0x08006e6d
 8006e98:	08006e6d 	.word	0x08006e6d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e6d 	.word	0x08006e6d
 8006ea4:	08006e6d 	.word	0x08006e6d
 8006ea8:	08006e6d 	.word	0x08006e6d
 8006eac:	08006e6d 	.word	0x08006e6d
 8006eb0:	08006ff5 	.word	0x08006ff5
 8006eb4:	08006f1d 	.word	0x08006f1d
 8006eb8:	08006faf 	.word	0x08006faf
 8006ebc:	08006e6d 	.word	0x08006e6d
 8006ec0:	08006e6d 	.word	0x08006e6d
 8006ec4:	08007017 	.word	0x08007017
 8006ec8:	08006e6d 	.word	0x08006e6d
 8006ecc:	08006f1d 	.word	0x08006f1d
 8006ed0:	08006e6d 	.word	0x08006e6d
 8006ed4:	08006e6d 	.word	0x08006e6d
 8006ed8:	08006fb7 	.word	0x08006fb7
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	602a      	str	r2, [r5, #0]
 8006ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eec:	2301      	movs	r3, #1
 8006eee:	e09f      	b.n	8007030 <_printf_i+0x1ec>
 8006ef0:	6820      	ldr	r0, [r4, #0]
 8006ef2:	682b      	ldr	r3, [r5, #0]
 8006ef4:	0607      	lsls	r7, r0, #24
 8006ef6:	f103 0104 	add.w	r1, r3, #4
 8006efa:	6029      	str	r1, [r5, #0]
 8006efc:	d501      	bpl.n	8006f02 <_printf_i+0xbe>
 8006efe:	681e      	ldr	r6, [r3, #0]
 8006f00:	e003      	b.n	8006f0a <_printf_i+0xc6>
 8006f02:	0646      	lsls	r6, r0, #25
 8006f04:	d5fb      	bpl.n	8006efe <_printf_i+0xba>
 8006f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f0a:	2e00      	cmp	r6, #0
 8006f0c:	da03      	bge.n	8006f16 <_printf_i+0xd2>
 8006f0e:	232d      	movs	r3, #45	; 0x2d
 8006f10:	4276      	negs	r6, r6
 8006f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f16:	485a      	ldr	r0, [pc, #360]	; (8007080 <_printf_i+0x23c>)
 8006f18:	230a      	movs	r3, #10
 8006f1a:	e012      	b.n	8006f42 <_printf_i+0xfe>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	6820      	ldr	r0, [r4, #0]
 8006f20:	1d19      	adds	r1, r3, #4
 8006f22:	6029      	str	r1, [r5, #0]
 8006f24:	0605      	lsls	r5, r0, #24
 8006f26:	d501      	bpl.n	8006f2c <_printf_i+0xe8>
 8006f28:	681e      	ldr	r6, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <_printf_i+0xee>
 8006f2c:	0641      	lsls	r1, r0, #25
 8006f2e:	d5fb      	bpl.n	8006f28 <_printf_i+0xe4>
 8006f30:	881e      	ldrh	r6, [r3, #0]
 8006f32:	4853      	ldr	r0, [pc, #332]	; (8007080 <_printf_i+0x23c>)
 8006f34:	2f6f      	cmp	r7, #111	; 0x6f
 8006f36:	bf0c      	ite	eq
 8006f38:	2308      	moveq	r3, #8
 8006f3a:	230a      	movne	r3, #10
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f42:	6865      	ldr	r5, [r4, #4]
 8006f44:	60a5      	str	r5, [r4, #8]
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	bfa2      	ittt	ge
 8006f4a:	6821      	ldrge	r1, [r4, #0]
 8006f4c:	f021 0104 	bicge.w	r1, r1, #4
 8006f50:	6021      	strge	r1, [r4, #0]
 8006f52:	b90e      	cbnz	r6, 8006f58 <_printf_i+0x114>
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	d04b      	beq.n	8006ff0 <_printf_i+0x1ac>
 8006f58:	4615      	mov	r5, r2
 8006f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f62:	5dc7      	ldrb	r7, [r0, r7]
 8006f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f68:	4637      	mov	r7, r6
 8006f6a:	42bb      	cmp	r3, r7
 8006f6c:	460e      	mov	r6, r1
 8006f6e:	d9f4      	bls.n	8006f5a <_printf_i+0x116>
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d10b      	bne.n	8006f8c <_printf_i+0x148>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	07de      	lsls	r6, r3, #31
 8006f78:	d508      	bpl.n	8006f8c <_printf_i+0x148>
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	6861      	ldr	r1, [r4, #4]
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	bfde      	ittt	le
 8006f82:	2330      	movle	r3, #48	; 0x30
 8006f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f8c:	1b52      	subs	r2, r2, r5
 8006f8e:	6122      	str	r2, [r4, #16]
 8006f90:	f8cd a000 	str.w	sl, [sp]
 8006f94:	464b      	mov	r3, r9
 8006f96:	aa03      	add	r2, sp, #12
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	f7ff fee4 	bl	8006d68 <_printf_common>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d14a      	bne.n	800703a <_printf_i+0x1f6>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	b004      	add	sp, #16
 8006faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	f043 0320 	orr.w	r3, r3, #32
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	4833      	ldr	r0, [pc, #204]	; (8007084 <_printf_i+0x240>)
 8006fb8:	2778      	movs	r7, #120	; 0x78
 8006fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	6829      	ldr	r1, [r5, #0]
 8006fc2:	061f      	lsls	r7, r3, #24
 8006fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fc8:	d402      	bmi.n	8006fd0 <_printf_i+0x18c>
 8006fca:	065f      	lsls	r7, r3, #25
 8006fcc:	bf48      	it	mi
 8006fce:	b2b6      	uxthmi	r6, r6
 8006fd0:	07df      	lsls	r7, r3, #31
 8006fd2:	bf48      	it	mi
 8006fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8006fd8:	6029      	str	r1, [r5, #0]
 8006fda:	bf48      	it	mi
 8006fdc:	6023      	strmi	r3, [r4, #0]
 8006fde:	b91e      	cbnz	r6, 8006fe8 <_printf_i+0x1a4>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	f023 0320 	bic.w	r3, r3, #32
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	2310      	movs	r3, #16
 8006fea:	e7a7      	b.n	8006f3c <_printf_i+0xf8>
 8006fec:	4824      	ldr	r0, [pc, #144]	; (8007080 <_printf_i+0x23c>)
 8006fee:	e7e4      	b.n	8006fba <_printf_i+0x176>
 8006ff0:	4615      	mov	r5, r2
 8006ff2:	e7bd      	b.n	8006f70 <_printf_i+0x12c>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	6826      	ldr	r6, [r4, #0]
 8006ff8:	6961      	ldr	r1, [r4, #20]
 8006ffa:	1d18      	adds	r0, r3, #4
 8006ffc:	6028      	str	r0, [r5, #0]
 8006ffe:	0635      	lsls	r5, r6, #24
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	d501      	bpl.n	8007008 <_printf_i+0x1c4>
 8007004:	6019      	str	r1, [r3, #0]
 8007006:	e002      	b.n	800700e <_printf_i+0x1ca>
 8007008:	0670      	lsls	r0, r6, #25
 800700a:	d5fb      	bpl.n	8007004 <_printf_i+0x1c0>
 800700c:	8019      	strh	r1, [r3, #0]
 800700e:	2300      	movs	r3, #0
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	4615      	mov	r5, r2
 8007014:	e7bc      	b.n	8006f90 <_printf_i+0x14c>
 8007016:	682b      	ldr	r3, [r5, #0]
 8007018:	1d1a      	adds	r2, r3, #4
 800701a:	602a      	str	r2, [r5, #0]
 800701c:	681d      	ldr	r5, [r3, #0]
 800701e:	6862      	ldr	r2, [r4, #4]
 8007020:	2100      	movs	r1, #0
 8007022:	4628      	mov	r0, r5
 8007024:	f7f9 f8ac 	bl	8000180 <memchr>
 8007028:	b108      	cbz	r0, 800702e <_printf_i+0x1ea>
 800702a:	1b40      	subs	r0, r0, r5
 800702c:	6060      	str	r0, [r4, #4]
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	2300      	movs	r3, #0
 8007034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007038:	e7aa      	b.n	8006f90 <_printf_i+0x14c>
 800703a:	6923      	ldr	r3, [r4, #16]
 800703c:	462a      	mov	r2, r5
 800703e:	4649      	mov	r1, r9
 8007040:	4640      	mov	r0, r8
 8007042:	47d0      	blx	sl
 8007044:	3001      	adds	r0, #1
 8007046:	d0ad      	beq.n	8006fa4 <_printf_i+0x160>
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	079b      	lsls	r3, r3, #30
 800704c:	d413      	bmi.n	8007076 <_printf_i+0x232>
 800704e:	68e0      	ldr	r0, [r4, #12]
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	4298      	cmp	r0, r3
 8007054:	bfb8      	it	lt
 8007056:	4618      	movlt	r0, r3
 8007058:	e7a6      	b.n	8006fa8 <_printf_i+0x164>
 800705a:	2301      	movs	r3, #1
 800705c:	4632      	mov	r2, r6
 800705e:	4649      	mov	r1, r9
 8007060:	4640      	mov	r0, r8
 8007062:	47d0      	blx	sl
 8007064:	3001      	adds	r0, #1
 8007066:	d09d      	beq.n	8006fa4 <_printf_i+0x160>
 8007068:	3501      	adds	r5, #1
 800706a:	68e3      	ldr	r3, [r4, #12]
 800706c:	9903      	ldr	r1, [sp, #12]
 800706e:	1a5b      	subs	r3, r3, r1
 8007070:	42ab      	cmp	r3, r5
 8007072:	dcf2      	bgt.n	800705a <_printf_i+0x216>
 8007074:	e7eb      	b.n	800704e <_printf_i+0x20a>
 8007076:	2500      	movs	r5, #0
 8007078:	f104 0619 	add.w	r6, r4, #25
 800707c:	e7f5      	b.n	800706a <_printf_i+0x226>
 800707e:	bf00      	nop
 8007080:	08009376 	.word	0x08009376
 8007084:	08009387 	.word	0x08009387

08007088 <std>:
 8007088:	2300      	movs	r3, #0
 800708a:	b510      	push	{r4, lr}
 800708c:	4604      	mov	r4, r0
 800708e:	e9c0 3300 	strd	r3, r3, [r0]
 8007092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007096:	6083      	str	r3, [r0, #8]
 8007098:	8181      	strh	r1, [r0, #12]
 800709a:	6643      	str	r3, [r0, #100]	; 0x64
 800709c:	81c2      	strh	r2, [r0, #14]
 800709e:	6183      	str	r3, [r0, #24]
 80070a0:	4619      	mov	r1, r3
 80070a2:	2208      	movs	r2, #8
 80070a4:	305c      	adds	r0, #92	; 0x5c
 80070a6:	f000 f9f7 	bl	8007498 <memset>
 80070aa:	4b0d      	ldr	r3, [pc, #52]	; (80070e0 <std+0x58>)
 80070ac:	6263      	str	r3, [r4, #36]	; 0x24
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <std+0x5c>)
 80070b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80070b2:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <std+0x60>)
 80070b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070b6:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <std+0x64>)
 80070b8:	6323      	str	r3, [r4, #48]	; 0x30
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <std+0x68>)
 80070bc:	6224      	str	r4, [r4, #32]
 80070be:	429c      	cmp	r4, r3
 80070c0:	d006      	beq.n	80070d0 <std+0x48>
 80070c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070c6:	4294      	cmp	r4, r2
 80070c8:	d002      	beq.n	80070d0 <std+0x48>
 80070ca:	33d0      	adds	r3, #208	; 0xd0
 80070cc:	429c      	cmp	r4, r3
 80070ce:	d105      	bne.n	80070dc <std+0x54>
 80070d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d8:	f000 ba5a 	b.w	8007590 <__retarget_lock_init_recursive>
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	bf00      	nop
 80070e0:	080072e9 	.word	0x080072e9
 80070e4:	0800730b 	.word	0x0800730b
 80070e8:	08007343 	.word	0x08007343
 80070ec:	08007367 	.word	0x08007367
 80070f0:	200003ac 	.word	0x200003ac

080070f4 <stdio_exit_handler>:
 80070f4:	4a02      	ldr	r2, [pc, #8]	; (8007100 <stdio_exit_handler+0xc>)
 80070f6:	4903      	ldr	r1, [pc, #12]	; (8007104 <stdio_exit_handler+0x10>)
 80070f8:	4803      	ldr	r0, [pc, #12]	; (8007108 <stdio_exit_handler+0x14>)
 80070fa:	f000 b869 	b.w	80071d0 <_fwalk_sglue>
 80070fe:	bf00      	nop
 8007100:	20000018 	.word	0x20000018
 8007104:	08008ed1 	.word	0x08008ed1
 8007108:	20000024 	.word	0x20000024

0800710c <cleanup_stdio>:
 800710c:	6841      	ldr	r1, [r0, #4]
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <cleanup_stdio+0x34>)
 8007110:	4299      	cmp	r1, r3
 8007112:	b510      	push	{r4, lr}
 8007114:	4604      	mov	r4, r0
 8007116:	d001      	beq.n	800711c <cleanup_stdio+0x10>
 8007118:	f001 feda 	bl	8008ed0 <_fflush_r>
 800711c:	68a1      	ldr	r1, [r4, #8]
 800711e:	4b09      	ldr	r3, [pc, #36]	; (8007144 <cleanup_stdio+0x38>)
 8007120:	4299      	cmp	r1, r3
 8007122:	d002      	beq.n	800712a <cleanup_stdio+0x1e>
 8007124:	4620      	mov	r0, r4
 8007126:	f001 fed3 	bl	8008ed0 <_fflush_r>
 800712a:	68e1      	ldr	r1, [r4, #12]
 800712c:	4b06      	ldr	r3, [pc, #24]	; (8007148 <cleanup_stdio+0x3c>)
 800712e:	4299      	cmp	r1, r3
 8007130:	d004      	beq.n	800713c <cleanup_stdio+0x30>
 8007132:	4620      	mov	r0, r4
 8007134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007138:	f001 beca 	b.w	8008ed0 <_fflush_r>
 800713c:	bd10      	pop	{r4, pc}
 800713e:	bf00      	nop
 8007140:	200003ac 	.word	0x200003ac
 8007144:	20000414 	.word	0x20000414
 8007148:	2000047c 	.word	0x2000047c

0800714c <global_stdio_init.part.0>:
 800714c:	b510      	push	{r4, lr}
 800714e:	4b0b      	ldr	r3, [pc, #44]	; (800717c <global_stdio_init.part.0+0x30>)
 8007150:	4c0b      	ldr	r4, [pc, #44]	; (8007180 <global_stdio_init.part.0+0x34>)
 8007152:	4a0c      	ldr	r2, [pc, #48]	; (8007184 <global_stdio_init.part.0+0x38>)
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	4620      	mov	r0, r4
 8007158:	2200      	movs	r2, #0
 800715a:	2104      	movs	r1, #4
 800715c:	f7ff ff94 	bl	8007088 <std>
 8007160:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007164:	2201      	movs	r2, #1
 8007166:	2109      	movs	r1, #9
 8007168:	f7ff ff8e 	bl	8007088 <std>
 800716c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007170:	2202      	movs	r2, #2
 8007172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007176:	2112      	movs	r1, #18
 8007178:	f7ff bf86 	b.w	8007088 <std>
 800717c:	200004e4 	.word	0x200004e4
 8007180:	200003ac 	.word	0x200003ac
 8007184:	080070f5 	.word	0x080070f5

08007188 <__sfp_lock_acquire>:
 8007188:	4801      	ldr	r0, [pc, #4]	; (8007190 <__sfp_lock_acquire+0x8>)
 800718a:	f000 ba02 	b.w	8007592 <__retarget_lock_acquire_recursive>
 800718e:	bf00      	nop
 8007190:	200004ed 	.word	0x200004ed

08007194 <__sfp_lock_release>:
 8007194:	4801      	ldr	r0, [pc, #4]	; (800719c <__sfp_lock_release+0x8>)
 8007196:	f000 b9fd 	b.w	8007594 <__retarget_lock_release_recursive>
 800719a:	bf00      	nop
 800719c:	200004ed 	.word	0x200004ed

080071a0 <__sinit>:
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4604      	mov	r4, r0
 80071a4:	f7ff fff0 	bl	8007188 <__sfp_lock_acquire>
 80071a8:	6a23      	ldr	r3, [r4, #32]
 80071aa:	b11b      	cbz	r3, 80071b4 <__sinit+0x14>
 80071ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b0:	f7ff bff0 	b.w	8007194 <__sfp_lock_release>
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <__sinit+0x28>)
 80071b6:	6223      	str	r3, [r4, #32]
 80071b8:	4b04      	ldr	r3, [pc, #16]	; (80071cc <__sinit+0x2c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f5      	bne.n	80071ac <__sinit+0xc>
 80071c0:	f7ff ffc4 	bl	800714c <global_stdio_init.part.0>
 80071c4:	e7f2      	b.n	80071ac <__sinit+0xc>
 80071c6:	bf00      	nop
 80071c8:	0800710d 	.word	0x0800710d
 80071cc:	200004e4 	.word	0x200004e4

080071d0 <_fwalk_sglue>:
 80071d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d4:	4607      	mov	r7, r0
 80071d6:	4688      	mov	r8, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	2600      	movs	r6, #0
 80071dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071e0:	f1b9 0901 	subs.w	r9, r9, #1
 80071e4:	d505      	bpl.n	80071f2 <_fwalk_sglue+0x22>
 80071e6:	6824      	ldr	r4, [r4, #0]
 80071e8:	2c00      	cmp	r4, #0
 80071ea:	d1f7      	bne.n	80071dc <_fwalk_sglue+0xc>
 80071ec:	4630      	mov	r0, r6
 80071ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f2:	89ab      	ldrh	r3, [r5, #12]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d907      	bls.n	8007208 <_fwalk_sglue+0x38>
 80071f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071fc:	3301      	adds	r3, #1
 80071fe:	d003      	beq.n	8007208 <_fwalk_sglue+0x38>
 8007200:	4629      	mov	r1, r5
 8007202:	4638      	mov	r0, r7
 8007204:	47c0      	blx	r8
 8007206:	4306      	orrs	r6, r0
 8007208:	3568      	adds	r5, #104	; 0x68
 800720a:	e7e9      	b.n	80071e0 <_fwalk_sglue+0x10>

0800720c <iprintf>:
 800720c:	b40f      	push	{r0, r1, r2, r3}
 800720e:	b507      	push	{r0, r1, r2, lr}
 8007210:	4906      	ldr	r1, [pc, #24]	; (800722c <iprintf+0x20>)
 8007212:	ab04      	add	r3, sp, #16
 8007214:	6808      	ldr	r0, [r1, #0]
 8007216:	f853 2b04 	ldr.w	r2, [r3], #4
 800721a:	6881      	ldr	r1, [r0, #8]
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	f001 fcbb 	bl	8008b98 <_vfiprintf_r>
 8007222:	b003      	add	sp, #12
 8007224:	f85d eb04 	ldr.w	lr, [sp], #4
 8007228:	b004      	add	sp, #16
 800722a:	4770      	bx	lr
 800722c:	20000070 	.word	0x20000070

08007230 <_puts_r>:
 8007230:	6a03      	ldr	r3, [r0, #32]
 8007232:	b570      	push	{r4, r5, r6, lr}
 8007234:	6884      	ldr	r4, [r0, #8]
 8007236:	4605      	mov	r5, r0
 8007238:	460e      	mov	r6, r1
 800723a:	b90b      	cbnz	r3, 8007240 <_puts_r+0x10>
 800723c:	f7ff ffb0 	bl	80071a0 <__sinit>
 8007240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007242:	07db      	lsls	r3, r3, #31
 8007244:	d405      	bmi.n	8007252 <_puts_r+0x22>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	0598      	lsls	r0, r3, #22
 800724a:	d402      	bmi.n	8007252 <_puts_r+0x22>
 800724c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800724e:	f000 f9a0 	bl	8007592 <__retarget_lock_acquire_recursive>
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	0719      	lsls	r1, r3, #28
 8007256:	d513      	bpl.n	8007280 <_puts_r+0x50>
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	b18b      	cbz	r3, 8007280 <_puts_r+0x50>
 800725c:	3e01      	subs	r6, #1
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007264:	3b01      	subs	r3, #1
 8007266:	60a3      	str	r3, [r4, #8]
 8007268:	b9e9      	cbnz	r1, 80072a6 <_puts_r+0x76>
 800726a:	2b00      	cmp	r3, #0
 800726c:	da2e      	bge.n	80072cc <_puts_r+0x9c>
 800726e:	4622      	mov	r2, r4
 8007270:	210a      	movs	r1, #10
 8007272:	4628      	mov	r0, r5
 8007274:	f000 f87b 	bl	800736e <__swbuf_r>
 8007278:	3001      	adds	r0, #1
 800727a:	d007      	beq.n	800728c <_puts_r+0x5c>
 800727c:	250a      	movs	r5, #10
 800727e:	e007      	b.n	8007290 <_puts_r+0x60>
 8007280:	4621      	mov	r1, r4
 8007282:	4628      	mov	r0, r5
 8007284:	f000 f8b0 	bl	80073e8 <__swsetup_r>
 8007288:	2800      	cmp	r0, #0
 800728a:	d0e7      	beq.n	800725c <_puts_r+0x2c>
 800728c:	f04f 35ff 	mov.w	r5, #4294967295
 8007290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007292:	07da      	lsls	r2, r3, #31
 8007294:	d405      	bmi.n	80072a2 <_puts_r+0x72>
 8007296:	89a3      	ldrh	r3, [r4, #12]
 8007298:	059b      	lsls	r3, r3, #22
 800729a:	d402      	bmi.n	80072a2 <_puts_r+0x72>
 800729c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800729e:	f000 f979 	bl	8007594 <__retarget_lock_release_recursive>
 80072a2:	4628      	mov	r0, r5
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da04      	bge.n	80072b4 <_puts_r+0x84>
 80072aa:	69a2      	ldr	r2, [r4, #24]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	dc06      	bgt.n	80072be <_puts_r+0x8e>
 80072b0:	290a      	cmp	r1, #10
 80072b2:	d004      	beq.n	80072be <_puts_r+0x8e>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	7019      	strb	r1, [r3, #0]
 80072bc:	e7cf      	b.n	800725e <_puts_r+0x2e>
 80072be:	4622      	mov	r2, r4
 80072c0:	4628      	mov	r0, r5
 80072c2:	f000 f854 	bl	800736e <__swbuf_r>
 80072c6:	3001      	adds	r0, #1
 80072c8:	d1c9      	bne.n	800725e <_puts_r+0x2e>
 80072ca:	e7df      	b.n	800728c <_puts_r+0x5c>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	250a      	movs	r5, #10
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	6022      	str	r2, [r4, #0]
 80072d4:	701d      	strb	r5, [r3, #0]
 80072d6:	e7db      	b.n	8007290 <_puts_r+0x60>

080072d8 <puts>:
 80072d8:	4b02      	ldr	r3, [pc, #8]	; (80072e4 <puts+0xc>)
 80072da:	4601      	mov	r1, r0
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	f7ff bfa7 	b.w	8007230 <_puts_r>
 80072e2:	bf00      	nop
 80072e4:	20000070 	.word	0x20000070

080072e8 <__sread>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	f000 f900 	bl	80074f4 <_read_r>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	bfab      	itete	ge
 80072f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072fa:	89a3      	ldrhlt	r3, [r4, #12]
 80072fc:	181b      	addge	r3, r3, r0
 80072fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007302:	bfac      	ite	ge
 8007304:	6563      	strge	r3, [r4, #84]	; 0x54
 8007306:	81a3      	strhlt	r3, [r4, #12]
 8007308:	bd10      	pop	{r4, pc}

0800730a <__swrite>:
 800730a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730e:	461f      	mov	r7, r3
 8007310:	898b      	ldrh	r3, [r1, #12]
 8007312:	05db      	lsls	r3, r3, #23
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	4616      	mov	r6, r2
 800731a:	d505      	bpl.n	8007328 <__swrite+0x1e>
 800731c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007320:	2302      	movs	r3, #2
 8007322:	2200      	movs	r2, #0
 8007324:	f000 f8d4 	bl	80074d0 <_lseek_r>
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	4628      	mov	r0, r5
 800733a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800733e:	f000 b8eb 	b.w	8007518 <_write_r>

08007342 <__sseek>:
 8007342:	b510      	push	{r4, lr}
 8007344:	460c      	mov	r4, r1
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 f8c1 	bl	80074d0 <_lseek_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	bf15      	itete	ne
 8007354:	6560      	strne	r0, [r4, #84]	; 0x54
 8007356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800735a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800735e:	81a3      	strheq	r3, [r4, #12]
 8007360:	bf18      	it	ne
 8007362:	81a3      	strhne	r3, [r4, #12]
 8007364:	bd10      	pop	{r4, pc}

08007366 <__sclose>:
 8007366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736a:	f000 b8a1 	b.w	80074b0 <_close_r>

0800736e <__swbuf_r>:
 800736e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007370:	460e      	mov	r6, r1
 8007372:	4614      	mov	r4, r2
 8007374:	4605      	mov	r5, r0
 8007376:	b118      	cbz	r0, 8007380 <__swbuf_r+0x12>
 8007378:	6a03      	ldr	r3, [r0, #32]
 800737a:	b90b      	cbnz	r3, 8007380 <__swbuf_r+0x12>
 800737c:	f7ff ff10 	bl	80071a0 <__sinit>
 8007380:	69a3      	ldr	r3, [r4, #24]
 8007382:	60a3      	str	r3, [r4, #8]
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	071a      	lsls	r2, r3, #28
 8007388:	d525      	bpl.n	80073d6 <__swbuf_r+0x68>
 800738a:	6923      	ldr	r3, [r4, #16]
 800738c:	b31b      	cbz	r3, 80073d6 <__swbuf_r+0x68>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	6922      	ldr	r2, [r4, #16]
 8007392:	1a98      	subs	r0, r3, r2
 8007394:	6963      	ldr	r3, [r4, #20]
 8007396:	b2f6      	uxtb	r6, r6
 8007398:	4283      	cmp	r3, r0
 800739a:	4637      	mov	r7, r6
 800739c:	dc04      	bgt.n	80073a8 <__swbuf_r+0x3a>
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	f001 fd95 	bl	8008ed0 <_fflush_r>
 80073a6:	b9e0      	cbnz	r0, 80073e2 <__swbuf_r+0x74>
 80073a8:	68a3      	ldr	r3, [r4, #8]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	6022      	str	r2, [r4, #0]
 80073b4:	701e      	strb	r6, [r3, #0]
 80073b6:	6962      	ldr	r2, [r4, #20]
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d004      	beq.n	80073c8 <__swbuf_r+0x5a>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	07db      	lsls	r3, r3, #31
 80073c2:	d506      	bpl.n	80073d2 <__swbuf_r+0x64>
 80073c4:	2e0a      	cmp	r6, #10
 80073c6:	d104      	bne.n	80073d2 <__swbuf_r+0x64>
 80073c8:	4621      	mov	r1, r4
 80073ca:	4628      	mov	r0, r5
 80073cc:	f001 fd80 	bl	8008ed0 <_fflush_r>
 80073d0:	b938      	cbnz	r0, 80073e2 <__swbuf_r+0x74>
 80073d2:	4638      	mov	r0, r7
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d6:	4621      	mov	r1, r4
 80073d8:	4628      	mov	r0, r5
 80073da:	f000 f805 	bl	80073e8 <__swsetup_r>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d0d5      	beq.n	800738e <__swbuf_r+0x20>
 80073e2:	f04f 37ff 	mov.w	r7, #4294967295
 80073e6:	e7f4      	b.n	80073d2 <__swbuf_r+0x64>

080073e8 <__swsetup_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4b2a      	ldr	r3, [pc, #168]	; (8007494 <__swsetup_r+0xac>)
 80073ec:	4605      	mov	r5, r0
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	460c      	mov	r4, r1
 80073f2:	b118      	cbz	r0, 80073fc <__swsetup_r+0x14>
 80073f4:	6a03      	ldr	r3, [r0, #32]
 80073f6:	b90b      	cbnz	r3, 80073fc <__swsetup_r+0x14>
 80073f8:	f7ff fed2 	bl	80071a0 <__sinit>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007402:	0718      	lsls	r0, r3, #28
 8007404:	d422      	bmi.n	800744c <__swsetup_r+0x64>
 8007406:	06d9      	lsls	r1, r3, #27
 8007408:	d407      	bmi.n	800741a <__swsetup_r+0x32>
 800740a:	2309      	movs	r3, #9
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	e034      	b.n	8007484 <__swsetup_r+0x9c>
 800741a:	0758      	lsls	r0, r3, #29
 800741c:	d512      	bpl.n	8007444 <__swsetup_r+0x5c>
 800741e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007420:	b141      	cbz	r1, 8007434 <__swsetup_r+0x4c>
 8007422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007426:	4299      	cmp	r1, r3
 8007428:	d002      	beq.n	8007430 <__swsetup_r+0x48>
 800742a:	4628      	mov	r0, r5
 800742c:	f000 ff18 	bl	8008260 <_free_r>
 8007430:	2300      	movs	r3, #0
 8007432:	6363      	str	r3, [r4, #52]	; 0x34
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	2300      	movs	r3, #0
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f043 0308 	orr.w	r3, r3, #8
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	b94b      	cbnz	r3, 8007464 <__swsetup_r+0x7c>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800745a:	d003      	beq.n	8007464 <__swsetup_r+0x7c>
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f001 fd84 	bl	8008f6c <__smakebuf_r>
 8007464:	89a0      	ldrh	r0, [r4, #12]
 8007466:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800746a:	f010 0301 	ands.w	r3, r0, #1
 800746e:	d00a      	beq.n	8007486 <__swsetup_r+0x9e>
 8007470:	2300      	movs	r3, #0
 8007472:	60a3      	str	r3, [r4, #8]
 8007474:	6963      	ldr	r3, [r4, #20]
 8007476:	425b      	negs	r3, r3
 8007478:	61a3      	str	r3, [r4, #24]
 800747a:	6923      	ldr	r3, [r4, #16]
 800747c:	b943      	cbnz	r3, 8007490 <__swsetup_r+0xa8>
 800747e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007482:	d1c4      	bne.n	800740e <__swsetup_r+0x26>
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	0781      	lsls	r1, r0, #30
 8007488:	bf58      	it	pl
 800748a:	6963      	ldrpl	r3, [r4, #20]
 800748c:	60a3      	str	r3, [r4, #8]
 800748e:	e7f4      	b.n	800747a <__swsetup_r+0x92>
 8007490:	2000      	movs	r0, #0
 8007492:	e7f7      	b.n	8007484 <__swsetup_r+0x9c>
 8007494:	20000070 	.word	0x20000070

08007498 <memset>:
 8007498:	4402      	add	r2, r0
 800749a:	4603      	mov	r3, r0
 800749c:	4293      	cmp	r3, r2
 800749e:	d100      	bne.n	80074a2 <memset+0xa>
 80074a0:	4770      	bx	lr
 80074a2:	f803 1b01 	strb.w	r1, [r3], #1
 80074a6:	e7f9      	b.n	800749c <memset+0x4>

080074a8 <_localeconv_r>:
 80074a8:	4800      	ldr	r0, [pc, #0]	; (80074ac <_localeconv_r+0x4>)
 80074aa:	4770      	bx	lr
 80074ac:	20000164 	.word	0x20000164

080074b0 <_close_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d06      	ldr	r5, [pc, #24]	; (80074cc <_close_r+0x1c>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	f7fa fc38 	bl	8001d30 <_close>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_close_r+0x1a>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_close_r+0x1a>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	200004e8 	.word	0x200004e8

080074d0 <_lseek_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4d07      	ldr	r5, [pc, #28]	; (80074f0 <_lseek_r+0x20>)
 80074d4:	4604      	mov	r4, r0
 80074d6:	4608      	mov	r0, r1
 80074d8:	4611      	mov	r1, r2
 80074da:	2200      	movs	r2, #0
 80074dc:	602a      	str	r2, [r5, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f7fa fc4a 	bl	8001d78 <_lseek>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_lseek_r+0x1e>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_lseek_r+0x1e>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	200004e8 	.word	0x200004e8

080074f4 <_read_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	; (8007514 <_read_r+0x20>)
 80074f8:	4604      	mov	r4, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7fa fbdb 	bl	8001cbe <_read>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_read_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_read_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	200004e8 	.word	0x200004e8

08007518 <_write_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d07      	ldr	r5, [pc, #28]	; (8007538 <_write_r+0x20>)
 800751c:	4604      	mov	r4, r0
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	2200      	movs	r2, #0
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f7fa fbe6 	bl	8001cf8 <_write>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_write_r+0x1e>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_write_r+0x1e>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	200004e8 	.word	0x200004e8

0800753c <__errno>:
 800753c:	4b01      	ldr	r3, [pc, #4]	; (8007544 <__errno+0x8>)
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000070 	.word	0x20000070

08007548 <__libc_init_array>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	4d0d      	ldr	r5, [pc, #52]	; (8007580 <__libc_init_array+0x38>)
 800754c:	4c0d      	ldr	r4, [pc, #52]	; (8007584 <__libc_init_array+0x3c>)
 800754e:	1b64      	subs	r4, r4, r5
 8007550:	10a4      	asrs	r4, r4, #2
 8007552:	2600      	movs	r6, #0
 8007554:	42a6      	cmp	r6, r4
 8007556:	d109      	bne.n	800756c <__libc_init_array+0x24>
 8007558:	4d0b      	ldr	r5, [pc, #44]	; (8007588 <__libc_init_array+0x40>)
 800755a:	4c0c      	ldr	r4, [pc, #48]	; (800758c <__libc_init_array+0x44>)
 800755c:	f001 fe32 	bl	80091c4 <_init>
 8007560:	1b64      	subs	r4, r4, r5
 8007562:	10a4      	asrs	r4, r4, #2
 8007564:	2600      	movs	r6, #0
 8007566:	42a6      	cmp	r6, r4
 8007568:	d105      	bne.n	8007576 <__libc_init_array+0x2e>
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007570:	4798      	blx	r3
 8007572:	3601      	adds	r6, #1
 8007574:	e7ee      	b.n	8007554 <__libc_init_array+0xc>
 8007576:	f855 3b04 	ldr.w	r3, [r5], #4
 800757a:	4798      	blx	r3
 800757c:	3601      	adds	r6, #1
 800757e:	e7f2      	b.n	8007566 <__libc_init_array+0x1e>
 8007580:	080096e0 	.word	0x080096e0
 8007584:	080096e0 	.word	0x080096e0
 8007588:	080096e0 	.word	0x080096e0
 800758c:	080096e4 	.word	0x080096e4

08007590 <__retarget_lock_init_recursive>:
 8007590:	4770      	bx	lr

08007592 <__retarget_lock_acquire_recursive>:
 8007592:	4770      	bx	lr

08007594 <__retarget_lock_release_recursive>:
 8007594:	4770      	bx	lr

08007596 <quorem>:
 8007596:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	6903      	ldr	r3, [r0, #16]
 800759c:	690c      	ldr	r4, [r1, #16]
 800759e:	42a3      	cmp	r3, r4
 80075a0:	4607      	mov	r7, r0
 80075a2:	db7b      	blt.n	800769c <quorem+0x106>
 80075a4:	3c01      	subs	r4, #1
 80075a6:	f101 0814 	add.w	r8, r1, #20
 80075aa:	f100 0514 	add.w	r5, r0, #20
 80075ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075b2:	9301      	str	r3, [sp, #4]
 80075b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075bc:	3301      	adds	r3, #1
 80075be:	429a      	cmp	r2, r3
 80075c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80075cc:	d32e      	bcc.n	800762c <quorem+0x96>
 80075ce:	f04f 0e00 	mov.w	lr, #0
 80075d2:	4640      	mov	r0, r8
 80075d4:	46ac      	mov	ip, r5
 80075d6:	46f2      	mov	sl, lr
 80075d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80075dc:	b293      	uxth	r3, r2
 80075de:	fb06 e303 	mla	r3, r6, r3, lr
 80075e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075e6:	0c1a      	lsrs	r2, r3, #16
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	fb06 220e 	mla	r2, r6, lr, r2
 80075ee:	ebaa 0303 	sub.w	r3, sl, r3
 80075f2:	f8dc a000 	ldr.w	sl, [ip]
 80075f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075fa:	b292      	uxth	r2, r2
 80075fc:	fa13 f38a 	uxtah	r3, r3, sl
 8007600:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007608:	b29b      	uxth	r3, r3
 800760a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800760e:	4581      	cmp	r9, r0
 8007610:	f84c 3b04 	str.w	r3, [ip], #4
 8007614:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007618:	d2de      	bcs.n	80075d8 <quorem+0x42>
 800761a:	f855 300b 	ldr.w	r3, [r5, fp]
 800761e:	b92b      	cbnz	r3, 800762c <quorem+0x96>
 8007620:	9b01      	ldr	r3, [sp, #4]
 8007622:	3b04      	subs	r3, #4
 8007624:	429d      	cmp	r5, r3
 8007626:	461a      	mov	r2, r3
 8007628:	d32c      	bcc.n	8007684 <quorem+0xee>
 800762a:	613c      	str	r4, [r7, #16]
 800762c:	4638      	mov	r0, r7
 800762e:	f001 f991 	bl	8008954 <__mcmp>
 8007632:	2800      	cmp	r0, #0
 8007634:	db22      	blt.n	800767c <quorem+0xe6>
 8007636:	3601      	adds	r6, #1
 8007638:	4629      	mov	r1, r5
 800763a:	2000      	movs	r0, #0
 800763c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007640:	f8d1 c000 	ldr.w	ip, [r1]
 8007644:	b293      	uxth	r3, r2
 8007646:	1ac3      	subs	r3, r0, r3
 8007648:	0c12      	lsrs	r2, r2, #16
 800764a:	fa13 f38c 	uxtah	r3, r3, ip
 800764e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007652:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007656:	b29b      	uxth	r3, r3
 8007658:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800765c:	45c1      	cmp	r9, r8
 800765e:	f841 3b04 	str.w	r3, [r1], #4
 8007662:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007666:	d2e9      	bcs.n	800763c <quorem+0xa6>
 8007668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800766c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007670:	b922      	cbnz	r2, 800767c <quorem+0xe6>
 8007672:	3b04      	subs	r3, #4
 8007674:	429d      	cmp	r5, r3
 8007676:	461a      	mov	r2, r3
 8007678:	d30a      	bcc.n	8007690 <quorem+0xfa>
 800767a:	613c      	str	r4, [r7, #16]
 800767c:	4630      	mov	r0, r6
 800767e:	b003      	add	sp, #12
 8007680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	3b04      	subs	r3, #4
 8007688:	2a00      	cmp	r2, #0
 800768a:	d1ce      	bne.n	800762a <quorem+0x94>
 800768c:	3c01      	subs	r4, #1
 800768e:	e7c9      	b.n	8007624 <quorem+0x8e>
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	3b04      	subs	r3, #4
 8007694:	2a00      	cmp	r2, #0
 8007696:	d1f0      	bne.n	800767a <quorem+0xe4>
 8007698:	3c01      	subs	r4, #1
 800769a:	e7eb      	b.n	8007674 <quorem+0xde>
 800769c:	2000      	movs	r0, #0
 800769e:	e7ee      	b.n	800767e <quorem+0xe8>

080076a0 <_dtoa_r>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	69c4      	ldr	r4, [r0, #28]
 80076a6:	b099      	sub	sp, #100	; 0x64
 80076a8:	4616      	mov	r6, r2
 80076aa:	461f      	mov	r7, r3
 80076ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80076b0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80076b4:	4605      	mov	r5, r0
 80076b6:	b974      	cbnz	r4, 80076d6 <_dtoa_r+0x36>
 80076b8:	2010      	movs	r0, #16
 80076ba:	f000 fe1b 	bl	80082f4 <malloc>
 80076be:	4602      	mov	r2, r0
 80076c0:	61e8      	str	r0, [r5, #28]
 80076c2:	b920      	cbnz	r0, 80076ce <_dtoa_r+0x2e>
 80076c4:	4baa      	ldr	r3, [pc, #680]	; (8007970 <_dtoa_r+0x2d0>)
 80076c6:	21ef      	movs	r1, #239	; 0xef
 80076c8:	48aa      	ldr	r0, [pc, #680]	; (8007974 <_dtoa_r+0x2d4>)
 80076ca:	f001 fccb 	bl	8009064 <__assert_func>
 80076ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076d2:	6004      	str	r4, [r0, #0]
 80076d4:	60c4      	str	r4, [r0, #12]
 80076d6:	69eb      	ldr	r3, [r5, #28]
 80076d8:	6819      	ldr	r1, [r3, #0]
 80076da:	b151      	cbz	r1, 80076f2 <_dtoa_r+0x52>
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	604a      	str	r2, [r1, #4]
 80076e0:	2301      	movs	r3, #1
 80076e2:	4093      	lsls	r3, r2
 80076e4:	608b      	str	r3, [r1, #8]
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 fef8 	bl	80084dc <_Bfree>
 80076ec:	69eb      	ldr	r3, [r5, #28]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	1e3b      	subs	r3, r7, #0
 80076f4:	bfb9      	ittee	lt
 80076f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076fa:	9305      	strlt	r3, [sp, #20]
 80076fc:	2300      	movge	r3, #0
 80076fe:	f8c8 3000 	strge.w	r3, [r8]
 8007702:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007706:	4b9c      	ldr	r3, [pc, #624]	; (8007978 <_dtoa_r+0x2d8>)
 8007708:	bfbc      	itt	lt
 800770a:	2201      	movlt	r2, #1
 800770c:	f8c8 2000 	strlt.w	r2, [r8]
 8007710:	ea33 0309 	bics.w	r3, r3, r9
 8007714:	d119      	bne.n	800774a <_dtoa_r+0xaa>
 8007716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007718:	f242 730f 	movw	r3, #9999	; 0x270f
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007722:	4333      	orrs	r3, r6
 8007724:	f000 8587 	beq.w	8008236 <_dtoa_r+0xb96>
 8007728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800772a:	b953      	cbnz	r3, 8007742 <_dtoa_r+0xa2>
 800772c:	4b93      	ldr	r3, [pc, #588]	; (800797c <_dtoa_r+0x2dc>)
 800772e:	e023      	b.n	8007778 <_dtoa_r+0xd8>
 8007730:	4b93      	ldr	r3, [pc, #588]	; (8007980 <_dtoa_r+0x2e0>)
 8007732:	9303      	str	r3, [sp, #12]
 8007734:	3308      	adds	r3, #8
 8007736:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	9803      	ldr	r0, [sp, #12]
 800773c:	b019      	add	sp, #100	; 0x64
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	4b8e      	ldr	r3, [pc, #568]	; (800797c <_dtoa_r+0x2dc>)
 8007744:	9303      	str	r3, [sp, #12]
 8007746:	3303      	adds	r3, #3
 8007748:	e7f5      	b.n	8007736 <_dtoa_r+0x96>
 800774a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800774e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007752:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	f7f9 f98d 	bl	8000a78 <__aeabi_dcmpeq>
 800775e:	4680      	mov	r8, r0
 8007760:	b160      	cbz	r0, 800777c <_dtoa_r+0xdc>
 8007762:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007764:	2301      	movs	r3, #1
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8560 	beq.w	8008230 <_dtoa_r+0xb90>
 8007770:	4b84      	ldr	r3, [pc, #528]	; (8007984 <_dtoa_r+0x2e4>)
 8007772:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	3b01      	subs	r3, #1
 8007778:	9303      	str	r3, [sp, #12]
 800777a:	e7de      	b.n	800773a <_dtoa_r+0x9a>
 800777c:	ab16      	add	r3, sp, #88	; 0x58
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	ab17      	add	r3, sp, #92	; 0x5c
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4628      	mov	r0, r5
 8007786:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800778a:	f001 f987 	bl	8008a9c <__d2b>
 800778e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007792:	4682      	mov	sl, r0
 8007794:	2c00      	cmp	r4, #0
 8007796:	d07d      	beq.n	8007894 <_dtoa_r+0x1f4>
 8007798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800779a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800779e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077a6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80077aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80077ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80077b2:	4619      	mov	r1, r3
 80077b4:	2200      	movs	r2, #0
 80077b6:	4b74      	ldr	r3, [pc, #464]	; (8007988 <_dtoa_r+0x2e8>)
 80077b8:	f7f8 fd3e 	bl	8000238 <__aeabi_dsub>
 80077bc:	a366      	add	r3, pc, #408	; (adr r3, 8007958 <_dtoa_r+0x2b8>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	f7f8 fef1 	bl	80005a8 <__aeabi_dmul>
 80077c6:	a366      	add	r3, pc, #408	; (adr r3, 8007960 <_dtoa_r+0x2c0>)
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	f7f8 fd36 	bl	800023c <__adddf3>
 80077d0:	4606      	mov	r6, r0
 80077d2:	4620      	mov	r0, r4
 80077d4:	460f      	mov	r7, r1
 80077d6:	f7f8 fe7d 	bl	80004d4 <__aeabi_i2d>
 80077da:	a363      	add	r3, pc, #396	; (adr r3, 8007968 <_dtoa_r+0x2c8>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f8 fee2 	bl	80005a8 <__aeabi_dmul>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4630      	mov	r0, r6
 80077ea:	4639      	mov	r1, r7
 80077ec:	f7f8 fd26 	bl	800023c <__adddf3>
 80077f0:	4606      	mov	r6, r0
 80077f2:	460f      	mov	r7, r1
 80077f4:	f7f9 f988 	bl	8000b08 <__aeabi_d2iz>
 80077f8:	2200      	movs	r2, #0
 80077fa:	4683      	mov	fp, r0
 80077fc:	2300      	movs	r3, #0
 80077fe:	4630      	mov	r0, r6
 8007800:	4639      	mov	r1, r7
 8007802:	f7f9 f943 	bl	8000a8c <__aeabi_dcmplt>
 8007806:	b148      	cbz	r0, 800781c <_dtoa_r+0x17c>
 8007808:	4658      	mov	r0, fp
 800780a:	f7f8 fe63 	bl	80004d4 <__aeabi_i2d>
 800780e:	4632      	mov	r2, r6
 8007810:	463b      	mov	r3, r7
 8007812:	f7f9 f931 	bl	8000a78 <__aeabi_dcmpeq>
 8007816:	b908      	cbnz	r0, 800781c <_dtoa_r+0x17c>
 8007818:	f10b 3bff 	add.w	fp, fp, #4294967295
 800781c:	f1bb 0f16 	cmp.w	fp, #22
 8007820:	d856      	bhi.n	80078d0 <_dtoa_r+0x230>
 8007822:	4b5a      	ldr	r3, [pc, #360]	; (800798c <_dtoa_r+0x2ec>)
 8007824:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007830:	f7f9 f92c 	bl	8000a8c <__aeabi_dcmplt>
 8007834:	2800      	cmp	r0, #0
 8007836:	d04d      	beq.n	80078d4 <_dtoa_r+0x234>
 8007838:	f10b 3bff 	add.w	fp, fp, #4294967295
 800783c:	2300      	movs	r3, #0
 800783e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007840:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007842:	1b1b      	subs	r3, r3, r4
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	bf44      	itt	mi
 8007848:	f1c3 0901 	rsbmi	r9, r3, #1
 800784c:	2300      	movmi	r3, #0
 800784e:	9209      	str	r2, [sp, #36]	; 0x24
 8007850:	bf54      	ite	pl
 8007852:	f04f 0900 	movpl.w	r9, #0
 8007856:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007858:	f1bb 0f00 	cmp.w	fp, #0
 800785c:	db3c      	blt.n	80078d8 <_dtoa_r+0x238>
 800785e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007860:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007864:	445b      	add	r3, fp
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	2300      	movs	r3, #0
 800786a:	930a      	str	r3, [sp, #40]	; 0x28
 800786c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800786e:	2b09      	cmp	r3, #9
 8007870:	d866      	bhi.n	8007940 <_dtoa_r+0x2a0>
 8007872:	2b05      	cmp	r3, #5
 8007874:	bfc4      	itt	gt
 8007876:	3b04      	subgt	r3, #4
 8007878:	9322      	strgt	r3, [sp, #136]	; 0x88
 800787a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800787c:	f1a3 0302 	sub.w	r3, r3, #2
 8007880:	bfcc      	ite	gt
 8007882:	2400      	movgt	r4, #0
 8007884:	2401      	movle	r4, #1
 8007886:	2b03      	cmp	r3, #3
 8007888:	f200 8084 	bhi.w	8007994 <_dtoa_r+0x2f4>
 800788c:	e8df f003 	tbb	[pc, r3]
 8007890:	5637392c 	.word	0x5637392c
 8007894:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007898:	441c      	add	r4, r3
 800789a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800789e:	2b20      	cmp	r3, #32
 80078a0:	bfc1      	itttt	gt
 80078a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078a6:	fa09 f903 	lslgt.w	r9, r9, r3
 80078aa:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80078ae:	fa26 f303 	lsrgt.w	r3, r6, r3
 80078b2:	bfd6      	itet	le
 80078b4:	f1c3 0320 	rsble	r3, r3, #32
 80078b8:	ea49 0003 	orrgt.w	r0, r9, r3
 80078bc:	fa06 f003 	lslle.w	r0, r6, r3
 80078c0:	f7f8 fdf8 	bl	80004b4 <__aeabi_ui2d>
 80078c4:	2201      	movs	r2, #1
 80078c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80078ca:	3c01      	subs	r4, #1
 80078cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80078ce:	e770      	b.n	80077b2 <_dtoa_r+0x112>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e7b4      	b.n	800783e <_dtoa_r+0x19e>
 80078d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80078d6:	e7b3      	b.n	8007840 <_dtoa_r+0x1a0>
 80078d8:	f1cb 0300 	rsb	r3, fp, #0
 80078dc:	930a      	str	r3, [sp, #40]	; 0x28
 80078de:	2300      	movs	r3, #0
 80078e0:	eba9 090b 	sub.w	r9, r9, fp
 80078e4:	930e      	str	r3, [sp, #56]	; 0x38
 80078e6:	e7c1      	b.n	800786c <_dtoa_r+0x1cc>
 80078e8:	2300      	movs	r3, #0
 80078ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dc53      	bgt.n	800799a <_dtoa_r+0x2fa>
 80078f2:	2301      	movs	r3, #1
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	9308      	str	r3, [sp, #32]
 80078f8:	461a      	mov	r2, r3
 80078fa:	9223      	str	r2, [sp, #140]	; 0x8c
 80078fc:	e00b      	b.n	8007916 <_dtoa_r+0x276>
 80078fe:	2301      	movs	r3, #1
 8007900:	e7f3      	b.n	80078ea <_dtoa_r+0x24a>
 8007902:	2300      	movs	r3, #0
 8007904:	930b      	str	r3, [sp, #44]	; 0x2c
 8007906:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007908:	445b      	add	r3, fp
 800790a:	9306      	str	r3, [sp, #24]
 800790c:	3301      	adds	r3, #1
 800790e:	2b01      	cmp	r3, #1
 8007910:	9308      	str	r3, [sp, #32]
 8007912:	bfb8      	it	lt
 8007914:	2301      	movlt	r3, #1
 8007916:	69e8      	ldr	r0, [r5, #28]
 8007918:	2100      	movs	r1, #0
 800791a:	2204      	movs	r2, #4
 800791c:	f102 0614 	add.w	r6, r2, #20
 8007920:	429e      	cmp	r6, r3
 8007922:	d93e      	bls.n	80079a2 <_dtoa_r+0x302>
 8007924:	6041      	str	r1, [r0, #4]
 8007926:	4628      	mov	r0, r5
 8007928:	f000 fd98 	bl	800845c <_Balloc>
 800792c:	9003      	str	r0, [sp, #12]
 800792e:	2800      	cmp	r0, #0
 8007930:	d13a      	bne.n	80079a8 <_dtoa_r+0x308>
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <_dtoa_r+0x2f0>)
 8007934:	4602      	mov	r2, r0
 8007936:	f240 11af 	movw	r1, #431	; 0x1af
 800793a:	e6c5      	b.n	80076c8 <_dtoa_r+0x28>
 800793c:	2301      	movs	r3, #1
 800793e:	e7e1      	b.n	8007904 <_dtoa_r+0x264>
 8007940:	2401      	movs	r4, #1
 8007942:	2300      	movs	r3, #0
 8007944:	9322      	str	r3, [sp, #136]	; 0x88
 8007946:	940b      	str	r4, [sp, #44]	; 0x2c
 8007948:	f04f 33ff 	mov.w	r3, #4294967295
 800794c:	9306      	str	r3, [sp, #24]
 800794e:	9308      	str	r3, [sp, #32]
 8007950:	2200      	movs	r2, #0
 8007952:	2312      	movs	r3, #18
 8007954:	e7d1      	b.n	80078fa <_dtoa_r+0x25a>
 8007956:	bf00      	nop
 8007958:	636f4361 	.word	0x636f4361
 800795c:	3fd287a7 	.word	0x3fd287a7
 8007960:	8b60c8b3 	.word	0x8b60c8b3
 8007964:	3fc68a28 	.word	0x3fc68a28
 8007968:	509f79fb 	.word	0x509f79fb
 800796c:	3fd34413 	.word	0x3fd34413
 8007970:	080093a5 	.word	0x080093a5
 8007974:	080093bc 	.word	0x080093bc
 8007978:	7ff00000 	.word	0x7ff00000
 800797c:	080093a1 	.word	0x080093a1
 8007980:	08009398 	.word	0x08009398
 8007984:	08009375 	.word	0x08009375
 8007988:	3ff80000 	.word	0x3ff80000
 800798c:	080094a8 	.word	0x080094a8
 8007990:	08009414 	.word	0x08009414
 8007994:	2301      	movs	r3, #1
 8007996:	930b      	str	r3, [sp, #44]	; 0x2c
 8007998:	e7d6      	b.n	8007948 <_dtoa_r+0x2a8>
 800799a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800799c:	9306      	str	r3, [sp, #24]
 800799e:	9308      	str	r3, [sp, #32]
 80079a0:	e7b9      	b.n	8007916 <_dtoa_r+0x276>
 80079a2:	3101      	adds	r1, #1
 80079a4:	0052      	lsls	r2, r2, #1
 80079a6:	e7b9      	b.n	800791c <_dtoa_r+0x27c>
 80079a8:	69eb      	ldr	r3, [r5, #28]
 80079aa:	9a03      	ldr	r2, [sp, #12]
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	9b08      	ldr	r3, [sp, #32]
 80079b0:	2b0e      	cmp	r3, #14
 80079b2:	f200 80a8 	bhi.w	8007b06 <_dtoa_r+0x466>
 80079b6:	2c00      	cmp	r4, #0
 80079b8:	f000 80a5 	beq.w	8007b06 <_dtoa_r+0x466>
 80079bc:	f1bb 0f00 	cmp.w	fp, #0
 80079c0:	dd34      	ble.n	8007a2c <_dtoa_r+0x38c>
 80079c2:	4b9a      	ldr	r3, [pc, #616]	; (8007c2c <_dtoa_r+0x58c>)
 80079c4:	f00b 020f 	and.w	r2, fp, #15
 80079c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079d0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80079d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80079d8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80079dc:	d016      	beq.n	8007a0c <_dtoa_r+0x36c>
 80079de:	4b94      	ldr	r3, [pc, #592]	; (8007c30 <_dtoa_r+0x590>)
 80079e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079e8:	f7f8 ff08 	bl	80007fc <__aeabi_ddiv>
 80079ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079f0:	f004 040f 	and.w	r4, r4, #15
 80079f4:	2703      	movs	r7, #3
 80079f6:	4e8e      	ldr	r6, [pc, #568]	; (8007c30 <_dtoa_r+0x590>)
 80079f8:	b954      	cbnz	r4, 8007a10 <_dtoa_r+0x370>
 80079fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a02:	f7f8 fefb 	bl	80007fc <__aeabi_ddiv>
 8007a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a0a:	e029      	b.n	8007a60 <_dtoa_r+0x3c0>
 8007a0c:	2702      	movs	r7, #2
 8007a0e:	e7f2      	b.n	80079f6 <_dtoa_r+0x356>
 8007a10:	07e1      	lsls	r1, r4, #31
 8007a12:	d508      	bpl.n	8007a26 <_dtoa_r+0x386>
 8007a14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a1c:	f7f8 fdc4 	bl	80005a8 <__aeabi_dmul>
 8007a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a24:	3701      	adds	r7, #1
 8007a26:	1064      	asrs	r4, r4, #1
 8007a28:	3608      	adds	r6, #8
 8007a2a:	e7e5      	b.n	80079f8 <_dtoa_r+0x358>
 8007a2c:	f000 80a5 	beq.w	8007b7a <_dtoa_r+0x4da>
 8007a30:	f1cb 0400 	rsb	r4, fp, #0
 8007a34:	4b7d      	ldr	r3, [pc, #500]	; (8007c2c <_dtoa_r+0x58c>)
 8007a36:	4e7e      	ldr	r6, [pc, #504]	; (8007c30 <_dtoa_r+0x590>)
 8007a38:	f004 020f 	and.w	r2, r4, #15
 8007a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a48:	f7f8 fdae 	bl	80005a8 <__aeabi_dmul>
 8007a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a50:	1124      	asrs	r4, r4, #4
 8007a52:	2300      	movs	r3, #0
 8007a54:	2702      	movs	r7, #2
 8007a56:	2c00      	cmp	r4, #0
 8007a58:	f040 8084 	bne.w	8007b64 <_dtoa_r+0x4c4>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1d2      	bne.n	8007a06 <_dtoa_r+0x366>
 8007a60:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 8087 	beq.w	8007b7e <_dtoa_r+0x4de>
 8007a70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a74:	4b6f      	ldr	r3, [pc, #444]	; (8007c34 <_dtoa_r+0x594>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	f7f9 f808 	bl	8000a8c <__aeabi_dcmplt>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d07e      	beq.n	8007b7e <_dtoa_r+0x4de>
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d07b      	beq.n	8007b7e <_dtoa_r+0x4de>
 8007a86:	9b06      	ldr	r3, [sp, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dd38      	ble.n	8007afe <_dtoa_r+0x45e>
 8007a8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a90:	4b69      	ldr	r3, [pc, #420]	; (8007c38 <_dtoa_r+0x598>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	f7f8 fd88 	bl	80005a8 <__aeabi_dmul>
 8007a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a9c:	9c06      	ldr	r4, [sp, #24]
 8007a9e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007aa2:	3701      	adds	r7, #1
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f7f8 fd15 	bl	80004d4 <__aeabi_i2d>
 8007aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aae:	f7f8 fd7b 	bl	80005a8 <__aeabi_dmul>
 8007ab2:	4b62      	ldr	r3, [pc, #392]	; (8007c3c <_dtoa_r+0x59c>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f7f8 fbc1 	bl	800023c <__adddf3>
 8007aba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007abe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ac2:	9611      	str	r6, [sp, #68]	; 0x44
 8007ac4:	2c00      	cmp	r4, #0
 8007ac6:	d15d      	bne.n	8007b84 <_dtoa_r+0x4e4>
 8007ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007acc:	4b5c      	ldr	r3, [pc, #368]	; (8007c40 <_dtoa_r+0x5a0>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f7f8 fbb2 	bl	8000238 <__aeabi_dsub>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ade:	4633      	mov	r3, r6
 8007ae0:	f7f8 fff2 	bl	8000ac8 <__aeabi_dcmpgt>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	f040 8295 	bne.w	8008014 <_dtoa_r+0x974>
 8007aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007af0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007af4:	f7f8 ffca 	bl	8000a8c <__aeabi_dcmplt>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	f040 8289 	bne.w	8008010 <_dtoa_r+0x970>
 8007afe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007b02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f2c0 8151 	blt.w	8007db0 <_dtoa_r+0x710>
 8007b0e:	f1bb 0f0e 	cmp.w	fp, #14
 8007b12:	f300 814d 	bgt.w	8007db0 <_dtoa_r+0x710>
 8007b16:	4b45      	ldr	r3, [pc, #276]	; (8007c2c <_dtoa_r+0x58c>)
 8007b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007b24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f280 80da 	bge.w	8007ce0 <_dtoa_r+0x640>
 8007b2c:	9b08      	ldr	r3, [sp, #32]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f300 80d6 	bgt.w	8007ce0 <_dtoa_r+0x640>
 8007b34:	f040 826b 	bne.w	800800e <_dtoa_r+0x96e>
 8007b38:	4b41      	ldr	r3, [pc, #260]	; (8007c40 <_dtoa_r+0x5a0>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b40:	f7f8 fd32 	bl	80005a8 <__aeabi_dmul>
 8007b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b48:	f7f8 ffb4 	bl	8000ab4 <__aeabi_dcmpge>
 8007b4c:	9c08      	ldr	r4, [sp, #32]
 8007b4e:	4626      	mov	r6, r4
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f040 8241 	bne.w	8007fd8 <_dtoa_r+0x938>
 8007b56:	9f03      	ldr	r7, [sp, #12]
 8007b58:	2331      	movs	r3, #49	; 0x31
 8007b5a:	f807 3b01 	strb.w	r3, [r7], #1
 8007b5e:	f10b 0b01 	add.w	fp, fp, #1
 8007b62:	e23d      	b.n	8007fe0 <_dtoa_r+0x940>
 8007b64:	07e2      	lsls	r2, r4, #31
 8007b66:	d505      	bpl.n	8007b74 <_dtoa_r+0x4d4>
 8007b68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b6c:	f7f8 fd1c 	bl	80005a8 <__aeabi_dmul>
 8007b70:	3701      	adds	r7, #1
 8007b72:	2301      	movs	r3, #1
 8007b74:	1064      	asrs	r4, r4, #1
 8007b76:	3608      	adds	r6, #8
 8007b78:	e76d      	b.n	8007a56 <_dtoa_r+0x3b6>
 8007b7a:	2702      	movs	r7, #2
 8007b7c:	e770      	b.n	8007a60 <_dtoa_r+0x3c0>
 8007b7e:	9c08      	ldr	r4, [sp, #32]
 8007b80:	46d8      	mov	r8, fp
 8007b82:	e78f      	b.n	8007aa4 <_dtoa_r+0x404>
 8007b84:	9903      	ldr	r1, [sp, #12]
 8007b86:	4b29      	ldr	r3, [pc, #164]	; (8007c2c <_dtoa_r+0x58c>)
 8007b88:	4421      	add	r1, r4
 8007b8a:	9112      	str	r1, [sp, #72]	; 0x48
 8007b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b9a:	2900      	cmp	r1, #0
 8007b9c:	d054      	beq.n	8007c48 <_dtoa_r+0x5a8>
 8007b9e:	4929      	ldr	r1, [pc, #164]	; (8007c44 <_dtoa_r+0x5a4>)
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f7f8 fe2b 	bl	80007fc <__aeabi_ddiv>
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	4632      	mov	r2, r6
 8007baa:	f7f8 fb45 	bl	8000238 <__aeabi_dsub>
 8007bae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bb2:	9f03      	ldr	r7, [sp, #12]
 8007bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bb8:	f7f8 ffa6 	bl	8000b08 <__aeabi_d2iz>
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	f7f8 fc89 	bl	80004d4 <__aeabi_i2d>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bca:	f7f8 fb35 	bl	8000238 <__aeabi_dsub>
 8007bce:	3430      	adds	r4, #48	; 0x30
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bd8:	f807 4b01 	strb.w	r4, [r7], #1
 8007bdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007be0:	f7f8 ff54 	bl	8000a8c <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d173      	bne.n	8007cd0 <_dtoa_r+0x630>
 8007be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bec:	4911      	ldr	r1, [pc, #68]	; (8007c34 <_dtoa_r+0x594>)
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f7f8 fb22 	bl	8000238 <__aeabi_dsub>
 8007bf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bf8:	f7f8 ff48 	bl	8000a8c <__aeabi_dcmplt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 80b6 	bne.w	8007d6e <_dtoa_r+0x6ce>
 8007c02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c04:	429f      	cmp	r7, r3
 8007c06:	f43f af7a 	beq.w	8007afe <_dtoa_r+0x45e>
 8007c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <_dtoa_r+0x598>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	f7f8 fcc9 	bl	80005a8 <__aeabi_dmul>
 8007c16:	4b08      	ldr	r3, [pc, #32]	; (8007c38 <_dtoa_r+0x598>)
 8007c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c22:	f7f8 fcc1 	bl	80005a8 <__aeabi_dmul>
 8007c26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c2a:	e7c3      	b.n	8007bb4 <_dtoa_r+0x514>
 8007c2c:	080094a8 	.word	0x080094a8
 8007c30:	08009480 	.word	0x08009480
 8007c34:	3ff00000 	.word	0x3ff00000
 8007c38:	40240000 	.word	0x40240000
 8007c3c:	401c0000 	.word	0x401c0000
 8007c40:	40140000 	.word	0x40140000
 8007c44:	3fe00000 	.word	0x3fe00000
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	f7f8 fcac 	bl	80005a8 <__aeabi_dmul>
 8007c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c56:	9c03      	ldr	r4, [sp, #12]
 8007c58:	9314      	str	r3, [sp, #80]	; 0x50
 8007c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c5e:	f7f8 ff53 	bl	8000b08 <__aeabi_d2iz>
 8007c62:	9015      	str	r0, [sp, #84]	; 0x54
 8007c64:	f7f8 fc36 	bl	80004d4 <__aeabi_i2d>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c70:	f7f8 fae2 	bl	8000238 <__aeabi_dsub>
 8007c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c76:	3330      	adds	r3, #48	; 0x30
 8007c78:	f804 3b01 	strb.w	r3, [r4], #1
 8007c7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c7e:	429c      	cmp	r4, r3
 8007c80:	4606      	mov	r6, r0
 8007c82:	460f      	mov	r7, r1
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	d124      	bne.n	8007cd4 <_dtoa_r+0x634>
 8007c8a:	4bb0      	ldr	r3, [pc, #704]	; (8007f4c <_dtoa_r+0x8ac>)
 8007c8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c90:	f7f8 fad4 	bl	800023c <__adddf3>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4630      	mov	r0, r6
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	f7f8 ff14 	bl	8000ac8 <__aeabi_dcmpgt>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d163      	bne.n	8007d6c <_dtoa_r+0x6cc>
 8007ca4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ca8:	49a8      	ldr	r1, [pc, #672]	; (8007f4c <_dtoa_r+0x8ac>)
 8007caa:	2000      	movs	r0, #0
 8007cac:	f7f8 fac4 	bl	8000238 <__aeabi_dsub>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fee8 	bl	8000a8c <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f43f af1e 	beq.w	8007afe <_dtoa_r+0x45e>
 8007cc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007cc4:	1e7b      	subs	r3, r7, #1
 8007cc6:	9314      	str	r3, [sp, #80]	; 0x50
 8007cc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d0f8      	beq.n	8007cc2 <_dtoa_r+0x622>
 8007cd0:	46c3      	mov	fp, r8
 8007cd2:	e03b      	b.n	8007d4c <_dtoa_r+0x6ac>
 8007cd4:	4b9e      	ldr	r3, [pc, #632]	; (8007f50 <_dtoa_r+0x8b0>)
 8007cd6:	f7f8 fc67 	bl	80005a8 <__aeabi_dmul>
 8007cda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cde:	e7bc      	b.n	8007c5a <_dtoa_r+0x5ba>
 8007ce0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007ce4:	9f03      	ldr	r7, [sp, #12]
 8007ce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 fd85 	bl	80007fc <__aeabi_ddiv>
 8007cf2:	f7f8 ff09 	bl	8000b08 <__aeabi_d2iz>
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	f7f8 fbec 	bl	80004d4 <__aeabi_i2d>
 8007cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d00:	f7f8 fc52 	bl	80005a8 <__aeabi_dmul>
 8007d04:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 fa92 	bl	8000238 <__aeabi_dsub>
 8007d14:	f807 6b01 	strb.w	r6, [r7], #1
 8007d18:	9e03      	ldr	r6, [sp, #12]
 8007d1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007d1e:	1bbe      	subs	r6, r7, r6
 8007d20:	45b4      	cmp	ip, r6
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	d136      	bne.n	8007d96 <_dtoa_r+0x6f6>
 8007d28:	f7f8 fa88 	bl	800023c <__adddf3>
 8007d2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d30:	4680      	mov	r8, r0
 8007d32:	4689      	mov	r9, r1
 8007d34:	f7f8 fec8 	bl	8000ac8 <__aeabi_dcmpgt>
 8007d38:	bb58      	cbnz	r0, 8007d92 <_dtoa_r+0x6f2>
 8007d3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f7f8 fe99 	bl	8000a78 <__aeabi_dcmpeq>
 8007d46:	b108      	cbz	r0, 8007d4c <_dtoa_r+0x6ac>
 8007d48:	07e3      	lsls	r3, r4, #31
 8007d4a:	d422      	bmi.n	8007d92 <_dtoa_r+0x6f2>
 8007d4c:	4651      	mov	r1, sl
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 fbc4 	bl	80084dc <_Bfree>
 8007d54:	2300      	movs	r3, #0
 8007d56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d58:	703b      	strb	r3, [r7, #0]
 8007d5a:	f10b 0301 	add.w	r3, fp, #1
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f43f ace9 	beq.w	800773a <_dtoa_r+0x9a>
 8007d68:	601f      	str	r7, [r3, #0]
 8007d6a:	e4e6      	b.n	800773a <_dtoa_r+0x9a>
 8007d6c:	4627      	mov	r7, r4
 8007d6e:	463b      	mov	r3, r7
 8007d70:	461f      	mov	r7, r3
 8007d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d76:	2a39      	cmp	r2, #57	; 0x39
 8007d78:	d107      	bne.n	8007d8a <_dtoa_r+0x6ea>
 8007d7a:	9a03      	ldr	r2, [sp, #12]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d1f7      	bne.n	8007d70 <_dtoa_r+0x6d0>
 8007d80:	9903      	ldr	r1, [sp, #12]
 8007d82:	2230      	movs	r2, #48	; 0x30
 8007d84:	f108 0801 	add.w	r8, r8, #1
 8007d88:	700a      	strb	r2, [r1, #0]
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	3201      	adds	r2, #1
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	e79e      	b.n	8007cd0 <_dtoa_r+0x630>
 8007d92:	46d8      	mov	r8, fp
 8007d94:	e7eb      	b.n	8007d6e <_dtoa_r+0x6ce>
 8007d96:	4b6e      	ldr	r3, [pc, #440]	; (8007f50 <_dtoa_r+0x8b0>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f7f8 fc05 	bl	80005a8 <__aeabi_dmul>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2300      	movs	r3, #0
 8007da2:	4680      	mov	r8, r0
 8007da4:	4689      	mov	r9, r1
 8007da6:	f7f8 fe67 	bl	8000a78 <__aeabi_dcmpeq>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d09b      	beq.n	8007ce6 <_dtoa_r+0x646>
 8007dae:	e7cd      	b.n	8007d4c <_dtoa_r+0x6ac>
 8007db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	f000 80c4 	beq.w	8007f40 <_dtoa_r+0x8a0>
 8007db8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007dba:	2a01      	cmp	r2, #1
 8007dbc:	f300 80a8 	bgt.w	8007f10 <_dtoa_r+0x870>
 8007dc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	f000 80a0 	beq.w	8007f08 <_dtoa_r+0x868>
 8007dc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dce:	464f      	mov	r7, r9
 8007dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	441a      	add	r2, r3
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	4499      	add	r9, r3
 8007dda:	9209      	str	r2, [sp, #36]	; 0x24
 8007ddc:	f000 fc34 	bl	8008648 <__i2b>
 8007de0:	4606      	mov	r6, r0
 8007de2:	b15f      	cbz	r7, 8007dfc <_dtoa_r+0x75c>
 8007de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dd08      	ble.n	8007dfc <_dtoa_r+0x75c>
 8007dea:	42bb      	cmp	r3, r7
 8007dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dee:	bfa8      	it	ge
 8007df0:	463b      	movge	r3, r7
 8007df2:	eba9 0903 	sub.w	r9, r9, r3
 8007df6:	1aff      	subs	r7, r7, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfe:	b1f3      	cbz	r3, 8007e3e <_dtoa_r+0x79e>
 8007e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80a0 	beq.w	8007f48 <_dtoa_r+0x8a8>
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	dd10      	ble.n	8007e2e <_dtoa_r+0x78e>
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 fcd9 	bl	80087c8 <__pow5mult>
 8007e16:	4652      	mov	r2, sl
 8007e18:	4601      	mov	r1, r0
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 fc29 	bl	8008674 <__multiply>
 8007e22:	4651      	mov	r1, sl
 8007e24:	4680      	mov	r8, r0
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fb58 	bl	80084dc <_Bfree>
 8007e2c:	46c2      	mov	sl, r8
 8007e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e30:	1b1a      	subs	r2, r3, r4
 8007e32:	d004      	beq.n	8007e3e <_dtoa_r+0x79e>
 8007e34:	4651      	mov	r1, sl
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 fcc6 	bl	80087c8 <__pow5mult>
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	2101      	movs	r1, #1
 8007e40:	4628      	mov	r0, r5
 8007e42:	f000 fc01 	bl	8008648 <__i2b>
 8007e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	f340 8082 	ble.w	8007f54 <_dtoa_r+0x8b4>
 8007e50:	461a      	mov	r2, r3
 8007e52:	4601      	mov	r1, r0
 8007e54:	4628      	mov	r0, r5
 8007e56:	f000 fcb7 	bl	80087c8 <__pow5mult>
 8007e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	4604      	mov	r4, r0
 8007e60:	dd7b      	ble.n	8007f5a <_dtoa_r+0x8ba>
 8007e62:	f04f 0800 	mov.w	r8, #0
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e6c:	6918      	ldr	r0, [r3, #16]
 8007e6e:	f000 fb9d 	bl	80085ac <__hi0bits>
 8007e72:	f1c0 0020 	rsb	r0, r0, #32
 8007e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e78:	4418      	add	r0, r3
 8007e7a:	f010 001f 	ands.w	r0, r0, #31
 8007e7e:	f000 8092 	beq.w	8007fa6 <_dtoa_r+0x906>
 8007e82:	f1c0 0320 	rsb	r3, r0, #32
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	f340 8085 	ble.w	8007f96 <_dtoa_r+0x8f6>
 8007e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8e:	f1c0 001c 	rsb	r0, r0, #28
 8007e92:	4403      	add	r3, r0
 8007e94:	4481      	add	r9, r0
 8007e96:	4407      	add	r7, r0
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	f1b9 0f00 	cmp.w	r9, #0
 8007e9e:	dd05      	ble.n	8007eac <_dtoa_r+0x80c>
 8007ea0:	4651      	mov	r1, sl
 8007ea2:	464a      	mov	r2, r9
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 fce9 	bl	800887c <__lshift>
 8007eaa:	4682      	mov	sl, r0
 8007eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dd05      	ble.n	8007ebe <_dtoa_r+0x81e>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 fce0 	bl	800887c <__lshift>
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d072      	beq.n	8007faa <_dtoa_r+0x90a>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4650      	mov	r0, sl
 8007ec8:	f000 fd44 	bl	8008954 <__mcmp>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	da6c      	bge.n	8007faa <_dtoa_r+0x90a>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	220a      	movs	r2, #10
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fb22 	bl	8008520 <__multadd>
 8007edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ede:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ee2:	4682      	mov	sl, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 81ad 	beq.w	8008244 <_dtoa_r+0xba4>
 8007eea:	2300      	movs	r3, #0
 8007eec:	4631      	mov	r1, r6
 8007eee:	220a      	movs	r2, #10
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f000 fb15 	bl	8008520 <__multadd>
 8007ef6:	9b06      	ldr	r3, [sp, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	4606      	mov	r6, r0
 8007efc:	f300 8093 	bgt.w	8008026 <_dtoa_r+0x986>
 8007f00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	dc59      	bgt.n	8007fba <_dtoa_r+0x91a>
 8007f06:	e08e      	b.n	8008026 <_dtoa_r+0x986>
 8007f08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f0e:	e75d      	b.n	8007dcc <_dtoa_r+0x72c>
 8007f10:	9b08      	ldr	r3, [sp, #32]
 8007f12:	1e5c      	subs	r4, r3, #1
 8007f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	bfbf      	itttt	lt
 8007f1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f1c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007f1e:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007f20:	1ae3      	sublt	r3, r4, r3
 8007f22:	bfb4      	ite	lt
 8007f24:	18d2      	addlt	r2, r2, r3
 8007f26:	1b1c      	subge	r4, r3, r4
 8007f28:	9b08      	ldr	r3, [sp, #32]
 8007f2a:	bfbc      	itt	lt
 8007f2c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007f2e:	2400      	movlt	r4, #0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bfb5      	itete	lt
 8007f34:	eba9 0703 	sublt.w	r7, r9, r3
 8007f38:	9b08      	ldrge	r3, [sp, #32]
 8007f3a:	2300      	movlt	r3, #0
 8007f3c:	464f      	movge	r7, r9
 8007f3e:	e747      	b.n	8007dd0 <_dtoa_r+0x730>
 8007f40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f42:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007f44:	464f      	mov	r7, r9
 8007f46:	e74c      	b.n	8007de2 <_dtoa_r+0x742>
 8007f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4a:	e773      	b.n	8007e34 <_dtoa_r+0x794>
 8007f4c:	3fe00000 	.word	0x3fe00000
 8007f50:	40240000 	.word	0x40240000
 8007f54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	dc18      	bgt.n	8007f8c <_dtoa_r+0x8ec>
 8007f5a:	9b04      	ldr	r3, [sp, #16]
 8007f5c:	b9b3      	cbnz	r3, 8007f8c <_dtoa_r+0x8ec>
 8007f5e:	9b05      	ldr	r3, [sp, #20]
 8007f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f64:	b993      	cbnz	r3, 8007f8c <_dtoa_r+0x8ec>
 8007f66:	9b05      	ldr	r3, [sp, #20]
 8007f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f6c:	0d1b      	lsrs	r3, r3, #20
 8007f6e:	051b      	lsls	r3, r3, #20
 8007f70:	b17b      	cbz	r3, 8007f92 <_dtoa_r+0x8f2>
 8007f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f74:	3301      	adds	r3, #1
 8007f76:	f109 0901 	add.w	r9, r9, #1
 8007f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7c:	f04f 0801 	mov.w	r8, #1
 8007f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f47f af6f 	bne.w	8007e66 <_dtoa_r+0x7c6>
 8007f88:	2001      	movs	r0, #1
 8007f8a:	e774      	b.n	8007e76 <_dtoa_r+0x7d6>
 8007f8c:	f04f 0800 	mov.w	r8, #0
 8007f90:	e7f6      	b.n	8007f80 <_dtoa_r+0x8e0>
 8007f92:	4698      	mov	r8, r3
 8007f94:	e7f4      	b.n	8007f80 <_dtoa_r+0x8e0>
 8007f96:	d080      	beq.n	8007e9a <_dtoa_r+0x7fa>
 8007f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f9a:	331c      	adds	r3, #28
 8007f9c:	441a      	add	r2, r3
 8007f9e:	4499      	add	r9, r3
 8007fa0:	441f      	add	r7, r3
 8007fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa4:	e779      	b.n	8007e9a <_dtoa_r+0x7fa>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	e7f6      	b.n	8007f98 <_dtoa_r+0x8f8>
 8007faa:	9b08      	ldr	r3, [sp, #32]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dc34      	bgt.n	800801a <_dtoa_r+0x97a>
 8007fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	dd31      	ble.n	800801a <_dtoa_r+0x97a>
 8007fb6:	9b08      	ldr	r3, [sp, #32]
 8007fb8:	9306      	str	r3, [sp, #24]
 8007fba:	9b06      	ldr	r3, [sp, #24]
 8007fbc:	b963      	cbnz	r3, 8007fd8 <_dtoa_r+0x938>
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	2205      	movs	r2, #5
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f000 faac 	bl	8008520 <__multadd>
 8007fc8:	4601      	mov	r1, r0
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4650      	mov	r0, sl
 8007fce:	f000 fcc1 	bl	8008954 <__mcmp>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	f73f adbf 	bgt.w	8007b56 <_dtoa_r+0x4b6>
 8007fd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fda:	9f03      	ldr	r7, [sp, #12]
 8007fdc:	ea6f 0b03 	mvn.w	fp, r3
 8007fe0:	f04f 0800 	mov.w	r8, #0
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 fa78 	bl	80084dc <_Bfree>
 8007fec:	2e00      	cmp	r6, #0
 8007fee:	f43f aead 	beq.w	8007d4c <_dtoa_r+0x6ac>
 8007ff2:	f1b8 0f00 	cmp.w	r8, #0
 8007ff6:	d005      	beq.n	8008004 <_dtoa_r+0x964>
 8007ff8:	45b0      	cmp	r8, r6
 8007ffa:	d003      	beq.n	8008004 <_dtoa_r+0x964>
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	4628      	mov	r0, r5
 8008000:	f000 fa6c 	bl	80084dc <_Bfree>
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	f000 fa68 	bl	80084dc <_Bfree>
 800800c:	e69e      	b.n	8007d4c <_dtoa_r+0x6ac>
 800800e:	2400      	movs	r4, #0
 8008010:	4626      	mov	r6, r4
 8008012:	e7e1      	b.n	8007fd8 <_dtoa_r+0x938>
 8008014:	46c3      	mov	fp, r8
 8008016:	4626      	mov	r6, r4
 8008018:	e59d      	b.n	8007b56 <_dtoa_r+0x4b6>
 800801a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 80c8 	beq.w	80081b2 <_dtoa_r+0xb12>
 8008022:	9b08      	ldr	r3, [sp, #32]
 8008024:	9306      	str	r3, [sp, #24]
 8008026:	2f00      	cmp	r7, #0
 8008028:	dd05      	ble.n	8008036 <_dtoa_r+0x996>
 800802a:	4631      	mov	r1, r6
 800802c:	463a      	mov	r2, r7
 800802e:	4628      	mov	r0, r5
 8008030:	f000 fc24 	bl	800887c <__lshift>
 8008034:	4606      	mov	r6, r0
 8008036:	f1b8 0f00 	cmp.w	r8, #0
 800803a:	d05b      	beq.n	80080f4 <_dtoa_r+0xa54>
 800803c:	6871      	ldr	r1, [r6, #4]
 800803e:	4628      	mov	r0, r5
 8008040:	f000 fa0c 	bl	800845c <_Balloc>
 8008044:	4607      	mov	r7, r0
 8008046:	b928      	cbnz	r0, 8008054 <_dtoa_r+0x9b4>
 8008048:	4b82      	ldr	r3, [pc, #520]	; (8008254 <_dtoa_r+0xbb4>)
 800804a:	4602      	mov	r2, r0
 800804c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008050:	f7ff bb3a 	b.w	80076c8 <_dtoa_r+0x28>
 8008054:	6932      	ldr	r2, [r6, #16]
 8008056:	3202      	adds	r2, #2
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	f106 010c 	add.w	r1, r6, #12
 800805e:	300c      	adds	r0, #12
 8008060:	f000 fff2 	bl	8009048 <memcpy>
 8008064:	2201      	movs	r2, #1
 8008066:	4639      	mov	r1, r7
 8008068:	4628      	mov	r0, r5
 800806a:	f000 fc07 	bl	800887c <__lshift>
 800806e:	9b03      	ldr	r3, [sp, #12]
 8008070:	9a03      	ldr	r2, [sp, #12]
 8008072:	3301      	adds	r3, #1
 8008074:	9308      	str	r3, [sp, #32]
 8008076:	9b06      	ldr	r3, [sp, #24]
 8008078:	4413      	add	r3, r2
 800807a:	930b      	str	r3, [sp, #44]	; 0x2c
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	46b0      	mov	r8, r6
 8008084:	930a      	str	r3, [sp, #40]	; 0x28
 8008086:	4606      	mov	r6, r0
 8008088:	9b08      	ldr	r3, [sp, #32]
 800808a:	4621      	mov	r1, r4
 800808c:	3b01      	subs	r3, #1
 800808e:	4650      	mov	r0, sl
 8008090:	9304      	str	r3, [sp, #16]
 8008092:	f7ff fa80 	bl	8007596 <quorem>
 8008096:	4641      	mov	r1, r8
 8008098:	9006      	str	r0, [sp, #24]
 800809a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800809e:	4650      	mov	r0, sl
 80080a0:	f000 fc58 	bl	8008954 <__mcmp>
 80080a4:	4632      	mov	r2, r6
 80080a6:	9009      	str	r0, [sp, #36]	; 0x24
 80080a8:	4621      	mov	r1, r4
 80080aa:	4628      	mov	r0, r5
 80080ac:	f000 fc6e 	bl	800898c <__mdiff>
 80080b0:	68c2      	ldr	r2, [r0, #12]
 80080b2:	4607      	mov	r7, r0
 80080b4:	bb02      	cbnz	r2, 80080f8 <_dtoa_r+0xa58>
 80080b6:	4601      	mov	r1, r0
 80080b8:	4650      	mov	r0, sl
 80080ba:	f000 fc4b 	bl	8008954 <__mcmp>
 80080be:	4602      	mov	r2, r0
 80080c0:	4639      	mov	r1, r7
 80080c2:	4628      	mov	r0, r5
 80080c4:	920c      	str	r2, [sp, #48]	; 0x30
 80080c6:	f000 fa09 	bl	80084dc <_Bfree>
 80080ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080ce:	9f08      	ldr	r7, [sp, #32]
 80080d0:	ea43 0102 	orr.w	r1, r3, r2
 80080d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d6:	4319      	orrs	r1, r3
 80080d8:	d110      	bne.n	80080fc <_dtoa_r+0xa5c>
 80080da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080de:	d029      	beq.n	8008134 <_dtoa_r+0xa94>
 80080e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	dd02      	ble.n	80080ec <_dtoa_r+0xa4c>
 80080e6:	9b06      	ldr	r3, [sp, #24]
 80080e8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	f883 9000 	strb.w	r9, [r3]
 80080f2:	e777      	b.n	8007fe4 <_dtoa_r+0x944>
 80080f4:	4630      	mov	r0, r6
 80080f6:	e7ba      	b.n	800806e <_dtoa_r+0x9ce>
 80080f8:	2201      	movs	r2, #1
 80080fa:	e7e1      	b.n	80080c0 <_dtoa_r+0xa20>
 80080fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	db04      	blt.n	800810c <_dtoa_r+0xa6c>
 8008102:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008104:	430b      	orrs	r3, r1
 8008106:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008108:	430b      	orrs	r3, r1
 800810a:	d120      	bne.n	800814e <_dtoa_r+0xaae>
 800810c:	2a00      	cmp	r2, #0
 800810e:	dded      	ble.n	80080ec <_dtoa_r+0xa4c>
 8008110:	4651      	mov	r1, sl
 8008112:	2201      	movs	r2, #1
 8008114:	4628      	mov	r0, r5
 8008116:	f000 fbb1 	bl	800887c <__lshift>
 800811a:	4621      	mov	r1, r4
 800811c:	4682      	mov	sl, r0
 800811e:	f000 fc19 	bl	8008954 <__mcmp>
 8008122:	2800      	cmp	r0, #0
 8008124:	dc03      	bgt.n	800812e <_dtoa_r+0xa8e>
 8008126:	d1e1      	bne.n	80080ec <_dtoa_r+0xa4c>
 8008128:	f019 0f01 	tst.w	r9, #1
 800812c:	d0de      	beq.n	80080ec <_dtoa_r+0xa4c>
 800812e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008132:	d1d8      	bne.n	80080e6 <_dtoa_r+0xa46>
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	2339      	movs	r3, #57	; 0x39
 8008138:	7013      	strb	r3, [r2, #0]
 800813a:	463b      	mov	r3, r7
 800813c:	461f      	mov	r7, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008144:	2a39      	cmp	r2, #57	; 0x39
 8008146:	d06c      	beq.n	8008222 <_dtoa_r+0xb82>
 8008148:	3201      	adds	r2, #1
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e74a      	b.n	8007fe4 <_dtoa_r+0x944>
 800814e:	2a00      	cmp	r2, #0
 8008150:	dd07      	ble.n	8008162 <_dtoa_r+0xac2>
 8008152:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008156:	d0ed      	beq.n	8008134 <_dtoa_r+0xa94>
 8008158:	9a04      	ldr	r2, [sp, #16]
 800815a:	f109 0301 	add.w	r3, r9, #1
 800815e:	7013      	strb	r3, [r2, #0]
 8008160:	e740      	b.n	8007fe4 <_dtoa_r+0x944>
 8008162:	9b08      	ldr	r3, [sp, #32]
 8008164:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008166:	f803 9c01 	strb.w	r9, [r3, #-1]
 800816a:	4293      	cmp	r3, r2
 800816c:	d043      	beq.n	80081f6 <_dtoa_r+0xb56>
 800816e:	4651      	mov	r1, sl
 8008170:	2300      	movs	r3, #0
 8008172:	220a      	movs	r2, #10
 8008174:	4628      	mov	r0, r5
 8008176:	f000 f9d3 	bl	8008520 <__multadd>
 800817a:	45b0      	cmp	r8, r6
 800817c:	4682      	mov	sl, r0
 800817e:	f04f 0300 	mov.w	r3, #0
 8008182:	f04f 020a 	mov.w	r2, #10
 8008186:	4641      	mov	r1, r8
 8008188:	4628      	mov	r0, r5
 800818a:	d107      	bne.n	800819c <_dtoa_r+0xafc>
 800818c:	f000 f9c8 	bl	8008520 <__multadd>
 8008190:	4680      	mov	r8, r0
 8008192:	4606      	mov	r6, r0
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	3301      	adds	r3, #1
 8008198:	9308      	str	r3, [sp, #32]
 800819a:	e775      	b.n	8008088 <_dtoa_r+0x9e8>
 800819c:	f000 f9c0 	bl	8008520 <__multadd>
 80081a0:	4631      	mov	r1, r6
 80081a2:	4680      	mov	r8, r0
 80081a4:	2300      	movs	r3, #0
 80081a6:	220a      	movs	r2, #10
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 f9b9 	bl	8008520 <__multadd>
 80081ae:	4606      	mov	r6, r0
 80081b0:	e7f0      	b.n	8008194 <_dtoa_r+0xaf4>
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	9306      	str	r3, [sp, #24]
 80081b6:	9f03      	ldr	r7, [sp, #12]
 80081b8:	4621      	mov	r1, r4
 80081ba:	4650      	mov	r0, sl
 80081bc:	f7ff f9eb 	bl	8007596 <quorem>
 80081c0:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	f807 9b01 	strb.w	r9, [r7], #1
 80081ca:	1afa      	subs	r2, r7, r3
 80081cc:	9b06      	ldr	r3, [sp, #24]
 80081ce:	4293      	cmp	r3, r2
 80081d0:	dd07      	ble.n	80081e2 <_dtoa_r+0xb42>
 80081d2:	4651      	mov	r1, sl
 80081d4:	2300      	movs	r3, #0
 80081d6:	220a      	movs	r2, #10
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 f9a1 	bl	8008520 <__multadd>
 80081de:	4682      	mov	sl, r0
 80081e0:	e7ea      	b.n	80081b8 <_dtoa_r+0xb18>
 80081e2:	9b06      	ldr	r3, [sp, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bfc8      	it	gt
 80081e8:	461f      	movgt	r7, r3
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	bfd8      	it	le
 80081ee:	2701      	movle	r7, #1
 80081f0:	441f      	add	r7, r3
 80081f2:	f04f 0800 	mov.w	r8, #0
 80081f6:	4651      	mov	r1, sl
 80081f8:	2201      	movs	r2, #1
 80081fa:	4628      	mov	r0, r5
 80081fc:	f000 fb3e 	bl	800887c <__lshift>
 8008200:	4621      	mov	r1, r4
 8008202:	4682      	mov	sl, r0
 8008204:	f000 fba6 	bl	8008954 <__mcmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	dc96      	bgt.n	800813a <_dtoa_r+0xa9a>
 800820c:	d102      	bne.n	8008214 <_dtoa_r+0xb74>
 800820e:	f019 0f01 	tst.w	r9, #1
 8008212:	d192      	bne.n	800813a <_dtoa_r+0xa9a>
 8008214:	463b      	mov	r3, r7
 8008216:	461f      	mov	r7, r3
 8008218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800821c:	2a30      	cmp	r2, #48	; 0x30
 800821e:	d0fa      	beq.n	8008216 <_dtoa_r+0xb76>
 8008220:	e6e0      	b.n	8007fe4 <_dtoa_r+0x944>
 8008222:	9a03      	ldr	r2, [sp, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d189      	bne.n	800813c <_dtoa_r+0xa9c>
 8008228:	f10b 0b01 	add.w	fp, fp, #1
 800822c:	2331      	movs	r3, #49	; 0x31
 800822e:	e796      	b.n	800815e <_dtoa_r+0xabe>
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <_dtoa_r+0xbb8>)
 8008232:	f7ff baa1 	b.w	8007778 <_dtoa_r+0xd8>
 8008236:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f aa79 	bne.w	8007730 <_dtoa_r+0x90>
 800823e:	4b07      	ldr	r3, [pc, #28]	; (800825c <_dtoa_r+0xbbc>)
 8008240:	f7ff ba9a 	b.w	8007778 <_dtoa_r+0xd8>
 8008244:	9b06      	ldr	r3, [sp, #24]
 8008246:	2b00      	cmp	r3, #0
 8008248:	dcb5      	bgt.n	80081b6 <_dtoa_r+0xb16>
 800824a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800824c:	2b02      	cmp	r3, #2
 800824e:	f73f aeb4 	bgt.w	8007fba <_dtoa_r+0x91a>
 8008252:	e7b0      	b.n	80081b6 <_dtoa_r+0xb16>
 8008254:	08009414 	.word	0x08009414
 8008258:	08009374 	.word	0x08009374
 800825c:	08009398 	.word	0x08009398

08008260 <_free_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4605      	mov	r5, r0
 8008264:	2900      	cmp	r1, #0
 8008266:	d041      	beq.n	80082ec <_free_r+0x8c>
 8008268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826c:	1f0c      	subs	r4, r1, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfb8      	it	lt
 8008272:	18e4      	addlt	r4, r4, r3
 8008274:	f000 f8e6 	bl	8008444 <__malloc_lock>
 8008278:	4a1d      	ldr	r2, [pc, #116]	; (80082f0 <_free_r+0x90>)
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	b933      	cbnz	r3, 800828c <_free_r+0x2c>
 800827e:	6063      	str	r3, [r4, #4]
 8008280:	6014      	str	r4, [r2, #0]
 8008282:	4628      	mov	r0, r5
 8008284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008288:	f000 b8e2 	b.w	8008450 <__malloc_unlock>
 800828c:	42a3      	cmp	r3, r4
 800828e:	d908      	bls.n	80082a2 <_free_r+0x42>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	1821      	adds	r1, r4, r0
 8008294:	428b      	cmp	r3, r1
 8008296:	bf01      	itttt	eq
 8008298:	6819      	ldreq	r1, [r3, #0]
 800829a:	685b      	ldreq	r3, [r3, #4]
 800829c:	1809      	addeq	r1, r1, r0
 800829e:	6021      	streq	r1, [r4, #0]
 80082a0:	e7ed      	b.n	800827e <_free_r+0x1e>
 80082a2:	461a      	mov	r2, r3
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	b10b      	cbz	r3, 80082ac <_free_r+0x4c>
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d9fa      	bls.n	80082a2 <_free_r+0x42>
 80082ac:	6811      	ldr	r1, [r2, #0]
 80082ae:	1850      	adds	r0, r2, r1
 80082b0:	42a0      	cmp	r0, r4
 80082b2:	d10b      	bne.n	80082cc <_free_r+0x6c>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	4401      	add	r1, r0
 80082b8:	1850      	adds	r0, r2, r1
 80082ba:	4283      	cmp	r3, r0
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	d1e0      	bne.n	8008282 <_free_r+0x22>
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	6053      	str	r3, [r2, #4]
 80082c6:	4408      	add	r0, r1
 80082c8:	6010      	str	r0, [r2, #0]
 80082ca:	e7da      	b.n	8008282 <_free_r+0x22>
 80082cc:	d902      	bls.n	80082d4 <_free_r+0x74>
 80082ce:	230c      	movs	r3, #12
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	e7d6      	b.n	8008282 <_free_r+0x22>
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	1821      	adds	r1, r4, r0
 80082d8:	428b      	cmp	r3, r1
 80082da:	bf04      	itt	eq
 80082dc:	6819      	ldreq	r1, [r3, #0]
 80082de:	685b      	ldreq	r3, [r3, #4]
 80082e0:	6063      	str	r3, [r4, #4]
 80082e2:	bf04      	itt	eq
 80082e4:	1809      	addeq	r1, r1, r0
 80082e6:	6021      	streq	r1, [r4, #0]
 80082e8:	6054      	str	r4, [r2, #4]
 80082ea:	e7ca      	b.n	8008282 <_free_r+0x22>
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
 80082ee:	bf00      	nop
 80082f0:	200004f0 	.word	0x200004f0

080082f4 <malloc>:
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <malloc+0xc>)
 80082f6:	4601      	mov	r1, r0
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	f000 b823 	b.w	8008344 <_malloc_r>
 80082fe:	bf00      	nop
 8008300:	20000070 	.word	0x20000070

08008304 <sbrk_aligned>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	4e0e      	ldr	r6, [pc, #56]	; (8008340 <sbrk_aligned+0x3c>)
 8008308:	460c      	mov	r4, r1
 800830a:	6831      	ldr	r1, [r6, #0]
 800830c:	4605      	mov	r5, r0
 800830e:	b911      	cbnz	r1, 8008316 <sbrk_aligned+0x12>
 8008310:	f000 fe8a 	bl	8009028 <_sbrk_r>
 8008314:	6030      	str	r0, [r6, #0]
 8008316:	4621      	mov	r1, r4
 8008318:	4628      	mov	r0, r5
 800831a:	f000 fe85 	bl	8009028 <_sbrk_r>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d00a      	beq.n	8008338 <sbrk_aligned+0x34>
 8008322:	1cc4      	adds	r4, r0, #3
 8008324:	f024 0403 	bic.w	r4, r4, #3
 8008328:	42a0      	cmp	r0, r4
 800832a:	d007      	beq.n	800833c <sbrk_aligned+0x38>
 800832c:	1a21      	subs	r1, r4, r0
 800832e:	4628      	mov	r0, r5
 8008330:	f000 fe7a 	bl	8009028 <_sbrk_r>
 8008334:	3001      	adds	r0, #1
 8008336:	d101      	bne.n	800833c <sbrk_aligned+0x38>
 8008338:	f04f 34ff 	mov.w	r4, #4294967295
 800833c:	4620      	mov	r0, r4
 800833e:	bd70      	pop	{r4, r5, r6, pc}
 8008340:	200004f4 	.word	0x200004f4

08008344 <_malloc_r>:
 8008344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008348:	1ccd      	adds	r5, r1, #3
 800834a:	f025 0503 	bic.w	r5, r5, #3
 800834e:	3508      	adds	r5, #8
 8008350:	2d0c      	cmp	r5, #12
 8008352:	bf38      	it	cc
 8008354:	250c      	movcc	r5, #12
 8008356:	2d00      	cmp	r5, #0
 8008358:	4607      	mov	r7, r0
 800835a:	db01      	blt.n	8008360 <_malloc_r+0x1c>
 800835c:	42a9      	cmp	r1, r5
 800835e:	d905      	bls.n	800836c <_malloc_r+0x28>
 8008360:	230c      	movs	r3, #12
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	2600      	movs	r6, #0
 8008366:	4630      	mov	r0, r6
 8008368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008440 <_malloc_r+0xfc>
 8008370:	f000 f868 	bl	8008444 <__malloc_lock>
 8008374:	f8d8 3000 	ldr.w	r3, [r8]
 8008378:	461c      	mov	r4, r3
 800837a:	bb5c      	cbnz	r4, 80083d4 <_malloc_r+0x90>
 800837c:	4629      	mov	r1, r5
 800837e:	4638      	mov	r0, r7
 8008380:	f7ff ffc0 	bl	8008304 <sbrk_aligned>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	4604      	mov	r4, r0
 8008388:	d155      	bne.n	8008436 <_malloc_r+0xf2>
 800838a:	f8d8 4000 	ldr.w	r4, [r8]
 800838e:	4626      	mov	r6, r4
 8008390:	2e00      	cmp	r6, #0
 8008392:	d145      	bne.n	8008420 <_malloc_r+0xdc>
 8008394:	2c00      	cmp	r4, #0
 8008396:	d048      	beq.n	800842a <_malloc_r+0xe6>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	4631      	mov	r1, r6
 800839c:	4638      	mov	r0, r7
 800839e:	eb04 0903 	add.w	r9, r4, r3
 80083a2:	f000 fe41 	bl	8009028 <_sbrk_r>
 80083a6:	4581      	cmp	r9, r0
 80083a8:	d13f      	bne.n	800842a <_malloc_r+0xe6>
 80083aa:	6821      	ldr	r1, [r4, #0]
 80083ac:	1a6d      	subs	r5, r5, r1
 80083ae:	4629      	mov	r1, r5
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7ff ffa7 	bl	8008304 <sbrk_aligned>
 80083b6:	3001      	adds	r0, #1
 80083b8:	d037      	beq.n	800842a <_malloc_r+0xe6>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	442b      	add	r3, r5
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	f8d8 3000 	ldr.w	r3, [r8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d038      	beq.n	800843a <_malloc_r+0xf6>
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	42a2      	cmp	r2, r4
 80083cc:	d12b      	bne.n	8008426 <_malloc_r+0xe2>
 80083ce:	2200      	movs	r2, #0
 80083d0:	605a      	str	r2, [r3, #4]
 80083d2:	e00f      	b.n	80083f4 <_malloc_r+0xb0>
 80083d4:	6822      	ldr	r2, [r4, #0]
 80083d6:	1b52      	subs	r2, r2, r5
 80083d8:	d41f      	bmi.n	800841a <_malloc_r+0xd6>
 80083da:	2a0b      	cmp	r2, #11
 80083dc:	d917      	bls.n	800840e <_malloc_r+0xca>
 80083de:	1961      	adds	r1, r4, r5
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	6025      	str	r5, [r4, #0]
 80083e4:	bf18      	it	ne
 80083e6:	6059      	strne	r1, [r3, #4]
 80083e8:	6863      	ldr	r3, [r4, #4]
 80083ea:	bf08      	it	eq
 80083ec:	f8c8 1000 	streq.w	r1, [r8]
 80083f0:	5162      	str	r2, [r4, r5]
 80083f2:	604b      	str	r3, [r1, #4]
 80083f4:	4638      	mov	r0, r7
 80083f6:	f104 060b 	add.w	r6, r4, #11
 80083fa:	f000 f829 	bl	8008450 <__malloc_unlock>
 80083fe:	f026 0607 	bic.w	r6, r6, #7
 8008402:	1d23      	adds	r3, r4, #4
 8008404:	1af2      	subs	r2, r6, r3
 8008406:	d0ae      	beq.n	8008366 <_malloc_r+0x22>
 8008408:	1b9b      	subs	r3, r3, r6
 800840a:	50a3      	str	r3, [r4, r2]
 800840c:	e7ab      	b.n	8008366 <_malloc_r+0x22>
 800840e:	42a3      	cmp	r3, r4
 8008410:	6862      	ldr	r2, [r4, #4]
 8008412:	d1dd      	bne.n	80083d0 <_malloc_r+0x8c>
 8008414:	f8c8 2000 	str.w	r2, [r8]
 8008418:	e7ec      	b.n	80083f4 <_malloc_r+0xb0>
 800841a:	4623      	mov	r3, r4
 800841c:	6864      	ldr	r4, [r4, #4]
 800841e:	e7ac      	b.n	800837a <_malloc_r+0x36>
 8008420:	4634      	mov	r4, r6
 8008422:	6876      	ldr	r6, [r6, #4]
 8008424:	e7b4      	b.n	8008390 <_malloc_r+0x4c>
 8008426:	4613      	mov	r3, r2
 8008428:	e7cc      	b.n	80083c4 <_malloc_r+0x80>
 800842a:	230c      	movs	r3, #12
 800842c:	603b      	str	r3, [r7, #0]
 800842e:	4638      	mov	r0, r7
 8008430:	f000 f80e 	bl	8008450 <__malloc_unlock>
 8008434:	e797      	b.n	8008366 <_malloc_r+0x22>
 8008436:	6025      	str	r5, [r4, #0]
 8008438:	e7dc      	b.n	80083f4 <_malloc_r+0xb0>
 800843a:	605b      	str	r3, [r3, #4]
 800843c:	deff      	udf	#255	; 0xff
 800843e:	bf00      	nop
 8008440:	200004f0 	.word	0x200004f0

08008444 <__malloc_lock>:
 8008444:	4801      	ldr	r0, [pc, #4]	; (800844c <__malloc_lock+0x8>)
 8008446:	f7ff b8a4 	b.w	8007592 <__retarget_lock_acquire_recursive>
 800844a:	bf00      	nop
 800844c:	200004ec 	.word	0x200004ec

08008450 <__malloc_unlock>:
 8008450:	4801      	ldr	r0, [pc, #4]	; (8008458 <__malloc_unlock+0x8>)
 8008452:	f7ff b89f 	b.w	8007594 <__retarget_lock_release_recursive>
 8008456:	bf00      	nop
 8008458:	200004ec 	.word	0x200004ec

0800845c <_Balloc>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	69c6      	ldr	r6, [r0, #28]
 8008460:	4604      	mov	r4, r0
 8008462:	460d      	mov	r5, r1
 8008464:	b976      	cbnz	r6, 8008484 <_Balloc+0x28>
 8008466:	2010      	movs	r0, #16
 8008468:	f7ff ff44 	bl	80082f4 <malloc>
 800846c:	4602      	mov	r2, r0
 800846e:	61e0      	str	r0, [r4, #28]
 8008470:	b920      	cbnz	r0, 800847c <_Balloc+0x20>
 8008472:	4b18      	ldr	r3, [pc, #96]	; (80084d4 <_Balloc+0x78>)
 8008474:	4818      	ldr	r0, [pc, #96]	; (80084d8 <_Balloc+0x7c>)
 8008476:	216b      	movs	r1, #107	; 0x6b
 8008478:	f000 fdf4 	bl	8009064 <__assert_func>
 800847c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008480:	6006      	str	r6, [r0, #0]
 8008482:	60c6      	str	r6, [r0, #12]
 8008484:	69e6      	ldr	r6, [r4, #28]
 8008486:	68f3      	ldr	r3, [r6, #12]
 8008488:	b183      	cbz	r3, 80084ac <_Balloc+0x50>
 800848a:	69e3      	ldr	r3, [r4, #28]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008492:	b9b8      	cbnz	r0, 80084c4 <_Balloc+0x68>
 8008494:	2101      	movs	r1, #1
 8008496:	fa01 f605 	lsl.w	r6, r1, r5
 800849a:	1d72      	adds	r2, r6, #5
 800849c:	0092      	lsls	r2, r2, #2
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 fdfe 	bl	80090a0 <_calloc_r>
 80084a4:	b160      	cbz	r0, 80084c0 <_Balloc+0x64>
 80084a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084aa:	e00e      	b.n	80084ca <_Balloc+0x6e>
 80084ac:	2221      	movs	r2, #33	; 0x21
 80084ae:	2104      	movs	r1, #4
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fdf5 	bl	80090a0 <_calloc_r>
 80084b6:	69e3      	ldr	r3, [r4, #28]
 80084b8:	60f0      	str	r0, [r6, #12]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e4      	bne.n	800848a <_Balloc+0x2e>
 80084c0:	2000      	movs	r0, #0
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	6802      	ldr	r2, [r0, #0]
 80084c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ca:	2300      	movs	r3, #0
 80084cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084d0:	e7f7      	b.n	80084c2 <_Balloc+0x66>
 80084d2:	bf00      	nop
 80084d4:	080093a5 	.word	0x080093a5
 80084d8:	08009425 	.word	0x08009425

080084dc <_Bfree>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	69c6      	ldr	r6, [r0, #28]
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	b976      	cbnz	r6, 8008504 <_Bfree+0x28>
 80084e6:	2010      	movs	r0, #16
 80084e8:	f7ff ff04 	bl	80082f4 <malloc>
 80084ec:	4602      	mov	r2, r0
 80084ee:	61e8      	str	r0, [r5, #28]
 80084f0:	b920      	cbnz	r0, 80084fc <_Bfree+0x20>
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <_Bfree+0x3c>)
 80084f4:	4809      	ldr	r0, [pc, #36]	; (800851c <_Bfree+0x40>)
 80084f6:	218f      	movs	r1, #143	; 0x8f
 80084f8:	f000 fdb4 	bl	8009064 <__assert_func>
 80084fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008500:	6006      	str	r6, [r0, #0]
 8008502:	60c6      	str	r6, [r0, #12]
 8008504:	b13c      	cbz	r4, 8008516 <_Bfree+0x3a>
 8008506:	69eb      	ldr	r3, [r5, #28]
 8008508:	6862      	ldr	r2, [r4, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008510:	6021      	str	r1, [r4, #0]
 8008512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	080093a5 	.word	0x080093a5
 800851c:	08009425 	.word	0x08009425

08008520 <__multadd>:
 8008520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008524:	690d      	ldr	r5, [r1, #16]
 8008526:	4607      	mov	r7, r0
 8008528:	460c      	mov	r4, r1
 800852a:	461e      	mov	r6, r3
 800852c:	f101 0c14 	add.w	ip, r1, #20
 8008530:	2000      	movs	r0, #0
 8008532:	f8dc 3000 	ldr.w	r3, [ip]
 8008536:	b299      	uxth	r1, r3
 8008538:	fb02 6101 	mla	r1, r2, r1, r6
 800853c:	0c1e      	lsrs	r6, r3, #16
 800853e:	0c0b      	lsrs	r3, r1, #16
 8008540:	fb02 3306 	mla	r3, r2, r6, r3
 8008544:	b289      	uxth	r1, r1
 8008546:	3001      	adds	r0, #1
 8008548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800854c:	4285      	cmp	r5, r0
 800854e:	f84c 1b04 	str.w	r1, [ip], #4
 8008552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008556:	dcec      	bgt.n	8008532 <__multadd+0x12>
 8008558:	b30e      	cbz	r6, 800859e <__multadd+0x7e>
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	42ab      	cmp	r3, r5
 800855e:	dc19      	bgt.n	8008594 <__multadd+0x74>
 8008560:	6861      	ldr	r1, [r4, #4]
 8008562:	4638      	mov	r0, r7
 8008564:	3101      	adds	r1, #1
 8008566:	f7ff ff79 	bl	800845c <_Balloc>
 800856a:	4680      	mov	r8, r0
 800856c:	b928      	cbnz	r0, 800857a <__multadd+0x5a>
 800856e:	4602      	mov	r2, r0
 8008570:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <__multadd+0x84>)
 8008572:	480d      	ldr	r0, [pc, #52]	; (80085a8 <__multadd+0x88>)
 8008574:	21ba      	movs	r1, #186	; 0xba
 8008576:	f000 fd75 	bl	8009064 <__assert_func>
 800857a:	6922      	ldr	r2, [r4, #16]
 800857c:	3202      	adds	r2, #2
 800857e:	f104 010c 	add.w	r1, r4, #12
 8008582:	0092      	lsls	r2, r2, #2
 8008584:	300c      	adds	r0, #12
 8008586:	f000 fd5f 	bl	8009048 <memcpy>
 800858a:	4621      	mov	r1, r4
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff ffa5 	bl	80084dc <_Bfree>
 8008592:	4644      	mov	r4, r8
 8008594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008598:	3501      	adds	r5, #1
 800859a:	615e      	str	r6, [r3, #20]
 800859c:	6125      	str	r5, [r4, #16]
 800859e:	4620      	mov	r0, r4
 80085a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a4:	08009414 	.word	0x08009414
 80085a8:	08009425 	.word	0x08009425

080085ac <__hi0bits>:
 80085ac:	0c02      	lsrs	r2, r0, #16
 80085ae:	0412      	lsls	r2, r2, #16
 80085b0:	4603      	mov	r3, r0
 80085b2:	b9ca      	cbnz	r2, 80085e8 <__hi0bits+0x3c>
 80085b4:	0403      	lsls	r3, r0, #16
 80085b6:	2010      	movs	r0, #16
 80085b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085bc:	bf04      	itt	eq
 80085be:	021b      	lsleq	r3, r3, #8
 80085c0:	3008      	addeq	r0, #8
 80085c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085c6:	bf04      	itt	eq
 80085c8:	011b      	lsleq	r3, r3, #4
 80085ca:	3004      	addeq	r0, #4
 80085cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085d0:	bf04      	itt	eq
 80085d2:	009b      	lsleq	r3, r3, #2
 80085d4:	3002      	addeq	r0, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	db05      	blt.n	80085e6 <__hi0bits+0x3a>
 80085da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80085de:	f100 0001 	add.w	r0, r0, #1
 80085e2:	bf08      	it	eq
 80085e4:	2020      	moveq	r0, #32
 80085e6:	4770      	bx	lr
 80085e8:	2000      	movs	r0, #0
 80085ea:	e7e5      	b.n	80085b8 <__hi0bits+0xc>

080085ec <__lo0bits>:
 80085ec:	6803      	ldr	r3, [r0, #0]
 80085ee:	4602      	mov	r2, r0
 80085f0:	f013 0007 	ands.w	r0, r3, #7
 80085f4:	d00b      	beq.n	800860e <__lo0bits+0x22>
 80085f6:	07d9      	lsls	r1, r3, #31
 80085f8:	d421      	bmi.n	800863e <__lo0bits+0x52>
 80085fa:	0798      	lsls	r0, r3, #30
 80085fc:	bf49      	itett	mi
 80085fe:	085b      	lsrmi	r3, r3, #1
 8008600:	089b      	lsrpl	r3, r3, #2
 8008602:	2001      	movmi	r0, #1
 8008604:	6013      	strmi	r3, [r2, #0]
 8008606:	bf5c      	itt	pl
 8008608:	6013      	strpl	r3, [r2, #0]
 800860a:	2002      	movpl	r0, #2
 800860c:	4770      	bx	lr
 800860e:	b299      	uxth	r1, r3
 8008610:	b909      	cbnz	r1, 8008616 <__lo0bits+0x2a>
 8008612:	0c1b      	lsrs	r3, r3, #16
 8008614:	2010      	movs	r0, #16
 8008616:	b2d9      	uxtb	r1, r3
 8008618:	b909      	cbnz	r1, 800861e <__lo0bits+0x32>
 800861a:	3008      	adds	r0, #8
 800861c:	0a1b      	lsrs	r3, r3, #8
 800861e:	0719      	lsls	r1, r3, #28
 8008620:	bf04      	itt	eq
 8008622:	091b      	lsreq	r3, r3, #4
 8008624:	3004      	addeq	r0, #4
 8008626:	0799      	lsls	r1, r3, #30
 8008628:	bf04      	itt	eq
 800862a:	089b      	lsreq	r3, r3, #2
 800862c:	3002      	addeq	r0, #2
 800862e:	07d9      	lsls	r1, r3, #31
 8008630:	d403      	bmi.n	800863a <__lo0bits+0x4e>
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	f100 0001 	add.w	r0, r0, #1
 8008638:	d003      	beq.n	8008642 <__lo0bits+0x56>
 800863a:	6013      	str	r3, [r2, #0]
 800863c:	4770      	bx	lr
 800863e:	2000      	movs	r0, #0
 8008640:	4770      	bx	lr
 8008642:	2020      	movs	r0, #32
 8008644:	4770      	bx	lr
	...

08008648 <__i2b>:
 8008648:	b510      	push	{r4, lr}
 800864a:	460c      	mov	r4, r1
 800864c:	2101      	movs	r1, #1
 800864e:	f7ff ff05 	bl	800845c <_Balloc>
 8008652:	4602      	mov	r2, r0
 8008654:	b928      	cbnz	r0, 8008662 <__i2b+0x1a>
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <__i2b+0x24>)
 8008658:	4805      	ldr	r0, [pc, #20]	; (8008670 <__i2b+0x28>)
 800865a:	f240 1145 	movw	r1, #325	; 0x145
 800865e:	f000 fd01 	bl	8009064 <__assert_func>
 8008662:	2301      	movs	r3, #1
 8008664:	6144      	str	r4, [r0, #20]
 8008666:	6103      	str	r3, [r0, #16]
 8008668:	bd10      	pop	{r4, pc}
 800866a:	bf00      	nop
 800866c:	08009414 	.word	0x08009414
 8008670:	08009425 	.word	0x08009425

08008674 <__multiply>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	4691      	mov	r9, r2
 800867a:	690a      	ldr	r2, [r1, #16]
 800867c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008680:	429a      	cmp	r2, r3
 8008682:	bfb8      	it	lt
 8008684:	460b      	movlt	r3, r1
 8008686:	460c      	mov	r4, r1
 8008688:	bfbc      	itt	lt
 800868a:	464c      	movlt	r4, r9
 800868c:	4699      	movlt	r9, r3
 800868e:	6927      	ldr	r7, [r4, #16]
 8008690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008694:	68a3      	ldr	r3, [r4, #8]
 8008696:	6861      	ldr	r1, [r4, #4]
 8008698:	eb07 060a 	add.w	r6, r7, sl
 800869c:	42b3      	cmp	r3, r6
 800869e:	b085      	sub	sp, #20
 80086a0:	bfb8      	it	lt
 80086a2:	3101      	addlt	r1, #1
 80086a4:	f7ff feda 	bl	800845c <_Balloc>
 80086a8:	b930      	cbnz	r0, 80086b8 <__multiply+0x44>
 80086aa:	4602      	mov	r2, r0
 80086ac:	4b44      	ldr	r3, [pc, #272]	; (80087c0 <__multiply+0x14c>)
 80086ae:	4845      	ldr	r0, [pc, #276]	; (80087c4 <__multiply+0x150>)
 80086b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80086b4:	f000 fcd6 	bl	8009064 <__assert_func>
 80086b8:	f100 0514 	add.w	r5, r0, #20
 80086bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086c0:	462b      	mov	r3, r5
 80086c2:	2200      	movs	r2, #0
 80086c4:	4543      	cmp	r3, r8
 80086c6:	d321      	bcc.n	800870c <__multiply+0x98>
 80086c8:	f104 0314 	add.w	r3, r4, #20
 80086cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086d0:	f109 0314 	add.w	r3, r9, #20
 80086d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086d8:	9202      	str	r2, [sp, #8]
 80086da:	1b3a      	subs	r2, r7, r4
 80086dc:	3a15      	subs	r2, #21
 80086de:	f022 0203 	bic.w	r2, r2, #3
 80086e2:	3204      	adds	r2, #4
 80086e4:	f104 0115 	add.w	r1, r4, #21
 80086e8:	428f      	cmp	r7, r1
 80086ea:	bf38      	it	cc
 80086ec:	2204      	movcc	r2, #4
 80086ee:	9201      	str	r2, [sp, #4]
 80086f0:	9a02      	ldr	r2, [sp, #8]
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d80c      	bhi.n	8008712 <__multiply+0x9e>
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	dd03      	ble.n	8008704 <__multiply+0x90>
 80086fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008700:	2b00      	cmp	r3, #0
 8008702:	d05a      	beq.n	80087ba <__multiply+0x146>
 8008704:	6106      	str	r6, [r0, #16]
 8008706:	b005      	add	sp, #20
 8008708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870c:	f843 2b04 	str.w	r2, [r3], #4
 8008710:	e7d8      	b.n	80086c4 <__multiply+0x50>
 8008712:	f8b3 a000 	ldrh.w	sl, [r3]
 8008716:	f1ba 0f00 	cmp.w	sl, #0
 800871a:	d023      	beq.n	8008764 <__multiply+0xf0>
 800871c:	f104 0e14 	add.w	lr, r4, #20
 8008720:	46a9      	mov	r9, r5
 8008722:	f04f 0c00 	mov.w	ip, #0
 8008726:	f85e 2b04 	ldr.w	r2, [lr], #4
 800872a:	f8d9 1000 	ldr.w	r1, [r9]
 800872e:	fa1f fb82 	uxth.w	fp, r2
 8008732:	b289      	uxth	r1, r1
 8008734:	fb0a 110b 	mla	r1, sl, fp, r1
 8008738:	4461      	add	r1, ip
 800873a:	f8d9 c000 	ldr.w	ip, [r9]
 800873e:	0c12      	lsrs	r2, r2, #16
 8008740:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008744:	fb0a c202 	mla	r2, sl, r2, ip
 8008748:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800874c:	b289      	uxth	r1, r1
 800874e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008752:	4577      	cmp	r7, lr
 8008754:	f849 1b04 	str.w	r1, [r9], #4
 8008758:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800875c:	d8e3      	bhi.n	8008726 <__multiply+0xb2>
 800875e:	9a01      	ldr	r2, [sp, #4]
 8008760:	f845 c002 	str.w	ip, [r5, r2]
 8008764:	9a03      	ldr	r2, [sp, #12]
 8008766:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800876a:	3304      	adds	r3, #4
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	d021      	beq.n	80087b6 <__multiply+0x142>
 8008772:	6829      	ldr	r1, [r5, #0]
 8008774:	f104 0c14 	add.w	ip, r4, #20
 8008778:	46ae      	mov	lr, r5
 800877a:	f04f 0a00 	mov.w	sl, #0
 800877e:	f8bc b000 	ldrh.w	fp, [ip]
 8008782:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008786:	fb09 220b 	mla	r2, r9, fp, r2
 800878a:	4452      	add	r2, sl
 800878c:	b289      	uxth	r1, r1
 800878e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008792:	f84e 1b04 	str.w	r1, [lr], #4
 8008796:	f85c 1b04 	ldr.w	r1, [ip], #4
 800879a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800879e:	f8be 1000 	ldrh.w	r1, [lr]
 80087a2:	fb09 110a 	mla	r1, r9, sl, r1
 80087a6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80087aa:	4567      	cmp	r7, ip
 80087ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087b0:	d8e5      	bhi.n	800877e <__multiply+0x10a>
 80087b2:	9a01      	ldr	r2, [sp, #4]
 80087b4:	50a9      	str	r1, [r5, r2]
 80087b6:	3504      	adds	r5, #4
 80087b8:	e79a      	b.n	80086f0 <__multiply+0x7c>
 80087ba:	3e01      	subs	r6, #1
 80087bc:	e79c      	b.n	80086f8 <__multiply+0x84>
 80087be:	bf00      	nop
 80087c0:	08009414 	.word	0x08009414
 80087c4:	08009425 	.word	0x08009425

080087c8 <__pow5mult>:
 80087c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087cc:	4615      	mov	r5, r2
 80087ce:	f012 0203 	ands.w	r2, r2, #3
 80087d2:	4606      	mov	r6, r0
 80087d4:	460f      	mov	r7, r1
 80087d6:	d007      	beq.n	80087e8 <__pow5mult+0x20>
 80087d8:	4c25      	ldr	r4, [pc, #148]	; (8008870 <__pow5mult+0xa8>)
 80087da:	3a01      	subs	r2, #1
 80087dc:	2300      	movs	r3, #0
 80087de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087e2:	f7ff fe9d 	bl	8008520 <__multadd>
 80087e6:	4607      	mov	r7, r0
 80087e8:	10ad      	asrs	r5, r5, #2
 80087ea:	d03d      	beq.n	8008868 <__pow5mult+0xa0>
 80087ec:	69f4      	ldr	r4, [r6, #28]
 80087ee:	b97c      	cbnz	r4, 8008810 <__pow5mult+0x48>
 80087f0:	2010      	movs	r0, #16
 80087f2:	f7ff fd7f 	bl	80082f4 <malloc>
 80087f6:	4602      	mov	r2, r0
 80087f8:	61f0      	str	r0, [r6, #28]
 80087fa:	b928      	cbnz	r0, 8008808 <__pow5mult+0x40>
 80087fc:	4b1d      	ldr	r3, [pc, #116]	; (8008874 <__pow5mult+0xac>)
 80087fe:	481e      	ldr	r0, [pc, #120]	; (8008878 <__pow5mult+0xb0>)
 8008800:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008804:	f000 fc2e 	bl	8009064 <__assert_func>
 8008808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800880c:	6004      	str	r4, [r0, #0]
 800880e:	60c4      	str	r4, [r0, #12]
 8008810:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008818:	b94c      	cbnz	r4, 800882e <__pow5mult+0x66>
 800881a:	f240 2171 	movw	r1, #625	; 0x271
 800881e:	4630      	mov	r0, r6
 8008820:	f7ff ff12 	bl	8008648 <__i2b>
 8008824:	2300      	movs	r3, #0
 8008826:	f8c8 0008 	str.w	r0, [r8, #8]
 800882a:	4604      	mov	r4, r0
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	f04f 0900 	mov.w	r9, #0
 8008832:	07eb      	lsls	r3, r5, #31
 8008834:	d50a      	bpl.n	800884c <__pow5mult+0x84>
 8008836:	4639      	mov	r1, r7
 8008838:	4622      	mov	r2, r4
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff ff1a 	bl	8008674 <__multiply>
 8008840:	4639      	mov	r1, r7
 8008842:	4680      	mov	r8, r0
 8008844:	4630      	mov	r0, r6
 8008846:	f7ff fe49 	bl	80084dc <_Bfree>
 800884a:	4647      	mov	r7, r8
 800884c:	106d      	asrs	r5, r5, #1
 800884e:	d00b      	beq.n	8008868 <__pow5mult+0xa0>
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	b938      	cbnz	r0, 8008864 <__pow5mult+0x9c>
 8008854:	4622      	mov	r2, r4
 8008856:	4621      	mov	r1, r4
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff ff0b 	bl	8008674 <__multiply>
 800885e:	6020      	str	r0, [r4, #0]
 8008860:	f8c0 9000 	str.w	r9, [r0]
 8008864:	4604      	mov	r4, r0
 8008866:	e7e4      	b.n	8008832 <__pow5mult+0x6a>
 8008868:	4638      	mov	r0, r7
 800886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886e:	bf00      	nop
 8008870:	08009570 	.word	0x08009570
 8008874:	080093a5 	.word	0x080093a5
 8008878:	08009425 	.word	0x08009425

0800887c <__lshift>:
 800887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	460c      	mov	r4, r1
 8008882:	6849      	ldr	r1, [r1, #4]
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800888a:	68a3      	ldr	r3, [r4, #8]
 800888c:	4607      	mov	r7, r0
 800888e:	4691      	mov	r9, r2
 8008890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008894:	f108 0601 	add.w	r6, r8, #1
 8008898:	42b3      	cmp	r3, r6
 800889a:	db0b      	blt.n	80088b4 <__lshift+0x38>
 800889c:	4638      	mov	r0, r7
 800889e:	f7ff fddd 	bl	800845c <_Balloc>
 80088a2:	4605      	mov	r5, r0
 80088a4:	b948      	cbnz	r0, 80088ba <__lshift+0x3e>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4b28      	ldr	r3, [pc, #160]	; (800894c <__lshift+0xd0>)
 80088aa:	4829      	ldr	r0, [pc, #164]	; (8008950 <__lshift+0xd4>)
 80088ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80088b0:	f000 fbd8 	bl	8009064 <__assert_func>
 80088b4:	3101      	adds	r1, #1
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	e7ee      	b.n	8008898 <__lshift+0x1c>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f100 0114 	add.w	r1, r0, #20
 80088c0:	f100 0210 	add.w	r2, r0, #16
 80088c4:	4618      	mov	r0, r3
 80088c6:	4553      	cmp	r3, sl
 80088c8:	db33      	blt.n	8008932 <__lshift+0xb6>
 80088ca:	6920      	ldr	r0, [r4, #16]
 80088cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088d0:	f104 0314 	add.w	r3, r4, #20
 80088d4:	f019 091f 	ands.w	r9, r9, #31
 80088d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088e0:	d02b      	beq.n	800893a <__lshift+0xbe>
 80088e2:	f1c9 0e20 	rsb	lr, r9, #32
 80088e6:	468a      	mov	sl, r1
 80088e8:	2200      	movs	r2, #0
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	fa00 f009 	lsl.w	r0, r0, r9
 80088f0:	4310      	orrs	r0, r2
 80088f2:	f84a 0b04 	str.w	r0, [sl], #4
 80088f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fa:	459c      	cmp	ip, r3
 80088fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008900:	d8f3      	bhi.n	80088ea <__lshift+0x6e>
 8008902:	ebac 0304 	sub.w	r3, ip, r4
 8008906:	3b15      	subs	r3, #21
 8008908:	f023 0303 	bic.w	r3, r3, #3
 800890c:	3304      	adds	r3, #4
 800890e:	f104 0015 	add.w	r0, r4, #21
 8008912:	4584      	cmp	ip, r0
 8008914:	bf38      	it	cc
 8008916:	2304      	movcc	r3, #4
 8008918:	50ca      	str	r2, [r1, r3]
 800891a:	b10a      	cbz	r2, 8008920 <__lshift+0xa4>
 800891c:	f108 0602 	add.w	r6, r8, #2
 8008920:	3e01      	subs	r6, #1
 8008922:	4638      	mov	r0, r7
 8008924:	612e      	str	r6, [r5, #16]
 8008926:	4621      	mov	r1, r4
 8008928:	f7ff fdd8 	bl	80084dc <_Bfree>
 800892c:	4628      	mov	r0, r5
 800892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008932:	f842 0f04 	str.w	r0, [r2, #4]!
 8008936:	3301      	adds	r3, #1
 8008938:	e7c5      	b.n	80088c6 <__lshift+0x4a>
 800893a:	3904      	subs	r1, #4
 800893c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008940:	f841 2f04 	str.w	r2, [r1, #4]!
 8008944:	459c      	cmp	ip, r3
 8008946:	d8f9      	bhi.n	800893c <__lshift+0xc0>
 8008948:	e7ea      	b.n	8008920 <__lshift+0xa4>
 800894a:	bf00      	nop
 800894c:	08009414 	.word	0x08009414
 8008950:	08009425 	.word	0x08009425

08008954 <__mcmp>:
 8008954:	690a      	ldr	r2, [r1, #16]
 8008956:	4603      	mov	r3, r0
 8008958:	6900      	ldr	r0, [r0, #16]
 800895a:	1a80      	subs	r0, r0, r2
 800895c:	b530      	push	{r4, r5, lr}
 800895e:	d10d      	bne.n	800897c <__mcmp+0x28>
 8008960:	3314      	adds	r3, #20
 8008962:	3114      	adds	r1, #20
 8008964:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008968:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800896c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008974:	4295      	cmp	r5, r2
 8008976:	d002      	beq.n	800897e <__mcmp+0x2a>
 8008978:	d304      	bcc.n	8008984 <__mcmp+0x30>
 800897a:	2001      	movs	r0, #1
 800897c:	bd30      	pop	{r4, r5, pc}
 800897e:	42a3      	cmp	r3, r4
 8008980:	d3f4      	bcc.n	800896c <__mcmp+0x18>
 8008982:	e7fb      	b.n	800897c <__mcmp+0x28>
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	e7f8      	b.n	800897c <__mcmp+0x28>
	...

0800898c <__mdiff>:
 800898c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008990:	460d      	mov	r5, r1
 8008992:	4607      	mov	r7, r0
 8008994:	4611      	mov	r1, r2
 8008996:	4628      	mov	r0, r5
 8008998:	4614      	mov	r4, r2
 800899a:	f7ff ffdb 	bl	8008954 <__mcmp>
 800899e:	1e06      	subs	r6, r0, #0
 80089a0:	d111      	bne.n	80089c6 <__mdiff+0x3a>
 80089a2:	4631      	mov	r1, r6
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff fd59 	bl	800845c <_Balloc>
 80089aa:	4602      	mov	r2, r0
 80089ac:	b928      	cbnz	r0, 80089ba <__mdiff+0x2e>
 80089ae:	4b39      	ldr	r3, [pc, #228]	; (8008a94 <__mdiff+0x108>)
 80089b0:	f240 2137 	movw	r1, #567	; 0x237
 80089b4:	4838      	ldr	r0, [pc, #224]	; (8008a98 <__mdiff+0x10c>)
 80089b6:	f000 fb55 	bl	8009064 <__assert_func>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089c0:	4610      	mov	r0, r2
 80089c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	bfa4      	itt	ge
 80089c8:	4623      	movge	r3, r4
 80089ca:	462c      	movge	r4, r5
 80089cc:	4638      	mov	r0, r7
 80089ce:	6861      	ldr	r1, [r4, #4]
 80089d0:	bfa6      	itte	ge
 80089d2:	461d      	movge	r5, r3
 80089d4:	2600      	movge	r6, #0
 80089d6:	2601      	movlt	r6, #1
 80089d8:	f7ff fd40 	bl	800845c <_Balloc>
 80089dc:	4602      	mov	r2, r0
 80089de:	b918      	cbnz	r0, 80089e8 <__mdiff+0x5c>
 80089e0:	4b2c      	ldr	r3, [pc, #176]	; (8008a94 <__mdiff+0x108>)
 80089e2:	f240 2145 	movw	r1, #581	; 0x245
 80089e6:	e7e5      	b.n	80089b4 <__mdiff+0x28>
 80089e8:	6927      	ldr	r7, [r4, #16]
 80089ea:	60c6      	str	r6, [r0, #12]
 80089ec:	692e      	ldr	r6, [r5, #16]
 80089ee:	f104 0014 	add.w	r0, r4, #20
 80089f2:	f105 0914 	add.w	r9, r5, #20
 80089f6:	f102 0e14 	add.w	lr, r2, #20
 80089fa:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80089fe:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a02:	3410      	adds	r4, #16
 8008a04:	46f2      	mov	sl, lr
 8008a06:	2100      	movs	r1, #0
 8008a08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a0c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008a10:	fa11 f88b 	uxtah	r8, r1, fp
 8008a14:	b299      	uxth	r1, r3
 8008a16:	0c1b      	lsrs	r3, r3, #16
 8008a18:	eba8 0801 	sub.w	r8, r8, r1
 8008a1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a20:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a24:	fa1f f888 	uxth.w	r8, r8
 8008a28:	1419      	asrs	r1, r3, #16
 8008a2a:	454e      	cmp	r6, r9
 8008a2c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a30:	f84a 3b04 	str.w	r3, [sl], #4
 8008a34:	d8e8      	bhi.n	8008a08 <__mdiff+0x7c>
 8008a36:	1b73      	subs	r3, r6, r5
 8008a38:	3b15      	subs	r3, #21
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	3304      	adds	r3, #4
 8008a40:	3515      	adds	r5, #21
 8008a42:	42ae      	cmp	r6, r5
 8008a44:	bf38      	it	cc
 8008a46:	2304      	movcc	r3, #4
 8008a48:	4418      	add	r0, r3
 8008a4a:	4473      	add	r3, lr
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4606      	mov	r6, r0
 8008a50:	4566      	cmp	r6, ip
 8008a52:	d30e      	bcc.n	8008a72 <__mdiff+0xe6>
 8008a54:	f10c 0103 	add.w	r1, ip, #3
 8008a58:	1a09      	subs	r1, r1, r0
 8008a5a:	f021 0103 	bic.w	r1, r1, #3
 8008a5e:	3803      	subs	r0, #3
 8008a60:	4584      	cmp	ip, r0
 8008a62:	bf38      	it	cc
 8008a64:	2100      	movcc	r1, #0
 8008a66:	440b      	add	r3, r1
 8008a68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a6c:	b179      	cbz	r1, 8008a8e <__mdiff+0x102>
 8008a6e:	6117      	str	r7, [r2, #16]
 8008a70:	e7a6      	b.n	80089c0 <__mdiff+0x34>
 8008a72:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a76:	fa11 f488 	uxtah	r4, r1, r8
 8008a7a:	1425      	asrs	r5, r4, #16
 8008a7c:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8008a80:	b2a4      	uxth	r4, r4
 8008a82:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008a86:	f84e 4b04 	str.w	r4, [lr], #4
 8008a8a:	1429      	asrs	r1, r5, #16
 8008a8c:	e7e0      	b.n	8008a50 <__mdiff+0xc4>
 8008a8e:	3f01      	subs	r7, #1
 8008a90:	e7ea      	b.n	8008a68 <__mdiff+0xdc>
 8008a92:	bf00      	nop
 8008a94:	08009414 	.word	0x08009414
 8008a98:	08009425 	.word	0x08009425

08008a9c <__d2b>:
 8008a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	9e08      	ldr	r6, [sp, #32]
 8008aa2:	4617      	mov	r7, r2
 8008aa4:	461c      	mov	r4, r3
 8008aa6:	f7ff fcd9 	bl	800845c <_Balloc>
 8008aaa:	4605      	mov	r5, r0
 8008aac:	b930      	cbnz	r0, 8008abc <__d2b+0x20>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	4b23      	ldr	r3, [pc, #140]	; (8008b40 <__d2b+0xa4>)
 8008ab2:	4824      	ldr	r0, [pc, #144]	; (8008b44 <__d2b+0xa8>)
 8008ab4:	f240 310f 	movw	r1, #783	; 0x30f
 8008ab8:	f000 fad4 	bl	8009064 <__assert_func>
 8008abc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008ac0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008ac4:	bb24      	cbnz	r4, 8008b10 <__d2b+0x74>
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	d026      	beq.n	8008b1a <__d2b+0x7e>
 8008acc:	4668      	mov	r0, sp
 8008ace:	9700      	str	r7, [sp, #0]
 8008ad0:	f7ff fd8c 	bl	80085ec <__lo0bits>
 8008ad4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ad8:	b1e8      	cbz	r0, 8008b16 <__d2b+0x7a>
 8008ada:	f1c0 0320 	rsb	r3, r0, #32
 8008ade:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	40c2      	lsrs	r2, r0
 8008ae6:	616b      	str	r3, [r5, #20]
 8008ae8:	9201      	str	r2, [sp, #4]
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	61ab      	str	r3, [r5, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf14      	ite	ne
 8008af2:	2102      	movne	r1, #2
 8008af4:	2101      	moveq	r1, #1
 8008af6:	6129      	str	r1, [r5, #16]
 8008af8:	b1bc      	cbz	r4, 8008b2a <__d2b+0x8e>
 8008afa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008afe:	4404      	add	r4, r0
 8008b00:	6034      	str	r4, [r6, #0]
 8008b02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b08:	6018      	str	r0, [r3, #0]
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	b003      	add	sp, #12
 8008b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b14:	e7d7      	b.n	8008ac6 <__d2b+0x2a>
 8008b16:	6169      	str	r1, [r5, #20]
 8008b18:	e7e7      	b.n	8008aea <__d2b+0x4e>
 8008b1a:	a801      	add	r0, sp, #4
 8008b1c:	f7ff fd66 	bl	80085ec <__lo0bits>
 8008b20:	9b01      	ldr	r3, [sp, #4]
 8008b22:	616b      	str	r3, [r5, #20]
 8008b24:	3020      	adds	r0, #32
 8008b26:	2101      	movs	r1, #1
 8008b28:	e7e5      	b.n	8008af6 <__d2b+0x5a>
 8008b2a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008b2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b32:	6030      	str	r0, [r6, #0]
 8008b34:	6918      	ldr	r0, [r3, #16]
 8008b36:	f7ff fd39 	bl	80085ac <__hi0bits>
 8008b3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b3e:	e7e2      	b.n	8008b06 <__d2b+0x6a>
 8008b40:	08009414 	.word	0x08009414
 8008b44:	08009425 	.word	0x08009425

08008b48 <__sfputc_r>:
 8008b48:	6893      	ldr	r3, [r2, #8]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	b410      	push	{r4}
 8008b50:	6093      	str	r3, [r2, #8]
 8008b52:	da07      	bge.n	8008b64 <__sfputc_r+0x1c>
 8008b54:	6994      	ldr	r4, [r2, #24]
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	db01      	blt.n	8008b5e <__sfputc_r+0x16>
 8008b5a:	290a      	cmp	r1, #10
 8008b5c:	d102      	bne.n	8008b64 <__sfputc_r+0x1c>
 8008b5e:	bc10      	pop	{r4}
 8008b60:	f7fe bc05 	b.w	800736e <__swbuf_r>
 8008b64:	6813      	ldr	r3, [r2, #0]
 8008b66:	1c58      	adds	r0, r3, #1
 8008b68:	6010      	str	r0, [r2, #0]
 8008b6a:	7019      	strb	r1, [r3, #0]
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	bc10      	pop	{r4}
 8008b70:	4770      	bx	lr

08008b72 <__sfputs_r>:
 8008b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b74:	4606      	mov	r6, r0
 8008b76:	460f      	mov	r7, r1
 8008b78:	4614      	mov	r4, r2
 8008b7a:	18d5      	adds	r5, r2, r3
 8008b7c:	42ac      	cmp	r4, r5
 8008b7e:	d101      	bne.n	8008b84 <__sfputs_r+0x12>
 8008b80:	2000      	movs	r0, #0
 8008b82:	e007      	b.n	8008b94 <__sfputs_r+0x22>
 8008b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b88:	463a      	mov	r2, r7
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f7ff ffdc 	bl	8008b48 <__sfputc_r>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d1f3      	bne.n	8008b7c <__sfputs_r+0xa>
 8008b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b98 <_vfiprintf_r>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	b09d      	sub	sp, #116	; 0x74
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	4698      	mov	r8, r3
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	b118      	cbz	r0, 8008bb0 <_vfiprintf_r+0x18>
 8008ba8:	6a03      	ldr	r3, [r0, #32]
 8008baa:	b90b      	cbnz	r3, 8008bb0 <_vfiprintf_r+0x18>
 8008bac:	f7fe faf8 	bl	80071a0 <__sinit>
 8008bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb2:	07d9      	lsls	r1, r3, #31
 8008bb4:	d405      	bmi.n	8008bc2 <_vfiprintf_r+0x2a>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	059a      	lsls	r2, r3, #22
 8008bba:	d402      	bmi.n	8008bc2 <_vfiprintf_r+0x2a>
 8008bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bbe:	f7fe fce8 	bl	8007592 <__retarget_lock_acquire_recursive>
 8008bc2:	89ab      	ldrh	r3, [r5, #12]
 8008bc4:	071b      	lsls	r3, r3, #28
 8008bc6:	d501      	bpl.n	8008bcc <_vfiprintf_r+0x34>
 8008bc8:	692b      	ldr	r3, [r5, #16]
 8008bca:	b99b      	cbnz	r3, 8008bf4 <_vfiprintf_r+0x5c>
 8008bcc:	4629      	mov	r1, r5
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f7fe fc0a 	bl	80073e8 <__swsetup_r>
 8008bd4:	b170      	cbz	r0, 8008bf4 <_vfiprintf_r+0x5c>
 8008bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bd8:	07dc      	lsls	r4, r3, #31
 8008bda:	d504      	bpl.n	8008be6 <_vfiprintf_r+0x4e>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	b01d      	add	sp, #116	; 0x74
 8008be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be6:	89ab      	ldrh	r3, [r5, #12]
 8008be8:	0598      	lsls	r0, r3, #22
 8008bea:	d4f7      	bmi.n	8008bdc <_vfiprintf_r+0x44>
 8008bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bee:	f7fe fcd1 	bl	8007594 <__retarget_lock_release_recursive>
 8008bf2:	e7f3      	b.n	8008bdc <_vfiprintf_r+0x44>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c02:	2330      	movs	r3, #48	; 0x30
 8008c04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008db8 <_vfiprintf_r+0x220>
 8008c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c0c:	f04f 0901 	mov.w	r9, #1
 8008c10:	4623      	mov	r3, r4
 8008c12:	469a      	mov	sl, r3
 8008c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c18:	b10a      	cbz	r2, 8008c1e <_vfiprintf_r+0x86>
 8008c1a:	2a25      	cmp	r2, #37	; 0x25
 8008c1c:	d1f9      	bne.n	8008c12 <_vfiprintf_r+0x7a>
 8008c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c22:	d00b      	beq.n	8008c3c <_vfiprintf_r+0xa4>
 8008c24:	465b      	mov	r3, fp
 8008c26:	4622      	mov	r2, r4
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7ff ffa1 	bl	8008b72 <__sfputs_r>
 8008c30:	3001      	adds	r0, #1
 8008c32:	f000 80a9 	beq.w	8008d88 <_vfiprintf_r+0x1f0>
 8008c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c38:	445a      	add	r2, fp
 8008c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 80a1 	beq.w	8008d88 <_vfiprintf_r+0x1f0>
 8008c46:	2300      	movs	r3, #0
 8008c48:	f04f 32ff 	mov.w	r2, #4294967295
 8008c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c50:	f10a 0a01 	add.w	sl, sl, #1
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c5e:	4654      	mov	r4, sl
 8008c60:	2205      	movs	r2, #5
 8008c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c66:	4854      	ldr	r0, [pc, #336]	; (8008db8 <_vfiprintf_r+0x220>)
 8008c68:	f7f7 fa8a 	bl	8000180 <memchr>
 8008c6c:	9a04      	ldr	r2, [sp, #16]
 8008c6e:	b9d8      	cbnz	r0, 8008ca8 <_vfiprintf_r+0x110>
 8008c70:	06d1      	lsls	r1, r2, #27
 8008c72:	bf44      	itt	mi
 8008c74:	2320      	movmi	r3, #32
 8008c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c7a:	0713      	lsls	r3, r2, #28
 8008c7c:	bf44      	itt	mi
 8008c7e:	232b      	movmi	r3, #43	; 0x2b
 8008c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c84:	f89a 3000 	ldrb.w	r3, [sl]
 8008c88:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8a:	d015      	beq.n	8008cb8 <_vfiprintf_r+0x120>
 8008c8c:	9a07      	ldr	r2, [sp, #28]
 8008c8e:	4654      	mov	r4, sl
 8008c90:	2000      	movs	r0, #0
 8008c92:	f04f 0c0a 	mov.w	ip, #10
 8008c96:	4621      	mov	r1, r4
 8008c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c9c:	3b30      	subs	r3, #48	; 0x30
 8008c9e:	2b09      	cmp	r3, #9
 8008ca0:	d94d      	bls.n	8008d3e <_vfiprintf_r+0x1a6>
 8008ca2:	b1b0      	cbz	r0, 8008cd2 <_vfiprintf_r+0x13a>
 8008ca4:	9207      	str	r2, [sp, #28]
 8008ca6:	e014      	b.n	8008cd2 <_vfiprintf_r+0x13a>
 8008ca8:	eba0 0308 	sub.w	r3, r0, r8
 8008cac:	fa09 f303 	lsl.w	r3, r9, r3
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	46a2      	mov	sl, r4
 8008cb6:	e7d2      	b.n	8008c5e <_vfiprintf_r+0xc6>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	1d19      	adds	r1, r3, #4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	9103      	str	r1, [sp, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	bfbb      	ittet	lt
 8008cc4:	425b      	neglt	r3, r3
 8008cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8008cca:	9307      	strge	r3, [sp, #28]
 8008ccc:	9307      	strlt	r3, [sp, #28]
 8008cce:	bfb8      	it	lt
 8008cd0:	9204      	strlt	r2, [sp, #16]
 8008cd2:	7823      	ldrb	r3, [r4, #0]
 8008cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd6:	d10c      	bne.n	8008cf2 <_vfiprintf_r+0x15a>
 8008cd8:	7863      	ldrb	r3, [r4, #1]
 8008cda:	2b2a      	cmp	r3, #42	; 0x2a
 8008cdc:	d134      	bne.n	8008d48 <_vfiprintf_r+0x1b0>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	1d1a      	adds	r2, r3, #4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	9203      	str	r2, [sp, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bfb8      	it	lt
 8008cea:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cee:	3402      	adds	r4, #2
 8008cf0:	9305      	str	r3, [sp, #20]
 8008cf2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008dbc <_vfiprintf_r+0x224>
 8008cf6:	7821      	ldrb	r1, [r4, #0]
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	4650      	mov	r0, sl
 8008cfc:	f7f7 fa40 	bl	8000180 <memchr>
 8008d00:	b138      	cbz	r0, 8008d12 <_vfiprintf_r+0x17a>
 8008d02:	9b04      	ldr	r3, [sp, #16]
 8008d04:	eba0 000a 	sub.w	r0, r0, sl
 8008d08:	2240      	movs	r2, #64	; 0x40
 8008d0a:	4082      	lsls	r2, r0
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	3401      	adds	r4, #1
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d16:	482a      	ldr	r0, [pc, #168]	; (8008dc0 <_vfiprintf_r+0x228>)
 8008d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d1c:	2206      	movs	r2, #6
 8008d1e:	f7f7 fa2f 	bl	8000180 <memchr>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d03f      	beq.n	8008da6 <_vfiprintf_r+0x20e>
 8008d26:	4b27      	ldr	r3, [pc, #156]	; (8008dc4 <_vfiprintf_r+0x22c>)
 8008d28:	bb1b      	cbnz	r3, 8008d72 <_vfiprintf_r+0x1da>
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	3307      	adds	r3, #7
 8008d2e:	f023 0307 	bic.w	r3, r3, #7
 8008d32:	3308      	adds	r3, #8
 8008d34:	9303      	str	r3, [sp, #12]
 8008d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d38:	443b      	add	r3, r7
 8008d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3c:	e768      	b.n	8008c10 <_vfiprintf_r+0x78>
 8008d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d42:	460c      	mov	r4, r1
 8008d44:	2001      	movs	r0, #1
 8008d46:	e7a6      	b.n	8008c96 <_vfiprintf_r+0xfe>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	3401      	adds	r4, #1
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	f04f 0c0a 	mov.w	ip, #10
 8008d54:	4620      	mov	r0, r4
 8008d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d5a:	3a30      	subs	r2, #48	; 0x30
 8008d5c:	2a09      	cmp	r2, #9
 8008d5e:	d903      	bls.n	8008d68 <_vfiprintf_r+0x1d0>
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0c6      	beq.n	8008cf2 <_vfiprintf_r+0x15a>
 8008d64:	9105      	str	r1, [sp, #20]
 8008d66:	e7c4      	b.n	8008cf2 <_vfiprintf_r+0x15a>
 8008d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e7f0      	b.n	8008d54 <_vfiprintf_r+0x1bc>
 8008d72:	ab03      	add	r3, sp, #12
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	462a      	mov	r2, r5
 8008d78:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <_vfiprintf_r+0x230>)
 8008d7a:	a904      	add	r1, sp, #16
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f7fd fdc7 	bl	8006910 <_printf_float>
 8008d82:	4607      	mov	r7, r0
 8008d84:	1c78      	adds	r0, r7, #1
 8008d86:	d1d6      	bne.n	8008d36 <_vfiprintf_r+0x19e>
 8008d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d8a:	07d9      	lsls	r1, r3, #31
 8008d8c:	d405      	bmi.n	8008d9a <_vfiprintf_r+0x202>
 8008d8e:	89ab      	ldrh	r3, [r5, #12]
 8008d90:	059a      	lsls	r2, r3, #22
 8008d92:	d402      	bmi.n	8008d9a <_vfiprintf_r+0x202>
 8008d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d96:	f7fe fbfd 	bl	8007594 <__retarget_lock_release_recursive>
 8008d9a:	89ab      	ldrh	r3, [r5, #12]
 8008d9c:	065b      	lsls	r3, r3, #25
 8008d9e:	f53f af1d 	bmi.w	8008bdc <_vfiprintf_r+0x44>
 8008da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da4:	e71c      	b.n	8008be0 <_vfiprintf_r+0x48>
 8008da6:	ab03      	add	r3, sp, #12
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	462a      	mov	r2, r5
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <_vfiprintf_r+0x230>)
 8008dae:	a904      	add	r1, sp, #16
 8008db0:	4630      	mov	r0, r6
 8008db2:	f7fe f847 	bl	8006e44 <_printf_i>
 8008db6:	e7e4      	b.n	8008d82 <_vfiprintf_r+0x1ea>
 8008db8:	0800957c 	.word	0x0800957c
 8008dbc:	08009582 	.word	0x08009582
 8008dc0:	08009586 	.word	0x08009586
 8008dc4:	08006911 	.word	0x08006911
 8008dc8:	08008b73 	.word	0x08008b73

08008dcc <__sflush_r>:
 8008dcc:	898a      	ldrh	r2, [r1, #12]
 8008dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	0710      	lsls	r0, r2, #28
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	d457      	bmi.n	8008e88 <__sflush_r+0xbc>
 8008dd8:	684b      	ldr	r3, [r1, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dc04      	bgt.n	8008de8 <__sflush_r+0x1c>
 8008dde:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dc01      	bgt.n	8008de8 <__sflush_r+0x1c>
 8008de4:	2000      	movs	r0, #0
 8008de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dea:	2e00      	cmp	r6, #0
 8008dec:	d0fa      	beq.n	8008de4 <__sflush_r+0x18>
 8008dee:	2300      	movs	r3, #0
 8008df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008df4:	682f      	ldr	r7, [r5, #0]
 8008df6:	6a21      	ldr	r1, [r4, #32]
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	d032      	beq.n	8008e62 <__sflush_r+0x96>
 8008dfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	075a      	lsls	r2, r3, #29
 8008e02:	d505      	bpl.n	8008e10 <__sflush_r+0x44>
 8008e04:	6863      	ldr	r3, [r4, #4]
 8008e06:	1ac0      	subs	r0, r0, r3
 8008e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e0a:	b10b      	cbz	r3, 8008e10 <__sflush_r+0x44>
 8008e0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e0e:	1ac0      	subs	r0, r0, r3
 8008e10:	2300      	movs	r3, #0
 8008e12:	4602      	mov	r2, r0
 8008e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e16:	6a21      	ldr	r1, [r4, #32]
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b0      	blx	r6
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	d106      	bne.n	8008e30 <__sflush_r+0x64>
 8008e22:	6829      	ldr	r1, [r5, #0]
 8008e24:	291d      	cmp	r1, #29
 8008e26:	d82b      	bhi.n	8008e80 <__sflush_r+0xb4>
 8008e28:	4a28      	ldr	r2, [pc, #160]	; (8008ecc <__sflush_r+0x100>)
 8008e2a:	410a      	asrs	r2, r1
 8008e2c:	07d6      	lsls	r6, r2, #31
 8008e2e:	d427      	bmi.n	8008e80 <__sflush_r+0xb4>
 8008e30:	2200      	movs	r2, #0
 8008e32:	6062      	str	r2, [r4, #4]
 8008e34:	04d9      	lsls	r1, r3, #19
 8008e36:	6922      	ldr	r2, [r4, #16]
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	d504      	bpl.n	8008e46 <__sflush_r+0x7a>
 8008e3c:	1c42      	adds	r2, r0, #1
 8008e3e:	d101      	bne.n	8008e44 <__sflush_r+0x78>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b903      	cbnz	r3, 8008e46 <__sflush_r+0x7a>
 8008e44:	6560      	str	r0, [r4, #84]	; 0x54
 8008e46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e48:	602f      	str	r7, [r5, #0]
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	d0ca      	beq.n	8008de4 <__sflush_r+0x18>
 8008e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e52:	4299      	cmp	r1, r3
 8008e54:	d002      	beq.n	8008e5c <__sflush_r+0x90>
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7ff fa02 	bl	8008260 <_free_r>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	6360      	str	r0, [r4, #52]	; 0x34
 8008e60:	e7c1      	b.n	8008de6 <__sflush_r+0x1a>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b0      	blx	r6
 8008e68:	1c41      	adds	r1, r0, #1
 8008e6a:	d1c8      	bne.n	8008dfe <__sflush_r+0x32>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0c5      	beq.n	8008dfe <__sflush_r+0x32>
 8008e72:	2b1d      	cmp	r3, #29
 8008e74:	d001      	beq.n	8008e7a <__sflush_r+0xae>
 8008e76:	2b16      	cmp	r3, #22
 8008e78:	d101      	bne.n	8008e7e <__sflush_r+0xb2>
 8008e7a:	602f      	str	r7, [r5, #0]
 8008e7c:	e7b2      	b.n	8008de4 <__sflush_r+0x18>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	e7ae      	b.n	8008de6 <__sflush_r+0x1a>
 8008e88:	690f      	ldr	r7, [r1, #16]
 8008e8a:	2f00      	cmp	r7, #0
 8008e8c:	d0aa      	beq.n	8008de4 <__sflush_r+0x18>
 8008e8e:	0793      	lsls	r3, r2, #30
 8008e90:	680e      	ldr	r6, [r1, #0]
 8008e92:	bf08      	it	eq
 8008e94:	694b      	ldreq	r3, [r1, #20]
 8008e96:	600f      	str	r7, [r1, #0]
 8008e98:	bf18      	it	ne
 8008e9a:	2300      	movne	r3, #0
 8008e9c:	1bf6      	subs	r6, r6, r7
 8008e9e:	608b      	str	r3, [r1, #8]
 8008ea0:	2e00      	cmp	r6, #0
 8008ea2:	dd9f      	ble.n	8008de4 <__sflush_r+0x18>
 8008ea4:	6a21      	ldr	r1, [r4, #32]
 8008ea6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008eaa:	4633      	mov	r3, r6
 8008eac:	463a      	mov	r2, r7
 8008eae:	4628      	mov	r0, r5
 8008eb0:	47e0      	blx	ip
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	dc06      	bgt.n	8008ec4 <__sflush_r+0xf8>
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec2:	e790      	b.n	8008de6 <__sflush_r+0x1a>
 8008ec4:	4407      	add	r7, r0
 8008ec6:	1a36      	subs	r6, r6, r0
 8008ec8:	e7ea      	b.n	8008ea0 <__sflush_r+0xd4>
 8008eca:	bf00      	nop
 8008ecc:	dfbffffe 	.word	0xdfbffffe

08008ed0 <_fflush_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	690b      	ldr	r3, [r1, #16]
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	b913      	cbnz	r3, 8008ee0 <_fflush_r+0x10>
 8008eda:	2500      	movs	r5, #0
 8008edc:	4628      	mov	r0, r5
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	b118      	cbz	r0, 8008eea <_fflush_r+0x1a>
 8008ee2:	6a03      	ldr	r3, [r0, #32]
 8008ee4:	b90b      	cbnz	r3, 8008eea <_fflush_r+0x1a>
 8008ee6:	f7fe f95b 	bl	80071a0 <__sinit>
 8008eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0f3      	beq.n	8008eda <_fflush_r+0xa>
 8008ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ef4:	07d0      	lsls	r0, r2, #31
 8008ef6:	d404      	bmi.n	8008f02 <_fflush_r+0x32>
 8008ef8:	0599      	lsls	r1, r3, #22
 8008efa:	d402      	bmi.n	8008f02 <_fflush_r+0x32>
 8008efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efe:	f7fe fb48 	bl	8007592 <__retarget_lock_acquire_recursive>
 8008f02:	4628      	mov	r0, r5
 8008f04:	4621      	mov	r1, r4
 8008f06:	f7ff ff61 	bl	8008dcc <__sflush_r>
 8008f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f0c:	07da      	lsls	r2, r3, #31
 8008f0e:	4605      	mov	r5, r0
 8008f10:	d4e4      	bmi.n	8008edc <_fflush_r+0xc>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	059b      	lsls	r3, r3, #22
 8008f16:	d4e1      	bmi.n	8008edc <_fflush_r+0xc>
 8008f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f1a:	f7fe fb3b 	bl	8007594 <__retarget_lock_release_recursive>
 8008f1e:	e7dd      	b.n	8008edc <_fflush_r+0xc>

08008f20 <__swhatbuf_r>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	460c      	mov	r4, r1
 8008f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	b096      	sub	sp, #88	; 0x58
 8008f2c:	4615      	mov	r5, r2
 8008f2e:	461e      	mov	r6, r3
 8008f30:	da0d      	bge.n	8008f4e <__swhatbuf_r+0x2e>
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f38:	f04f 0100 	mov.w	r1, #0
 8008f3c:	bf0c      	ite	eq
 8008f3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f42:	2340      	movne	r3, #64	; 0x40
 8008f44:	2000      	movs	r0, #0
 8008f46:	6031      	str	r1, [r6, #0]
 8008f48:	602b      	str	r3, [r5, #0]
 8008f4a:	b016      	add	sp, #88	; 0x58
 8008f4c:	bd70      	pop	{r4, r5, r6, pc}
 8008f4e:	466a      	mov	r2, sp
 8008f50:	f000 f848 	bl	8008fe4 <_fstat_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	dbec      	blt.n	8008f32 <__swhatbuf_r+0x12>
 8008f58:	9901      	ldr	r1, [sp, #4]
 8008f5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f62:	4259      	negs	r1, r3
 8008f64:	4159      	adcs	r1, r3
 8008f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f6a:	e7eb      	b.n	8008f44 <__swhatbuf_r+0x24>

08008f6c <__smakebuf_r>:
 8008f6c:	898b      	ldrh	r3, [r1, #12]
 8008f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f70:	079d      	lsls	r5, r3, #30
 8008f72:	4606      	mov	r6, r0
 8008f74:	460c      	mov	r4, r1
 8008f76:	d507      	bpl.n	8008f88 <__smakebuf_r+0x1c>
 8008f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	2301      	movs	r3, #1
 8008f82:	6163      	str	r3, [r4, #20]
 8008f84:	b002      	add	sp, #8
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	ab01      	add	r3, sp, #4
 8008f8a:	466a      	mov	r2, sp
 8008f8c:	f7ff ffc8 	bl	8008f20 <__swhatbuf_r>
 8008f90:	9900      	ldr	r1, [sp, #0]
 8008f92:	4605      	mov	r5, r0
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7ff f9d5 	bl	8008344 <_malloc_r>
 8008f9a:	b948      	cbnz	r0, 8008fb0 <__smakebuf_r+0x44>
 8008f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa0:	059a      	lsls	r2, r3, #22
 8008fa2:	d4ef      	bmi.n	8008f84 <__smakebuf_r+0x18>
 8008fa4:	f023 0303 	bic.w	r3, r3, #3
 8008fa8:	f043 0302 	orr.w	r3, r3, #2
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	e7e3      	b.n	8008f78 <__smakebuf_r+0xc>
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	6020      	str	r0, [r4, #0]
 8008fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	6163      	str	r3, [r4, #20]
 8008fbe:	9b01      	ldr	r3, [sp, #4]
 8008fc0:	6120      	str	r0, [r4, #16]
 8008fc2:	b15b      	cbz	r3, 8008fdc <__smakebuf_r+0x70>
 8008fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 f81d 	bl	8009008 <_isatty_r>
 8008fce:	b128      	cbz	r0, 8008fdc <__smakebuf_r+0x70>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f023 0303 	bic.w	r3, r3, #3
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	81a3      	strh	r3, [r4, #12]
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	431d      	orrs	r5, r3
 8008fe0:	81a5      	strh	r5, [r4, #12]
 8008fe2:	e7cf      	b.n	8008f84 <__smakebuf_r+0x18>

08008fe4 <_fstat_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	; (8009004 <_fstat_r+0x20>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	4611      	mov	r1, r2
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	f7f8 fea8 	bl	8001d46 <_fstat>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d102      	bne.n	8009000 <_fstat_r+0x1c>
 8008ffa:	682b      	ldr	r3, [r5, #0]
 8008ffc:	b103      	cbz	r3, 8009000 <_fstat_r+0x1c>
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	bd38      	pop	{r3, r4, r5, pc}
 8009002:	bf00      	nop
 8009004:	200004e8 	.word	0x200004e8

08009008 <_isatty_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d06      	ldr	r5, [pc, #24]	; (8009024 <_isatty_r+0x1c>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	f7f8 fea6 	bl	8001d64 <_isatty>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_isatty_r+0x1a>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	b103      	cbz	r3, 8009022 <_isatty_r+0x1a>
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	200004e8 	.word	0x200004e8

08009028 <_sbrk_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d06      	ldr	r5, [pc, #24]	; (8009044 <_sbrk_r+0x1c>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	f7f8 feac 	bl	8001d90 <_sbrk>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_sbrk_r+0x1a>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_sbrk_r+0x1a>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	200004e8 	.word	0x200004e8

08009048 <memcpy>:
 8009048:	440a      	add	r2, r1
 800904a:	4291      	cmp	r1, r2
 800904c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009050:	d100      	bne.n	8009054 <memcpy+0xc>
 8009052:	4770      	bx	lr
 8009054:	b510      	push	{r4, lr}
 8009056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800905a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800905e:	4291      	cmp	r1, r2
 8009060:	d1f9      	bne.n	8009056 <memcpy+0xe>
 8009062:	bd10      	pop	{r4, pc}

08009064 <__assert_func>:
 8009064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009066:	4614      	mov	r4, r2
 8009068:	461a      	mov	r2, r3
 800906a:	4b09      	ldr	r3, [pc, #36]	; (8009090 <__assert_func+0x2c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4605      	mov	r5, r0
 8009070:	68d8      	ldr	r0, [r3, #12]
 8009072:	b14c      	cbz	r4, 8009088 <__assert_func+0x24>
 8009074:	4b07      	ldr	r3, [pc, #28]	; (8009094 <__assert_func+0x30>)
 8009076:	9100      	str	r1, [sp, #0]
 8009078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800907c:	4906      	ldr	r1, [pc, #24]	; (8009098 <__assert_func+0x34>)
 800907e:	462b      	mov	r3, r5
 8009080:	f000 f842 	bl	8009108 <fiprintf>
 8009084:	f000 f852 	bl	800912c <abort>
 8009088:	4b04      	ldr	r3, [pc, #16]	; (800909c <__assert_func+0x38>)
 800908a:	461c      	mov	r4, r3
 800908c:	e7f3      	b.n	8009076 <__assert_func+0x12>
 800908e:	bf00      	nop
 8009090:	20000070 	.word	0x20000070
 8009094:	08009597 	.word	0x08009597
 8009098:	080095a4 	.word	0x080095a4
 800909c:	080095d2 	.word	0x080095d2

080090a0 <_calloc_r>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	fba1 5402 	umull	r5, r4, r1, r2
 80090a6:	b934      	cbnz	r4, 80090b6 <_calloc_r+0x16>
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7ff f94b 	bl	8008344 <_malloc_r>
 80090ae:	4606      	mov	r6, r0
 80090b0:	b928      	cbnz	r0, 80090be <_calloc_r+0x1e>
 80090b2:	4630      	mov	r0, r6
 80090b4:	bd70      	pop	{r4, r5, r6, pc}
 80090b6:	220c      	movs	r2, #12
 80090b8:	6002      	str	r2, [r0, #0]
 80090ba:	2600      	movs	r6, #0
 80090bc:	e7f9      	b.n	80090b2 <_calloc_r+0x12>
 80090be:	462a      	mov	r2, r5
 80090c0:	4621      	mov	r1, r4
 80090c2:	f7fe f9e9 	bl	8007498 <memset>
 80090c6:	e7f4      	b.n	80090b2 <_calloc_r+0x12>

080090c8 <__ascii_mbtowc>:
 80090c8:	b082      	sub	sp, #8
 80090ca:	b901      	cbnz	r1, 80090ce <__ascii_mbtowc+0x6>
 80090cc:	a901      	add	r1, sp, #4
 80090ce:	b142      	cbz	r2, 80090e2 <__ascii_mbtowc+0x1a>
 80090d0:	b14b      	cbz	r3, 80090e6 <__ascii_mbtowc+0x1e>
 80090d2:	7813      	ldrb	r3, [r2, #0]
 80090d4:	600b      	str	r3, [r1, #0]
 80090d6:	7812      	ldrb	r2, [r2, #0]
 80090d8:	1e10      	subs	r0, r2, #0
 80090da:	bf18      	it	ne
 80090dc:	2001      	movne	r0, #1
 80090de:	b002      	add	sp, #8
 80090e0:	4770      	bx	lr
 80090e2:	4610      	mov	r0, r2
 80090e4:	e7fb      	b.n	80090de <__ascii_mbtowc+0x16>
 80090e6:	f06f 0001 	mvn.w	r0, #1
 80090ea:	e7f8      	b.n	80090de <__ascii_mbtowc+0x16>

080090ec <__ascii_wctomb>:
 80090ec:	4603      	mov	r3, r0
 80090ee:	4608      	mov	r0, r1
 80090f0:	b141      	cbz	r1, 8009104 <__ascii_wctomb+0x18>
 80090f2:	2aff      	cmp	r2, #255	; 0xff
 80090f4:	d904      	bls.n	8009100 <__ascii_wctomb+0x14>
 80090f6:	228a      	movs	r2, #138	; 0x8a
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	4770      	bx	lr
 8009100:	700a      	strb	r2, [r1, #0]
 8009102:	2001      	movs	r0, #1
 8009104:	4770      	bx	lr
	...

08009108 <fiprintf>:
 8009108:	b40e      	push	{r1, r2, r3}
 800910a:	b503      	push	{r0, r1, lr}
 800910c:	4601      	mov	r1, r0
 800910e:	ab03      	add	r3, sp, #12
 8009110:	4805      	ldr	r0, [pc, #20]	; (8009128 <fiprintf+0x20>)
 8009112:	f853 2b04 	ldr.w	r2, [r3], #4
 8009116:	6800      	ldr	r0, [r0, #0]
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	f7ff fd3d 	bl	8008b98 <_vfiprintf_r>
 800911e:	b002      	add	sp, #8
 8009120:	f85d eb04 	ldr.w	lr, [sp], #4
 8009124:	b003      	add	sp, #12
 8009126:	4770      	bx	lr
 8009128:	20000070 	.word	0x20000070

0800912c <abort>:
 800912c:	b508      	push	{r3, lr}
 800912e:	2006      	movs	r0, #6
 8009130:	f000 f82c 	bl	800918c <raise>
 8009134:	2001      	movs	r0, #1
 8009136:	f7f8 fdb8 	bl	8001caa <_exit>

0800913a <_raise_r>:
 800913a:	291f      	cmp	r1, #31
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4604      	mov	r4, r0
 8009140:	460d      	mov	r5, r1
 8009142:	d904      	bls.n	800914e <_raise_r+0x14>
 8009144:	2316      	movs	r3, #22
 8009146:	6003      	str	r3, [r0, #0]
 8009148:	f04f 30ff 	mov.w	r0, #4294967295
 800914c:	bd38      	pop	{r3, r4, r5, pc}
 800914e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009150:	b112      	cbz	r2, 8009158 <_raise_r+0x1e>
 8009152:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009156:	b94b      	cbnz	r3, 800916c <_raise_r+0x32>
 8009158:	4620      	mov	r0, r4
 800915a:	f000 f831 	bl	80091c0 <_getpid_r>
 800915e:	462a      	mov	r2, r5
 8009160:	4601      	mov	r1, r0
 8009162:	4620      	mov	r0, r4
 8009164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009168:	f000 b818 	b.w	800919c <_kill_r>
 800916c:	2b01      	cmp	r3, #1
 800916e:	d00a      	beq.n	8009186 <_raise_r+0x4c>
 8009170:	1c59      	adds	r1, r3, #1
 8009172:	d103      	bne.n	800917c <_raise_r+0x42>
 8009174:	2316      	movs	r3, #22
 8009176:	6003      	str	r3, [r0, #0]
 8009178:	2001      	movs	r0, #1
 800917a:	e7e7      	b.n	800914c <_raise_r+0x12>
 800917c:	2400      	movs	r4, #0
 800917e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009182:	4628      	mov	r0, r5
 8009184:	4798      	blx	r3
 8009186:	2000      	movs	r0, #0
 8009188:	e7e0      	b.n	800914c <_raise_r+0x12>
	...

0800918c <raise>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <raise+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f7ff bfd2 	b.w	800913a <_raise_r>
 8009196:	bf00      	nop
 8009198:	20000070 	.word	0x20000070

0800919c <_kill_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d07      	ldr	r5, [pc, #28]	; (80091bc <_kill_r+0x20>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	4611      	mov	r1, r2
 80091a8:	602b      	str	r3, [r5, #0]
 80091aa:	f7f8 fd6e 	bl	8001c8a <_kill>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d102      	bne.n	80091b8 <_kill_r+0x1c>
 80091b2:	682b      	ldr	r3, [r5, #0]
 80091b4:	b103      	cbz	r3, 80091b8 <_kill_r+0x1c>
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	bd38      	pop	{r3, r4, r5, pc}
 80091ba:	bf00      	nop
 80091bc:	200004e8 	.word	0x200004e8

080091c0 <_getpid_r>:
 80091c0:	f7f8 bd5c 	b.w	8001c7c <_getpid>

080091c4 <_init>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr

080091d0 <_fini>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr
 80091dc:	0000      	movs	r0, r0
	...
