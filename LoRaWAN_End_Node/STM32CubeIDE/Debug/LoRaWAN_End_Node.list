
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016510  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  08016650  08016650  00026650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080178e8  080178e8  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  080178e8  080178e8  000278e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080178f0  080178f0  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080178f0  080178f0  000278f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080178f8  080178f8  000278f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000002d0  20000000  08017900  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001738  200002d0  200002d0  000402d0  2**2
                  ALLOC
 12 RAM1_region   00000000  20001a08  20001a08  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001a08  20001a08  000402d0  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .comment      00000043  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY
 17 .debug_info   000664be  00000000  00000000  0003e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000cd49  00000000  00000000  000a4b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001d63f  00000000  00000000  000b184c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003650  00000000  00000000  000cee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002b79  00000000  00000000  000d24e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002e468  00000000  00000000  000d5059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0005b62d  00000000  00000000  001034c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000e9ee4  00000000  00000000  0015eaee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000ab9c  00000000  00000000  002489d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000086  00000000  00000000  00253570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002d0 	.word	0x200002d0
 800015c:	00000000 	.word	0x00000000
 8000160:	08016638 	.word	0x08016638

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002d4 	.word	0x200002d4
 800017c:	08016638 	.word	0x08016638

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <__aeabi_uldivmod>:
 8001060:	b953      	cbnz	r3, 8001078 <__aeabi_uldivmod+0x18>
 8001062:	b94a      	cbnz	r2, 8001078 <__aeabi_uldivmod+0x18>
 8001064:	2900      	cmp	r1, #0
 8001066:	bf08      	it	eq
 8001068:	2800      	cmpeq	r0, #0
 800106a:	bf1c      	itt	ne
 800106c:	f04f 31ff 	movne.w	r1, #4294967295
 8001070:	f04f 30ff 	movne.w	r0, #4294967295
 8001074:	f000 b970 	b.w	8001358 <__aeabi_idiv0>
 8001078:	f1ad 0c08 	sub.w	ip, sp, #8
 800107c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001080:	f000 f806 	bl	8001090 <__udivmoddi4>
 8001084:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr

08001090 <__udivmoddi4>:
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001094:	9e08      	ldr	r6, [sp, #32]
 8001096:	460d      	mov	r5, r1
 8001098:	4604      	mov	r4, r0
 800109a:	460f      	mov	r7, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d14a      	bne.n	8001136 <__udivmoddi4+0xa6>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	4694      	mov	ip, r2
 80010a4:	d965      	bls.n	8001172 <__udivmoddi4+0xe2>
 80010a6:	fab2 f382 	clz	r3, r2
 80010aa:	b143      	cbz	r3, 80010be <__udivmoddi4+0x2e>
 80010ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80010b0:	f1c3 0220 	rsb	r2, r3, #32
 80010b4:	409f      	lsls	r7, r3
 80010b6:	fa20 f202 	lsr.w	r2, r0, r2
 80010ba:	4317      	orrs	r7, r2
 80010bc:	409c      	lsls	r4, r3
 80010be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010c2:	fa1f f58c 	uxth.w	r5, ip
 80010c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80010ca:	0c22      	lsrs	r2, r4, #16
 80010cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80010d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80010d4:	fb01 f005 	mul.w	r0, r1, r5
 80010d8:	4290      	cmp	r0, r2
 80010da:	d90a      	bls.n	80010f2 <__udivmoddi4+0x62>
 80010dc:	eb1c 0202 	adds.w	r2, ip, r2
 80010e0:	f101 37ff 	add.w	r7, r1, #4294967295
 80010e4:	f080 811b 	bcs.w	800131e <__udivmoddi4+0x28e>
 80010e8:	4290      	cmp	r0, r2
 80010ea:	f240 8118 	bls.w	800131e <__udivmoddi4+0x28e>
 80010ee:	3902      	subs	r1, #2
 80010f0:	4462      	add	r2, ip
 80010f2:	1a12      	subs	r2, r2, r0
 80010f4:	b2a4      	uxth	r4, r4
 80010f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80010fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80010fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001102:	fb00 f505 	mul.w	r5, r0, r5
 8001106:	42a5      	cmp	r5, r4
 8001108:	d90a      	bls.n	8001120 <__udivmoddi4+0x90>
 800110a:	eb1c 0404 	adds.w	r4, ip, r4
 800110e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001112:	f080 8106 	bcs.w	8001322 <__udivmoddi4+0x292>
 8001116:	42a5      	cmp	r5, r4
 8001118:	f240 8103 	bls.w	8001322 <__udivmoddi4+0x292>
 800111c:	4464      	add	r4, ip
 800111e:	3802      	subs	r0, #2
 8001120:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001124:	1b64      	subs	r4, r4, r5
 8001126:	2100      	movs	r1, #0
 8001128:	b11e      	cbz	r6, 8001132 <__udivmoddi4+0xa2>
 800112a:	40dc      	lsrs	r4, r3
 800112c:	2300      	movs	r3, #0
 800112e:	e9c6 4300 	strd	r4, r3, [r6]
 8001132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001136:	428b      	cmp	r3, r1
 8001138:	d908      	bls.n	800114c <__udivmoddi4+0xbc>
 800113a:	2e00      	cmp	r6, #0
 800113c:	f000 80ec 	beq.w	8001318 <__udivmoddi4+0x288>
 8001140:	2100      	movs	r1, #0
 8001142:	e9c6 0500 	strd	r0, r5, [r6]
 8001146:	4608      	mov	r0, r1
 8001148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800114c:	fab3 f183 	clz	r1, r3
 8001150:	2900      	cmp	r1, #0
 8001152:	d149      	bne.n	80011e8 <__udivmoddi4+0x158>
 8001154:	42ab      	cmp	r3, r5
 8001156:	d302      	bcc.n	800115e <__udivmoddi4+0xce>
 8001158:	4282      	cmp	r2, r0
 800115a:	f200 80f7 	bhi.w	800134c <__udivmoddi4+0x2bc>
 800115e:	1a84      	subs	r4, r0, r2
 8001160:	eb65 0203 	sbc.w	r2, r5, r3
 8001164:	2001      	movs	r0, #1
 8001166:	4617      	mov	r7, r2
 8001168:	2e00      	cmp	r6, #0
 800116a:	d0e2      	beq.n	8001132 <__udivmoddi4+0xa2>
 800116c:	e9c6 4700 	strd	r4, r7, [r6]
 8001170:	e7df      	b.n	8001132 <__udivmoddi4+0xa2>
 8001172:	b902      	cbnz	r2, 8001176 <__udivmoddi4+0xe6>
 8001174:	deff      	udf	#255	; 0xff
 8001176:	fab2 f382 	clz	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 808f 	bne.w	800129e <__udivmoddi4+0x20e>
 8001180:	1a8a      	subs	r2, r1, r2
 8001182:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001186:	fa1f fe8c 	uxth.w	lr, ip
 800118a:	2101      	movs	r1, #1
 800118c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001190:	fb07 2015 	mls	r0, r7, r5, r2
 8001194:	0c22      	lsrs	r2, r4, #16
 8001196:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800119a:	fb0e f005 	mul.w	r0, lr, r5
 800119e:	4290      	cmp	r0, r2
 80011a0:	d908      	bls.n	80011b4 <__udivmoddi4+0x124>
 80011a2:	eb1c 0202 	adds.w	r2, ip, r2
 80011a6:	f105 38ff 	add.w	r8, r5, #4294967295
 80011aa:	d202      	bcs.n	80011b2 <__udivmoddi4+0x122>
 80011ac:	4290      	cmp	r0, r2
 80011ae:	f200 80ca 	bhi.w	8001346 <__udivmoddi4+0x2b6>
 80011b2:	4645      	mov	r5, r8
 80011b4:	1a12      	subs	r2, r2, r0
 80011b6:	b2a4      	uxth	r4, r4
 80011b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80011bc:	fb07 2210 	mls	r2, r7, r0, r2
 80011c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011c4:	fb0e fe00 	mul.w	lr, lr, r0
 80011c8:	45a6      	cmp	lr, r4
 80011ca:	d908      	bls.n	80011de <__udivmoddi4+0x14e>
 80011cc:	eb1c 0404 	adds.w	r4, ip, r4
 80011d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80011d4:	d202      	bcs.n	80011dc <__udivmoddi4+0x14c>
 80011d6:	45a6      	cmp	lr, r4
 80011d8:	f200 80ba 	bhi.w	8001350 <__udivmoddi4+0x2c0>
 80011dc:	4610      	mov	r0, r2
 80011de:	eba4 040e 	sub.w	r4, r4, lr
 80011e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80011e6:	e79f      	b.n	8001128 <__udivmoddi4+0x98>
 80011e8:	f1c1 0720 	rsb	r7, r1, #32
 80011ec:	408b      	lsls	r3, r1
 80011ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80011f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80011f6:	fa05 f401 	lsl.w	r4, r5, r1
 80011fa:	fa20 f307 	lsr.w	r3, r0, r7
 80011fe:	40fd      	lsrs	r5, r7
 8001200:	4323      	orrs	r3, r4
 8001202:	fa00 f901 	lsl.w	r9, r0, r1
 8001206:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800120a:	fa1f fe8c 	uxth.w	lr, ip
 800120e:	fbb5 f8f0 	udiv	r8, r5, r0
 8001212:	0c1c      	lsrs	r4, r3, #16
 8001214:	fb00 5518 	mls	r5, r0, r8, r5
 8001218:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800121c:	fb08 f50e 	mul.w	r5, r8, lr
 8001220:	42a5      	cmp	r5, r4
 8001222:	fa02 f201 	lsl.w	r2, r2, r1
 8001226:	d90b      	bls.n	8001240 <__udivmoddi4+0x1b0>
 8001228:	eb1c 0404 	adds.w	r4, ip, r4
 800122c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001230:	f080 8087 	bcs.w	8001342 <__udivmoddi4+0x2b2>
 8001234:	42a5      	cmp	r5, r4
 8001236:	f240 8084 	bls.w	8001342 <__udivmoddi4+0x2b2>
 800123a:	f1a8 0802 	sub.w	r8, r8, #2
 800123e:	4464      	add	r4, ip
 8001240:	1b64      	subs	r4, r4, r5
 8001242:	b29d      	uxth	r5, r3
 8001244:	fbb4 f3f0 	udiv	r3, r4, r0
 8001248:	fb00 4413 	mls	r4, r0, r3, r4
 800124c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001250:	fb03 fe0e 	mul.w	lr, r3, lr
 8001254:	45a6      	cmp	lr, r4
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x1da>
 8001258:	eb1c 0404 	adds.w	r4, ip, r4
 800125c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001260:	d26b      	bcs.n	800133a <__udivmoddi4+0x2aa>
 8001262:	45a6      	cmp	lr, r4
 8001264:	d969      	bls.n	800133a <__udivmoddi4+0x2aa>
 8001266:	3b02      	subs	r3, #2
 8001268:	4464      	add	r4, ip
 800126a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800126e:	fba0 8302 	umull	r8, r3, r0, r2
 8001272:	eba4 040e 	sub.w	r4, r4, lr
 8001276:	429c      	cmp	r4, r3
 8001278:	46c6      	mov	lr, r8
 800127a:	461d      	mov	r5, r3
 800127c:	d355      	bcc.n	800132a <__udivmoddi4+0x29a>
 800127e:	d052      	beq.n	8001326 <__udivmoddi4+0x296>
 8001280:	b156      	cbz	r6, 8001298 <__udivmoddi4+0x208>
 8001282:	ebb9 030e 	subs.w	r3, r9, lr
 8001286:	eb64 0405 	sbc.w	r4, r4, r5
 800128a:	fa04 f707 	lsl.w	r7, r4, r7
 800128e:	40cb      	lsrs	r3, r1
 8001290:	40cc      	lsrs	r4, r1
 8001292:	431f      	orrs	r7, r3
 8001294:	e9c6 7400 	strd	r7, r4, [r6]
 8001298:	2100      	movs	r1, #0
 800129a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129e:	f1c3 0120 	rsb	r1, r3, #32
 80012a2:	fa02 fc03 	lsl.w	ip, r2, r3
 80012a6:	fa20 f201 	lsr.w	r2, r0, r1
 80012aa:	fa25 f101 	lsr.w	r1, r5, r1
 80012ae:	409d      	lsls	r5, r3
 80012b0:	432a      	orrs	r2, r5
 80012b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012b6:	fa1f fe8c 	uxth.w	lr, ip
 80012ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80012be:	fb07 1510 	mls	r5, r7, r0, r1
 80012c2:	0c11      	lsrs	r1, r2, #16
 80012c4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80012c8:	fb00 f50e 	mul.w	r5, r0, lr
 80012cc:	428d      	cmp	r5, r1
 80012ce:	fa04 f403 	lsl.w	r4, r4, r3
 80012d2:	d908      	bls.n	80012e6 <__udivmoddi4+0x256>
 80012d4:	eb1c 0101 	adds.w	r1, ip, r1
 80012d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80012dc:	d22f      	bcs.n	800133e <__udivmoddi4+0x2ae>
 80012de:	428d      	cmp	r5, r1
 80012e0:	d92d      	bls.n	800133e <__udivmoddi4+0x2ae>
 80012e2:	3802      	subs	r0, #2
 80012e4:	4461      	add	r1, ip
 80012e6:	1b49      	subs	r1, r1, r5
 80012e8:	b292      	uxth	r2, r2
 80012ea:	fbb1 f5f7 	udiv	r5, r1, r7
 80012ee:	fb07 1115 	mls	r1, r7, r5, r1
 80012f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012f6:	fb05 f10e 	mul.w	r1, r5, lr
 80012fa:	4291      	cmp	r1, r2
 80012fc:	d908      	bls.n	8001310 <__udivmoddi4+0x280>
 80012fe:	eb1c 0202 	adds.w	r2, ip, r2
 8001302:	f105 38ff 	add.w	r8, r5, #4294967295
 8001306:	d216      	bcs.n	8001336 <__udivmoddi4+0x2a6>
 8001308:	4291      	cmp	r1, r2
 800130a:	d914      	bls.n	8001336 <__udivmoddi4+0x2a6>
 800130c:	3d02      	subs	r5, #2
 800130e:	4462      	add	r2, ip
 8001310:	1a52      	subs	r2, r2, r1
 8001312:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001316:	e739      	b.n	800118c <__udivmoddi4+0xfc>
 8001318:	4631      	mov	r1, r6
 800131a:	4630      	mov	r0, r6
 800131c:	e709      	b.n	8001132 <__udivmoddi4+0xa2>
 800131e:	4639      	mov	r1, r7
 8001320:	e6e7      	b.n	80010f2 <__udivmoddi4+0x62>
 8001322:	4610      	mov	r0, r2
 8001324:	e6fc      	b.n	8001120 <__udivmoddi4+0x90>
 8001326:	45c1      	cmp	r9, r8
 8001328:	d2aa      	bcs.n	8001280 <__udivmoddi4+0x1f0>
 800132a:	ebb8 0e02 	subs.w	lr, r8, r2
 800132e:	eb63 050c 	sbc.w	r5, r3, ip
 8001332:	3801      	subs	r0, #1
 8001334:	e7a4      	b.n	8001280 <__udivmoddi4+0x1f0>
 8001336:	4645      	mov	r5, r8
 8001338:	e7ea      	b.n	8001310 <__udivmoddi4+0x280>
 800133a:	4603      	mov	r3, r0
 800133c:	e795      	b.n	800126a <__udivmoddi4+0x1da>
 800133e:	4640      	mov	r0, r8
 8001340:	e7d1      	b.n	80012e6 <__udivmoddi4+0x256>
 8001342:	46d0      	mov	r8, sl
 8001344:	e77c      	b.n	8001240 <__udivmoddi4+0x1b0>
 8001346:	3d02      	subs	r5, #2
 8001348:	4462      	add	r2, ip
 800134a:	e733      	b.n	80011b4 <__udivmoddi4+0x124>
 800134c:	4608      	mov	r0, r1
 800134e:	e70b      	b.n	8001168 <__udivmoddi4+0xd8>
 8001350:	4464      	add	r4, ip
 8001352:	3802      	subs	r0, #2
 8001354:	e743      	b.n	80011de <__udivmoddi4+0x14e>
 8001356:	bf00      	nop

08001358 <__aeabi_idiv0>:
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop

0800135c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800135c:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800135e:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_ADC_Init+0x50>)
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_ADC_Init+0x54>)
 8001362:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001364:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001368:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800136a:	2300      	movs	r3, #0
 800136c:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001370:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001372:	2204      	movs	r2, #4
 8001374:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001376:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001378:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800137a:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 800137c:	2201      	movs	r2, #1
 800137e:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001380:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001384:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001386:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001388:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800138c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001390:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001392:	2207      	movs	r2, #7
 8001394:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001396:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001398:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800139c:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800139e:	f002 fd19 	bl	8003dd4 <HAL_ADC_Init>
 80013a2:	b900      	cbnz	r0, 80013a6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013a6:	f000 fb25 	bl	80019f4 <Error_Handler>
}
 80013aa:	e7fb      	b.n	80013a4 <MX_ADC_Init+0x48>
 80013ac:	200002ec 	.word	0x200002ec
 80013b0:	40012400 	.word	0x40012400

080013b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 80013b4:	6802      	ldr	r2, [r0, #0]
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_ADC_MspInit+0x28>)
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d000      	beq.n	80013be <HAL_ADC_MspInit+0xa>
 80013bc:	4770      	bx	lr
{
 80013be:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80013d4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80013d6:	b002      	add	sp, #8
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40012400 	.word	0x40012400

080013e0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 80013e0:	6802      	ldr	r2, [r0, #0]
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_ADC_MspDeInit+0x18>)
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d000      	beq.n	80013ea <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80013e8:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ee:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80013f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013f4:	6613      	str	r3, [r2, #96]	; 0x60
 80013f6:	e7f7      	b.n	80013e8 <HAL_ADC_MspDeInit+0x8>
 80013f8:	40012400 	.word	0x40012400

080013fc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80013fc:	b530      	push	{r4, r5, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	2300      	movs	r3, #0
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	9302      	str	r3, [sp, #8]
 8001408:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800140a:	f7ff ffa7 	bl	800135c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800140e:	4816      	ldr	r0, [pc, #88]	; (8001468 <ADC_ReadChannels+0x6c>)
 8001410:	f003 f918 	bl	8004644 <HAL_ADCEx_Calibration_Start>
 8001414:	b9f8      	cbnz	r0, 8001456 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001416:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001418:	2300      	movs	r3, #0
 800141a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800141c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800141e:	a901      	add	r1, sp, #4
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <ADC_ReadChannels+0x6c>)
 8001422:	f002 fe51 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8001426:	b9c8      	cbnz	r0, 800145c <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <ADC_ReadChannels+0x6c>)
 800142a:	f003 f80f 	bl	800444c <HAL_ADC_Start>
 800142e:	b9c0      	cbnz	r0, 8001462 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001430:	4c0d      	ldr	r4, [pc, #52]	; (8001468 <ADC_ReadChannels+0x6c>)
 8001432:	f04f 31ff 	mov.w	r1, #4294967295
 8001436:	4620      	mov	r0, r4
 8001438:	f002 fde4 	bl	8004004 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800143c:	4620      	mov	r0, r4
 800143e:	f003 f8e1 	bl	8004604 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001442:	4620      	mov	r0, r4
 8001444:	f002 fe3d 	bl	80040c2 <HAL_ADC_GetValue>
 8001448:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800144a:	4620      	mov	r0, r4
 800144c:	f003 f87a 	bl	8004544 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001450:	4628      	mov	r0, r5
 8001452:	b005      	add	sp, #20
 8001454:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001456:	f000 facd 	bl	80019f4 <Error_Handler>
 800145a:	e7dc      	b.n	8001416 <ADC_ReadChannels+0x1a>
    Error_Handler();
 800145c:	f000 faca 	bl	80019f4 <Error_Handler>
 8001460:	e7e2      	b.n	8001428 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001462:	f000 fac7 	bl	80019f4 <Error_Handler>
 8001466:	e7e3      	b.n	8001430 <ADC_ReadChannels+0x34>
 8001468:	200002ec 	.word	0x200002ec

0800146c <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 800146c:	4b01      	ldr	r3, [pc, #4]	; (8001474 <SYS_InitMeasurement+0x8>)
 800146e:	4a02      	ldr	r2, [pc, #8]	; (8001478 <SYS_InitMeasurement+0xc>)
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	4770      	bx	lr
 8001474:	200002ec 	.word	0x200002ec
 8001478:	40012400 	.word	0x40012400

0800147c <SYS_GetBatteryLevel>:
{
 800147c:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <SYS_GetBatteryLevel+0x38>)
 8001480:	f7ff ffbc 	bl	80013fc <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001484:	b1a0      	cbz	r0, 80014b0 <SYS_GetBatteryLevel+0x34>
 8001486:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <SYS_GetBatteryLevel+0x3c>)
 800148a:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 800148e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001492:	4290      	cmp	r0, r2
 8001494:	d007      	beq.n	80014a6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001496:	f640 42e4 	movw	r2, #3300	; 0xce4
 800149a:	fb02 f000 	mul.w	r0, r2, r0
 800149e:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a2:	b280      	uxth	r0, r0
 80014a4:	e005      	b.n	80014b2 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <SYS_GetBatteryLevel+0x40>)
 80014a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ac:	b280      	uxth	r0, r0
 80014ae:	e000      	b.n	80014b2 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 80014b0:	2000      	movs	r0, #0
}
 80014b2:	bd08      	pop	{r3, pc}
 80014b4:	b4002000 	.word	0xb4002000
 80014b8:	1fff7500 	.word	0x1fff7500
 80014bc:	004c08d8 	.word	0x004c08d8

080014c0 <SYS_GetTemperatureLevel>:
{
 80014c0:	b510      	push	{r4, lr}
 80014c2:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80014ca:	f7ff ffd7 	bl	800147c <SYS_GetBatteryLevel>
 80014ce:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80014d0:	4821      	ldr	r0, [pc, #132]	; (8001558 <SYS_GetTemperatureLevel+0x98>)
 80014d2:	f7ff ff93 	bl	80013fc <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <SYS_GetTemperatureLevel+0x9c>)
 80014d8:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 80014dc:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 80014e0:	428a      	cmp	r2, r1
 80014e2:	d01d      	beq.n	8001520 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80014e4:	fb00 f304 	mul.w	r3, r0, r4
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	481d      	ldr	r0, [pc, #116]	; (8001560 <SYS_GetTemperatureLevel+0xa0>)
 80014ec:	fba0 0303 	umull	r0, r3, r0, r3
 80014f0:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 80014f4:	2064      	movs	r0, #100	; 0x64
 80014f6:	fb00 f303 	mul.w	r3, r0, r3
 80014fa:	1a52      	subs	r2, r2, r1
 80014fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8001500:	331e      	adds	r3, #30
 8001502:	b21b      	sxth	r3, r3
 8001504:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001508:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800150c:	b21b      	sxth	r3, r3
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21b      	sxth	r3, r3
 8001512:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001516:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800151a:	b200      	sxth	r0, r0
 800151c:	b002      	add	sp, #8
 800151e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001520:	fb04 f000 	mul.w	r0, r4, r0
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <SYS_GetTemperatureLevel+0xa4>)
 8001526:	fba3 2300 	umull	r2, r3, r3, r0
 800152a:	1ac4      	subs	r4, r0, r3
 800152c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001530:	0adb      	lsrs	r3, r3, #11
 8001532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800153e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <SYS_GetTemperatureLevel+0xa8>)
 8001544:	fb82 1203 	smull	r1, r2, r2, r3
 8001548:	17db      	asrs	r3, r3, #31
 800154a:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 800154e:	331e      	adds	r3, #30
 8001550:	b21b      	sxth	r3, r3
 8001552:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001556:	e7d7      	b.n	8001508 <SYS_GetTemperatureLevel+0x48>
 8001558:	b0001000 	.word	0xb0001000
 800155c:	1fff7500 	.word	0x1fff7500
 8001560:	09ee009f 	.word	0x09ee009f
 8001564:	00100101 	.word	0x00100101
 8001568:	68db8bad 	.word	0x68db8bad

0800156c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800156c:	b500      	push	{lr}
 800156e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001576:	f042 0204 	orr.w	r2, r2, #4
 800157a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800157c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800157e:	f002 0204 	and.w	r2, r2, #4
 8001582:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001584:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001586:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800158e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001596:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2102      	movs	r1, #2
 800159c:	200f      	movs	r0, #15
 800159e:	f003 f903 	bl	80047a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f003 f938 	bl	8004818 <HAL_NVIC_EnableIRQ>

}
 80015a8:	b003      	add	sp, #12
 80015aa:	f85d fb04 	ldr.w	pc, [sp], #4

080015ae <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80015ae:	2300      	movs	r3, #0
 80015b0:	e001      	b.n	80015b6 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80015b2:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 80015b4:	3308      	adds	r3, #8
 80015b6:	428b      	cmp	r3, r1
 80015b8:	d20a      	bcs.n	80015d0 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 80015ba:	6842      	ldr	r2, [r0, #4]
 80015bc:	f8d0 c000 	ldr.w	ip, [r0]
 80015c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80015c4:	bf08      	it	eq
 80015c6:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 80015ca:	d0f2      	beq.n	80015b2 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 80015cc:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 80015ce:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 80015d0:	2000      	movs	r0, #0
 80015d2:	4770      	bx	lr

080015d4 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 80015d4:	b130      	cbz	r0, 80015e4 <FLASH_IF_INT_Read+0x10>
{
 80015d6:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 80015d8:	b139      	cbz	r1, 80015ea <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80015da:	b292      	uxth	r2, r2
 80015dc:	f011 fe80 	bl	80132e0 <UTIL_MEM_cpy_8>
  return ret_status;
 80015e0:	2000      	movs	r0, #0
}
 80015e2:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 80015e4:	f06f 0005 	mvn.w	r0, #5
}
 80015e8:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 80015ea:	f06f 0005 	mvn.w	r0, #5
 80015ee:	e7f8      	b.n	80015e2 <FLASH_IF_INT_Read+0xe>

080015f0 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80015f0:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80015f2:	f003 fbe1 	bl	8004db8 <HAL_FLASH_Unlock>
 80015f6:	b978      	cbnz	r0, 8001618 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <FLASH_IF_INT_Clear_Error+0x30>)
 80015fa:	699a      	ldr	r2, [r3, #24]
 80015fc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001600:	619a      	str	r2, [r3, #24]
 8001602:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001606:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001608:	f003 fbee 	bl	8004de8 <HAL_FLASH_Lock>
 800160c:	b908      	cbnz	r0, 8001612 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800160e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001610:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001612:	f06f 0004 	mvn.w	r0, #4
 8001616:	e7fb      	b.n	8001610 <FLASH_IF_INT_Clear_Error+0x20>
 8001618:	f06f 0004 	mvn.w	r0, #4
 800161c:	e7f8      	b.n	8001610 <FLASH_IF_INT_Clear_Error+0x20>
 800161e:	bf00      	nop
 8001620:	58004000 	.word	0x58004000

08001624 <FLASH_IF_INT_Erase>:
{
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800162c:	2800      	cmp	r0, #0
 800162e:	d039      	beq.n	80016a4 <FLASH_IF_INT_Erase+0x80>
 8001630:	460e      	mov	r6, r1
 8001632:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001634:	f7ff ffdc 	bl	80015f0 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001638:	4605      	mov	r5, r0
 800163a:	b110      	cbz	r0, 8001642 <FLASH_IF_INT_Erase+0x1e>
}
 800163c:	4628      	mov	r0, r5
 800163e:	b004      	add	sp, #16
 8001640:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001642:	f003 fbb9 	bl	8004db8 <HAL_FLASH_Unlock>
 8001646:	bb80      	cbnz	r0, 80016aa <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001648:	2302      	movs	r3, #2
 800164a:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 800164c:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001650:	4817      	ldr	r0, [pc, #92]	; (80016b0 <FLASH_IF_INT_Erase+0x8c>)
 8001652:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8001656:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <FLASH_IF_INT_Erase+0x90>)
 8001658:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 800165c:	fbb3 fcf1 	udiv	ip, r3, r1
 8001660:	fb01 331c 	mls	r3, r1, ip, r3
 8001664:	0adb      	lsrs	r3, r3, #11
 8001666:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001668:	19a1      	adds	r1, r4, r6
 800166a:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800166e:	3901      	subs	r1, #1
 8001670:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 8001674:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 8001678:	fbb1 f0f2 	udiv	r0, r1, r2
 800167c:	fb02 1110 	mls	r1, r2, r0, r1
 8001680:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8001684:	3301      	adds	r3, #1
 8001686:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001688:	a903      	add	r1, sp, #12
 800168a:	4668      	mov	r0, sp
 800168c:	f003 fc78 	bl	8004f80 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001690:	b118      	cbz	r0, 800169a <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001692:	2802      	cmp	r0, #2
 8001694:	d004      	beq.n	80016a0 <FLASH_IF_INT_Erase+0x7c>
 8001696:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 800169a:	f003 fba5 	bl	8004de8 <HAL_FLASH_Lock>
 800169e:	e7cd      	b.n	800163c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80016a0:	2501      	movs	r5, #1
 80016a2:	e7fa      	b.n	800169a <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80016a4:	f06f 0505 	mvn.w	r5, #5
 80016a8:	e7c8      	b.n	800163c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80016aa:	f06f 0504 	mvn.w	r5, #4
 80016ae:	e7c5      	b.n	800163c <FLASH_IF_INT_Erase+0x18>
 80016b0:	1fff7000 	.word	0x1fff7000
 80016b4:	03fffc00 	.word	0x03fffc00

080016b8 <FLASH_IF_INT_Write>:
{
 80016b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016bc:	b089      	sub	sp, #36	; 0x24
 80016be:	9003      	str	r0, [sp, #12]
 80016c0:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 80016c2:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80016c4:	2800      	cmp	r0, #0
 80016c6:	f000 80a9 	beq.w	800181c <FLASH_IF_INT_Write+0x164>
 80016ca:	4683      	mov	fp, r0
 80016cc:	2900      	cmp	r1, #0
 80016ce:	f000 80a9 	beq.w	8001824 <FLASH_IF_INT_Write+0x16c>
 80016d2:	f012 0f07 	tst.w	r2, #7
 80016d6:	f040 80a9 	bne.w	800182c <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80016da:	f010 0307 	ands.w	r3, r0, #7
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	f040 80a8 	bne.w	8001834 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 80016e4:	f7ff ff84 	bl	80015f0 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80016e8:	9002      	str	r0, [sp, #8]
 80016ea:	b118      	cbz	r0, 80016f4 <FLASH_IF_INT_Write+0x3c>
}
 80016ec:	9802      	ldr	r0, [sp, #8]
 80016ee:	b009      	add	sp, #36	; 0x24
 80016f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80016f4:	f003 fb60 	bl	8004db8 <HAL_FLASH_Unlock>
 80016f8:	2800      	cmp	r0, #0
 80016fa:	f040 809f 	bne.w	800183c <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 80016fe:	9c03      	ldr	r4, [sp, #12]
 8001700:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <FLASH_IF_INT_Write+0x18c>)
 8001706:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800170a:	494f      	ldr	r1, [pc, #316]	; (8001848 <FLASH_IF_INT_Write+0x190>)
 800170c:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001710:	fbb2 f3f1 	udiv	r3, r2, r1
 8001714:	fb01 2213 	mls	r2, r1, r3, r2
 8001718:	0ad3      	lsrs	r3, r2, #11
 800171a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800171c:	9b04      	ldr	r3, [sp, #16]
 800171e:	18e3      	adds	r3, r4, r3
 8001720:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001724:	3b01      	subs	r3, #1
 8001726:	fbb3 f0f1 	udiv	r0, r3, r1
 800172a:	fb01 3310 	mls	r3, r1, r0, r3
 800172e:	0adb      	lsrs	r3, r3, #11
 8001730:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001734:	3301      	adds	r3, #1
 8001736:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001738:	2b01      	cmp	r3, #1
 800173a:	d906      	bls.n	800174a <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800173c:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001740:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8001744:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001748:	e02f      	b.n	80017aa <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 800174a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800174e:	e7f9      	b.n	8001744 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 8001750:	46c8      	mov	r8, r9
          current_source = uSource;
 8001752:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 8001754:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001756:	9d05      	ldr	r5, [sp, #20]
 8001758:	4545      	cmp	r5, r8
 800175a:	d215      	bcs.n	8001788 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800175c:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 800175e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001762:	4621      	mov	r1, r4
 8001764:	2001      	movs	r0, #1
 8001766:	f003 fb83 	bl	8004e70 <HAL_FLASH_Program>
 800176a:	b950      	cbnz	r0, 8001782 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800176c:	6820      	ldr	r0, [r4, #0]
 800176e:	6862      	ldr	r2, [r4, #4]
 8001770:	59e9      	ldr	r1, [r5, r7]
 8001772:	6873      	ldr	r3, [r6, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	bf08      	it	eq
 8001778:	4288      	cmpeq	r0, r1
 800177a:	d141      	bne.n	8001800 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 800177c:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800177e:	3508      	adds	r5, #8
 8001780:	e7ea      	b.n	8001758 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001782:	f06f 0303 	mvn.w	r3, #3
 8001786:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8001788:	9b02      	ldr	r3, [sp, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d13f      	bne.n	800180e <FLASH_IF_INT_Write+0x156>
        uDest += length;
 800178e:	44cb      	add	fp, r9
        uSource += length;
 8001790:	9b01      	ldr	r3, [sp, #4]
 8001792:	444b      	add	r3, r9
 8001794:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001796:	9b04      	ldr	r3, [sp, #16]
 8001798:	eba3 0909 	sub.w	r9, r3, r9
 800179c:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 80017a0:	bf28      	it	cs
 80017a2:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80017a6:	f10a 0a01 	add.w	sl, sl, #1
 80017aa:	9b06      	ldr	r3, [sp, #24]
 80017ac:	9a07      	ldr	r2, [sp, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	4553      	cmp	r3, sl
 80017b2:	d92c      	bls.n	800180e <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80017b4:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 80017b8:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80017ba:	4649      	mov	r1, r9
 80017bc:	9803      	ldr	r0, [sp, #12]
 80017be:	f7ff fef6 	bl	80015ae <FLASH_IF_INT_IsEmpty>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d0c4      	beq.n	8001750 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <FLASH_IF_INT_Write+0x194>)
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	b1e8      	cbz	r0, 8001808 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80017cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017d0:	4621      	mov	r1, r4
 80017d2:	f7ff feff 	bl	80015d4 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <FLASH_IF_INT_Write+0x194>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f3cb 000a 	ubfx	r0, fp, #0, #11
 80017de:	fa1f f289 	uxth.w	r2, r9
 80017e2:	9901      	ldr	r1, [sp, #4]
 80017e4:	4418      	add	r0, r3
 80017e6:	f011 fd7b 	bl	80132e0 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80017ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff ff18 	bl	8001624 <FLASH_IF_INT_Erase>
 80017f4:	b970      	cbnz	r0, 8001814 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <FLASH_IF_INT_Write+0x194>)
 80017f8:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 80017fa:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80017fe:	e7aa      	b.n	8001756 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001800:	f06f 0303 	mvn.w	r3, #3
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	e7bf      	b.n	8001788 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001808:	f06f 0305 	mvn.w	r3, #5
 800180c:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800180e:	f003 faeb 	bl	8004de8 <HAL_FLASH_Lock>
 8001812:	e76b      	b.n	80016ec <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001814:	f06f 0301 	mvn.w	r3, #1
 8001818:	9302      	str	r3, [sp, #8]
 800181a:	e7f8      	b.n	800180e <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 800181c:	f06f 0305 	mvn.w	r3, #5
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	e763      	b.n	80016ec <FLASH_IF_INT_Write+0x34>
 8001824:	f06f 0305 	mvn.w	r3, #5
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	e75f      	b.n	80016ec <FLASH_IF_INT_Write+0x34>
 800182c:	f06f 0305 	mvn.w	r3, #5
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	e75b      	b.n	80016ec <FLASH_IF_INT_Write+0x34>
 8001834:	f06f 0305 	mvn.w	r3, #5
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	e757      	b.n	80016ec <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800183c:	f06f 0304 	mvn.w	r3, #4
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	e753      	b.n	80016ec <FLASH_IF_INT_Write+0x34>
 8001844:	1fff7000 	.word	0x1fff7000
 8001848:	03fffc00 	.word	0x03fffc00
 800184c:	20000350 	.word	0x20000350

08001850 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 8001850:	4b01      	ldr	r3, [pc, #4]	; (8001858 <FLASH_IF_Init+0x8>)
 8001852:	6018      	str	r0, [r3, #0]
}
 8001854:	2000      	movs	r0, #0
 8001856:	4770      	bx	lr
 8001858:	20000350 	.word	0x20000350

0800185c <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800185c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001860:	d30e      	bcc.n	8001880 <FLASH_IF_Write+0x24>
{
 8001862:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <FLASH_IF_Write+0x30>)
 8001866:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <FLASH_IF_Write+0x34>)
 800186c:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001870:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001874:	3b01      	subs	r3, #1
 8001876:	4298      	cmp	r0, r3
 8001878:	d805      	bhi.n	8001886 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800187a:	f7ff ff1d 	bl	80016b8 <FLASH_IF_INT_Write>
}
 800187e:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001884:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
 800188a:	e7f8      	b.n	800187e <FLASH_IF_Write+0x22>
 800188c:	1fff7000 	.word	0x1fff7000
 8001890:	03fffc00 	.word	0x03fffc00

08001894 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001894:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001898:	d30e      	bcc.n	80018b8 <FLASH_IF_Read+0x24>
{
 800189a:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <FLASH_IF_Read+0x30>)
 800189e:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <FLASH_IF_Read+0x34>)
 80018a4:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80018a8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80018ac:	3b01      	subs	r3, #1
 80018ae:	4299      	cmp	r1, r3
 80018b0:	d805      	bhi.n	80018be <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80018b2:	f7ff fe8f 	bl	80015d4 <FLASH_IF_INT_Read>
}
 80018b6:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018bc:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80018be:	f04f 30ff 	mov.w	r0, #4294967295
 80018c2:	e7f8      	b.n	80018b6 <FLASH_IF_Read+0x22>
 80018c4:	1fff7000 	.word	0x1fff7000
 80018c8:	03fffc00 	.word	0x03fffc00

080018cc <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80018cc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80018d0:	d30e      	bcc.n	80018f0 <FLASH_IF_Erase+0x24>
{
 80018d2:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <FLASH_IF_Erase+0x30>)
 80018d6:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <FLASH_IF_Erase+0x34>)
 80018dc:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80018e0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80018e4:	3b01      	subs	r3, #1
 80018e6:	4298      	cmp	r0, r3
 80018e8:	d805      	bhi.n	80018f6 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80018ea:	f7ff fe9b 	bl	8001624 <FLASH_IF_INT_Erase>
}
 80018ee:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018f4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80018f6:	f04f 30ff 	mov.w	r0, #4294967295
 80018fa:	e7f8      	b.n	80018ee <FLASH_IF_Erase+0x22>
 80018fc:	1fff7000 	.word	0x1fff7000
 8001900:	03fffc00 	.word	0x03fffc00

08001904 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001908:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	2400      	movs	r4, #0
 800190c:	9403      	str	r4, [sp, #12]
 800190e:	9404      	str	r4, [sp, #16]
 8001910:	9405      	str	r4, [sp, #20]
 8001912:	9406      	str	r4, [sp, #24]
 8001914:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001924:	f002 0201 	and.w	r2, r2, #1
 8001928:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800192a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800192c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800192e:	f042 0202 	orr.w	r2, r2, #2
 8001932:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001936:	f002 0202 	and.w	r2, r2, #2
 800193a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800193c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800193e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001940:	f042 0204 	orr.w	r2, r2, #4
 8001944:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800194e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001950:	4e26      	ldr	r6, [pc, #152]	; (80019ec <MX_GPIO_Init+0xe8>)
 8001952:	4622      	mov	r2, r4
 8001954:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8001958:	4630      	mov	r0, r6
 800195a:	f003 fca1 	bl	80052a0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800195e:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001962:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2501      	movs	r5, #1
 8001966:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196a:	2302      	movs	r3, #2
 800196c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	a903      	add	r1, sp, #12
 8001970:	4630      	mov	r0, r6
 8001972:	f003 fb45 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001976:	f04f 0803 	mov.w	r8, #3
 800197a:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197e:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8001982:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001984:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	a903      	add	r1, sp, #12
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198c:	f003 fb38 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001990:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001994:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	a903      	add	r1, sp, #12
 80019a0:	4630      	mov	r0, r6
 80019a2:	f003 fb2d 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80019a6:	2340      	movs	r3, #64	; 0x40
 80019a8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019aa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ac:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80019ae:	a903      	add	r1, sp, #12
 80019b0:	480f      	ldr	r0, [pc, #60]	; (80019f0 <MX_GPIO_Init+0xec>)
 80019b2:	f003 fb25 	bl	8005000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019b6:	4622      	mov	r2, r4
 80019b8:	4621      	mov	r1, r4
 80019ba:	2006      	movs	r0, #6
 80019bc:	f002 fef4 	bl	80047a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019c0:	2006      	movs	r0, #6
 80019c2:	f002 ff29 	bl	8004818 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019c6:	4622      	mov	r2, r4
 80019c8:	4621      	mov	r1, r4
 80019ca:	2007      	movs	r0, #7
 80019cc:	f002 feec 	bl	80047a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019d0:	2007      	movs	r0, #7
 80019d2:	f002 ff21 	bl	8004818 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019d6:	4622      	mov	r2, r4
 80019d8:	4621      	mov	r1, r4
 80019da:	2016      	movs	r0, #22
 80019dc:	f002 fee4 	bl	80047a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019e0:	2016      	movs	r0, #22
 80019e2:	f002 ff19 	bl	8004818 <HAL_NVIC_EnableIRQ>

}
 80019e6:	b008      	add	sp, #32
 80019e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800

080019f4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <Error_Handler+0x2>

080019f8 <SystemClock_Config>:
{
 80019f8:	b510      	push	{r4, lr}
 80019fa:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fc:	2248      	movs	r2, #72	; 0x48
 80019fe:	2100      	movs	r1, #0
 8001a00:	a808      	add	r0, sp, #32
 8001a02:	f012 fe6a 	bl	80146da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a06:	2400      	movs	r4, #0
 8001a08:	9401      	str	r4, [sp, #4]
 8001a0a:	9402      	str	r4, [sp, #8]
 8001a0c:	9403      	str	r4, [sp, #12]
 8001a0e:	9404      	str	r4, [sp, #16]
 8001a10:	9405      	str	r4, [sp, #20]
 8001a12:	9406      	str	r4, [sp, #24]
 8001a14:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001a16:	f004 f87b 	bl	8005b10 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a22:	f023 0318 	bic.w	r3, r3, #24
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2e:	6813      	ldr	r3, [r2, #0]
 8001a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a44:	2324      	movs	r3, #36	; 0x24
 8001a46:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a48:	2381      	movs	r3, #129	; 0x81
 8001a4a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a50:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a52:	23b0      	movs	r3, #176	; 0xb0
 8001a54:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a56:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a58:	a808      	add	r0, sp, #32
 8001a5a:	f004 f9f3 	bl	8005e44 <HAL_RCC_OscConfig>
 8001a5e:	b970      	cbnz	r0, 8001a7e <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001a60:	234f      	movs	r3, #79	; 0x4f
 8001a62:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a64:	2300      	movs	r3, #0
 8001a66:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001a6e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a70:	2102      	movs	r1, #2
 8001a72:	a801      	add	r0, sp, #4
 8001a74:	f004 fd18 	bl	80064a8 <HAL_RCC_ClockConfig>
 8001a78:	b918      	cbnz	r0, 8001a82 <SystemClock_Config+0x8a>
}
 8001a7a:	b01a      	add	sp, #104	; 0x68
 8001a7c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001a7e:	f7ff ffb9 	bl	80019f4 <Error_Handler>
    Error_Handler();
 8001a82:	f7ff ffb7 	bl	80019f4 <Error_Handler>

08001a86 <main>:
{
 8001a86:	b508      	push	{r3, lr}
  HAL_Init();
 8001a88:	f002 f956 	bl	8003d38 <HAL_Init>
  SystemClock_Config();
 8001a8c:	f7ff ffb4 	bl	80019f8 <SystemClock_Config>
  MX_GPIO_Init();
 8001a90:	f7ff ff38 	bl	8001904 <MX_GPIO_Init>
  BSP_I2C2_Init();
 8001a94:	f000 f998 	bl	8001dc8 <BSP_I2C2_Init>
  MX_LoRaWAN_Init();
 8001a98:	f000 fecc 	bl	8002834 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8001a9c:	f000 fed0 	bl	8002840 <MX_LoRaWAN_Process>
  while (1)
 8001aa0:	e7fc      	b.n	8001a9c <main+0x16>
	...

08001aa4 <__io_putchar>:
  /* USER CODE END Error_Handler_Debug */
}


PUTCHAR_PROTOTYPE
{
 8001aa4:	b500      	push	{lr}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	9001      	str	r0, [sp, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aae:	2201      	movs	r2, #1
 8001ab0:	a901      	add	r1, sp, #4
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <__io_putchar+0x1c>)
 8001ab4:	f006 fd07 	bl	80084c6 <HAL_UART_Transmit>

  return ch;
}
 8001ab8:	9801      	ldr	r0, [sp, #4]
 8001aba:	b003      	add	sp, #12
 8001abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac0:	20000460 	.word	0x20000460

08001ac4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ac4:	b500      	push	{lr}
 8001ac6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001ac8:	222c      	movs	r2, #44	; 0x2c
 8001aca:	2100      	movs	r1, #0
 8001acc:	a801      	add	r0, sp, #4
 8001ace:	f012 fe04 	bl	80146da <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ad2:	4819      	ldr	r0, [pc, #100]	; (8001b38 <MX_RTC_Init+0x74>)
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_RTC_Init+0x78>)
 8001ad6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001ad8:	231f      	movs	r3, #31
 8001ada:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ae0:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ae2:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae8:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001aea:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001af2:	f005 f83d 	bl	8006b70 <HAL_RTC_Init>
 8001af6:	b9a8      	cbnz	r0, 8001b24 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001af8:	480f      	ldr	r0, [pc, #60]	; (8001b38 <MX_RTC_Init+0x74>)
 8001afa:	f005 f97b 	bl	8006df4 <HAL_RTCEx_SetSSRU_IT>
 8001afe:	b9a0      	cbnz	r0, 8001b2a <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b00:	2200      	movs	r2, #0
 8001b02:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b04:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b06:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b0c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b12:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001b14:	a901      	add	r1, sp, #4
 8001b16:	4808      	ldr	r0, [pc, #32]	; (8001b38 <MX_RTC_Init+0x74>)
 8001b18:	f005 f890 	bl	8006c3c <HAL_RTC_SetAlarm_IT>
 8001b1c:	b940      	cbnz	r0, 8001b30 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b1e:	b00d      	add	sp, #52	; 0x34
 8001b20:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b24:	f7ff ff66 	bl	80019f4 <Error_Handler>
 8001b28:	e7e6      	b.n	8001af8 <MX_RTC_Init+0x34>
    Error_Handler();
 8001b2a:	f7ff ff63 	bl	80019f4 <Error_Handler>
 8001b2e:	e7e7      	b.n	8001b00 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001b30:	f7ff ff60 	bl	80019f4 <Error_Handler>
}
 8001b34:	e7f3      	b.n	8001b1e <MX_RTC_Init+0x5a>
 8001b36:	bf00      	nop
 8001b38:	20000354 	.word	0x20000354
 8001b3c:	40002800 	.word	0x40002800

08001b40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b40:	b510      	push	{r4, lr}
 8001b42:	b090      	sub	sp, #64	; 0x40
 8001b44:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b46:	2238      	movs	r2, #56	; 0x38
 8001b48:	2100      	movs	r1, #0
 8001b4a:	a802      	add	r0, sp, #8
 8001b4c:	f012 fdc5 	bl	80146da <memset>
  if(rtcHandle->Instance==RTC)
 8001b50:	6822      	ldr	r2, [r4, #0]
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_RTC_MspInit+0x7c>)
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b58:	b010      	add	sp, #64	; 0x40
 8001b5a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b60:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b66:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b68:	a802      	add	r0, sp, #8
 8001b6a:	f004 fdf1 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	bb08      	cbnz	r0, 8001bb4 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b86:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b90:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	4611      	mov	r1, r2
 8001b96:	2002      	movs	r0, #2
 8001b98:	f002 fe06 	bl	80047a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f002 fe3b 	bl	8004818 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	202a      	movs	r0, #42	; 0x2a
 8001ba8:	f002 fdfe 	bl	80047a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001bac:	202a      	movs	r0, #42	; 0x2a
 8001bae:	f002 fe33 	bl	8004818 <HAL_NVIC_EnableIRQ>
}
 8001bb2:	e7d1      	b.n	8001b58 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001bb4:	f7ff ff1e 	bl	80019f4 <Error_Handler>
 8001bb8:	e7da      	b.n	8001b70 <HAL_RTC_MspInit+0x30>
 8001bba:	bf00      	nop
 8001bbc:	40002800 	.word	0x40002800

08001bc0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001bc0:	4770      	bx	lr

08001bc2 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001bc2:	4770      	bx	lr

08001bc4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001bc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001bc6:	f002 f8cd 	bl	8003d64 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <PWR_EnterStopMode+0x14>)
 8001bce:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001bd2:	f004 f801 	bl	8005bd8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001bd6:	bd08      	pop	{r3, pc}
 8001bd8:	58000400 	.word	0x58000400

08001bdc <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001bdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001bde:	f002 f8c8 	bl	8003d72 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001be2:	bd08      	pop	{r3, pc}

08001be4 <PWR_ExitStopMode>:
{
 8001be4:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001be6:	f002 f8c4 	bl	8003d72 <HAL_ResumeTick>
  vcom_Resume();
 8001bea:	f000 fd77 	bl	80026dc <vcom_Resume>
}
 8001bee:	bd08      	pop	{r3, pc}

08001bf0 <PWR_EnterSleepMode>:
{
 8001bf0:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001bf2:	f002 f8b7 	bl	8003d64 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f003 ff91 	bl	8005b20 <HAL_PWR_EnterSLEEPMode>
}
 8001bfe:	bd08      	pop	{r3, pc}

08001c00 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c00:	4770      	bx	lr

08001c02 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <NMI_Handler>

08001c04 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <HardFault_Handler>

08001c06 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <MemManage_Handler>

08001c08 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <BusFault_Handler>

08001c0a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <UsageFault_Handler>

08001c0c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0c:	4770      	bx	lr

08001c0e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	4770      	bx	lr

08001c10 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c10:	4770      	bx	lr

08001c12 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c12:	4770      	bx	lr

08001c14 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001c14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001c16:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001c18:	f005 f918 	bl	8006e4c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001c1c:	bd08      	pop	{r3, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000354 	.word	0x20000354

08001c24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f003 fb48 	bl	80052bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c2c:	bd08      	pop	{r3, pc}

08001c2e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c2e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f003 fb43 	bl	80052bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c36:	bd08      	pop	{r3, pc}

08001c38 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c3a:	4802      	ldr	r0, [pc, #8]	; (8001c44 <DMA1_Channel5_IRQHandler+0xc>)
 8001c3c:	f003 f80a 	bl	8004c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c40:	bd08      	pop	{r3, pc}
 8001c42:	bf00      	nop
 8001c44:	20000400 	.word	0x20000400

08001c48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001c4a:	2040      	movs	r0, #64	; 0x40
 8001c4c:	f003 fb36 	bl	80052bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c50:	bd08      	pop	{r3, pc}
	...

08001c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c56:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART2_IRQHandler+0xc>)
 8001c58:	f005 fdb6 	bl	80077c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c5c:	bd08      	pop	{r3, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000460 	.word	0x20000460

08001c64 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c66:	4802      	ldr	r0, [pc, #8]	; (8001c70 <RTC_Alarm_IRQHandler+0xc>)
 8001c68:	f004 fefc 	bl	8006a64 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c6c:	bd08      	pop	{r3, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000354 	.word	0x20000354

08001c74 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c76:	4802      	ldr	r0, [pc, #8]	; (8001c80 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001c78:	f005 fb9c 	bl	80073b4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c7c:	bd08      	pop	{r3, pc}
 8001c7e:	bf00      	nop
 8001c80:	200003e4 	.word	0x200003e4

08001c84 <I2C2_MspInit>:

  return ret;
}

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b097      	sub	sp, #92	; 0x5c
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c88:	2238      	movs	r2, #56	; 0x38
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	a803      	add	r0, sp, #12
 8001c8e:	f012 fd24 	bl	80146da <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c96:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001c9a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001c9c:	a803      	add	r0, sp, #12
 8001c9e:	f004 fd57 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ca2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001ca6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001cb6:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbe:	2712      	movs	r7, #18
 8001cc0:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2500      	movs	r5, #0
 8001cc4:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001cc8:	2604      	movs	r6, #4
 8001cca:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001ccc:	a911      	add	r1, sp, #68	; 0x44
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f003 f995 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cda:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cdc:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001ce2:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001ce4:	a911      	add	r1, sp, #68	; 0x44
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f003 f989 	bl	8005000 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cf4:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001cfe:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001d00:	b017      	add	sp, #92	; 0x5c
 8001d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d04 <BSP_I2C2_WriteReg>:
{
 8001d04:	b510      	push	{r4, lr}
 8001d06:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001d08:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001d0c:	9402      	str	r4, [sp, #8]
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	9200      	str	r2, [sp, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	460a      	mov	r2, r1
 8001d16:	4601      	mov	r1, r0
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <BSP_I2C2_WriteReg+0x38>)
 8001d1a:	f003 fcec 	bl	80056f6 <HAL_I2C_Mem_Write>
 8001d1e:	b910      	cbnz	r0, 8001d26 <BSP_I2C2_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8001d20:	2000      	movs	r0, #0
}
 8001d22:	b004      	add	sp, #16
 8001d24:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <BSP_I2C2_WriteReg+0x38>)
 8001d28:	f003 fe95 	bl	8005a56 <HAL_I2C_GetError>
 8001d2c:	2804      	cmp	r0, #4
 8001d2e:	d002      	beq.n	8001d36 <BSP_I2C2_WriteReg+0x32>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001d30:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001d34:	e7f5      	b.n	8001d22 <BSP_I2C2_WriteReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001d36:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8001d3a:	e7f2      	b.n	8001d22 <BSP_I2C2_WriteReg+0x1e>
 8001d3c:	20000390 	.word	0x20000390

08001d40 <BSP_I2C2_ReadReg>:
{
 8001d40:	b510      	push	{r4, lr}
 8001d42:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001d44:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001d48:	9402      	str	r4, [sp, #8]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	9200      	str	r2, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	460a      	mov	r2, r1
 8001d52:	4601      	mov	r1, r0
 8001d54:	4808      	ldr	r0, [pc, #32]	; (8001d78 <BSP_I2C2_ReadReg+0x38>)
 8001d56:	f003 fda3 	bl	80058a0 <HAL_I2C_Mem_Read>
 8001d5a:	b910      	cbnz	r0, 8001d62 <BSP_I2C2_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8001d5c:	2000      	movs	r0, #0
}
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <BSP_I2C2_ReadReg+0x38>)
 8001d64:	f003 fe77 	bl	8005a56 <HAL_I2C_GetError>
 8001d68:	2804      	cmp	r0, #4
 8001d6a:	d002      	beq.n	8001d72 <BSP_I2C2_ReadReg+0x32>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d6c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001d70:	e7f5      	b.n	8001d5e <BSP_I2C2_ReadReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001d72:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8001d76:	e7f2      	b.n	8001d5e <BSP_I2C2_ReadReg+0x1e>
 8001d78:	20000390 	.word	0x20000390

08001d7c <MX_I2C2_Init>:
{
 8001d7c:	b538      	push	{r3, r4, r5, lr}
 8001d7e:	4604      	mov	r4, r0
  hi2c->Instance = I2C2;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_I2C2_Init+0x44>)
 8001d82:	6003      	str	r3, [r0, #0]
  hi2c->Init.Timing = 0x20303E5D;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_I2C2_Init+0x48>)
 8001d86:	6043      	str	r3, [r0, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6083      	str	r3, [r0, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	60c2      	str	r2, [r0, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d90:	6103      	str	r3, [r0, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001d92:	6143      	str	r3, [r0, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d94:	6183      	str	r3, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d96:	61c3      	str	r3, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d98:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001d9a:	f003 fc4e 	bl	800563a <HAL_I2C_Init>
 8001d9e:	4605      	mov	r5, r0
 8001da0:	b100      	cbz	r0, 8001da4 <MX_I2C2_Init+0x28>
    ret = HAL_ERROR;
 8001da2:	2501      	movs	r5, #1
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001da4:	2100      	movs	r1, #0
 8001da6:	4620      	mov	r0, r4
 8001da8:	f003 fe57 	bl	8005a5a <HAL_I2CEx_ConfigAnalogFilter>
 8001dac:	b100      	cbz	r0, 8001db0 <MX_I2C2_Init+0x34>
    ret = HAL_ERROR;
 8001dae:	2501      	movs	r5, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001db0:	2100      	movs	r1, #0
 8001db2:	4620      	mov	r0, r4
 8001db4:	f003 fe7f 	bl	8005ab6 <HAL_I2CEx_ConfigDigitalFilter>
 8001db8:	b100      	cbz	r0, 8001dbc <MX_I2C2_Init+0x40>
    ret = HAL_ERROR;
 8001dba:	2501      	movs	r5, #1
}
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	bd38      	pop	{r3, r4, r5, pc}
 8001dc0:	40005800 	.word	0x40005800
 8001dc4:	20303e5d 	.word	0x20303e5d

08001dc8 <BSP_I2C2_Init>:
  hi2c2.Instance  = I2C2;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <BSP_I2C2_Init+0x4c>)
 8001dca:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <BSP_I2C2_Init+0x50>)
 8001dcc:	601a      	str	r2, [r3, #0]
  if(I2C2InitCounter++ == 0)
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <BSP_I2C2_Init+0x54>)
 8001dd0:	6813      	ldr	r3, [r2, #0]
 8001dd2:	1c59      	adds	r1, r3, #1
 8001dd4:	6011      	str	r1, [r2, #0]
 8001dd6:	b10b      	cbz	r3, 8001ddc <BSP_I2C2_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8001dd8:	2000      	movs	r0, #0
}
 8001dda:	4770      	bx	lr
{
 8001ddc:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001dde:	480d      	ldr	r0, [pc, #52]	; (8001e14 <BSP_I2C2_Init+0x4c>)
 8001de0:	f003 fe36 	bl	8005a50 <HAL_I2C_GetState>
 8001de4:	b108      	cbz	r0, 8001dea <BSP_I2C2_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8001de6:	2000      	movs	r0, #0
}
 8001de8:	bd10      	pop	{r4, pc}
      I2C2_MspInit(&hi2c2);
 8001dea:	4c0a      	ldr	r4, [pc, #40]	; (8001e14 <BSP_I2C2_Init+0x4c>)
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff ff49 	bl	8001c84 <I2C2_MspInit>
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ffc2 	bl	8001d7c <MX_I2C2_Init>
 8001df8:	b948      	cbnz	r0, 8001e0e <BSP_I2C2_Init+0x46>
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f003 fe2c 	bl	8005a5a <HAL_I2CEx_ConfigAnalogFilter>
 8001e02:	b908      	cbnz	r0, 8001e08 <BSP_I2C2_Init+0x40>
          ret = BSP_ERROR_NONE;
 8001e04:	2000      	movs	r0, #0
  return ret;
 8001e06:	e7ef      	b.n	8001de8 <BSP_I2C2_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 8001e08:	f06f 0007 	mvn.w	r0, #7
 8001e0c:	e7ec      	b.n	8001de8 <BSP_I2C2_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 8001e0e:	f06f 0007 	mvn.w	r0, #7
 8001e12:	e7e9      	b.n	8001de8 <BSP_I2C2_Init+0x20>
 8001e14:	20000390 	.word	0x20000390
 8001e18:	40005800 	.word	0x40005800
 8001e1c:	2000038c 	.word	0x2000038c

08001e20 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e20:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_SUBGHZ_Init+0x18>)
 8001e24:	2308      	movs	r3, #8
 8001e26:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e28:	f005 f846 	bl	8006eb8 <HAL_SUBGHZ_Init>
 8001e2c:	b900      	cbnz	r0, 8001e30 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e2e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e30:	f7ff fde0 	bl	80019f4 <Error_Handler>
}
 8001e34:	e7fb      	b.n	8001e2e <MX_SUBGHZ_Init+0xe>
 8001e36:	bf00      	nop
 8001e38:	200003e4 	.word	0x200003e4

08001e3c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e3c:	b500      	push	{lr}
 8001e3e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e54:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	4611      	mov	r1, r2
 8001e5a:	2032      	movs	r0, #50	; 0x32
 8001e5c:	f002 fca4 	bl	80047a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e60:	2032      	movs	r0, #50	; 0x32
 8001e62:	f002 fcd9 	bl	8004818 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e66:	b003      	add	sp, #12
 8001e68:	f85d fb04 	ldr.w	pc, [sp], #4

08001e6c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001e6c:	b40c      	push	{r2, r3}
 8001e6e:	b500      	push	{lr}
 8001e70:	b083      	sub	sp, #12
 8001e72:	ab04      	add	r3, sp, #16
 8001e74:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001e78:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001e7a:	f011 fe0b 	bl	8013a94 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001e7e:	b003      	add	sp, #12
 8001e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e84:	b002      	add	sp, #8
 8001e86:	4770      	bx	lr

08001e88 <TimestampNow>:
{
 8001e88:	b530      	push	{r4, r5, lr}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001e90:	a802      	add	r0, sp, #8
 8001e92:	f011 fb73 	bl	801357c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001e96:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	9b02      	ldr	r3, [sp, #8]
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <TimestampNow+0x2c>)
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff ffe2 	bl	8001e6c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7fe f9b9 	bl	8000220 <strlen>
 8001eae:	8028      	strh	r0, [r5, #0]
}
 8001eb0:	b005      	add	sp, #20
 8001eb2:	bd30      	pop	{r4, r5, pc}
 8001eb4:	080166f0 	.word	0x080166f0

08001eb8 <SystemApp_Init>:
{
 8001eb8:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ebe:	6893      	ldr	r3, [r2, #8]
 8001ec0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ec4:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001ec6:	f011 fbdd 	bl	8013684 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001eca:	2401      	movs	r4, #1
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <SystemApp_Init+0x54>)
 8001ece:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001ed0:	f000 f8c0 	bl	8002054 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001ed4:	f011 f87a 	bl	8012fcc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <SystemApp_Init+0x58>)
 8001eda:	f011 f891 	bl	8013000 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <SystemApp_Init+0x5c>)
 8001ee0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ee4:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f011 f890 	bl	801300c <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001eec:	f7ff fabe 	bl	800146c <SYS_InitMeasurement>
  EnvSensors_Init();
 8001ef0:	f000 f934 	bl	800215c <EnvSensors_Init>
  UTIL_LPM_Init();
 8001ef4:	f011 f99a 	bl	801322c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ef8:	4621      	mov	r1, r4
 8001efa:	4620      	mov	r0, r4
 8001efc:	f011 f9b6 	bl	801326c <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f00:	4621      	mov	r1, r4
 8001f02:	4620      	mov	r0, r4
 8001f04:	f011 f99c 	bl	8013240 <UTIL_LPM_SetStopMode>
}
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200003f0 	.word	0x200003f0
 8001f10:	08001e89 	.word	0x08001e89
 8001f14:	58004000 	.word	0x58004000

08001f18 <UTIL_SEQ_Idle>:
{
 8001f18:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001f1a:	f011 f9bd 	bl	8013298 <UTIL_LPM_EnterLowPower>
}
 8001f1e:	bd08      	pop	{r3, pc}

08001f20 <GetBatteryLevel>:
{
 8001f20:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f22:	f7ff faab 	bl	800147c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001f26:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f2a:	4298      	cmp	r0, r3
 8001f2c:	d80d      	bhi.n	8001f4a <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001f2e:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001f32:	d30c      	bcc.n	8001f4e <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f34:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001f38:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001f3c:	0040      	lsls	r0, r0, #1
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <GetBatteryLevel+0x34>)
 8001f40:	fba3 3000 	umull	r3, r0, r3, r0
 8001f44:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001f48:	e000      	b.n	8001f4c <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001f4a:	20fe      	movs	r0, #254	; 0xfe
}
 8001f4c:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001f4e:	2000      	movs	r0, #0
 8001f50:	e7fc      	b.n	8001f4c <GetBatteryLevel+0x2c>
 8001f52:	bf00      	nop
 8001f54:	1b4e81b5 	.word	0x1b4e81b5

08001f58 <GetTemperatureLevel>:
{
 8001f58:	b500      	push	{lr}
 8001f5a:	b08b      	sub	sp, #44	; 0x2c
  EnvSensors_Read(&sensor_data);
 8001f5c:	a801      	add	r0, sp, #4
 8001f5e:	f000 f8c5 	bl	80020ec <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f62:	9804      	ldr	r0, [sp, #16]
 8001f64:	f7ff f856 	bl	8001014 <__aeabi_f2iz>
}
 8001f68:	b200      	sxth	r0, r0
 8001f6a:	b00b      	add	sp, #44	; 0x2c
 8001f6c:	f85d fb04 	ldr.w	pc, [sp], #4

08001f70 <GetUniqueId>:
{
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <GetUniqueId+0x68>)
 8001f76:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7e:	d013      	beq.n	8001fa8 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001f80:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001f82:	0a1a      	lsrs	r2, r3, #8
 8001f84:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001f86:	0c1a      	lsrs	r2, r3, #16
 8001f88:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001f8a:	0e1b      	lsrs	r3, r3, #24
 8001f8c:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <GetUniqueId+0x68>)
 8001f90:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001f94:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f96:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001f9a:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001f9c:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001f9e:	0c1a      	lsrs	r2, r3, #16
 8001fa0:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001fa2:	0e1b      	lsrs	r3, r3, #24
 8001fa4:	7003      	strb	r3, [r0, #0]
}
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001fa8:	f001 feea 	bl	8003d80 <HAL_GetUIDw0>
 8001fac:	4605      	mov	r5, r0
 8001fae:	f001 fef3 	bl	8003d98 <HAL_GetUIDw2>
 8001fb2:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001fb4:	f001 feea 	bl	8003d8c <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001fb8:	0e2b      	lsrs	r3, r5, #24
 8001fba:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001fbc:	0c2b      	lsrs	r3, r5, #16
 8001fbe:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001fc0:	0a2b      	lsrs	r3, r5, #8
 8001fc2:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001fc4:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001fc6:	0e03      	lsrs	r3, r0, #24
 8001fc8:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001fca:	0c03      	lsrs	r3, r0, #16
 8001fcc:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001fce:	0a03      	lsrs	r3, r0, #8
 8001fd0:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001fd2:	7020      	strb	r0, [r4, #0]
 8001fd4:	e7e7      	b.n	8001fa6 <GetUniqueId+0x36>
 8001fd6:	bf00      	nop
 8001fd8:	1fff7000 	.word	0x1fff7000

08001fdc <GetDevAddr>:
{
 8001fdc:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <GetDevAddr+0x2c>)
 8001fe0:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001fe4:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fea:	d000      	beq.n	8001fee <GetDevAddr+0x12>
}
 8001fec:	bd38      	pop	{r3, r4, r5, pc}
 8001fee:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001ff0:	f001 fec6 	bl	8003d80 <HAL_GetUIDw0>
 8001ff4:	4605      	mov	r5, r0
 8001ff6:	f001 fec9 	bl	8003d8c <HAL_GetUIDw1>
 8001ffa:	4045      	eors	r5, r0
 8001ffc:	f001 fecc 	bl	8003d98 <HAL_GetUIDw2>
 8002000:	4045      	eors	r5, r0
 8002002:	6025      	str	r5, [r4, #0]
}
 8002004:	e7f2      	b.n	8001fec <GetDevAddr+0x10>
 8002006:	bf00      	nop
 8002008:	1fff7000 	.word	0x1fff7000

0800200c <UTIL_ADV_TRACE_PreSendHook>:
{
 800200c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800200e:	2101      	movs	r1, #1
 8002010:	2002      	movs	r0, #2
 8002012:	f011 f915 	bl	8013240 <UTIL_LPM_SetStopMode>
}
 8002016:	bd08      	pop	{r3, pc}

08002018 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002018:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800201a:	2100      	movs	r1, #0
 800201c:	2002      	movs	r0, #2
 800201e:	f011 f90f 	bl	8013240 <UTIL_LPM_SetStopMode>
}
 8002022:	bd08      	pop	{r3, pc}

08002024 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002024:	2000      	movs	r0, #0
 8002026:	4770      	bx	lr

08002028 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002028:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_GetTick+0x14>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b90b      	cbnz	r3, 8002034 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8002030:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8002032:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8002034:	f000 f91c 	bl	8002270 <TIMER_IF_GetTimerValue>
 8002038:	e7fb      	b.n	8002032 <HAL_GetTick+0xa>
 800203a:	bf00      	nop
 800203c:	200003f0 	.word	0x200003f0

08002040 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002040:	b500      	push	{lr}
 8002042:	b083      	sub	sp, #12
 8002044:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002046:	9801      	ldr	r0, [sp, #4]
 8002048:	f000 f9f8 	bl	800243c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800204c:	b003      	add	sp, #12
 800204e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002054 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002058:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <DBG_Init+0x90>)
 800205a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800205e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002066:	f001 fe9d 	bl	8003da4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800206a:	f001 fea3 	bl	8003db4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800206e:	f001 fea9 	bl	8003dc4 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002072:	2400      	movs	r4, #0
 8002074:	9403      	str	r4, [sp, #12]
 8002076:	9404      	str	r4, [sp, #16]
 8002078:	9405      	str	r4, [sp, #20]
 800207a:	9406      	str	r4, [sp, #24]
 800207c:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800208c:	f042 0202 	orr.w	r2, r2, #2
 8002090:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002094:	f002 0202 	and.w	r2, r2, #2
 8002098:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800209a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800209c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800209e:	f042 0202 	orr.w	r2, r2, #2
 80020a2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80020ac:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80020ae:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80020b2:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80020b4:	4d0c      	ldr	r5, [pc, #48]	; (80020e8 <DBG_Init+0x94>)
 80020b6:	a903      	add	r1, sp, #12
 80020b8:	4628      	mov	r0, r5
 80020ba:	f002 ffa1 	bl	8005000 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80020be:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80020c2:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80020c4:	a903      	add	r1, sp, #12
 80020c6:	4628      	mov	r0, r5
 80020c8:	f002 ff9a 	bl	8005000 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80020cc:	4622      	mov	r2, r4
 80020ce:	4639      	mov	r1, r7
 80020d0:	4628      	mov	r0, r5
 80020d2:	f003 f8e5 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80020d6:	4622      	mov	r2, r4
 80020d8:	4631      	mov	r1, r6
 80020da:	4628      	mov	r0, r5
 80020dc:	f003 f8e0 	bl	80052a0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80020e0:	b009      	add	sp, #36	; 0x24
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e4:	58000800 	.word	0x58000800
 80020e8:	48000400 	.word	0x48000400

080020ec <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	4604      	mov	r4, r0
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;

  //Default values
  int32_t acc_x = 40;
 80020f2:	2328      	movs	r3, #40	; 0x28
 80020f4:	9305      	str	r3, [sp, #20]
  int32_t acc_y = 41;
 80020f6:	2329      	movs	r3, #41	; 0x29
 80020f8:	9304      	str	r3, [sp, #16]
  int32_t acc_z = 0;
 80020fa:	2500      	movs	r5, #0
 80020fc:	9503      	str	r5, [sp, #12]
  int32_t gyr_x = 0;
 80020fe:	9502      	str	r5, [sp, #8]
  int32_t gyr_y = 43;
 8002100:	232b      	movs	r3, #43	; 0x2b
 8002102:	9301      	str	r3, [sp, #4]
  int32_t gyr_z = 0;
 8002104:	9500      	str	r5, [sp, #0]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002106:	f7ff f9db 	bl	80014c0 <SYS_GetTemperatureLevel>
 800210a:	f340 200f 	sbfx	r0, r0, #8, #16
 800210e:	f7fe fddd 	bl	8000ccc <__aeabi_i2f>
 8002112:	4606      	mov	r6, r0
  LSM6DSO_USER_Gyro_GetAxes(&gyr_x, &gyr_y, &gyr_z);
 8002114:	466a      	mov	r2, sp
 8002116:	a901      	add	r1, sp, #4
 8002118:	a802      	add	r0, sp, #8
 800211a:	f000 fb77 	bl	800280c <LSM6DSO_USER_Gyro_GetAxes>
  LSM6DSO_USER_Acc_GetAxes(&acc_x, &acc_y, &acc_z);
 800211e:	aa03      	add	r2, sp, #12
 8002120:	a904      	add	r1, sp, #16
 8002122:	a805      	add	r0, sp, #20
 8002124:	f000 fb5e 	bl	80027e4 <LSM6DSO_USER_Acc_GetAxes>

#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <EnvSensors_Read+0x60>)
 800212a:	6123      	str	r3, [r4, #16]
  sensor_data->temperature = TEMPERATURE_Value;
 800212c:	60e6      	str	r6, [r4, #12]
  sensor_data->pressure    = PRESSURE_Value;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <EnvSensors_Read+0x64>)
 8002130:	6163      	str	r3, [r4, #20]

  sensor_data->acc_x = acc_x;
 8002132:	9b05      	ldr	r3, [sp, #20]
 8002134:	6023      	str	r3, [r4, #0]
  sensor_data->acc_y = acc_y;
 8002136:	9b04      	ldr	r3, [sp, #16]
 8002138:	6063      	str	r3, [r4, #4]
  sensor_data->gyr_y = gyr_y;
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	60a3      	str	r3, [r4, #8]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <EnvSensors_Read+0x68>)
 8002140:	61a3      	str	r3, [r4, #24]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <EnvSensors_Read+0x6c>)
 8002144:	61e3      	str	r3, [r4, #28]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8002146:	4628      	mov	r0, r5
 8002148:	b006      	add	sp, #24
 800214a:	bd70      	pop	{r4, r5, r6, pc}
 800214c:	42480000 	.word	0x42480000
 8002150:	447a0000 	.word	0x447a0000
 8002154:	003e090d 	.word	0x003e090d
 8002158:	000503ab 	.word	0x000503ab

0800215c <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800215c:	2000      	movs	r0, #0
 800215e:	4770      	bx	lr

08002160 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002160:	2001      	movs	r0, #1
 8002162:	4770      	bx	lr

08002164 <_kill>:

int _kill(int pid, int sig)
{
 8002164:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002166:	f012 fb0b 	bl	8014780 <__errno>
 800216a:	2316      	movs	r3, #22
 800216c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800216e:	f04f 30ff 	mov.w	r0, #4294967295
 8002172:	bd08      	pop	{r3, pc}

08002174 <_exit>:

void _exit (int status)
{
 8002174:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002176:	f04f 31ff 	mov.w	r1, #4294967295
 800217a:	f7ff fff3 	bl	8002164 <_kill>
  while (1) {}    /* Make sure we hang here */
 800217e:	e7fe      	b.n	800217e <_exit+0xa>

08002180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	460c      	mov	r4, r1
 8002184:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	2500      	movs	r5, #0
 8002188:	e006      	b.n	8002198 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800218a:	f3af 8000 	nop.w
 800218e:	4621      	mov	r1, r4
 8002190:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002196:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	42b5      	cmp	r5, r6
 800219a:	dbf6      	blt.n	800218a <_read+0xa>
  }

  return len;
}
 800219c:	4630      	mov	r0, r6
 800219e:	bd70      	pop	{r4, r5, r6, pc}

080021a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	460c      	mov	r4, r1
 80021a4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	2500      	movs	r5, #0
 80021a8:	e004      	b.n	80021b4 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80021aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80021ae:	f7ff fc79 	bl	8001aa4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	3501      	adds	r5, #1
 80021b4:	42b5      	cmp	r5, r6
 80021b6:	dbf8      	blt.n	80021aa <_write+0xa>
  }
  return len;
}
 80021b8:	4630      	mov	r0, r6
 80021ba:	bd70      	pop	{r4, r5, r6, pc}

080021bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	4770      	bx	lr

080021c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80021c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80021c8:	2000      	movs	r0, #0
 80021ca:	4770      	bx	lr

080021cc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80021cc:	2001      	movs	r0, #1
 80021ce:	4770      	bx	lr

080021d0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80021d0:	2000      	movs	r0, #0
 80021d2:	4770      	bx	lr

080021d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d4:	b510      	push	{r4, lr}
 80021d6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <_sbrk+0x38>)
 80021da:	490d      	ldr	r1, [pc, #52]	; (8002210 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <_sbrk+0x40>)
 80021de:	6800      	ldr	r0, [r0, #0]
 80021e0:	b140      	cbz	r0, 80021f4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e2:	480c      	ldr	r0, [pc, #48]	; (8002214 <_sbrk+0x40>)
 80021e4:	6800      	ldr	r0, [r0, #0]
 80021e6:	4403      	add	r3, r0
 80021e8:	1a52      	subs	r2, r2, r1
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d806      	bhi.n	80021fc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <_sbrk+0x40>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80021f2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <_sbrk+0x40>)
 80021f6:	4c08      	ldr	r4, [pc, #32]	; (8002218 <_sbrk+0x44>)
 80021f8:	6004      	str	r4, [r0, #0]
 80021fa:	e7f2      	b.n	80021e2 <_sbrk+0xe>
    errno = ENOMEM;
 80021fc:	f012 fac0 	bl	8014780 <__errno>
 8002200:	230c      	movs	r3, #12
 8002202:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	e7f3      	b.n	80021f2 <_sbrk+0x1e>
 800220a:	bf00      	nop
 800220c:	20008000 	.word	0x20008000
 8002210:	00000800 	.word	0x00000800
 8002214:	200003f4 	.word	0x200003f4
 8002218:	20001a08 	.word	0x20001a08

0800221c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <TIMER_IF_SetTimerContext+0x1c>)
 800221e:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002220:	e001      	b.n	8002226 <TIMER_IF_SetTimerContext+0xa>
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <TIMER_IF_SetTimerContext+0x1c>)
 8002224:	6898      	ldr	r0, [r3, #8]
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <TIMER_IF_SetTimerContext+0x1c>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4283      	cmp	r3, r0
 800222c:	d1f9      	bne.n	8002222 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800222e:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8002230:	4b02      	ldr	r3, [pc, #8]	; (800223c <TIMER_IF_SetTimerContext+0x20>)
 8002232:	6018      	str	r0, [r3, #0]
}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40002800 	.word	0x40002800
 800223c:	200003fc 	.word	0x200003fc

08002240 <TIMER_IF_GetTimerContext>:
}
 8002240:	4b01      	ldr	r3, [pc, #4]	; (8002248 <TIMER_IF_GetTimerContext+0x8>)
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	200003fc 	.word	0x200003fc

0800224c <TIMER_IF_GetTimerElapsedTime>:
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800224e:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002250:	e001      	b.n	8002256 <TIMER_IF_GetTimerElapsedTime+0xa>
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002254:	6898      	ldr	r0, [r3, #8]
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	4283      	cmp	r3, r0
 800225c:	d1f9      	bne.n	8002252 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 800225e:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <TIMER_IF_GetTimerElapsedTime+0x20>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	1ac0      	subs	r0, r0, r3
 8002266:	4770      	bx	lr
 8002268:	40002800 	.word	0x40002800
 800226c:	200003fc 	.word	0x200003fc

08002270 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <TIMER_IF_GetTimerValue+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b153      	cbz	r3, 800228c <TIMER_IF_GetTimerValue+0x1c>
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <TIMER_IF_GetTimerValue+0x24>)
 8002278:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800227a:	e001      	b.n	8002280 <TIMER_IF_GetTimerValue+0x10>
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <TIMER_IF_GetTimerValue+0x24>)
 800227e:	6898      	ldr	r0, [r3, #8]
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <TIMER_IF_GetTimerValue+0x24>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4283      	cmp	r3, r0
 8002286:	d1f9      	bne.n	800227c <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8002288:	43c0      	mvns	r0, r0
 800228a:	4770      	bx	lr
  uint32_t ret = 0;
 800228c:	2000      	movs	r0, #0
}
 800228e:	4770      	bx	lr
 8002290:	200003f8 	.word	0x200003f8
 8002294:	40002800 	.word	0x40002800

08002298 <TIMER_IF_GetMinimumTimeout>:
}
 8002298:	2003      	movs	r0, #3
 800229a:	4770      	bx	lr

0800229c <TIMER_IF_Convert_ms2Tick>:
{
 800229c:	b508      	push	{r3, lr}
 800229e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80022a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a4:	2300      	movs	r3, #0
 80022a6:	0280      	lsls	r0, r0, #10
 80022a8:	0d89      	lsrs	r1, r1, #22
 80022aa:	f7fe fed9 	bl	8001060 <__aeabi_uldivmod>
}
 80022ae:	bd08      	pop	{r3, pc}

080022b0 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80022b0:	0ec2      	lsrs	r2, r0, #27
 80022b2:	0143      	lsls	r3, r0, #5
 80022b4:	1a1b      	subs	r3, r3, r0
 80022b6:	f162 0200 	sbc.w	r2, r2, #0
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	181b      	adds	r3, r3, r0
 80022c4:	f142 0000 	adc.w	r0, r2, #0
 80022c8:	00c0      	lsls	r0, r0, #3
 80022ca:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80022ce:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80022d2:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 80022d6:	4770      	bx	lr

080022d8 <TIMER_IF_StopTimer>:
{
 80022d8:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <TIMER_IF_StopTimer+0x20>)
 80022dc:	2201      	movs	r2, #1
 80022de:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022e0:	4c06      	ldr	r4, [pc, #24]	; (80022fc <TIMER_IF_StopTimer+0x24>)
 80022e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e6:	4620      	mov	r0, r4
 80022e8:	f004 fb7c 	bl	80069e4 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	6323      	str	r3, [r4, #48]	; 0x30
}
 80022f2:	2000      	movs	r0, #0
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	bf00      	nop
 80022f8:	40002800 	.word	0x40002800
 80022fc:	20000354 	.word	0x20000354

08002300 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002300:	b508      	push	{r3, lr}
 8002302:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002304:	2102      	movs	r1, #2
 8002306:	4802      	ldr	r0, [pc, #8]	; (8002310 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002308:	f004 fdb5 	bl	8006e76 <HAL_RTCEx_BKUPWrite>
}
 800230c:	bd08      	pop	{r3, pc}
 800230e:	bf00      	nop
 8002310:	20000354 	.word	0x20000354

08002314 <TIMER_IF_Init>:
{
 8002314:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <TIMER_IF_Init+0x40>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b10b      	cbz	r3, 8002320 <TIMER_IF_Init+0xc>
}
 800231c:	2000      	movs	r0, #0
 800231e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002320:	4c0d      	ldr	r4, [pc, #52]	; (8002358 <TIMER_IF_Init+0x44>)
 8002322:	f04f 35ff 	mov.w	r5, #4294967295
 8002326:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8002328:	f7ff fbcc 	bl	8001ac4 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 800232c:	f7ff ffd4 	bl	80022d8 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002334:	4620      	mov	r0, r4
 8002336:	f004 fb55 	bl	80069e4 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800233a:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800233c:	4620      	mov	r0, r4
 800233e:	f004 fd39 	bl	8006db4 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff ffdc 	bl	8002300 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8002348:	f7ff ff68 	bl	800221c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 800234c:	4b01      	ldr	r3, [pc, #4]	; (8002354 <TIMER_IF_Init+0x40>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e7e3      	b.n	800231c <TIMER_IF_Init+0x8>
 8002354:	200003f8 	.word	0x200003f8
 8002358:	20000354 	.word	0x20000354

0800235c <TIMER_IF_BkUp_Write_Seconds>:
{
 800235c:	b508      	push	{r3, lr}
 800235e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002360:	2100      	movs	r1, #0
 8002362:	4802      	ldr	r0, [pc, #8]	; (800236c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002364:	f004 fd87 	bl	8006e76 <HAL_RTCEx_BKUPWrite>
}
 8002368:	bd08      	pop	{r3, pc}
 800236a:	bf00      	nop
 800236c:	20000354 	.word	0x20000354

08002370 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002370:	b508      	push	{r3, lr}
 8002372:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002374:	2101      	movs	r1, #1
 8002376:	4802      	ldr	r0, [pc, #8]	; (8002380 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002378:	f004 fd7d 	bl	8006e76 <HAL_RTCEx_BKUPWrite>
}
 800237c:	bd08      	pop	{r3, pc}
 800237e:	bf00      	nop
 8002380:	20000354 	.word	0x20000354

08002384 <TIMER_IF_StartTimer>:
{
 8002384:	b510      	push	{r4, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800238a:	222c      	movs	r2, #44	; 0x2c
 800238c:	2100      	movs	r1, #0
 800238e:	a801      	add	r0, sp, #4
 8002390:	f012 f9a3 	bl	80146da <memset>
  TIMER_IF_StopTimer();
 8002394:	f7ff ffa0 	bl	80022d8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <TIMER_IF_StartTimer+0x48>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800239e:	2300      	movs	r3, #0
 80023a0:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80023a2:	43e4      	mvns	r4, r4
 80023a4:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80023a6:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80023a8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80023ac:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80023ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023b4:	2201      	movs	r2, #1
 80023b6:	a901      	add	r1, sp, #4
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <TIMER_IF_StartTimer+0x4c>)
 80023ba:	f004 fc3f 	bl	8006c3c <HAL_RTC_SetAlarm_IT>
 80023be:	b910      	cbnz	r0, 80023c6 <TIMER_IF_StartTimer+0x42>
}
 80023c0:	2000      	movs	r0, #0
 80023c2:	b00c      	add	sp, #48	; 0x30
 80023c4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80023c6:	f7ff fb15 	bl	80019f4 <Error_Handler>
 80023ca:	e7f9      	b.n	80023c0 <TIMER_IF_StartTimer+0x3c>
 80023cc:	200003fc 	.word	0x200003fc
 80023d0:	20000354 	.word	0x20000354

080023d4 <TIMER_IF_BkUp_Read_MSBticks>:
{
 80023d4:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80023d6:	2102      	movs	r1, #2
 80023d8:	4801      	ldr	r0, [pc, #4]	; (80023e0 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 80023da:	f004 fd53 	bl	8006e84 <HAL_RTCEx_BKUPRead>
}
 80023de:	bd08      	pop	{r3, pc}
 80023e0:	20000354 	.word	0x20000354

080023e4 <TIMER_IF_GetTime>:
{
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	4605      	mov	r5, r0
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <TIMER_IF_GetTime+0x34>)
 80023ea:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80023ec:	e001      	b.n	80023f2 <TIMER_IF_GetTime+0xe>
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <TIMER_IF_GetTime+0x34>)
 80023f0:	689c      	ldr	r4, [r3, #8]
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <TIMER_IF_GetTime+0x34>)
 80023f4:	6892      	ldr	r2, [r2, #8]
 80023f6:	42a2      	cmp	r2, r4
 80023f8:	d1f9      	bne.n	80023ee <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 80023fa:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80023fc:	f7ff ffea 	bl	80023d4 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002400:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002402:	0aa4      	lsrs	r4, r4, #10
 8002404:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002408:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800240c:	f7ff ff50 	bl	80022b0 <TIMER_IF_Convert_Tick2ms>
 8002410:	8028      	strh	r0, [r5, #0]
}
 8002412:	4620      	mov	r0, r4
 8002414:	bd38      	pop	{r3, r4, r5, pc}
 8002416:	bf00      	nop
 8002418:	40002800 	.word	0x40002800

0800241c <TIMER_IF_BkUp_Read_Seconds>:
{
 800241c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800241e:	2100      	movs	r1, #0
 8002420:	4801      	ldr	r0, [pc, #4]	; (8002428 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002422:	f004 fd2f 	bl	8006e84 <HAL_RTCEx_BKUPRead>
}
 8002426:	bd08      	pop	{r3, pc}
 8002428:	20000354 	.word	0x20000354

0800242c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 800242c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800242e:	2101      	movs	r1, #1
 8002430:	4801      	ldr	r0, [pc, #4]	; (8002438 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002432:	f004 fd27 	bl	8006e84 <HAL_RTCEx_BKUPRead>
}
 8002436:	bd08      	pop	{r3, pc}
 8002438:	20000354 	.word	0x20000354

0800243c <TIMER_IF_DelayMs>:
{
 800243c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800243e:	f7ff ff2d 	bl	800229c <TIMER_IF_Convert_ms2Tick>
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <TIMER_IF_DelayMs+0x3c>)
 8002444:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002446:	e001      	b.n	800244c <TIMER_IF_DelayMs+0x10>
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <TIMER_IF_DelayMs+0x3c>)
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <TIMER_IF_DelayMs+0x3c>)
 800244e:	6892      	ldr	r2, [r2, #8]
 8002450:	428a      	cmp	r2, r1
 8002452:	d1f9      	bne.n	8002448 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002454:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002456:	e00a      	b.n	800246e <TIMER_IF_DelayMs+0x32>
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <TIMER_IF_DelayMs+0x3c>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <TIMER_IF_DelayMs+0x3c>)
 800245e:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002460:	429a      	cmp	r2, r3
 8002462:	d1f9      	bne.n	8002458 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8002464:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002466:	1a5b      	subs	r3, r3, r1
 8002468:	4283      	cmp	r3, r0
 800246a:	d203      	bcs.n	8002474 <TIMER_IF_DelayMs+0x38>
    __NOP();
 800246c:	bf00      	nop
 800246e:	4b02      	ldr	r3, [pc, #8]	; (8002478 <TIMER_IF_DelayMs+0x3c>)
 8002470:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002472:	e7f3      	b.n	800245c <TIMER_IF_DelayMs+0x20>
}
 8002474:	bd08      	pop	{r3, pc}
 8002476:	bf00      	nop
 8002478:	40002800 	.word	0x40002800

0800247c <HAL_RTC_AlarmAEventCallback>:
{
 800247c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800247e:	f011 fa25 	bl	80138cc <UTIL_TIMER_IRQ_Handler>
}
 8002482:	bd08      	pop	{r3, pc}

08002484 <HAL_RTCEx_SSRUEventCallback>:
{
 8002484:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002486:	f7ff ffa5 	bl	80023d4 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800248a:	3001      	adds	r0, #1
 800248c:	f7ff ff38 	bl	8002300 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002490:	bd08      	pop	{r3, pc}
	...

08002494 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002494:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002496:	4817      	ldr	r0, [pc, #92]	; (80024f4 <MX_USART2_UART_Init+0x60>)
 8002498:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <MX_USART2_UART_Init+0x64>)
 800249a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800249c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80024a0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	2300      	movs	r3, #0
 80024a4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024a6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024a8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024aa:	220c      	movs	r2, #12
 80024ac:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024b2:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024b4:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024b8:	f006 f8a2 	bl	8008600 <HAL_UART_Init>
 80024bc:	b970      	cbnz	r0, 80024dc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024be:	2100      	movs	r1, #0
 80024c0:	480c      	ldr	r0, [pc, #48]	; (80024f4 <MX_USART2_UART_Init+0x60>)
 80024c2:	f006 fa52 	bl	800896a <HAL_UARTEx_SetTxFifoThreshold>
 80024c6:	b960      	cbnz	r0, 80024e2 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c8:	2100      	movs	r1, #0
 80024ca:	480a      	ldr	r0, [pc, #40]	; (80024f4 <MX_USART2_UART_Init+0x60>)
 80024cc:	f006 fa72 	bl	80089b4 <HAL_UARTEx_SetRxFifoThreshold>
 80024d0:	b950      	cbnz	r0, 80024e8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80024d2:	4808      	ldr	r0, [pc, #32]	; (80024f4 <MX_USART2_UART_Init+0x60>)
 80024d4:	f006 fa25 	bl	8008922 <HAL_UARTEx_EnableFifoMode>
 80024d8:	b948      	cbnz	r0, 80024ee <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024da:	bd08      	pop	{r3, pc}
    Error_Handler();
 80024dc:	f7ff fa8a 	bl	80019f4 <Error_Handler>
 80024e0:	e7ed      	b.n	80024be <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80024e2:	f7ff fa87 	bl	80019f4 <Error_Handler>
 80024e6:	e7ef      	b.n	80024c8 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80024e8:	f7ff fa84 	bl	80019f4 <Error_Handler>
 80024ec:	e7f1      	b.n	80024d2 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80024ee:	f7ff fa81 	bl	80019f4 <Error_Handler>
}
 80024f2:	e7f2      	b.n	80024da <MX_USART2_UART_Init+0x46>
 80024f4:	20000460 	.word	0x20000460
 80024f8:	40004400 	.word	0x40004400

080024fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024fc:	b530      	push	{r4, r5, lr}
 80024fe:	b097      	sub	sp, #92	; 0x5c
 8002500:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002502:	2100      	movs	r1, #0
 8002504:	9111      	str	r1, [sp, #68]	; 0x44
 8002506:	9112      	str	r1, [sp, #72]	; 0x48
 8002508:	9113      	str	r1, [sp, #76]	; 0x4c
 800250a:	9114      	str	r1, [sp, #80]	; 0x50
 800250c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800250e:	2238      	movs	r2, #56	; 0x38
 8002510:	a803      	add	r0, sp, #12
 8002512:	f012 f8e2 	bl	80146da <memset>
  if(uartHandle->Instance==USART2)
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_UART_MspInit+0xd4>)
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800251e:	b017      	add	sp, #92	; 0x5c
 8002520:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002522:	2302      	movs	r3, #2
 8002524:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_UART_MspInit+0xd8>)
 8002528:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252a:	a803      	add	r0, sp, #12
 800252c:	f004 f910 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8002530:	2800      	cmp	r0, #0
 8002532:	d144      	bne.n	80025be <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800253a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800253e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002540:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002542:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002546:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002548:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800254a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800255a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800255c:	230c      	movs	r3, #12
 800255e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2500      	movs	r5, #0
 8002566:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256c:	2307      	movs	r3, #7
 800256e:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	a911      	add	r1, sp, #68	; 0x44
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f002 fd43 	bl	8005000 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800257a:	4817      	ldr	r0, [pc, #92]	; (80025d8 <HAL_UART_MspInit+0xdc>)
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_UART_MspInit+0xe0>)
 800257e:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002580:	2314      	movs	r3, #20
 8002582:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002584:	2310      	movs	r3, #16
 8002586:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002588:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002590:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002592:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002594:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002596:	f002 f9cf 	bl	8004938 <HAL_DMA_Init>
 800259a:	b998      	cbnz	r0, 80025c4 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800259c:	2110      	movs	r1, #16
 800259e:	480e      	ldr	r0, [pc, #56]	; (80025d8 <HAL_UART_MspInit+0xdc>)
 80025a0:	f002 fbcc 	bl	8004d3c <HAL_DMA_ConfigChannelAttributes>
 80025a4:	b988      	cbnz	r0, 80025ca <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_UART_MspInit+0xdc>)
 80025a8:	67e3      	str	r3, [r4, #124]	; 0x7c
 80025aa:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2102      	movs	r1, #2
 80025b0:	2025      	movs	r0, #37	; 0x25
 80025b2:	f002 f8f9 	bl	80047a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025b6:	2025      	movs	r0, #37	; 0x25
 80025b8:	f002 f92e 	bl	8004818 <HAL_NVIC_EnableIRQ>
}
 80025bc:	e7af      	b.n	800251e <HAL_UART_MspInit+0x22>
      Error_Handler();
 80025be:	f7ff fa19 	bl	80019f4 <Error_Handler>
 80025c2:	e7b7      	b.n	8002534 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80025c4:	f7ff fa16 	bl	80019f4 <Error_Handler>
 80025c8:	e7e8      	b.n	800259c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80025ca:	f7ff fa13 	bl	80019f4 <Error_Handler>
 80025ce:	e7ea      	b.n	80025a6 <HAL_UART_MspInit+0xaa>
 80025d0:	40004400 	.word	0x40004400
 80025d4:	000c0004 	.word	0x000c0004
 80025d8:	20000400 	.word	0x20000400
 80025dc:	40020058 	.word	0x40020058

080025e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 80025e0:	6802      	ldr	r2, [r0, #0]
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_UART_MspDeInit+0x34>)
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d000      	beq.n	80025ea <HAL_UART_MspDeInit+0xa>
 80025e8:	4770      	bx	lr
{
 80025ea:	b510      	push	{r4, lr}
 80025ec:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80025ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80025fa:	210c      	movs	r1, #12
 80025fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002600:	f002 fdd0 	bl	80051a4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002604:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002606:	f002 fa09 	bl	8004a1c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800260a:	2025      	movs	r0, #37	; 0x25
 800260c:	f002 f912 	bl	8004834 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002610:	bd10      	pop	{r4, pc}
 8002612:	bf00      	nop
 8002614:	40004400 	.word	0x40004400

08002618 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <vcom_Init+0x20>)
 800261c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800261e:	f7fe ffa5 	bl	800156c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002622:	f7ff ff37 	bl	8002494 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <vcom_Init+0x24>)
 8002628:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800262c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002634:	2000      	movs	r0, #0
 8002636:	bd08      	pop	{r3, pc}
 8002638:	200004f8 	.word	0x200004f8
 800263c:	58000800 	.word	0x58000800

08002640 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002640:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002648:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800264e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002650:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002656:	4804      	ldr	r0, [pc, #16]	; (8002668 <vcom_DeInit+0x28>)
 8002658:	f7ff ffc2 	bl	80025e0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800265c:	200f      	movs	r0, #15
 800265e:	f002 f8e9 	bl	8004834 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002662:	2000      	movs	r0, #0
 8002664:	bd08      	pop	{r3, pc}
 8002666:	bf00      	nop
 8002668:	20000460 	.word	0x20000460

0800266c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800266c:	b508      	push	{r3, lr}
 800266e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002670:	4601      	mov	r1, r0
 8002672:	4802      	ldr	r0, [pc, #8]	; (800267c <vcom_Trace_DMA+0x10>)
 8002674:	f004 ffe4 	bl	8007640 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002678:	2000      	movs	r0, #0
 800267a:	bd08      	pop	{r3, pc}
 800267c:	20000460 	.word	0x20000460

08002680 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002680:	b510      	push	{r4, lr}
 8002682:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <vcom_ReceiveInit+0x50>)
 8002686:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800268c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800268e:	ab02      	add	r3, sp, #8
 8002690:	e913 0006 	ldmdb	r3, {r1, r2}
 8002694:	480f      	ldr	r0, [pc, #60]	; (80026d4 <vcom_ReceiveInit+0x54>)
 8002696:	f006 f8ec 	bl	8008872 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <vcom_ReceiveInit+0x54>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80026a4:	d1f9      	bne.n	800269a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80026ac:	d0fb      	beq.n	80026a6 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80026b4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80026b6:	4c07      	ldr	r4, [pc, #28]	; (80026d4 <vcom_ReceiveInit+0x54>)
 80026b8:	4620      	mov	r0, r4
 80026ba:	f006 f91b 	bl	80088f4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80026be:	2201      	movs	r2, #1
 80026c0:	4905      	ldr	r1, [pc, #20]	; (80026d8 <vcom_ReceiveInit+0x58>)
 80026c2:	4620      	mov	r0, r4
 80026c4:	f006 f86e 	bl	80087a4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80026c8:	2000      	movs	r0, #0
 80026ca:	b002      	add	sp, #8
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	bf00      	nop
 80026d0:	200004f4 	.word	0x200004f4
 80026d4:	20000460 	.word	0x20000460
 80026d8:	200004fc 	.word	0x200004fc

080026dc <vcom_Resume>:

void vcom_Resume(void)
{
 80026dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026de:	4807      	ldr	r0, [pc, #28]	; (80026fc <vcom_Resume+0x20>)
 80026e0:	f005 ff8e 	bl	8008600 <HAL_UART_Init>
 80026e4:	b920      	cbnz	r0, 80026f0 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80026e6:	4806      	ldr	r0, [pc, #24]	; (8002700 <vcom_Resume+0x24>)
 80026e8:	f002 f926 	bl	8004938 <HAL_DMA_Init>
 80026ec:	b918      	cbnz	r0, 80026f6 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80026ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80026f0:	f7ff f980 	bl	80019f4 <Error_Handler>
 80026f4:	e7f7      	b.n	80026e6 <vcom_Resume+0xa>
    Error_Handler();
 80026f6:	f7ff f97d 	bl	80019f4 <Error_Handler>
}
 80026fa:	e7f8      	b.n	80026ee <vcom_Resume+0x12>
 80026fc:	20000460 	.word	0x20000460
 8002700:	20000400 	.word	0x20000400

08002704 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002704:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002706:	6802      	ldr	r2, [r0, #0]
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <HAL_UART_TxCpltCallback+0x18>)
 800270a:	429a      	cmp	r2, r3
 800270c:	d000      	beq.n	8002710 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800270e:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_UART_TxCpltCallback+0x1c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2000      	movs	r0, #0
 8002716:	4798      	blx	r3
}
 8002718:	e7f9      	b.n	800270e <HAL_UART_TxCpltCallback+0xa>
 800271a:	bf00      	nop
 800271c:	40004400 	.word	0x40004400
 8002720:	200004f8 	.word	0x200004f8

08002724 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002724:	6802      	ldr	r2, [r0, #0]
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_UART_RxCpltCallback+0x2c>)
 8002728:	429a      	cmp	r2, r3
 800272a:	d000      	beq.n	800272e <HAL_UART_RxCpltCallback+0xa>
 800272c:	4770      	bx	lr
{
 800272e:	b510      	push	{r4, lr}
 8002730:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_UART_RxCpltCallback+0x30>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	b12b      	cbz	r3, 8002744 <HAL_UART_RxCpltCallback+0x20>
 8002738:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800273c:	b912      	cbnz	r2, 8002744 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800273e:	2101      	movs	r1, #1
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <HAL_UART_RxCpltCallback+0x34>)
 8002742:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002744:	2201      	movs	r2, #1
 8002746:	4904      	ldr	r1, [pc, #16]	; (8002758 <HAL_UART_RxCpltCallback+0x34>)
 8002748:	4620      	mov	r0, r4
 800274a:	f006 f82b 	bl	80087a4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800274e:	bd10      	pop	{r4, pc}
 8002750:	40004400 	.word	0x40004400
 8002754:	200004f4 	.word	0x200004f4
 8002758:	200004fc 	.word	0x200004fc

0800275c <LSM6DSO_USER_Init>:
static LSM6DSO16IS_Object_t LSM6DSO_OB_Handle;
static LSM6DSO16IS_IO_t LSM6DSO_IO_Handle;

/* Init -----------------------------------------------------------*/
int32_t LSM6DSO_USER_Init(void)
{
 800275c:	b510      	push	{r4, lr}
 800275e:	b082      	sub	sp, #8

    uint8_t t8_sup;
    float f_sup;

    LSM6DSO_IO_Handle.Address=0xD6;
 8002760:	491c      	ldr	r1, [pc, #112]	; (80027d4 <LSM6DSO_USER_Init+0x78>)
 8002762:	23d6      	movs	r3, #214	; 0xd6
 8002764:	730b      	strb	r3, [r1, #12]
    LSM6DSO_IO_Handle.BusType=0;
 8002766:	2300      	movs	r3, #0
 8002768:	608b      	str	r3, [r1, #8]
    LSM6DSO_IO_Handle.WriteReg=BSP_I2C2_WriteReg;
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <LSM6DSO_USER_Init+0x7c>)
 800276c:	610b      	str	r3, [r1, #16]
    LSM6DSO_IO_Handle.ReadReg=BSP_I2C2_ReadReg;
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <LSM6DSO_USER_Init+0x80>)
 8002770:	614b      	str	r3, [r1, #20]

    LSM6DSO16IS_RegisterBusIO(&LSM6DSO_OB_Handle, &LSM6DSO_IO_Handle);
 8002772:	4c1b      	ldr	r4, [pc, #108]	; (80027e0 <LSM6DSO_USER_Init+0x84>)
 8002774:	4620      	mov	r0, r4
 8002776:	f000 ff1b 	bl	80035b0 <LSM6DSO16IS_RegisterBusIO>
    LSM6DSO16IS_Init(&LSM6DSO_OB_Handle);
 800277a:	4620      	mov	r0, r4
 800277c:	f000 ff60 	bl	8003640 <LSM6DSO16IS_Init>

    if(0 != LSM6DSO16IS_ReadID(&LSM6DSO_OB_Handle, &t8_sup)){
 8002780:	f10d 0107 	add.w	r1, sp, #7
 8002784:	4620      	mov	r0, r4
 8002786:	f000 fd80 	bl	800328a <LSM6DSO16IS_ReadID>
 800278a:	b998      	cbnz	r0, 80027b4 <LSM6DSO_USER_Init+0x58>
        return -1;
    }
    if(0 != LSM6DSO16IS_ACC_Enable(&LSM6DSO_OB_Handle)){
 800278c:	4620      	mov	r0, r4
 800278e:	f000 fd54 	bl	800323a <LSM6DSO16IS_ACC_Enable>
 8002792:	b990      	cbnz	r0, 80027ba <LSM6DSO_USER_Init+0x5e>
        return -1;
    }
    if(0 != LSM6DSO16IS_ACC_GetOutputDataRate(&LSM6DSO_OB_Handle, &f_sup)){
 8002794:	4669      	mov	r1, sp
 8002796:	4620      	mov	r0, r4
 8002798:	f000 fd80 	bl	800329c <LSM6DSO16IS_ACC_GetOutputDataRate>
 800279c:	b980      	cbnz	r0, 80027c0 <LSM6DSO_USER_Init+0x64>
        return -1;
    }
    if(0 != LSM6DSO16IS_GYRO_Enable(&LSM6DSO_OB_Handle)){
 800279e:	4620      	mov	r0, r4
 80027a0:	f000 fd5f 	bl	8003262 <LSM6DSO16IS_GYRO_Enable>
 80027a4:	b978      	cbnz	r0, 80027c6 <LSM6DSO_USER_Init+0x6a>
        return -1;
    }
    if(0 != LSM6DSO16IS_GYRO_GetOutputDataRate(&LSM6DSO_OB_Handle, &f_sup)){
 80027a6:	4669      	mov	r1, sp
 80027a8:	4620      	mov	r0, r4
 80027aa:	f000 fe2d 	bl	8003408 <LSM6DSO16IS_GYRO_GetOutputDataRate>
 80027ae:	b968      	cbnz	r0, 80027cc <LSM6DSO_USER_Init+0x70>
        return -1;
    }
    return 0;


}
 80027b0:	b002      	add	sp, #8
 80027b2:	bd10      	pop	{r4, pc}
        return -1;
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	e7fa      	b.n	80027b0 <LSM6DSO_USER_Init+0x54>
        return -1;
 80027ba:	f04f 30ff 	mov.w	r0, #4294967295
 80027be:	e7f7      	b.n	80027b0 <LSM6DSO_USER_Init+0x54>
        return -1;
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	e7f4      	b.n	80027b0 <LSM6DSO_USER_Init+0x54>
        return -1;
 80027c6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ca:	e7f1      	b.n	80027b0 <LSM6DSO_USER_Init+0x54>
        return -1;
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	e7ee      	b.n	80027b0 <LSM6DSO_USER_Init+0x54>
 80027d2:	bf00      	nop
 80027d4:	20000500 	.word	0x20000500
 80027d8:	08001d05 	.word	0x08001d05
 80027dc:	08001d41 	.word	0x08001d41
 80027e0:	20000520 	.word	0x20000520

080027e4 <LSM6DSO_USER_Acc_GetAxes>:

int32_t LSM6DSO_USER_Acc_GetAxes(int32_t *px, int32_t *py, int32_t *pz)
{
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	4606      	mov	r6, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	4614      	mov	r4, r2
    LSM6DSO16IS_Axes_t acc;
    int32_t ret;

    ret = LSM6DSO16IS_ACC_GetAxes(&LSM6DSO_OB_Handle, &acc);
 80027ee:	a901      	add	r1, sp, #4
 80027f0:	4805      	ldr	r0, [pc, #20]	; (8002808 <LSM6DSO_USER_Acc_GetAxes+0x24>)
 80027f2:	f000 fdcf 	bl	8003394 <LSM6DSO16IS_ACC_GetAxes>

    *px = acc.x;
 80027f6:	9b01      	ldr	r3, [sp, #4]
 80027f8:	6033      	str	r3, [r6, #0]
    *py = acc.y;
 80027fa:	9b02      	ldr	r3, [sp, #8]
 80027fc:	602b      	str	r3, [r5, #0]
    *pz = acc.z;
 80027fe:	9b03      	ldr	r3, [sp, #12]
 8002800:	6023      	str	r3, [r4, #0]

    return ret;

}
 8002802:	b004      	add	sp, #16
 8002804:	bd70      	pop	{r4, r5, r6, pc}
 8002806:	bf00      	nop
 8002808:	20000520 	.word	0x20000520

0800280c <LSM6DSO_USER_Gyro_GetAxes>:

int32_t LSM6DSO_USER_Gyro_GetAxes(int32_t *px, int32_t *py, int32_t *pz)
{
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	4606      	mov	r6, r0
 8002812:	460d      	mov	r5, r1
 8002814:	4614      	mov	r4, r2
    LSM6DSO16IS_Axes_t gyro;
    int32_t ret;

    ret = LSM6DSO16IS_GYRO_GetAxes(&LSM6DSO_OB_Handle, &gyro);
 8002816:	a901      	add	r1, sp, #4
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <LSM6DSO_USER_Gyro_GetAxes+0x24>)
 800281a:	f000 fe7f 	bl	800351c <LSM6DSO16IS_GYRO_GetAxes>

    *px = gyro.x;
 800281e:	9b01      	ldr	r3, [sp, #4]
 8002820:	6033      	str	r3, [r6, #0]
    *py = gyro.y;
 8002822:	9b02      	ldr	r3, [sp, #8]
 8002824:	602b      	str	r3, [r5, #0]
    *pz = gyro.z;
 8002826:	9b03      	ldr	r3, [sp, #12]
 8002828:	6023      	str	r3, [r4, #0]

    return ret;
}
 800282a:	b004      	add	sp, #16
 800282c:	bd70      	pop	{r4, r5, r6, pc}
 800282e:	bf00      	nop
 8002830:	20000520 	.word	0x20000520

08002834 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002834:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002836:	f7ff fb3f 	bl	8001eb8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800283a:	f000 fbb5 	bl	8002fa8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800283e:	bd08      	pop	{r3, pc}

08002840 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002842:	f04f 30ff 	mov.w	r0, #4294967295
 8002846:	f010 fd93 	bl	8013370 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800284a:	bd08      	pop	{r3, pc}

0800284c <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800284c:	4770      	bx	lr
	...

08002850 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002850:	4b01      	ldr	r3, [pc, #4]	; (8002858 <OnTxFrameCtrlChanged+0x8>)
 8002852:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000058 	.word	0x20000058

0800285c <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800285c:	4b01      	ldr	r3, [pc, #4]	; (8002864 <OnPingSlotPeriodicityChanged+0x8>)
 800285e:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000058 	.word	0x20000058

08002868 <OnBeaconStatusChange>:
  if (params != NULL)
 8002868:	2800      	cmp	r0, #0
 800286a:	d03f      	beq.n	80028ec <OnBeaconStatusChange+0x84>
{
 800286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002870:	b08c      	sub	sp, #48	; 0x30
 8002872:	4603      	mov	r3, r0
    switch (params->State)
 8002874:	7842      	ldrb	r2, [r0, #1]
 8002876:	2a02      	cmp	r2, #2
 8002878:	d00a      	beq.n	8002890 <OnBeaconStatusChange+0x28>
 800287a:	2a03      	cmp	r2, #3
 800287c:	d02f      	beq.n	80028de <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <OnBeaconStatusChange+0x88>)
 8002880:	2200      	movs	r2, #0
 8002882:	4611      	mov	r1, r2
 8002884:	2002      	movs	r0, #2
 8002886:	f010 fc15 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800288a:	b00c      	add	sp, #48	; 0x30
 800288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002890:	7c02      	ldrb	r2, [r0, #16]
 8002892:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002896:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800289a:	7d9c      	ldrb	r4, [r3, #22]
 800289c:	7ddd      	ldrb	r5, [r3, #23]
 800289e:	7e1e      	ldrb	r6, [r3, #24]
 80028a0:	7e5f      	ldrb	r7, [r3, #25]
 80028a2:	f893 c01a 	ldrb.w	ip, [r3, #26]
 80028a6:	f893 e01b 	ldrb.w	lr, [r3, #27]
 80028aa:	f893 801c 	ldrb.w	r8, [r3, #28]
 80028ae:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80028b2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80028b6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80028ba:	9708      	str	r7, [sp, #32]
 80028bc:	9607      	str	r6, [sp, #28]
 80028be:	9506      	str	r5, [sp, #24]
 80028c0:	9405      	str	r4, [sp, #20]
 80028c2:	685c      	ldr	r4, [r3, #4]
 80028c4:	9404      	str	r4, [sp, #16]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	9303      	str	r3, [sp, #12]
 80028ca:	9002      	str	r0, [sp, #8]
 80028cc:	9101      	str	r1, [sp, #4]
 80028ce:	9200      	str	r2, [sp, #0]
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <OnBeaconStatusChange+0x8c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	4611      	mov	r1, r2
 80028d6:	2002      	movs	r0, #2
 80028d8:	f010 fbec 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80028dc:	e7d5      	b.n	800288a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <OnBeaconStatusChange+0x90>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	4611      	mov	r1, r2
 80028e4:	2002      	movs	r0, #2
 80028e6:	f010 fbe5 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 80028ea:	e7ce      	b.n	800288a <OnBeaconStatusChange+0x22>
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	0801674c 	.word	0x0801674c
 80028f4:	08016764 	.word	0x08016764
 80028f8:	080167d8 	.word	0x080167d8

080028fc <OnClassChange>:
{
 80028fc:	b500      	push	{lr}
 80028fe:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <OnClassChange+0x1c>)
 8002902:	5c1b      	ldrb	r3, [r3, r0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <OnClassChange+0x20>)
 8002908:	2200      	movs	r2, #0
 800290a:	4611      	mov	r1, r2
 800290c:	2002      	movs	r0, #2
 800290e:	f010 fbd1 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002912:	b003      	add	sp, #12
 8002914:	f85d fb04 	ldr.w	pc, [sp], #4
 8002918:	08016814 	.word	0x08016814
 800291c:	080167f8 	.word	0x080167f8

08002920 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8002920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8002922:	2801      	cmp	r0, #1
 8002924:	d006      	beq.n	8002934 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <OnNvmDataChange+0x24>)
 8002928:	2200      	movs	r2, #0
 800292a:	4611      	mov	r1, r2
 800292c:	2002      	movs	r0, #2
 800292e:	f010 fbc1 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8002932:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <OnNvmDataChange+0x28>)
 8002936:	2200      	movs	r2, #0
 8002938:	4611      	mov	r1, r2
 800293a:	2002      	movs	r0, #2
 800293c:	f010 fbba 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
 8002940:	e7f7      	b.n	8002932 <OnNvmDataChange+0x12>
 8002942:	bf00      	nop
 8002944:	0801682c 	.word	0x0801682c
 8002948:	08016818 	.word	0x08016818

0800294c <OnTxTimerEvent>:
{
 800294c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800294e:	2100      	movs	r1, #0
 8002950:	2002      	movs	r0, #2
 8002952:	f010 fcd9 	bl	8013308 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8002956:	4802      	ldr	r0, [pc, #8]	; (8002960 <OnTxTimerEvent+0x14>)
 8002958:	f010 ff58 	bl	801380c <UTIL_TIMER_Start>
}
 800295c:	bd08      	pop	{r3, pc}
 800295e:	bf00      	nop
 8002960:	200006a8 	.word	0x200006a8

08002964 <OnMacProcessNotify>:
{
 8002964:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002966:	2100      	movs	r1, #0
 8002968:	2001      	movs	r0, #1
 800296a:	f010 fccd 	bl	8013308 <UTIL_SEQ_SetTask>
}
 800296e:	bd08      	pop	{r3, pc}

08002970 <OnSystemReset>:
{
 8002970:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002972:	f006 fcfd 	bl	8009370 <LmHandlerHalt>
 8002976:	b100      	cbz	r0, 800297a <OnSystemReset+0xa>
}
 8002978:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800297a:	f006 f9b7 	bl	8008cec <LmHandlerJoinStatus>
 800297e:	2801      	cmp	r0, #1
 8002980:	d1fa      	bne.n	8002978 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002982:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002986:	4905      	ldr	r1, [pc, #20]	; (800299c <OnSystemReset+0x2c>)
 8002988:	68ca      	ldr	r2, [r1, #12]
 800298a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <OnSystemReset+0x30>)
 8002990:	4313      	orrs	r3, r2
 8002992:	60cb      	str	r3, [r1, #12]
 8002994:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002998:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800299a:	e7fd      	b.n	8002998 <OnSystemReset+0x28>
 800299c:	e000ed00 	.word	0xe000ed00
 80029a0:	05fa0004 	.word	0x05fa0004

080029a4 <OnTxPeriodicityChanged>:
{
 80029a4:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <OnTxPeriodicityChanged+0x28>)
 80029a8:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 80029aa:	b910      	cbnz	r0, 80029b2 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 80029ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80029b0:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 80029b2:	4c07      	ldr	r4, [pc, #28]	; (80029d0 <OnTxPeriodicityChanged+0x2c>)
 80029b4:	4620      	mov	r0, r4
 80029b6:	f010 fecf 	bl	8013758 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 80029ba:	4b04      	ldr	r3, [pc, #16]	; (80029cc <OnTxPeriodicityChanged+0x28>)
 80029bc:	6819      	ldr	r1, [r3, #0]
 80029be:	4620      	mov	r0, r4
 80029c0:	f010 ff6a 	bl	8013898 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 80029c4:	4620      	mov	r0, r4
 80029c6:	f010 ff21 	bl	801380c <UTIL_TIMER_Start>
}
 80029ca:	bd10      	pop	{r4, pc}
 80029cc:	20000070 	.word	0x20000070
 80029d0:	200006a8 	.word	0x200006a8

080029d4 <OnTxData>:
  if ((params != NULL))
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d042      	beq.n	8002a5e <OnTxData+0x8a>
{
 80029d8:	b510      	push	{r4, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 80029de:	7803      	ldrb	r3, [r0, #0]
 80029e0:	b90b      	cbnz	r3, 80029e6 <OnTxData+0x12>
}
 80029e2:	b004      	add	sp, #16
 80029e4:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80029e6:	2201      	movs	r2, #1
 80029e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029ec:	481c      	ldr	r0, [pc, #112]	; (8002a60 <OnTxData+0x8c>)
 80029ee:	f002 fc57 	bl	80052a0 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80029f2:	481c      	ldr	r0, [pc, #112]	; (8002a64 <OnTxData+0x90>)
 80029f4:	f010 ff0a 	bl	801380c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <OnTxData+0x94>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	4611      	mov	r1, r2
 80029fe:	2002      	movs	r0, #2
 8002a00:	f010 fb58 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002a04:	7c23      	ldrb	r3, [r4, #16]
 8002a06:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002a0a:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8002a0e:	9103      	str	r1, [sp, #12]
 8002a10:	9202      	str	r2, [sp, #8]
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	68e3      	ldr	r3, [r4, #12]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <OnTxData+0x98>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f010 fb48 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <OnTxData+0x9c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	4611      	mov	r1, r2
 8002a2a:	2003      	movs	r0, #3
 8002a2c:	f010 fb42 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002a30:	7a23      	ldrb	r3, [r4, #8]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10c      	bne.n	8002a50 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8002a36:	7a63      	ldrb	r3, [r4, #9]
 8002a38:	b143      	cbz	r3, 8002a4c <OnTxData+0x78>
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <OnTxData+0xa0>)
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <OnTxData+0xa4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	4611      	mov	r1, r2
 8002a44:	2003      	movs	r0, #3
 8002a46:	f010 fb35 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
 8002a4a:	e7ca      	b.n	80029e2 <OnTxData+0xe>
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <OnTxData+0xa8>)
 8002a4e:	e7f5      	b.n	8002a3c <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <OnTxData+0xac>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	4611      	mov	r1, r2
 8002a56:	2003      	movs	r0, #3
 8002a58:	f010 fb2c 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002a5c:	e7c1      	b.n	80029e2 <OnTxData+0xe>
 8002a5e:	4770      	bx	lr
 8002a60:	48000400 	.word	0x48000400
 8002a64:	20000690 	.word	0x20000690
 8002a68:	0801684c 	.word	0x0801684c
 8002a6c:	08016880 	.word	0x08016880
 8002a70:	080168b4 	.word	0x080168b4
 8002a74:	08016840 	.word	0x08016840
 8002a78:	080168c4 	.word	0x080168c4
 8002a7c:	08016844 	.word	0x08016844
 8002a80:	080168d8 	.word	0x080168d8

08002a84 <OnJoinRequest>:
  if (joinParams != NULL)
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d039      	beq.n	8002afc <OnJoinRequest+0x78>
{
 8002a88:	b510      	push	{r4, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002a8e:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8002a92:	b9fb      	cbnz	r3, 8002ad4 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002a94:	481a      	ldr	r0, [pc, #104]	; (8002b00 <OnJoinRequest+0x7c>)
 8002a96:	f010 fe5f 	bl	8013758 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002aa0:	4818      	ldr	r0, [pc, #96]	; (8002b04 <OnJoinRequest+0x80>)
 8002aa2:	f002 fbfd 	bl	80052a0 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <OnJoinRequest+0x84>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4611      	mov	r1, r2
 8002aac:	2002      	movs	r0, #2
 8002aae:	f010 fb01 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002ab2:	79e3      	ldrb	r3, [r4, #7]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d006      	beq.n	8002ac6 <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <OnJoinRequest+0x88>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	4611      	mov	r1, r2
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f010 faf8 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
 8002ac4:	e00c      	b.n	8002ae0 <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <OnJoinRequest+0x8c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4611      	mov	r1, r2
 8002acc:	2002      	movs	r0, #2
 8002ace:	f010 faf1 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
 8002ad2:	e005      	b.n	8002ae0 <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <OnJoinRequest+0x90>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4611      	mov	r1, r2
 8002ada:	2002      	movs	r0, #2
 8002adc:	f010 faea 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 8002ae0:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002ae4:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002ae8:	9201      	str	r2, [sp, #4]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <OnJoinRequest+0x94>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	4611      	mov	r1, r2
 8002af2:	2003      	movs	r0, #3
 8002af4:	f010 fade 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002af8:	b002      	add	sp, #8
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000648 	.word	0x20000648
 8002b04:	48000400 	.word	0x48000400
 8002b08:	080168e8 	.word	0x080168e8
 8002b0c:	08016920 	.word	0x08016920
 8002b10:	08016900 	.word	0x08016900
 8002b14:	08016940 	.word	0x08016940
 8002b18:	0801695c 	.word	0x0801695c

08002b1c <OnStopJoinTimerEvent>:
{
 8002b1c:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <OnStopJoinTimerEvent+0x3c>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d013      	beq.n	8002b4e <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002b26:	4c0d      	ldr	r4, [pc, #52]	; (8002b5c <OnStopJoinTimerEvent+0x40>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f002 fbb6 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002b34:	2200      	movs	r2, #0
 8002b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f002 fbb0 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002b40:	2200      	movs	r2, #0
 8002b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b46:	4620      	mov	r0, r4
 8002b48:	f002 fbaa 	bl	80052a0 <HAL_GPIO_WritePin>
}
 8002b4c:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002b4e:	2100      	movs	r1, #0
 8002b50:	2008      	movs	r0, #8
 8002b52:	f010 fbd9 	bl	8013308 <UTIL_SEQ_SetTask>
 8002b56:	e7e6      	b.n	8002b26 <OnStopJoinTimerEvent+0xa>
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	48000400 	.word	0x48000400

08002b60 <OnRxTimerLedEvent>:
{
 8002b60:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b68:	4801      	ldr	r0, [pc, #4]	; (8002b70 <OnRxTimerLedEvent+0x10>)
 8002b6a:	f002 fb99 	bl	80052a0 <HAL_GPIO_WritePin>
}
 8002b6e:	bd08      	pop	{r3, pc}
 8002b70:	48000400 	.word	0x48000400

08002b74 <OnTxTimerLedEvent>:
{
 8002b74:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002b76:	2200      	movs	r2, #0
 8002b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b7c:	4801      	ldr	r0, [pc, #4]	; (8002b84 <OnTxTimerLedEvent+0x10>)
 8002b7e:	f002 fb8f 	bl	80052a0 <HAL_GPIO_WritePin>
}
 8002b82:	bd08      	pop	{r3, pc}
 8002b84:	48000400 	.word	0x48000400

08002b88 <OnRxData>:
  if (params != NULL)
 8002b88:	2900      	cmp	r1, #0
 8002b8a:	d070      	beq.n	8002c6e <OnRxData+0xe6>
{
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	4604      	mov	r4, r0
 8002b92:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002b94:	2201      	movs	r2, #1
 8002b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b9a:	4835      	ldr	r0, [pc, #212]	; (8002c70 <OnRxData+0xe8>)
 8002b9c:	f002 fb80 	bl	80052a0 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002ba0:	4834      	ldr	r0, [pc, #208]	; (8002c74 <OnRxData+0xec>)
 8002ba2:	f010 fe33 	bl	801380c <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002ba6:	782e      	ldrb	r6, [r5, #0]
 8002ba8:	2e00      	cmp	r6, #0
 8002baa:	d044      	beq.n	8002c36 <OnRxData+0xae>
      if (appData != NULL)
 8002bac:	2c00      	cmp	r4, #0
 8002bae:	d041      	beq.n	8002c34 <OnRxData+0xac>
        RxPort = appData->Port;
 8002bb0:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002bb2:	6863      	ldr	r3, [r4, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d03e      	beq.n	8002c36 <OnRxData+0xae>
          switch (appData->Port)
 8002bb8:	2e02      	cmp	r6, #2
 8002bba:	d016      	beq.n	8002bea <OnRxData+0x62>
 8002bbc:	2e03      	cmp	r6, #3
 8002bbe:	d13a      	bne.n	8002c36 <OnRxData+0xae>
              if (appData->BufferSize == 1)
 8002bc0:	7862      	ldrb	r2, [r4, #1]
 8002bc2:	2a01      	cmp	r2, #1
 8002bc4:	d137      	bne.n	8002c36 <OnRxData+0xae>
                switch (appData->Buffer[0])
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d006      	beq.n	8002bda <OnRxData+0x52>
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d008      	beq.n	8002be2 <OnRxData+0x5a>
 8002bd0:	bb8b      	cbnz	r3, 8002c36 <OnRxData+0xae>
                    LmHandlerRequestClass(CLASS_A);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f006 f95c 	bl	8008e90 <LmHandlerRequestClass>
                    break;
 8002bd8:	e02d      	b.n	8002c36 <OnRxData+0xae>
                    LmHandlerRequestClass(CLASS_B);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f006 f958 	bl	8008e90 <LmHandlerRequestClass>
                    break;
 8002be0:	e029      	b.n	8002c36 <OnRxData+0xae>
                    LmHandlerRequestClass(CLASS_C);
 8002be2:	2002      	movs	r0, #2
 8002be4:	f006 f954 	bl	8008e90 <LmHandlerRequestClass>
                    break;
 8002be8:	e025      	b.n	8002c36 <OnRxData+0xae>
              if (appData->BufferSize == 1)
 8002bea:	7862      	ldrb	r2, [r4, #1]
 8002bec:	2a01      	cmp	r2, #1
 8002bee:	d122      	bne.n	8002c36 <OnRxData+0xae>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <OnRxData+0xf0>)
 8002bf8:	7013      	strb	r3, [r2, #0]
                roll_state = appData->Buffer[0] & 0x01;
 8002bfa:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <OnRxData+0xf4>)
 8002bfc:	6013      	str	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002bfe:	b963      	cbnz	r3, 8002c1a <OnRxData+0x92>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <OnRxData+0xf8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	4611      	mov	r1, r2
 8002c06:	2003      	movs	r0, #3
 8002c08:	f010 fa54 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c12:	4817      	ldr	r0, [pc, #92]	; (8002c70 <OnRxData+0xe8>)
 8002c14:	f002 fb44 	bl	80052a0 <HAL_GPIO_WritePin>
 8002c18:	e00d      	b.n	8002c36 <OnRxData+0xae>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <OnRxData+0xfc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4611      	mov	r1, r2
 8002c20:	2003      	movs	r0, #3
 8002c22:	f010 fa47 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002c26:	2201      	movs	r2, #1
 8002c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c2c:	4810      	ldr	r0, [pc, #64]	; (8002c70 <OnRxData+0xe8>)
 8002c2e:	f002 fb37 	bl	80052a0 <HAL_GPIO_WritePin>
 8002c32:	e000      	b.n	8002c36 <OnRxData+0xae>
  uint8_t RxPort = 0;
 8002c34:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8002c36:	7c2b      	ldrb	r3, [r5, #16]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d901      	bls.n	8002c40 <OnRxData+0xb8>
}
 8002c3c:	b006      	add	sp, #24
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002c40:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8002c44:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002c48:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002c4c:	9005      	str	r0, [sp, #20]
 8002c4e:	9104      	str	r1, [sp, #16]
 8002c50:	490d      	ldr	r1, [pc, #52]	; (8002c88 <OnRxData+0x100>)
 8002c52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c56:	9303      	str	r3, [sp, #12]
 8002c58:	9202      	str	r2, [sp, #8]
 8002c5a:	9601      	str	r6, [sp, #4]
 8002c5c:	68eb      	ldr	r3, [r5, #12]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <OnRxData+0x104>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	4611      	mov	r1, r2
 8002c66:	2003      	movs	r0, #3
 8002c68:	f010 fa24 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002c6c:	e7e6      	b.n	8002c3c <OnRxData+0xb4>
 8002c6e:	4770      	bx	lr
 8002c70:	48000400 	.word	0x48000400
 8002c74:	20000660 	.word	0x20000660
 8002c78:	20000646 	.word	0x20000646
 8002c7c:	200006c0 	.word	0x200006c0
 8002c80:	08016988 	.word	0x08016988
 8002c84:	08016994 	.word	0x08016994
 8002c88:	08016b88 	.word	0x08016b88
 8002c8c:	080169a0 	.word	0x080169a0

08002c90 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4604      	mov	r4, r0
 8002c94:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8002c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c9a:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <OnStoreContextRequest+0x20>)
 8002c9c:	f7fe fe16 	bl	80018cc <FLASH_IF_Erase>
 8002ca0:	b100      	cbz	r0, 8002ca4 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002ca2:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002ca4:	462a      	mov	r2, r5
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4801      	ldr	r0, [pc, #4]	; (8002cb0 <OnStoreContextRequest+0x20>)
 8002caa:	f7fe fdd7 	bl	800185c <FLASH_IF_Write>
}
 8002cae:	e7f8      	b.n	8002ca2 <OnStoreContextRequest+0x12>
 8002cb0:	0803f000 	.word	0x0803f000

08002cb4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002cb4:	b508      	push	{r3, lr}
 8002cb6:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002cb8:	4901      	ldr	r1, [pc, #4]	; (8002cc0 <OnRestoreContextRequest+0xc>)
 8002cba:	f7fe fdeb 	bl	8001894 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002cbe:	bd08      	pop	{r3, pc}
 8002cc0:	0803f000 	.word	0x0803f000

08002cc4 <StopJoin>:
{
 8002cc4:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002cc6:	4c1e      	ldr	r4, [pc, #120]	; (8002d40 <StopJoin+0x7c>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f002 fae6 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f002 fae0 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f002 fada 	bl	80052a0 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002cec:	4815      	ldr	r0, [pc, #84]	; (8002d44 <StopJoin+0x80>)
 8002cee:	f010 fd33 	bl	8013758 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002cf2:	f006 fb35 	bl	8009360 <LmHandlerStop>
 8002cf6:	b148      	cbz	r0, 8002d0c <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <StopJoin+0x84>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f010 f9d8 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002d04:	4811      	ldr	r0, [pc, #68]	; (8002d4c <StopJoin+0x88>)
 8002d06:	f010 fd81 	bl	801380c <UTIL_TIMER_Start>
}
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <StopJoin+0x8c>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4611      	mov	r1, r2
 8002d12:	2002      	movs	r0, #2
 8002d14:	f010 f9ce 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002d18:	4c0e      	ldr	r4, [pc, #56]	; (8002d54 <StopJoin+0x90>)
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <StopJoin+0x94>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	4611      	mov	r1, r2
 8002d24:	2002      	movs	r0, #2
 8002d26:	f010 f9c5 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002d2a:	480c      	ldr	r0, [pc, #48]	; (8002d5c <StopJoin+0x98>)
 8002d2c:	f006 f990 	bl	8009050 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002d30:	4629      	mov	r1, r5
 8002d32:	7820      	ldrb	r0, [r4, #0]
 8002d34:	f005 ff48 	bl	8008bc8 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <StopJoin+0x80>)
 8002d3a:	f010 fd67 	bl	801380c <UTIL_TIMER_Start>
 8002d3e:	e7e1      	b.n	8002d04 <StopJoin+0x40>
 8002d40:	48000400 	.word	0x48000400
 8002d44:	200006a8 	.word	0x200006a8
 8002d48:	080169e8 	.word	0x080169e8
 8002d4c:	20000678 	.word	0x20000678
 8002d50:	08016a08 	.word	0x08016a08
 8002d54:	20000000 	.word	0x20000000
 8002d58:	08016a1c 	.word	0x08016a1c
 8002d5c:	20000058 	.word	0x20000058

08002d60 <StoreContext>:
{
 8002d60:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002d62:	f006 fb8f 	bl	8009484 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002d66:	f110 0f08 	cmn.w	r0, #8
 8002d6a:	d003      	beq.n	8002d74 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002d6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002d70:	d007      	beq.n	8002d82 <StoreContext+0x22>
}
 8002d72:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <StoreContext+0x30>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	4611      	mov	r1, r2
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f010 f99a 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
 8002d80:	e7f7      	b.n	8002d72 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <StoreContext+0x34>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	4611      	mov	r1, r2
 8002d88:	2002      	movs	r0, #2
 8002d8a:	f010 f993 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002d8e:	e7f0      	b.n	8002d72 <StoreContext+0x12>
 8002d90:	08016a3c 	.word	0x08016a3c
 8002d94:	08016a54 	.word	0x08016a54

08002d98 <SendTxData>:
{
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	b08d      	sub	sp, #52	; 0x34
  uint8_t batteryLevel = GetBatteryLevel();
 8002d9c:	f7ff f8c0 	bl	8001f20 <GetBatteryLevel>
 8002da0:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 8002da2:	f005 ffb5 	bl	8008d10 <LmHandlerIsBusy>
 8002da6:	b188      	cbz	r0, 8002dcc <SendTxData+0x34>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002da8:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002daa:	4c6d      	ldr	r4, [pc, #436]	; (8002f60 <SendTxData+0x1c8>)
 8002dac:	4620      	mov	r0, r4
 8002dae:	f010 fcd3 	bl	8013758 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002db2:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <SendTxData+0x1cc>)
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	42a9      	cmp	r1, r5
 8002db8:	bf38      	it	cc
 8002dba:	4629      	movcc	r1, r5
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f010 fd6b 	bl	8013898 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f010 fd22 	bl	801380c <UTIL_TIMER_Start>
}
 8002dc8:	b00d      	add	sp, #52	; 0x34
 8002dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 8002dcc:	a803      	add	r0, sp, #12
 8002dce:	f7ff f98d 	bl	80020ec <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002dd2:	9400      	str	r4, [sp, #0]
 8002dd4:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <SendTxData+0x1d0>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f010 f96a 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002de0:	9806      	ldr	r0, [sp, #24]
 8002de2:	f7fe f917 	bl	8001014 <__aeabi_f2iz>
 8002de6:	b200      	sxth	r0, r0
 8002de8:	9000      	str	r0, [sp, #0]
 8002dea:	4b60      	ldr	r3, [pc, #384]	; (8002f6c <SendTxData+0x1d4>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	2100      	movs	r1, #0
 8002df0:	2002      	movs	r0, #2
 8002df2:	f010 f95f 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 8002df6:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <SendTxData+0x1d8>)
 8002df8:	2202      	movs	r2, #2
 8002dfa:	701a      	strb	r2, [r3, #0]
    acc_x = (int32_t)(sensor_data.acc_x);
 8002dfc:	9903      	ldr	r1, [sp, #12]
    acc_y = (int32_t)(sensor_data.acc_y);
 8002dfe:	9a04      	ldr	r2, [sp, #16]
    gyr_y = (int32_t)(sensor_data.gyr_y);
 8002e00:	9805      	ldr	r0, [sp, #20]
    AppData.Buffer[i++] = AppLedStateOn;
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4c5b      	ldr	r4, [pc, #364]	; (8002f74 <SendTxData+0x1dc>)
 8002e06:	7824      	ldrb	r4, [r4, #0]
 8002e08:	701c      	strb	r4, [r3, #0]
    if (roll_state == 1)
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <SendTxData+0x1e0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d044      	beq.n	8002e9c <SendTxData+0x104>
    	AppData.Buffer[i++] = (uint8_t)((acc_x >> 24) & 0xFF);
 8002e12:	4b57      	ldr	r3, [pc, #348]	; (8002f70 <SendTxData+0x1d8>)
 8002e14:	6858      	ldr	r0, [r3, #4]
 8002e16:	0e0c      	lsrs	r4, r1, #24
 8002e18:	7044      	strb	r4, [r0, #1]
		AppData.Buffer[i++] = (uint8_t)((acc_x >> 16) & 0xFF);
 8002e1a:	6858      	ldr	r0, [r3, #4]
 8002e1c:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8002e20:	7084      	strb	r4, [r0, #2]
		AppData.Buffer[i++] = (uint8_t)((acc_x >> 8) & 0xFF);
 8002e22:	6858      	ldr	r0, [r3, #4]
 8002e24:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8002e28:	70c4      	strb	r4, [r0, #3]
		AppData.Buffer[i++] = (uint8_t)(acc_x & 0xFF);
 8002e2a:	6858      	ldr	r0, [r3, #4]
 8002e2c:	7101      	strb	r1, [r0, #4]
		AppData.Buffer[i++] = (uint8_t)((acc_y >> 24) & 0xFF);
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	0e10      	lsrs	r0, r2, #24
 8002e32:	7148      	strb	r0, [r1, #5]
		AppData.Buffer[i++] = (uint8_t)((acc_y >> 16) & 0xFF);
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8002e3a:	7188      	strb	r0, [r1, #6]
		AppData.Buffer[i++] = (uint8_t)((acc_y >> 8) & 0xFF);
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8002e42:	71c8      	strb	r0, [r1, #7]
		AppData.Buffer[i++] = (uint8_t)(acc_y & 0xFF);
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	721a      	strb	r2, [r3, #8]
 8002e48:	2409      	movs	r4, #9
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002e4a:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <SendTxData+0x1e4>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d003      	beq.n	8002e5a <SendTxData+0xc2>
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <SendTxData+0xc2>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d130      	bne.n	8002ebc <SendTxData+0x124>
      AppData.Buffer[i++] = 0;
 8002e5a:	4a45      	ldr	r2, [pc, #276]	; (8002f70 <SendTxData+0x1d8>)
 8002e5c:	6850      	ldr	r0, [r2, #4]
 8002e5e:	1c61      	adds	r1, r4, #1
 8002e60:	2300      	movs	r3, #0
 8002e62:	5503      	strb	r3, [r0, r4]
      AppData.Buffer[i++] = 0;
 8002e64:	6855      	ldr	r5, [r2, #4]
 8002e66:	1ca0      	adds	r0, r4, #2
 8002e68:	546b      	strb	r3, [r5, r1]
      AppData.Buffer[i++] = 0;
 8002e6a:	6855      	ldr	r5, [r2, #4]
 8002e6c:	1ce1      	adds	r1, r4, #3
 8002e6e:	542b      	strb	r3, [r5, r0]
      AppData.Buffer[i++] = 0;
 8002e70:	6852      	ldr	r2, [r2, #4]
 8002e72:	3404      	adds	r4, #4
 8002e74:	5453      	strb	r3, [r2, r1]
    AppData.BufferSize = i;
 8002e76:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <SendTxData+0x1d8>)
 8002e78:	705c      	strb	r4, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <SendTxData+0x1e8>)
 8002e7c:	7a5b      	ldrb	r3, [r3, #9]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d146      	bne.n	8002f10 <SendTxData+0x178>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002e82:	2200      	movs	r2, #0
 8002e84:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <SendTxData+0x1e4>)
 8002e86:	78d9      	ldrb	r1, [r3, #3]
 8002e88:	4839      	ldr	r0, [pc, #228]	; (8002f70 <SendTxData+0x1d8>)
 8002e8a:	f005 ff57 	bl	8008d3c <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d04c      	beq.n	8002f2c <SendTxData+0x194>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002e92:	f110 0f06 	cmn.w	r0, #6
 8002e96:	d051      	beq.n	8002f3c <SendTxData+0x1a4>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002e98:	2500      	movs	r5, #0
 8002e9a:	e786      	b.n	8002daa <SendTxData+0x12>
        AppData.Buffer[i++] = (uint8_t)((gyr_y >> 24) & 0xFF);
 8002e9c:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <SendTxData+0x1d8>)
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	0e01      	lsrs	r1, r0, #24
 8002ea2:	7051      	strb	r1, [r2, #1]
        AppData.Buffer[i++] = (uint8_t)((gyr_y >> 16) & 0xFF);
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8002eaa:	7091      	strb	r1, [r2, #2]
        AppData.Buffer[i++] = (uint8_t)((gyr_y >> 8) & 0xFF);
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8002eb2:	70d1      	strb	r1, [r2, #3]
        AppData.Buffer[i++] = (uint8_t)(gyr_y & 0xFF);
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	7118      	strb	r0, [r3, #4]
 8002eb8:	2405      	movs	r4, #5
 8002eba:	e7c6      	b.n	8002e4a <SendTxData+0xb2>
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002ebc:	4d2c      	ldr	r5, [pc, #176]	; (8002f70 <SendTxData+0x1d8>)
 8002ebe:	686f      	ldr	r7, [r5, #4]
 8002ec0:	1c66      	adds	r6, r4, #1
 8002ec2:	f7ff f82d 	bl	8001f20 <GetBatteryLevel>
 8002ec6:	5538      	strb	r0, [r7, r4]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002ec8:	6869      	ldr	r1, [r5, #4]
 8002eca:	1ca2      	adds	r2, r4, #2
 8002ecc:	2300      	movs	r3, #0
 8002ece:	558b      	strb	r3, [r1, r6]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002ed0:	6868      	ldr	r0, [r5, #4]
 8002ed2:	1ce1      	adds	r1, r4, #3
 8002ed4:	5483      	strb	r3, [r0, r2]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002ed6:	6868      	ldr	r0, [r5, #4]
 8002ed8:	1d22      	adds	r2, r4, #4
 8002eda:	f04f 0c1c 	mov.w	ip, #28
 8002ede:	f800 c001 	strb.w	ip, [r0, r1]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002ee2:	6868      	ldr	r0, [r5, #4]
 8002ee4:	1d61      	adds	r1, r4, #5
 8002ee6:	5483      	strb	r3, [r0, r2]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002ee8:	6868      	ldr	r0, [r5, #4]
 8002eea:	1da2      	adds	r2, r4, #6
 8002eec:	f04f 0c03 	mov.w	ip, #3
 8002ef0:	f800 c001 	strb.w	ip, [r0, r1]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002ef4:	6868      	ldr	r0, [r5, #4]
 8002ef6:	1de1      	adds	r1, r4, #7
 8002ef8:	f04f 0ce8 	mov.w	ip, #232	; 0xe8
 8002efc:	f800 c002 	strb.w	ip, [r0, r2]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002f00:	6868      	ldr	r0, [r5, #4]
 8002f02:	f104 0208 	add.w	r2, r4, #8
 8002f06:	5443      	strb	r3, [r0, r1]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002f08:	6869      	ldr	r1, [r5, #4]
 8002f0a:	3409      	adds	r4, #9
 8002f0c:	548b      	strb	r3, [r1, r2]
 8002f0e:	e7b2      	b.n	8002e76 <SendTxData+0xde>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002f10:	f005 feec 	bl	8008cec <LmHandlerJoinStatus>
 8002f14:	2801      	cmp	r0, #1
 8002f16:	d1b4      	bne.n	8002e82 <SendTxData+0xea>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002f18:	4819      	ldr	r0, [pc, #100]	; (8002f80 <SendTxData+0x1e8>)
 8002f1a:	f010 fc1d 	bl	8013758 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f24:	4817      	ldr	r0, [pc, #92]	; (8002f84 <SendTxData+0x1ec>)
 8002f26:	f002 f9bb 	bl	80052a0 <HAL_GPIO_WritePin>
 8002f2a:	e7aa      	b.n	8002e82 <SendTxData+0xea>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <SendTxData+0x1f0>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	2100      	movs	r1, #0
 8002f32:	4610      	mov	r0, r2
 8002f34:	f010 f8be 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002f38:	2500      	movs	r5, #0
 8002f3a:	e736      	b.n	8002daa <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002f3c:	f005 fed0 	bl	8008ce0 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002f40:	4605      	mov	r5, r0
 8002f42:	2800      	cmp	r0, #0
 8002f44:	f43f af31 	beq.w	8002daa <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <SendTxData+0x1f4>)
 8002f4a:	fba3 2300 	umull	r2, r3, r3, r0
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <SendTxData+0x1f8>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	2100      	movs	r1, #0
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f010 f8ab 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
 8002f5e:	e724      	b.n	8002daa <SendTxData+0x12>
 8002f60:	200006a8 	.word	0x200006a8
 8002f64:	20000070 	.word	0x20000070
 8002f68:	08016a6c 	.word	0x08016a6c
 8002f6c:	08016a78 	.word	0x08016a78
 8002f70:	20000004 	.word	0x20000004
 8002f74:	20000646 	.word	0x20000646
 8002f78:	200006c0 	.word	0x200006c0
 8002f7c:	20000058 	.word	0x20000058
 8002f80:	20000648 	.word	0x20000648
 8002f84:	48000400 	.word	0x48000400
 8002f88:	08016a84 	.word	0x08016a84
 8002f8c:	10624dd3 	.word	0x10624dd3
 8002f90:	08016a94 	.word	0x08016a94

08002f94 <OnJoinTimerLedEvent>:
{
 8002f94:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f9a:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <OnJoinTimerLedEvent+0x10>)
 8002f9c:	f002 f985 	bl	80052aa <HAL_GPIO_TogglePin>
}
 8002fa0:	bd08      	pop	{r3, pc}
 8002fa2:	bf00      	nop
 8002fa4:	48000400 	.word	0x48000400

08002fa8 <LoRaWAN_Init>:
{
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8002fac:	2400      	movs	r4, #0
 8002fae:	9405      	str	r4, [sp, #20]
  LSM6DSO_USER_Init();
 8002fb0:	f7ff fbd4 	bl	800275c <LSM6DSO_USER_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002fb4:	9402      	str	r4, [sp, #8]
 8002fb6:	2703      	movs	r7, #3
 8002fb8:	9701      	str	r7, [sp, #4]
 8002fba:	2601      	movs	r6, #1
 8002fbc:	9600      	str	r6, [sp, #0]
 8002fbe:	4b4f      	ldr	r3, [pc, #316]	; (80030fc <LoRaWAN_Init+0x154>)
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	f010 f875 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002fca:	9402      	str	r4, [sp, #8]
 8002fcc:	2305      	movs	r3, #5
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	2502      	movs	r5, #2
 8002fd2:	9500      	str	r5, [sp, #0]
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <LoRaWAN_Init+0x158>)
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	4621      	mov	r1, r4
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f010 f86a 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002fe0:	9402      	str	r4, [sp, #8]
 8002fe2:	9701      	str	r7, [sp, #4]
 8002fe4:	9600      	str	r6, [sp, #0]
 8002fe6:	4b47      	ldr	r3, [pc, #284]	; (8003104 <LoRaWAN_Init+0x15c>)
 8002fe8:	4622      	mov	r2, r4
 8002fea:	4621      	mov	r1, r4
 8002fec:	4628      	mov	r0, r5
 8002fee:	f010 f861 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002ff2:	a905      	add	r1, sp, #20
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f006 f99d 	bl	8009334 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002ffa:	9b05      	ldr	r3, [sp, #20]
 8002ffc:	0e1a      	lsrs	r2, r3, #24
 8002ffe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003002:	9102      	str	r1, [sp, #8]
 8003004:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	9200      	str	r2, [sp, #0]
 800300c:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <LoRaWAN_Init+0x160>)
 800300e:	4622      	mov	r2, r4
 8003010:	4621      	mov	r1, r4
 8003012:	4628      	mov	r0, r5
 8003014:	f010 f84e 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8003018:	a905      	add	r1, sp, #20
 800301a:	4630      	mov	r0, r6
 800301c:	f006 f98a 	bl	8009334 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8003020:	9b05      	ldr	r3, [sp, #20]
 8003022:	0e1a      	lsrs	r2, r3, #24
 8003024:	b2d9      	uxtb	r1, r3
 8003026:	9103      	str	r1, [sp, #12]
 8003028:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800302c:	9102      	str	r1, [sp, #8]
 800302e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	9200      	str	r2, [sp, #0]
 8003036:	4b35      	ldr	r3, [pc, #212]	; (800310c <LoRaWAN_Init+0x164>)
 8003038:	4622      	mov	r2, r4
 800303a:	4621      	mov	r1, r4
 800303c:	4628      	mov	r0, r5
 800303e:	f010 f839 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003042:	9400      	str	r4, [sp, #0]
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <LoRaWAN_Init+0x168>)
 8003046:	4622      	mov	r2, r4
 8003048:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800304c:	4831      	ldr	r0, [pc, #196]	; (8003114 <LoRaWAN_Init+0x16c>)
 800304e:	f010 fb25 	bl	801369c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8003052:	9400      	str	r4, [sp, #0]
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <LoRaWAN_Init+0x170>)
 8003056:	4622      	mov	r2, r4
 8003058:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800305c:	482f      	ldr	r0, [pc, #188]	; (800311c <LoRaWAN_Init+0x174>)
 800305e:	f010 fb1d 	bl	801369c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8003062:	9400      	str	r4, [sp, #0]
 8003064:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <LoRaWAN_Init+0x178>)
 8003066:	4632      	mov	r2, r6
 8003068:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800306c:	482d      	ldr	r0, [pc, #180]	; (8003124 <LoRaWAN_Init+0x17c>)
 800306e:	f010 fb15 	bl	801369c <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8003072:	4620      	mov	r0, r4
 8003074:	f7fe fbec 	bl	8001850 <FLASH_IF_Init>
 8003078:	2800      	cmp	r0, #0
 800307a:	d13b      	bne.n	80030f4 <LoRaWAN_Init+0x14c>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800307c:	2400      	movs	r4, #0
 800307e:	9400      	str	r4, [sp, #0]
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <LoRaWAN_Init+0x180>)
 8003082:	4622      	mov	r2, r4
 8003084:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003088:	4828      	ldr	r0, [pc, #160]	; (800312c <LoRaWAN_Init+0x184>)
 800308a:	f010 fb07 	bl	801369c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800308e:	4a28      	ldr	r2, [pc, #160]	; (8003130 <LoRaWAN_Init+0x188>)
 8003090:	4621      	mov	r1, r4
 8003092:	2001      	movs	r0, #1
 8003094:	f010 fa02 	bl	801349c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8003098:	4a26      	ldr	r2, [pc, #152]	; (8003134 <LoRaWAN_Init+0x18c>)
 800309a:	4621      	mov	r1, r4
 800309c:	2002      	movs	r0, #2
 800309e:	f010 f9fd 	bl	801349c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80030a2:	4a25      	ldr	r2, [pc, #148]	; (8003138 <LoRaWAN_Init+0x190>)
 80030a4:	4621      	mov	r1, r4
 80030a6:	2004      	movs	r0, #4
 80030a8:	f010 f9f8 	bl	801349c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80030ac:	4a23      	ldr	r2, [pc, #140]	; (800313c <LoRaWAN_Init+0x194>)
 80030ae:	4621      	mov	r1, r4
 80030b0:	2008      	movs	r0, #8
 80030b2:	f010 f9f3 	bl	801349c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80030b6:	f000 f861 	bl	800317c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80030ba:	4921      	ldr	r1, [pc, #132]	; (8003140 <LoRaWAN_Init+0x198>)
 80030bc:	4821      	ldr	r0, [pc, #132]	; (8003144 <LoRaWAN_Init+0x19c>)
 80030be:	f006 f8ed 	bl	800929c <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80030c2:	4821      	ldr	r0, [pc, #132]	; (8003148 <LoRaWAN_Init+0x1a0>)
 80030c4:	f005 ffc4 	bl	8009050 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80030c8:	4816      	ldr	r0, [pc, #88]	; (8003124 <LoRaWAN_Init+0x17c>)
 80030ca:	f010 fb9f 	bl	801380c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80030ce:	4621      	mov	r1, r4
 80030d0:	4b1e      	ldr	r3, [pc, #120]	; (800314c <LoRaWAN_Init+0x1a4>)
 80030d2:	7818      	ldrb	r0, [r3, #0]
 80030d4:	f005 fd78 	bl	8008bc8 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80030d8:	4d1d      	ldr	r5, [pc, #116]	; (8003150 <LoRaWAN_Init+0x1a8>)
 80030da:	9400      	str	r4, [sp, #0]
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <LoRaWAN_Init+0x1ac>)
 80030de:	4622      	mov	r2, r4
 80030e0:	491d      	ldr	r1, [pc, #116]	; (8003158 <LoRaWAN_Init+0x1b0>)
 80030e2:	6809      	ldr	r1, [r1, #0]
 80030e4:	4628      	mov	r0, r5
 80030e6:	f010 fad9 	bl	801369c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80030ea:	4628      	mov	r0, r5
 80030ec:	f010 fb8e 	bl	801380c <UTIL_TIMER_Start>
}
 80030f0:	b007      	add	sp, #28
 80030f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80030f4:	f7fe fc7e 	bl	80019f4 <Error_Handler>
 80030f8:	e7c0      	b.n	800307c <LoRaWAN_Init+0xd4>
 80030fa:	bf00      	nop
 80030fc:	08016ab4 	.word	0x08016ab4
 8003100:	08016ad8 	.word	0x08016ad8
 8003104:	08016afc 	.word	0x08016afc
 8003108:	08016b20 	.word	0x08016b20
 800310c:	08016b44 	.word	0x08016b44
 8003110:	08002b75 	.word	0x08002b75
 8003114:	20000690 	.word	0x20000690
 8003118:	08002b61 	.word	0x08002b61
 800311c:	20000660 	.word	0x20000660
 8003120:	08002f95 	.word	0x08002f95
 8003124:	20000648 	.word	0x20000648
 8003128:	08002b1d 	.word	0x08002b1d
 800312c:	20000678 	.word	0x20000678
 8003130:	08008e49 	.word	0x08008e49
 8003134:	08002d99 	.word	0x08002d99
 8003138:	08002d61 	.word	0x08002d61
 800313c:	08002cc5 	.word	0x08002cc5
 8003140:	01030000 	.word	0x01030000
 8003144:	2000000c 	.word	0x2000000c
 8003148:	20000058 	.word	0x20000058
 800314c:	20000000 	.word	0x20000000
 8003150:	200006a8 	.word	0x200006a8
 8003154:	0800294d 	.word	0x0800294d
 8003158:	20000070 	.word	0x20000070

0800315c <HAL_GPIO_EXTI_Callback>:
{
 800315c:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 800315e:	2802      	cmp	r0, #2
 8003160:	d002      	beq.n	8003168 <HAL_GPIO_EXTI_Callback+0xc>
 8003162:	2840      	cmp	r0, #64	; 0x40
 8003164:	d005      	beq.n	8003172 <HAL_GPIO_EXTI_Callback+0x16>
}
 8003166:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8003168:	2100      	movs	r1, #0
 800316a:	2008      	movs	r0, #8
 800316c:	f010 f8cc 	bl	8013308 <UTIL_SEQ_SetTask>
      break;
 8003170:	e7f9      	b.n	8003166 <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8003172:	2100      	movs	r1, #0
 8003174:	2004      	movs	r0, #4
 8003176:	f010 f8c7 	bl	8013308 <UTIL_SEQ_SetTask>
}
 800317a:	e7f4      	b.n	8003166 <HAL_GPIO_EXTI_Callback+0xa>

0800317c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <LoraInfo_Init+0x1c>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8003182:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003184:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8003186:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8003188:	2220      	movs	r2, #32
 800318a:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800318c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8003190:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003196:	4770      	bx	lr
 8003198:	200006c4 	.word	0x200006c4

0800319c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 800319c:	4800      	ldr	r0, [pc, #0]	; (80031a0 <LoraInfo_GetPtr+0x4>)
 800319e:	4770      	bx	lr
 80031a0:	200006c4 	.word	0x200006c4

080031a4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80031a4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80031a6:	f000 fd2b 	bl	8003c00 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80031aa:	bd08      	pop	{r3, pc}

080031ac <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80031ac:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80031ae:	f000 fd69 	bl	8003c84 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80031b2:	bd08      	pop	{r3, pc}

080031b4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80031b4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80031b6:	f000 fdb3 	bl	8003d20 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80031ba:	bd08      	pop	{r3, pc}

080031bc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80031bc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80031be:	f000 fdb1 	bl	8003d24 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80031c2:	bd08      	pop	{r3, pc}

080031c4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80031c4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80031c6:	f000 fdaf 	bl	8003d28 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80031ca:	bd08      	pop	{r3, pc}

080031cc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80031cc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80031ce:	f000 fdad 	bl	8003d2c <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80031d2:	bd08      	pop	{r3, pc}

080031d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031d8:	f000 fdad 	bl	8003d36 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031dc:	480c      	ldr	r0, [pc, #48]	; (8003210 <LoopForever+0x6>)
  ldr r1, =_edata
 80031de:	490d      	ldr	r1, [pc, #52]	; (8003214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <LoopForever+0xe>)
  movs r3, #0
 80031e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e4:	e002      	b.n	80031ec <LoopCopyDataInit>

080031e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ea:	3304      	adds	r3, #4

080031ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031f0:	d3f9      	bcc.n	80031e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <LoopForever+0x12>)
  ldr r4, =_ebss
 80031f4:	4c0a      	ldr	r4, [pc, #40]	; (8003220 <LoopForever+0x16>)
  movs r3, #0
 80031f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f8:	e001      	b.n	80031fe <LoopFillZerobss>

080031fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031fc:	3204      	adds	r2, #4

080031fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003200:	d3fb      	bcc.n	80031fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003202:	f011 fac3 	bl	801478c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003206:	f7fe fc3e 	bl	8001a86 <main>

0800320a <LoopForever>:

LoopForever:
    b LoopForever
 800320a:	e7fe      	b.n	800320a <LoopForever>
  ldr   r0, =_estack
 800320c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003214:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8003218:	08017900 	.word	0x08017900
  ldr r2, =_sbss
 800321c:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8003220:	20001a08 	.word	0x20001a08

08003224 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003224:	e7fe      	b.n	8003224 <ADC_IRQHandler>

08003226 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003226:	b510      	push	{r4, lr}
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003228:	6944      	ldr	r4, [r0, #20]
 800322a:	7b00      	ldrb	r0, [r0, #12]
 800322c:	47a0      	blx	r4
}
 800322e:	bd10      	pop	{r4, pc}

08003230 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003230:	b510      	push	{r4, lr}
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003232:	6904      	ldr	r4, [r0, #16]
 8003234:	7b00      	ldrb	r0, [r0, #12]
 8003236:	47a0      	blx	r4
}
 8003238:	bd10      	pop	{r4, pc}

0800323a <LSM6DSO16IS_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 800323a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <LSM6DSO16IS_ACC_Enable+0xc>
    ret = LSM6DSO16IS_OK;
 8003242:	2000      	movs	r0, #0
}
 8003244:	4770      	bx	lr
{
 8003246:	b510      	push	{r4, lr}
 8003248:	4604      	mov	r4, r0
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 800324a:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 800324e:	3020      	adds	r0, #32
 8003250:	f000 fac5 	bl	80037de <lsm6dso16is_xl_data_rate_set>
 8003254:	b108      	cbz	r0, 800325a <LSM6DSO16IS_ACC_Enable+0x20>
      ret = LSM6DSO16IS_ERROR;
 8003256:	f04f 30ff 	mov.w	r0, #4294967295
    pObj->acc_is_enabled = 1;
 800325a:	2301      	movs	r3, #1
 800325c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8003260:	bd10      	pop	{r4, pc}

08003262 <LSM6DSO16IS_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8003262:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <LSM6DSO16IS_GYRO_Enable+0xc>
    ret = LSM6DSO16IS_OK;
 800326a:	2000      	movs	r0, #0
}
 800326c:	4770      	bx	lr
{
 800326e:	b510      	push	{r4, lr}
 8003270:	4604      	mov	r4, r0
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8003272:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8003276:	3020      	adds	r0, #32
 8003278:	f000 fbb4 	bl	80039e4 <lsm6dso16is_gy_data_rate_set>
 800327c:	b108      	cbz	r0, 8003282 <LSM6DSO16IS_GYRO_Enable+0x20>
      ret = LSM6DSO16IS_ERROR;
 800327e:	f04f 30ff 	mov.w	r0, #4294967295
    pObj->gyro_is_enabled = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8003288:	bd10      	pop	{r4, pc}

0800328a <LSM6DSO16IS_ReadID>:
{
 800328a:	b508      	push	{r3, lr}
  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 800328c:	3020      	adds	r0, #32
 800328e:	f000 fa4b 	bl	8003728 <lsm6dso16is_device_id_get>
 8003292:	b900      	cbnz	r0, 8003296 <LSM6DSO16IS_ReadID+0xc>
}
 8003294:	bd08      	pop	{r3, pc}
    ret = LSM6DSO16IS_ERROR;
 8003296:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800329a:	e7fb      	b.n	8003294 <LSM6DSO16IS_ReadID+0xa>

0800329c <LSM6DSO16IS_ACC_GetOutputDataRate>:
{
 800329c:	b510      	push	{r4, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	460c      	mov	r4, r1
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 80032a2:	f10d 0107 	add.w	r1, sp, #7
 80032a6:	3020      	adds	r0, #32
 80032a8:	f000 fac2 	bl	8003830 <lsm6dso16is_xl_data_rate_get>
 80032ac:	b108      	cbz	r0, 80032b2 <LSM6DSO16IS_ACC_GetOutputDataRate+0x16>
    ret = LSM6DSO16IS_ERROR;
 80032ae:	f04f 30ff 	mov.w	r0, #4294967295
  switch (odr_low_level)
 80032b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032b6:	2b0a      	cmp	r3, #10
 80032b8:	d829      	bhi.n	800330e <LSM6DSO16IS_ACC_GetOutputDataRate+0x72>
 80032ba:	e8df f003 	tbb	[pc, r3]
 80032be:	0a06      	.short	0x0a06
 80032c0:	1613100d 	.word	0x1613100d
 80032c4:	221f1c19 	.word	0x221f1c19
 80032c8:	25          	.byte	0x25
 80032c9:	00          	.byte	0x00
      *Odr = 0.0f;
 80032ca:	2300      	movs	r3, #0
 80032cc:	6023      	str	r3, [r4, #0]
}
 80032ce:	b002      	add	sp, #8
 80032d0:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <LSM6DSO16IS_ACC_GetOutputDataRate+0x78>)
 80032d4:	6023      	str	r3, [r4, #0]
      break;
 80032d6:	e7fa      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 26.0f;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <LSM6DSO16IS_ACC_GetOutputDataRate+0x7c>)
 80032da:	6023      	str	r3, [r4, #0]
      break;
 80032dc:	e7f7      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 52.0f;
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <LSM6DSO16IS_ACC_GetOutputDataRate+0x80>)
 80032e0:	6023      	str	r3, [r4, #0]
      break;
 80032e2:	e7f4      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 104.0f;
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <LSM6DSO16IS_ACC_GetOutputDataRate+0x84>)
 80032e6:	6023      	str	r3, [r4, #0]
      break;
 80032e8:	e7f1      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 208.0f;
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <LSM6DSO16IS_ACC_GetOutputDataRate+0x88>)
 80032ec:	6023      	str	r3, [r4, #0]
      break;
 80032ee:	e7ee      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 416.0f;
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <LSM6DSO16IS_ACC_GetOutputDataRate+0x8c>)
 80032f2:	6023      	str	r3, [r4, #0]
      break;
 80032f4:	e7eb      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 833.0f;
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <LSM6DSO16IS_ACC_GetOutputDataRate+0x90>)
 80032f8:	6023      	str	r3, [r4, #0]
      break;
 80032fa:	e7e8      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 1667.0f;
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <LSM6DSO16IS_ACC_GetOutputDataRate+0x94>)
 80032fe:	6023      	str	r3, [r4, #0]
      break;
 8003300:	e7e5      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 3333.0f;
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <LSM6DSO16IS_ACC_GetOutputDataRate+0x98>)
 8003304:	6023      	str	r3, [r4, #0]
      break;
 8003306:	e7e2      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
      *Odr = 6667.0f;
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <LSM6DSO16IS_ACC_GetOutputDataRate+0x9c>)
 800330a:	6023      	str	r3, [r4, #0]
      break;
 800330c:	e7df      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
  switch (odr_low_level)
 800330e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003312:	e7dc      	b.n	80032ce <LSM6DSO16IS_ACC_GetOutputDataRate+0x32>
 8003314:	41480000 	.word	0x41480000
 8003318:	41d00000 	.word	0x41d00000
 800331c:	42500000 	.word	0x42500000
 8003320:	42d00000 	.word	0x42d00000
 8003324:	43500000 	.word	0x43500000
 8003328:	43d00000 	.word	0x43d00000
 800332c:	44504000 	.word	0x44504000
 8003330:	44d06000 	.word	0x44d06000
 8003334:	45505000 	.word	0x45505000
 8003338:	45d05800 	.word	0x45d05800

0800333c <LSM6DSO16IS_ACC_GetSensitivity>:
{
 800333c:	b510      	push	{r4, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	460c      	mov	r4, r1
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8003342:	f10d 0107 	add.w	r1, sp, #7
 8003346:	3020      	adds	r0, #32
 8003348:	f000 fa27 	bl	800379a <lsm6dso16is_xl_full_scale_get>
 800334c:	b108      	cbz	r0, 8003352 <LSM6DSO16IS_ACC_GetSensitivity+0x16>
    ret = LSM6DSO16IS_ERROR;
 800334e:	f04f 30ff 	mov.w	r0, #4294967295
  switch (full_scale)
 8003352:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d810      	bhi.n	800337c <LSM6DSO16IS_ACC_GetSensitivity+0x40>
 800335a:	e8df f003 	tbb	[pc, r3]
 800335e:	0c02      	.short	0x0c02
 8003360:	0906      	.short	0x0906
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <LSM6DSO16IS_ACC_GetSensitivity+0x48>)
 8003364:	6023      	str	r3, [r4, #0]
}
 8003366:	b002      	add	sp, #8
 8003368:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <LSM6DSO16IS_ACC_GetSensitivity+0x4c>)
 800336c:	6023      	str	r3, [r4, #0]
      break;
 800336e:	e7fa      	b.n	8003366 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <LSM6DSO16IS_ACC_GetSensitivity+0x50>)
 8003372:	6023      	str	r3, [r4, #0]
      break;
 8003374:	e7f7      	b.n	8003366 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <LSM6DSO16IS_ACC_GetSensitivity+0x54>)
 8003378:	6023      	str	r3, [r4, #0]
      break;
 800337a:	e7f4      	b.n	8003366 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  switch (full_scale)
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003380:	e7f1      	b.n	8003366 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
 8003382:	bf00      	nop
 8003384:	3d79db23 	.word	0x3d79db23
 8003388:	3df9db23 	.word	0x3df9db23
 800338c:	3e79db23 	.word	0x3e79db23
 8003390:	3ef9db23 	.word	0x3ef9db23

08003394 <LSM6DSO16IS_ACC_GetAxes>:
{
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	4605      	mov	r5, r0
 800339a:	460c      	mov	r4, r1
  float_t sensitivity = 0.0f;
 800339c:	2300      	movs	r3, #0
 800339e:	9301      	str	r3, [sp, #4]
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80033a0:	a902      	add	r1, sp, #8
 80033a2:	3020      	adds	r0, #32
 80033a4:	f000 fc09 	bl	8003bba <lsm6dso16is_acceleration_raw_get>
 80033a8:	4606      	mov	r6, r0
 80033aa:	b108      	cbz	r0, 80033b0 <LSM6DSO16IS_ACC_GetAxes+0x1c>
    ret = LSM6DSO16IS_ERROR;
 80033ac:	f04f 36ff 	mov.w	r6, #4294967295
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 80033b0:	a901      	add	r1, sp, #4
 80033b2:	4628      	mov	r0, r5
 80033b4:	f7ff ffc2 	bl	800333c <LSM6DSO16IS_ACC_GetSensitivity>
 80033b8:	bb10      	cbnz	r0, 8003400 <LSM6DSO16IS_ACC_GetAxes+0x6c>
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 80033ba:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80033be:	f7fd fc85 	bl	8000ccc <__aeabi_i2f>
 80033c2:	9901      	ldr	r1, [sp, #4]
 80033c4:	f7fd fcd6 	bl	8000d74 <__aeabi_fmul>
 80033c8:	f7fd fe24 	bl	8001014 <__aeabi_f2iz>
 80033cc:	6020      	str	r0, [r4, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 80033ce:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 80033d2:	f7fd fc7b 	bl	8000ccc <__aeabi_i2f>
 80033d6:	9d01      	ldr	r5, [sp, #4]
 80033d8:	4629      	mov	r1, r5
 80033da:	f7fd fccb 	bl	8000d74 <__aeabi_fmul>
 80033de:	f7fd fe19 	bl	8001014 <__aeabi_f2iz>
 80033e2:	6060      	str	r0, [r4, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 80033e4:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80033e8:	f7fd fc70 	bl	8000ccc <__aeabi_i2f>
 80033ec:	4601      	mov	r1, r0
 80033ee:	4628      	mov	r0, r5
 80033f0:	f7fd fcc0 	bl	8000d74 <__aeabi_fmul>
 80033f4:	f7fd fe0e 	bl	8001014 <__aeabi_f2iz>
 80033f8:	60a0      	str	r0, [r4, #8]
}
 80033fa:	4630      	mov	r0, r6
 80033fc:	b004      	add	sp, #16
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
    ret = LSM6DSO16IS_ERROR;
 8003400:	f04f 36ff 	mov.w	r6, #4294967295
 8003404:	e7d9      	b.n	80033ba <LSM6DSO16IS_ACC_GetAxes+0x26>
	...

08003408 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
{
 8003408:	b510      	push	{r4, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	460c      	mov	r4, r1
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 800340e:	f10d 0107 	add.w	r1, sp, #7
 8003412:	3020      	adds	r0, #32
 8003414:	f000 fb0f 	bl	8003a36 <lsm6dso16is_gy_data_rate_get>
 8003418:	b108      	cbz	r0, 800341e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x16>
    ret = LSM6DSO16IS_ERROR;
 800341a:	f04f 30ff 	mov.w	r0, #4294967295
  switch (odr_low_level)
 800341e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003422:	2b0a      	cmp	r3, #10
 8003424:	d829      	bhi.n	800347a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x72>
 8003426:	e8df f003 	tbb	[pc, r3]
 800342a:	0a06      	.short	0x0a06
 800342c:	1613100d 	.word	0x1613100d
 8003430:	221f1c19 	.word	0x221f1c19
 8003434:	25          	.byte	0x25
 8003435:	00          	.byte	0x00
      *Odr = 0.0f;
 8003436:	2300      	movs	r3, #0
 8003438:	6023      	str	r3, [r4, #0]
}
 800343a:	b002      	add	sp, #8
 800343c:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x78>)
 8003440:	6023      	str	r3, [r4, #0]
      break;
 8003442:	e7fa      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr = 26.0f;
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x7c>)
 8003446:	6023      	str	r3, [r4, #0]
      break;
 8003448:	e7f7      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr = 52.0f;
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x80>)
 800344c:	6023      	str	r3, [r4, #0]
      break;
 800344e:	e7f4      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr = 104.0f;
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x84>)
 8003452:	6023      	str	r3, [r4, #0]
      break;
 8003454:	e7f1      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr = 208.0f;
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x88>)
 8003458:	6023      	str	r3, [r4, #0]
      break;
 800345a:	e7ee      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr = 416.0f;
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x8c>)
 800345e:	6023      	str	r3, [r4, #0]
      break;
 8003460:	e7eb      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr = 833.0f;
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x90>)
 8003464:	6023      	str	r3, [r4, #0]
      break;
 8003466:	e7e8      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr =  1667.0f;
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x94>)
 800346a:	6023      	str	r3, [r4, #0]
      break;
 800346c:	e7e5      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr =  3333.0f;
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x98>)
 8003470:	6023      	str	r3, [r4, #0]
      break;
 8003472:	e7e2      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
      *Odr =  6667.0f;
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x9c>)
 8003476:	6023      	str	r3, [r4, #0]
      break;
 8003478:	e7df      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
  switch (odr_low_level)
 800347a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800347e:	e7dc      	b.n	800343a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x32>
 8003480:	41480000 	.word	0x41480000
 8003484:	41d00000 	.word	0x41d00000
 8003488:	42500000 	.word	0x42500000
 800348c:	42d00000 	.word	0x42d00000
 8003490:	43500000 	.word	0x43500000
 8003494:	43d00000 	.word	0x43d00000
 8003498:	44504000 	.word	0x44504000
 800349c:	44d06000 	.word	0x44d06000
 80034a0:	45505000 	.word	0x45505000
 80034a4:	45d05800 	.word	0x45d05800

080034a8 <LSM6DSO16IS_GYRO_GetSensitivity>:
{
 80034a8:	b510      	push	{r4, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	460c      	mov	r4, r1
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 80034ae:	f10d 0107 	add.w	r1, sp, #7
 80034b2:	3020      	adds	r0, #32
 80034b4:	f000 fa66 	bl	8003984 <lsm6dso16is_gy_full_scale_get>
 80034b8:	4603      	mov	r3, r0
 80034ba:	b108      	cbz	r0, 80034c0 <LSM6DSO16IS_GYRO_GetSensitivity+0x18>
    ret = LSM6DSO16IS_ERROR;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
  switch (full_scale)
 80034c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80034c4:	2a10      	cmp	r2, #16
 80034c6:	d819      	bhi.n	80034fc <LSM6DSO16IS_GYRO_GetSensitivity+0x54>
 80034c8:	e8df f002 	tbb	[pc, r2]
 80034cc:	15120f0c 	.word	0x15120f0c
 80034d0:	18181818 	.word	0x18181818
 80034d4:	18181818 	.word	0x18181818
 80034d8:	18181818 	.word	0x18181818
 80034dc:	09          	.byte	0x09
 80034dd:	00          	.byte	0x00
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <LSM6DSO16IS_GYRO_GetSensitivity+0x60>)
 80034e0:	6022      	str	r2, [r4, #0]
      break;
 80034e2:	e00d      	b.n	8003500 <LSM6DSO16IS_GYRO_GetSensitivity+0x58>
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <LSM6DSO16IS_GYRO_GetSensitivity+0x64>)
 80034e6:	6022      	str	r2, [r4, #0]
      break;
 80034e8:	e00a      	b.n	8003500 <LSM6DSO16IS_GYRO_GetSensitivity+0x58>
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <LSM6DSO16IS_GYRO_GetSensitivity+0x68>)
 80034ec:	6022      	str	r2, [r4, #0]
      break;
 80034ee:	e007      	b.n	8003500 <LSM6DSO16IS_GYRO_GetSensitivity+0x58>
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 80034f0:	4a08      	ldr	r2, [pc, #32]	; (8003514 <LSM6DSO16IS_GYRO_GetSensitivity+0x6c>)
 80034f2:	6022      	str	r2, [r4, #0]
      break;
 80034f4:	e004      	b.n	8003500 <LSM6DSO16IS_GYRO_GetSensitivity+0x58>
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 80034f6:	4a08      	ldr	r2, [pc, #32]	; (8003518 <LSM6DSO16IS_GYRO_GetSensitivity+0x70>)
 80034f8:	6022      	str	r2, [r4, #0]
      break;
 80034fa:	e001      	b.n	8003500 <LSM6DSO16IS_GYRO_GetSensitivity+0x58>
  switch (full_scale)
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003500:	4618      	mov	r0, r3
 8003502:	b002      	add	sp, #8
 8003504:	bd10      	pop	{r4, pc}
 8003506:	bf00      	nop
 8003508:	408c0000 	.word	0x408c0000
 800350c:	410c0000 	.word	0x410c0000
 8003510:	418c0000 	.word	0x418c0000
 8003514:	420c0000 	.word	0x420c0000
 8003518:	428c0000 	.word	0x428c0000

0800351c <LSM6DSO16IS_GYRO_GetAxes>:
{
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	4605      	mov	r5, r0
 8003522:	460c      	mov	r4, r1
  float_t sensitivity = 0.0f;
 8003524:	2300      	movs	r3, #0
 8003526:	9301      	str	r3, [sp, #4]
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8003528:	a902      	add	r1, sp, #8
 800352a:	3020      	adds	r0, #32
 800352c:	f000 fb23 	bl	8003b76 <lsm6dso16is_angular_rate_raw_get>
 8003530:	4606      	mov	r6, r0
 8003532:	b108      	cbz	r0, 8003538 <LSM6DSO16IS_GYRO_GetAxes+0x1c>
    ret = LSM6DSO16IS_ERROR;
 8003534:	f04f 36ff 	mov.w	r6, #4294967295
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8003538:	a901      	add	r1, sp, #4
 800353a:	4628      	mov	r0, r5
 800353c:	f7ff ffb4 	bl	80034a8 <LSM6DSO16IS_GYRO_GetSensitivity>
 8003540:	bb10      	cbnz	r0, 8003588 <LSM6DSO16IS_GYRO_GetAxes+0x6c>
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8003542:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8003546:	f7fd fbc1 	bl	8000ccc <__aeabi_i2f>
 800354a:	9901      	ldr	r1, [sp, #4]
 800354c:	f7fd fc12 	bl	8000d74 <__aeabi_fmul>
 8003550:	f7fd fd60 	bl	8001014 <__aeabi_f2iz>
 8003554:	6020      	str	r0, [r4, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8003556:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 800355a:	f7fd fbb7 	bl	8000ccc <__aeabi_i2f>
 800355e:	9d01      	ldr	r5, [sp, #4]
 8003560:	4629      	mov	r1, r5
 8003562:	f7fd fc07 	bl	8000d74 <__aeabi_fmul>
 8003566:	f7fd fd55 	bl	8001014 <__aeabi_f2iz>
 800356a:	6060      	str	r0, [r4, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 800356c:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8003570:	f7fd fbac 	bl	8000ccc <__aeabi_i2f>
 8003574:	4601      	mov	r1, r0
 8003576:	4628      	mov	r0, r5
 8003578:	f7fd fbfc 	bl	8000d74 <__aeabi_fmul>
 800357c:	f7fd fd4a 	bl	8001014 <__aeabi_f2iz>
 8003580:	60a0      	str	r0, [r4, #8]
}
 8003582:	4630      	mov	r0, r6
 8003584:	b004      	add	sp, #16
 8003586:	bd70      	pop	{r4, r5, r6, pc}
    ret = LSM6DSO16IS_ERROR;
 8003588:	f04f 36ff 	mov.w	r6, #4294967295
 800358c:	e7d9      	b.n	8003542 <LSM6DSO16IS_GYRO_GetAxes+0x26>

0800358e <LSM6DSO16IS_Write_Reg>:
{
 800358e:	b500      	push	{lr}
 8003590:	b083      	sub	sp, #12
 8003592:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8003596:	2301      	movs	r3, #1
 8003598:	f10d 0207 	add.w	r2, sp, #7
 800359c:	3020      	adds	r0, #32
 800359e:	f000 f896 	bl	80036ce <lsm6dso16is_write_reg>
 80035a2:	b910      	cbnz	r0, 80035aa <LSM6DSO16IS_Write_Reg+0x1c>
}
 80035a4:	b003      	add	sp, #12
 80035a6:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = LSM6DSO16IS_ERROR;
 80035aa:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80035ae:	e7f9      	b.n	80035a4 <LSM6DSO16IS_Write_Reg+0x16>

080035b0 <LSM6DSO16IS_RegisterBusIO>:
  if (pObj == NULL)
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d029      	beq.n	8003608 <LSM6DSO16IS_RegisterBusIO+0x58>
{
 80035b4:	b510      	push	{r4, lr}
 80035b6:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80035b8:	680b      	ldr	r3, [r1, #0]
 80035ba:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80035bc:	684a      	ldr	r2, [r1, #4]
 80035be:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80035c0:	688a      	ldr	r2, [r1, #8]
 80035c2:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80035c4:	7b0a      	ldrb	r2, [r1, #12]
 80035c6:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80035c8:	690a      	ldr	r2, [r1, #16]
 80035ca:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80035cc:	694a      	ldr	r2, [r1, #20]
 80035ce:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80035d0:	698a      	ldr	r2, [r1, #24]
 80035d2:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80035d4:	4a11      	ldr	r2, [pc, #68]	; (800361c <LSM6DSO16IS_RegisterBusIO+0x6c>)
 80035d6:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80035d8:	4a11      	ldr	r2, [pc, #68]	; (8003620 <LSM6DSO16IS_RegisterBusIO+0x70>)
 80035da:	6202      	str	r2, [r0, #32]
    pObj->Ctx.handle    = pObj;
 80035dc:	6280      	str	r0, [r0, #40]	; 0x28
    if (pObj->IO.Init == NULL)
 80035de:	b1b3      	cbz	r3, 800360e <LSM6DSO16IS_RegisterBusIO+0x5e>
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 80035e0:	4798      	blx	r3
 80035e2:	b9b8      	cbnz	r0, 8003614 <LSM6DSO16IS_RegisterBusIO+0x64>
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80035e4:	68a3      	ldr	r3, [r4, #8]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d000      	beq.n	80035ec <LSM6DSO16IS_RegisterBusIO+0x3c>
}
 80035ea:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80035ec:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1fa      	bne.n	80035ea <LSM6DSO16IS_RegisterBusIO+0x3a>
          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 80035f4:	220c      	movs	r2, #12
 80035f6:	2112      	movs	r1, #18
 80035f8:	4620      	mov	r0, r4
 80035fa:	f7ff ffc8 	bl	800358e <LSM6DSO16IS_Write_Reg>
 80035fe:	2800      	cmp	r0, #0
 8003600:	d0f3      	beq.n	80035ea <LSM6DSO16IS_RegisterBusIO+0x3a>
            ret = LSM6DSO16IS_ERROR;
 8003602:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003606:	e7f0      	b.n	80035ea <LSM6DSO16IS_RegisterBusIO+0x3a>
    ret = LSM6DSO16IS_ERROR;
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
}
 800360c:	4770      	bx	lr
      ret = LSM6DSO16IS_ERROR;
 800360e:	f04f 30ff 	mov.w	r0, #4294967295
 8003612:	e7ea      	b.n	80035ea <LSM6DSO16IS_RegisterBusIO+0x3a>
      ret = LSM6DSO16IS_ERROR;
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	e7e7      	b.n	80035ea <LSM6DSO16IS_RegisterBusIO+0x3a>
 800361a:	bf00      	nop
 800361c:	08003227 	.word	0x08003227
 8003620:	08003231 	.word	0x08003231

08003624 <LSM6DSO16IS_Set_Mem_Bank>:
{
 8003624:	b508      	push	{r3, lr}
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8003626:	2902      	cmp	r1, #2
 8003628:	d002      	beq.n	8003630 <LSM6DSO16IS_Set_Mem_Bank+0xc>
 800362a:	2903      	cmp	r1, #3
 800362c:	d000      	beq.n	8003630 <LSM6DSO16IS_Set_Mem_Bank+0xc>
 800362e:	2100      	movs	r1, #0
  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8003630:	3020      	adds	r0, #32
 8003632:	f000 f851 	bl	80036d8 <lsm6dso16is_mem_bank_set>
 8003636:	b900      	cbnz	r0, 800363a <LSM6DSO16IS_Set_Mem_Bank+0x16>
}
 8003638:	bd08      	pop	{r3, pc}
    ret = LSM6DSO16IS_ERROR;
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800363e:	e7fb      	b.n	8003638 <LSM6DSO16IS_Set_Mem_Bank+0x14>

08003640 <LSM6DSO16IS_Init>:
{
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	4605      	mov	r5, r0
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8003644:	2100      	movs	r1, #0
 8003646:	f7ff ffed 	bl	8003624 <LSM6DSO16IS_Set_Mem_Bank>
 800364a:	4606      	mov	r6, r0
 800364c:	b108      	cbz	r0, 8003652 <LSM6DSO16IS_Init+0x12>
    ret = LSM6DSO16IS_ERROR;
 800364e:	f04f 36ff 	mov.w	r6, #4294967295
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8003652:	f105 0420 	add.w	r4, r5, #32
 8003656:	2101      	movs	r1, #1
 8003658:	4620      	mov	r0, r4
 800365a:	f000 fa5a 	bl	8003b12 <lsm6dso16is_auto_increment_set>
 800365e:	b108      	cbz	r0, 8003664 <LSM6DSO16IS_Init+0x24>
    ret = LSM6DSO16IS_ERROR;
 8003660:	f04f 36ff 	mov.w	r6, #4294967295
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8003664:	2101      	movs	r1, #1
 8003666:	4620      	mov	r0, r4
 8003668:	f000 fa6c 	bl	8003b44 <lsm6dso16is_block_data_update_set>
 800366c:	b108      	cbz	r0, 8003672 <LSM6DSO16IS_Init+0x32>
    ret = LSM6DSO16IS_ERROR;
 800366e:	f04f 36ff 	mov.w	r6, #4294967295
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8003672:	2304      	movs	r3, #4
 8003674:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8003678:	2100      	movs	r1, #0
 800367a:	4620      	mov	r0, r4
 800367c:	f000 f8af 	bl	80037de <lsm6dso16is_xl_data_rate_set>
 8003680:	b108      	cbz	r0, 8003686 <LSM6DSO16IS_Init+0x46>
    ret = LSM6DSO16IS_ERROR;
 8003682:	f04f 36ff 	mov.w	r6, #4294967295
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 8003686:	2100      	movs	r1, #0
 8003688:	4620      	mov	r0, r4
 800368a:	f000 f86d 	bl	8003768 <lsm6dso16is_xl_full_scale_set>
 800368e:	b108      	cbz	r0, 8003694 <LSM6DSO16IS_Init+0x54>
    ret = LSM6DSO16IS_ERROR;
 8003690:	f04f 36ff 	mov.w	r6, #4294967295
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8003694:	2304      	movs	r3, #4
 8003696:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 800369a:	2100      	movs	r1, #0
 800369c:	4620      	mov	r0, r4
 800369e:	f000 f9a1 	bl	80039e4 <lsm6dso16is_gy_data_rate_set>
 80036a2:	b108      	cbz	r0, 80036a8 <LSM6DSO16IS_Init+0x68>
    ret = LSM6DSO16IS_ERROR;
 80036a4:	f04f 36ff 	mov.w	r6, #4294967295
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 80036a8:	2103      	movs	r1, #3
 80036aa:	4620      	mov	r0, r4
 80036ac:	f000 f94a 	bl	8003944 <lsm6dso16is_gy_full_scale_set>
 80036b0:	b928      	cbnz	r0, 80036be <LSM6DSO16IS_Init+0x7e>
  if (ret == LSM6DSO16IS_OK)
 80036b2:	b916      	cbnz	r6, 80036ba <LSM6DSO16IS_Init+0x7a>
    pObj->is_initialized = 1;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 80036ba:	4630      	mov	r0, r6
 80036bc:	bd70      	pop	{r4, r5, r6, pc}
    ret = LSM6DSO16IS_ERROR;
 80036be:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 80036c2:	e7fa      	b.n	80036ba <LSM6DSO16IS_Init+0x7a>

080036c4 <lsm6dso16is_read_reg>:
  *
  */
int32_t lsm6dso16is_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80036c4:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80036c6:	6844      	ldr	r4, [r0, #4]
 80036c8:	6880      	ldr	r0, [r0, #8]
 80036ca:	47a0      	blx	r4

  return ret;
}
 80036cc:	bd10      	pop	{r4, pc}

080036ce <lsm6dso16is_write_reg>:
  *
  */
int32_t lsm6dso16is_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                              uint8_t *data,
                              uint16_t len)
{
 80036ce:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80036d0:	6804      	ldr	r4, [r0, #0]
 80036d2:	6880      	ldr	r0, [r0, #8]
 80036d4:	47a0      	blx	r4

  return ret;
}
 80036d6:	bd10      	pop	{r4, pc}

080036d8 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 80036d8:	b530      	push	{r4, r5, lr}
 80036da:	b083      	sub	sp, #12
 80036dc:	4605      	mov	r5, r0
 80036de:	460c      	mov	r4, r1
  lsm6dso16is_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80036e0:	2301      	movs	r3, #1
 80036e2:	aa01      	add	r2, sp, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7ff ffed 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 80036ea:	b9b8      	cbnz	r0, 800371c <lsm6dso16is_mem_bank_set+0x44>
  {
    func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 80036ec:	2c02      	cmp	r4, #2
 80036ee:	d017      	beq.n	8003720 <lsm6dso16is_mem_bank_set+0x48>
 80036f0:	2200      	movs	r2, #0
 80036f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80036f6:	f362 1386 	bfi	r3, r2, #6, #1
 80036fa:	f88d 3004 	strb.w	r3, [sp, #4]
    func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 80036fe:	2c03      	cmp	r4, #3
 8003700:	d010      	beq.n	8003724 <lsm6dso16is_mem_bank_set+0x4c>
 8003702:	2200      	movs	r2, #0
 8003704:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003708:	f362 13c7 	bfi	r3, r2, #7, #1
 800370c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003710:	2301      	movs	r3, #1
 8003712:	aa01      	add	r2, sp, #4
 8003714:	4619      	mov	r1, r3
 8003716:	4628      	mov	r0, r5
 8003718:	f7ff ffd9 	bl	80036ce <lsm6dso16is_write_reg>
  }

  return ret;
}
 800371c:	b003      	add	sp, #12
 800371e:	bd30      	pop	{r4, r5, pc}
    func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 8003720:	2201      	movs	r2, #1
 8003722:	e7e6      	b.n	80036f2 <lsm6dso16is_mem_bank_set+0x1a>
    func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8003724:	2201      	movs	r2, #1
 8003726:	e7ed      	b.n	8003704 <lsm6dso16is_mem_bank_set+0x2c>

08003728 <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003728:	b508      	push	{r3, lr}
 800372a:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 800372c:	2301      	movs	r3, #1
 800372e:	210f      	movs	r1, #15
 8003730:	f7ff ffc8 	bl	80036c4 <lsm6dso16is_read_reg>

  return ret;
}
 8003734:	bd08      	pop	{r3, pc}

08003736 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8003736:	b530      	push	{r4, r5, lr}
 8003738:	b083      	sub	sp, #12
 800373a:	4604      	mov	r4, r0
 800373c:	460d      	mov	r5, r1
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800373e:	2301      	movs	r3, #1
 8003740:	aa01      	add	r2, sp, #4
 8003742:	2115      	movs	r1, #21
 8003744:	f7ff ffbe 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 8003748:	b108      	cbz	r0, 800374e <lsm6dso16is_xl_hm_mode_set+0x18>
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
  }

  return ret;
}
 800374a:	b003      	add	sp, #12
 800374c:	bd30      	pop	{r4, r5, pc}
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 800374e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003752:	f365 1304 	bfi	r3, r5, #4, #1
 8003756:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800375a:	2301      	movs	r3, #1
 800375c:	aa01      	add	r2, sp, #4
 800375e:	2115      	movs	r1, #21
 8003760:	4620      	mov	r0, r4
 8003762:	f7ff ffb4 	bl	80036ce <lsm6dso16is_write_reg>
  return ret;
 8003766:	e7f0      	b.n	800374a <lsm6dso16is_xl_hm_mode_set+0x14>

08003768 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 8003768:	b530      	push	{r4, r5, lr}
 800376a:	b083      	sub	sp, #12
 800376c:	4604      	mov	r4, r0
 800376e:	460d      	mov	r5, r1
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003770:	2301      	movs	r3, #1
 8003772:	aa01      	add	r2, sp, #4
 8003774:	2110      	movs	r1, #16
 8003776:	f7ff ffa5 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 800377a:	b108      	cbz	r0, 8003780 <lsm6dso16is_xl_full_scale_set+0x18>
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 800377c:	b003      	add	sp, #12
 800377e:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 8003780:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003784:	f365 0383 	bfi	r3, r5, #2, #2
 8003788:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800378c:	2301      	movs	r3, #1
 800378e:	aa01      	add	r2, sp, #4
 8003790:	2110      	movs	r1, #16
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff ff9b 	bl	80036ce <lsm6dso16is_write_reg>
  return ret;
 8003798:	e7f0      	b.n	800377c <lsm6dso16is_xl_full_scale_set+0x14>

0800379a <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 800379a:	b510      	push	{r4, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	460c      	mov	r4, r1
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80037a0:	2301      	movs	r3, #1
 80037a2:	aa01      	add	r2, sp, #4
 80037a4:	2110      	movs	r1, #16
 80037a6:	f7ff ff8d 	bl	80036c4 <lsm6dso16is_read_reg>

  switch ((ctrl1_xl.fs_xl))
 80037aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037ae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d810      	bhi.n	80037d8 <lsm6dso16is_xl_full_scale_get+0x3e>
 80037b6:	e8df f003 	tbb	[pc, r3]
 80037ba:	0c02      	.short	0x0c02
 80037bc:	0906      	.short	0x0906
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 80037be:	2300      	movs	r3, #0
 80037c0:	7023      	strb	r3, [r4, #0]
    default:
      *val = LSM6DSO16IS_2g;
      break;
  }
  return ret;
}
 80037c2:	b002      	add	sp, #8
 80037c4:	bd10      	pop	{r4, pc}
      *val = LSM6DSO16IS_4g;
 80037c6:	2302      	movs	r3, #2
 80037c8:	7023      	strb	r3, [r4, #0]
      break;
 80037ca:	e7fa      	b.n	80037c2 <lsm6dso16is_xl_full_scale_get+0x28>
      *val = LSM6DSO16IS_8g;
 80037cc:	2303      	movs	r3, #3
 80037ce:	7023      	strb	r3, [r4, #0]
      break;
 80037d0:	e7f7      	b.n	80037c2 <lsm6dso16is_xl_full_scale_get+0x28>
      *val = LSM6DSO16IS_16g;
 80037d2:	2301      	movs	r3, #1
 80037d4:	7023      	strb	r3, [r4, #0]
      break;
 80037d6:	e7f4      	b.n	80037c2 <lsm6dso16is_xl_full_scale_get+0x28>
      *val = LSM6DSO16IS_2g;
 80037d8:	2300      	movs	r3, #0
 80037da:	7023      	strb	r3, [r4, #0]
  return ret;
 80037dc:	e7f1      	b.n	80037c2 <lsm6dso16is_xl_full_scale_get+0x28>

080037de <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 80037de:	b570      	push	{r4, r5, r6, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	4605      	mov	r5, r0
 80037e4:	460e      	mov	r6, r1
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80037e6:	2301      	movs	r3, #1
 80037e8:	aa01      	add	r2, sp, #4
 80037ea:	2110      	movs	r1, #16
 80037ec:	f7ff ff6a 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 80037f0:	4604      	mov	r4, r0
 80037f2:	b9a0      	cbnz	r0, 800381e <lsm6dso16is_xl_data_rate_set+0x40>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80037f4:	f016 0f10 	tst.w	r6, #16
 80037f8:	d014      	beq.n	8003824 <lsm6dso16is_xl_data_rate_set+0x46>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx,
 80037fa:	2101      	movs	r1, #1
 80037fc:	4628      	mov	r0, r5
 80037fe:	f7ff ff9a 	bl	8003736 <lsm6dso16is_xl_hm_mode_set>
 8003802:	4404      	add	r4, r0
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx,
                                        LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 8003804:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003808:	f366 1307 	bfi	r3, r6, #4, #4
 800380c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8003810:	2301      	movs	r3, #1
 8003812:	aa01      	add	r2, sp, #4
 8003814:	2110      	movs	r1, #16
 8003816:	4628      	mov	r0, r5
 8003818:	f7ff ff59 	bl	80036ce <lsm6dso16is_write_reg>
 800381c:	4404      	add	r4, r0
                                 1);
  }

  return ret;
}
 800381e:	4620      	mov	r0, r4
 8003820:	b002      	add	sp, #8
 8003822:	bd70      	pop	{r4, r5, r6, pc}
      ret += lsm6dso16is_xl_hm_mode_set(ctx,
 8003824:	2100      	movs	r1, #0
 8003826:	4628      	mov	r0, r5
 8003828:	f7ff ff85 	bl	8003736 <lsm6dso16is_xl_hm_mode_set>
 800382c:	4404      	add	r4, r0
 800382e:	e7e9      	b.n	8003804 <lsm6dso16is_xl_data_rate_set+0x26>

08003830 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8003830:	b530      	push	{r4, r5, lr}
 8003832:	b083      	sub	sp, #12
 8003834:	4604      	mov	r4, r0
 8003836:	460d      	mov	r5, r1
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003838:	2301      	movs	r3, #1
 800383a:	aa01      	add	r2, sp, #4
 800383c:	2110      	movs	r1, #16
 800383e:	f7ff ff41 	bl	80036c4 <lsm6dso16is_read_reg>
  if (ret == 0)
 8003842:	b1c8      	cbz	r0, 8003878 <lsm6dso16is_xl_data_rate_get+0x48>
  {
    ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
  }

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8003844:	f89d 3000 	ldrb.w	r3, [sp]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003850:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8003854:	2b1b      	cmp	r3, #27
 8003856:	d859      	bhi.n	800390c <lsm6dso16is_xl_data_rate_get+0xdc>
 8003858:	e8df f003 	tbb	[pc, r3]
 800385c:	1f1c1915 	.word	0x1f1c1915
 8003860:	2b282522 	.word	0x2b282522
 8003864:	5834312e 	.word	0x5834312e
 8003868:	58585858 	.word	0x58585858
 800386c:	3d3a3758 	.word	0x3d3a3758
 8003870:	49464340 	.word	0x49464340
 8003874:	55524f4c 	.word	0x55524f4c
    ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8003878:	2301      	movs	r3, #1
 800387a:	466a      	mov	r2, sp
 800387c:	2115      	movs	r1, #21
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff ff20 	bl	80036c4 <lsm6dso16is_read_reg>
 8003884:	e7de      	b.n	8003844 <lsm6dso16is_xl_data_rate_get+0x14>
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8003886:	2300      	movs	r3, #0
 8003888:	702b      	strb	r3, [r5, #0]
    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
      break;
  }
  return ret;
}
 800388a:	b003      	add	sp, #12
 800388c:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 800388e:	2301      	movs	r3, #1
 8003890:	702b      	strb	r3, [r5, #0]
      break;
 8003892:	e7fa      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8003894:	2302      	movs	r3, #2
 8003896:	702b      	strb	r3, [r5, #0]
      break;
 8003898:	e7f7      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 800389a:	2303      	movs	r3, #3
 800389c:	702b      	strb	r3, [r5, #0]
      break;
 800389e:	e7f4      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 80038a0:	2304      	movs	r3, #4
 80038a2:	702b      	strb	r3, [r5, #0]
      break;
 80038a4:	e7f1      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 80038a6:	2305      	movs	r3, #5
 80038a8:	702b      	strb	r3, [r5, #0]
      break;
 80038aa:	e7ee      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 80038ac:	2306      	movs	r3, #6
 80038ae:	702b      	strb	r3, [r5, #0]
      break;
 80038b0:	e7eb      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 80038b2:	2307      	movs	r3, #7
 80038b4:	702b      	strb	r3, [r5, #0]
      break;
 80038b6:	e7e8      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 80038b8:	2308      	movs	r3, #8
 80038ba:	702b      	strb	r3, [r5, #0]
      break;
 80038bc:	e7e5      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 80038be:	2309      	movs	r3, #9
 80038c0:	702b      	strb	r3, [r5, #0]
      break;
 80038c2:	e7e2      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 80038c4:	230a      	movs	r3, #10
 80038c6:	702b      	strb	r3, [r5, #0]
      break;
 80038c8:	e7df      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 80038ca:	2311      	movs	r3, #17
 80038cc:	702b      	strb	r3, [r5, #0]
      break;
 80038ce:	e7dc      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 80038d0:	2312      	movs	r3, #18
 80038d2:	702b      	strb	r3, [r5, #0]
      break;
 80038d4:	e7d9      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 80038d6:	2313      	movs	r3, #19
 80038d8:	702b      	strb	r3, [r5, #0]
      break;
 80038da:	e7d6      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 80038dc:	2314      	movs	r3, #20
 80038de:	702b      	strb	r3, [r5, #0]
      break;
 80038e0:	e7d3      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 80038e2:	2315      	movs	r3, #21
 80038e4:	702b      	strb	r3, [r5, #0]
      break;
 80038e6:	e7d0      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 80038e8:	2316      	movs	r3, #22
 80038ea:	702b      	strb	r3, [r5, #0]
      break;
 80038ec:	e7cd      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 80038ee:	2317      	movs	r3, #23
 80038f0:	702b      	strb	r3, [r5, #0]
      break;
 80038f2:	e7ca      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 80038f4:	2318      	movs	r3, #24
 80038f6:	702b      	strb	r3, [r5, #0]
      break;
 80038f8:	e7c7      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 80038fa:	2319      	movs	r3, #25
 80038fc:	702b      	strb	r3, [r5, #0]
      break;
 80038fe:	e7c4      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 8003900:	231a      	movs	r3, #26
 8003902:	702b      	strb	r3, [r5, #0]
      break;
 8003904:	e7c1      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 8003906:	231b      	movs	r3, #27
 8003908:	702b      	strb	r3, [r5, #0]
      break;
 800390a:	e7be      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>
      *val = LSM6DSO16IS_XL_ODR_OFF;
 800390c:	2300      	movs	r3, #0
 800390e:	702b      	strb	r3, [r5, #0]
  return ret;
 8003910:	e7bb      	b.n	800388a <lsm6dso16is_xl_data_rate_get+0x5a>

08003912 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8003912:	b530      	push	{r4, r5, lr}
 8003914:	b083      	sub	sp, #12
 8003916:	4604      	mov	r4, r0
 8003918:	460d      	mov	r5, r1
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800391a:	2301      	movs	r3, #1
 800391c:	aa01      	add	r2, sp, #4
 800391e:	2116      	movs	r1, #22
 8003920:	f7ff fed0 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 8003924:	b108      	cbz	r0, 800392a <lsm6dso16is_gy_hm_mode_set+0x18>
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
  }

  return ret;
}
 8003926:	b003      	add	sp, #12
 8003928:	bd30      	pop	{r4, r5, pc}
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 800392a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800392e:	f365 13c7 	bfi	r3, r5, #7, #1
 8003932:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8003936:	2301      	movs	r3, #1
 8003938:	aa01      	add	r2, sp, #4
 800393a:	2116      	movs	r1, #22
 800393c:	4620      	mov	r0, r4
 800393e:	f7ff fec6 	bl	80036ce <lsm6dso16is_write_reg>
  return ret;
 8003942:	e7f0      	b.n	8003926 <lsm6dso16is_gy_hm_mode_set+0x14>

08003944 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8003944:	b530      	push	{r4, r5, lr}
 8003946:	b083      	sub	sp, #12
 8003948:	4605      	mov	r5, r0
 800394a:	460c      	mov	r4, r1
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800394c:	2301      	movs	r3, #1
 800394e:	aa01      	add	r2, sp, #4
 8003950:	2111      	movs	r1, #17
 8003952:	f7ff feb7 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 8003956:	b108      	cbz	r0, 800395c <lsm6dso16is_gy_full_scale_set+0x18>
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 8003958:	b003      	add	sp, #12
 800395a:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 800395c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003960:	f364 0383 	bfi	r3, r4, #2, #2
 8003964:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8003968:	f3c4 1100 	ubfx	r1, r4, #4, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f361 0341 	bfi	r3, r1, #1, #1
 8003972:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003976:	2301      	movs	r3, #1
 8003978:	aa01      	add	r2, sp, #4
 800397a:	2111      	movs	r1, #17
 800397c:	4628      	mov	r0, r5
 800397e:	f7ff fea6 	bl	80036ce <lsm6dso16is_write_reg>
  return ret;
 8003982:	e7e9      	b.n	8003958 <lsm6dso16is_gy_full_scale_set+0x14>

08003984 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 8003984:	b510      	push	{r4, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	460c      	mov	r4, r1
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800398a:	2301      	movs	r3, #1
 800398c:	aa01      	add	r2, sp, #4
 800398e:	2111      	movs	r1, #17
 8003990:	f7ff fe98 	bl	80036c4 <lsm6dso16is_read_reg>

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 8003994:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003998:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800399c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80039a0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d81a      	bhi.n	80039de <lsm6dso16is_gy_full_scale_get+0x5a>
 80039a8:	e8df f003 	tbb	[pc, r3]
 80039ac:	1613100d 	.word	0x1613100d
 80039b0:	19191919 	.word	0x19191919
 80039b4:	19191919 	.word	0x19191919
 80039b8:	19191919 	.word	0x19191919
 80039bc:	09          	.byte	0x09
 80039bd:	00          	.byte	0x00
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 80039be:	2310      	movs	r3, #16
 80039c0:	7023      	strb	r3, [r4, #0]
    default:
      *val = LSM6DSO16IS_125dps;
      break;
  }
  return ret;
}
 80039c2:	b002      	add	sp, #8
 80039c4:	bd10      	pop	{r4, pc}
      *val = LSM6DSO16IS_250dps;
 80039c6:	2300      	movs	r3, #0
 80039c8:	7023      	strb	r3, [r4, #0]
      break;
 80039ca:	e7fa      	b.n	80039c2 <lsm6dso16is_gy_full_scale_get+0x3e>
      *val = LSM6DSO16IS_500dps;
 80039cc:	2301      	movs	r3, #1
 80039ce:	7023      	strb	r3, [r4, #0]
      break;
 80039d0:	e7f7      	b.n	80039c2 <lsm6dso16is_gy_full_scale_get+0x3e>
      *val = LSM6DSO16IS_1000dps;
 80039d2:	2302      	movs	r3, #2
 80039d4:	7023      	strb	r3, [r4, #0]
      break;
 80039d6:	e7f4      	b.n	80039c2 <lsm6dso16is_gy_full_scale_get+0x3e>
      *val = LSM6DSO16IS_2000dps;
 80039d8:	2303      	movs	r3, #3
 80039da:	7023      	strb	r3, [r4, #0]
      break;
 80039dc:	e7f1      	b.n	80039c2 <lsm6dso16is_gy_full_scale_get+0x3e>
      *val = LSM6DSO16IS_125dps;
 80039de:	2310      	movs	r3, #16
 80039e0:	7023      	strb	r3, [r4, #0]
  return ret;
 80039e2:	e7ee      	b.n	80039c2 <lsm6dso16is_gy_full_scale_get+0x3e>

080039e4 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	4605      	mov	r5, r0
 80039ea:	460e      	mov	r6, r1
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80039ec:	2301      	movs	r3, #1
 80039ee:	aa01      	add	r2, sp, #4
 80039f0:	2111      	movs	r1, #17
 80039f2:	f7ff fe67 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 80039f6:	4604      	mov	r4, r0
 80039f8:	b9a0      	cbnz	r0, 8003a24 <lsm6dso16is_gy_data_rate_set+0x40>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80039fa:	f016 0f10 	tst.w	r6, #16
 80039fe:	d014      	beq.n	8003a2a <lsm6dso16is_gy_data_rate_set+0x46>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx,
 8003a00:	2101      	movs	r1, #1
 8003a02:	4628      	mov	r0, r5
 8003a04:	f7ff ff85 	bl	8003912 <lsm6dso16is_gy_hm_mode_set>
 8003a08:	4404      	add	r4, r0
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx,
                                        LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8003a0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a0e:	f366 1307 	bfi	r3, r6, #4, #4
 8003a12:	f88d 3004 	strb.w	r3, [sp, #4]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003a16:	2301      	movs	r3, #1
 8003a18:	aa01      	add	r2, sp, #4
 8003a1a:	2111      	movs	r1, #17
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f7ff fe56 	bl	80036ce <lsm6dso16is_write_reg>
 8003a22:	4404      	add	r4, r0
  }

  return ret;
}
 8003a24:	4620      	mov	r0, r4
 8003a26:	b002      	add	sp, #8
 8003a28:	bd70      	pop	{r4, r5, r6, pc}
      ret += lsm6dso16is_gy_hm_mode_set(ctx,
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f7ff ff70 	bl	8003912 <lsm6dso16is_gy_hm_mode_set>
 8003a32:	4404      	add	r4, r0
 8003a34:	e7e9      	b.n	8003a0a <lsm6dso16is_gy_data_rate_set+0x26>

08003a36 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8003a36:	b530      	push	{r4, r5, lr}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	460c      	mov	r4, r1
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003a3e:	2301      	movs	r3, #1
 8003a40:	aa01      	add	r2, sp, #4
 8003a42:	2111      	movs	r1, #17
 8003a44:	f7ff fe3e 	bl	80036c4 <lsm6dso16is_read_reg>
  if (ret == 0)
 8003a48:	b1c8      	cbz	r0, 8003a7e <lsm6dso16is_gy_data_rate_get+0x48>
  {
    ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
  }

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8003a4a:	f89d 2000 	ldrb.w	r2, [sp]
 8003a4e:	09d2      	lsrs	r2, r2, #7
 8003a50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003a5a:	2b1a      	cmp	r3, #26
 8003a5c:	d856      	bhi.n	8003b0c <lsm6dso16is_gy_data_rate_get+0xd6>
 8003a5e:	e8df f003 	tbb	[pc, r3]
 8003a62:	1915      	.short	0x1915
 8003a64:	25221f1c 	.word	0x25221f1c
 8003a68:	312e2b28 	.word	0x312e2b28
 8003a6c:	55555534 	.word	0x55555534
 8003a70:	37555555 	.word	0x37555555
 8003a74:	43403d3a 	.word	0x43403d3a
 8003a78:	4f4c4946 	.word	0x4f4c4946
 8003a7c:	52          	.byte	0x52
 8003a7d:	00          	.byte	0x00
    ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8003a7e:	2301      	movs	r3, #1
 8003a80:	466a      	mov	r2, sp
 8003a82:	2116      	movs	r1, #22
 8003a84:	4628      	mov	r0, r5
 8003a86:	f7ff fe1d 	bl	80036c4 <lsm6dso16is_read_reg>
 8003a8a:	e7de      	b.n	8003a4a <lsm6dso16is_gy_data_rate_get+0x14>
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO16IS_GY_ODR_OFF;
      break;
  }

  return ret;
}
 8003a90:	b003      	add	sp, #12
 8003a92:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8003a94:	2301      	movs	r3, #1
 8003a96:	7023      	strb	r3, [r4, #0]
      break;
 8003a98:	e7fa      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	7023      	strb	r3, [r4, #0]
      break;
 8003a9e:	e7f7      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	7023      	strb	r3, [r4, #0]
      break;
 8003aa4:	e7f4      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	7023      	strb	r3, [r4, #0]
      break;
 8003aaa:	e7f1      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8003aac:	2305      	movs	r3, #5
 8003aae:	7023      	strb	r3, [r4, #0]
      break;
 8003ab0:	e7ee      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8003ab2:	2306      	movs	r3, #6
 8003ab4:	7023      	strb	r3, [r4, #0]
      break;
 8003ab6:	e7eb      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8003ab8:	2307      	movs	r3, #7
 8003aba:	7023      	strb	r3, [r4, #0]
      break;
 8003abc:	e7e8      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8003abe:	2308      	movs	r3, #8
 8003ac0:	7023      	strb	r3, [r4, #0]
      break;
 8003ac2:	e7e5      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8003ac4:	2309      	movs	r3, #9
 8003ac6:	7023      	strb	r3, [r4, #0]
      break;
 8003ac8:	e7e2      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8003aca:	230a      	movs	r3, #10
 8003acc:	7023      	strb	r3, [r4, #0]
      break;
 8003ace:	e7df      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8003ad0:	2311      	movs	r3, #17
 8003ad2:	7023      	strb	r3, [r4, #0]
      break;
 8003ad4:	e7dc      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8003ad6:	2312      	movs	r3, #18
 8003ad8:	7023      	strb	r3, [r4, #0]
      break;
 8003ada:	e7d9      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8003adc:	2313      	movs	r3, #19
 8003ade:	7023      	strb	r3, [r4, #0]
      break;
 8003ae0:	e7d6      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8003ae2:	2314      	movs	r3, #20
 8003ae4:	7023      	strb	r3, [r4, #0]
      break;
 8003ae6:	e7d3      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8003ae8:	2315      	movs	r3, #21
 8003aea:	7023      	strb	r3, [r4, #0]
      break;
 8003aec:	e7d0      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8003aee:	2316      	movs	r3, #22
 8003af0:	7023      	strb	r3, [r4, #0]
      break;
 8003af2:	e7cd      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8003af4:	2317      	movs	r3, #23
 8003af6:	7023      	strb	r3, [r4, #0]
      break;
 8003af8:	e7ca      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8003afa:	2318      	movs	r3, #24
 8003afc:	7023      	strb	r3, [r4, #0]
      break;
 8003afe:	e7c7      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8003b00:	2319      	movs	r3, #25
 8003b02:	7023      	strb	r3, [r4, #0]
      break;
 8003b04:	e7c4      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8003b06:	231a      	movs	r3, #26
 8003b08:	7023      	strb	r3, [r4, #0]
      break;
 8003b0a:	e7c1      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	7023      	strb	r3, [r4, #0]
  return ret;
 8003b10:	e7be      	b.n	8003a90 <lsm6dso16is_gy_data_rate_get+0x5a>

08003b12 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b12:	b530      	push	{r4, r5, lr}
 8003b14:	b083      	sub	sp, #12
 8003b16:	4604      	mov	r4, r0
 8003b18:	460d      	mov	r5, r1
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	aa01      	add	r2, sp, #4
 8003b1e:	2112      	movs	r1, #18
 8003b20:	f7ff fdd0 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 8003b24:	b108      	cbz	r0, 8003b2a <lsm6dso16is_auto_increment_set+0x18>
    ctrl3_c.if_inc = val;
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8003b26:	b003      	add	sp, #12
 8003b28:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.if_inc = val;
 8003b2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b2e:	f365 0382 	bfi	r3, r5, #2, #1
 8003b32:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003b36:	2301      	movs	r3, #1
 8003b38:	aa01      	add	r2, sp, #4
 8003b3a:	2112      	movs	r1, #18
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7ff fdc6 	bl	80036ce <lsm6dso16is_write_reg>
  return ret;
 8003b42:	e7f0      	b.n	8003b26 <lsm6dso16is_auto_increment_set+0x14>

08003b44 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b44:	b530      	push	{r4, r5, lr}
 8003b46:	b083      	sub	sp, #12
 8003b48:	4604      	mov	r4, r0
 8003b4a:	460d      	mov	r5, r1
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	aa01      	add	r2, sp, #4
 8003b50:	2112      	movs	r1, #18
 8003b52:	f7ff fdb7 	bl	80036c4 <lsm6dso16is_read_reg>

  if (ret == 0)
 8003b56:	b108      	cbz	r0, 8003b5c <lsm6dso16is_block_data_update_set+0x18>
    ctrl3_c.bdu = val;
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8003b58:	b003      	add	sp, #12
 8003b5a:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = val;
 8003b5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b60:	f365 1386 	bfi	r3, r5, #6, #1
 8003b64:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003b68:	2301      	movs	r3, #1
 8003b6a:	aa01      	add	r2, sp, #4
 8003b6c:	2112      	movs	r1, #18
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff fdad 	bl	80036ce <lsm6dso16is_write_reg>
  return ret;
 8003b74:	e7f0      	b.n	8003b58 <lsm6dso16is_block_data_update_set+0x14>

08003b76 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b76:	b510      	push	{r4, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 8003b7c:	2306      	movs	r3, #6
 8003b7e:	466a      	mov	r2, sp
 8003b80:	2122      	movs	r1, #34	; 0x22
 8003b82:	f7ff fd9f 	bl	80036c4 <lsm6dso16is_read_reg>
  val[0] = (int16_t)buff[1];
 8003b86:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003b8a:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b8c:	f89d 3000 	ldrb.w	r3, [sp]
 8003b90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b94:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8003b96:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003b9a:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003b9c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003ba0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ba4:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8003ba6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003baa:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003bb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003bb4:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003bb6:	b002      	add	sp, #8
 8003bb8:	bd10      	pop	{r4, pc}

08003bba <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 8003bc0:	2306      	movs	r3, #6
 8003bc2:	466a      	mov	r2, sp
 8003bc4:	2128      	movs	r1, #40	; 0x28
 8003bc6:	f7ff fd7d 	bl	80036c4 <lsm6dso16is_read_reg>
  val[0] = (int16_t)buff[1];
 8003bca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003bce:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003bd0:	f89d 3000 	ldrb.w	r3, [sp]
 8003bd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003bd8:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8003bda:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003bde:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003be0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003be4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003be8:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8003bea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003bee:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003bf4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003bf8:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003bfa:	b002      	add	sp, #8
 8003bfc:	bd10      	pop	{r4, pc}
	...

08003c00 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c04:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003c06:	2400      	movs	r4, #0
 8003c08:	9401      	str	r4, [sp, #4]
 8003c0a:	9402      	str	r4, [sp, #8]
 8003c0c:	9403      	str	r4, [sp, #12]
 8003c0e:	9404      	str	r4, [sp, #16]
 8003c10:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c18:	f042 0204 	orr.w	r2, r2, #4
 8003c1c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003c26:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003c28:	2710      	movs	r7, #16
 8003c2a:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c30:	2303      	movs	r3, #3
 8003c32:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003c34:	4d12      	ldr	r5, [pc, #72]	; (8003c80 <BSP_RADIO_Init+0x80>)
 8003c36:	a901      	add	r1, sp, #4
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f001 f9e1 	bl	8005000 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003c3e:	f04f 0820 	mov.w	r8, #32
 8003c42:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003c46:	a901      	add	r1, sp, #4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f001 f9d9 	bl	8005000 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003c4e:	2608      	movs	r6, #8
 8003c50:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8003c52:	a901      	add	r1, sp, #4
 8003c54:	4628      	mov	r0, r5
 8003c56:	f001 f9d3 	bl	8005000 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	4628      	mov	r0, r5
 8003c60:	f001 fb1e 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003c64:	4622      	mov	r2, r4
 8003c66:	4639      	mov	r1, r7
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f001 fb19 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8003c6e:	4622      	mov	r2, r4
 8003c70:	4631      	mov	r1, r6
 8003c72:	4628      	mov	r0, r5
 8003c74:	f001 fb14 	bl	80052a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003c78:	4620      	mov	r0, r4
 8003c7a:	b006      	add	sp, #24
 8003c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c80:	48000800 	.word	0x48000800

08003c84 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003c84:	b510      	push	{r4, lr}
  switch (Config)
 8003c86:	2803      	cmp	r0, #3
 8003c88:	d813      	bhi.n	8003cb2 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003c8a:	e8df f000 	tbb	[pc, r0]
 8003c8e:	1402      	.short	0x1402
 8003c90:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8003c92:	4c22      	ldr	r4, [pc, #136]	; (8003d1c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	2108      	movs	r1, #8
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f001 fb01 	bl	80052a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2110      	movs	r1, #16
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f001 fafc 	bl	80052a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2120      	movs	r1, #32
 8003cac:	4620      	mov	r0, r4
 8003cae:	f001 faf7 	bl	80052a0 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003cb6:	4c19      	ldr	r4, [pc, #100]	; (8003d1c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2108      	movs	r1, #8
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f001 faef 	bl	80052a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	2110      	movs	r1, #16
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f001 faea 	bl	80052a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2120      	movs	r1, #32
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f001 fae5 	bl	80052a0 <HAL_GPIO_WritePin>
      break;
 8003cd6:	e7ec      	b.n	8003cb2 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003cd8:	4c10      	ldr	r4, [pc, #64]	; (8003d1c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	2108      	movs	r1, #8
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f001 fade 	bl	80052a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	2110      	movs	r1, #16
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f001 fad9 	bl	80052a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003cee:	2201      	movs	r2, #1
 8003cf0:	2120      	movs	r1, #32
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f001 fad4 	bl	80052a0 <HAL_GPIO_WritePin>
      break;
 8003cf8:	e7db      	b.n	8003cb2 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003cfa:	4c08      	ldr	r4, [pc, #32]	; (8003d1c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2108      	movs	r1, #8
 8003d00:	4620      	mov	r0, r4
 8003d02:	f001 facd 	bl	80052a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003d06:	2200      	movs	r2, #0
 8003d08:	2110      	movs	r1, #16
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f001 fac8 	bl	80052a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003d10:	2201      	movs	r2, #1
 8003d12:	2120      	movs	r1, #32
 8003d14:	4620      	mov	r0, r4
 8003d16:	f001 fac3 	bl	80052a0 <HAL_GPIO_WritePin>
      break;
 8003d1a:	e7ca      	b.n	8003cb2 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003d1c:	48000800 	.word	0x48000800

08003d20 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003d20:	2000      	movs	r0, #0
 8003d22:	4770      	bx	lr

08003d24 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003d24:	2001      	movs	r0, #1
 8003d26:	4770      	bx	lr

08003d28 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003d28:	2001      	movs	r0, #1
 8003d2a:	4770      	bx	lr

08003d2c <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003d2c:	b908      	cbnz	r0, 8003d32 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003d2e:	200f      	movs	r0, #15
 8003d30:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003d32:	2016      	movs	r0, #22
  }

  return ret;
}
 8003d34:	4770      	bx	lr

08003d36 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003d36:	4770      	bx	lr

08003d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d38:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3a:	2003      	movs	r0, #3
 8003d3c:	f000 fd22 	bl	8004784 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d40:	f002 f870 	bl	8005e24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_Init+0x28>)
 8003d46:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d48:	200f      	movs	r0, #15
 8003d4a:	f7fe f96b 	bl	8002024 <HAL_InitTick>
 8003d4e:	b110      	cbz	r0, 8003d56 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003d50:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003d52:	4620      	mov	r0, r4
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	4604      	mov	r4, r0
    HAL_MspInit();
 8003d58:	f7fd ff52 	bl	8001c00 <HAL_MspInit>
 8003d5c:	e7f9      	b.n	8003d52 <HAL_Init+0x1a>
 8003d5e:	bf00      	nop
 8003d60:	20000074 	.word	0x20000074

08003d64 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003d64:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003d68:	6913      	ldr	r3, [r2, #16]
 8003d6a:	f023 0302 	bic.w	r3, r3, #2
 8003d6e:	6113      	str	r3, [r2, #16]
}
 8003d70:	4770      	bx	lr

08003d72 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003d72:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003d76:	6913      	ldr	r3, [r2, #16]
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	6113      	str	r3, [r2, #16]
}
 8003d7e:	4770      	bx	lr

08003d80 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003d80:	4b01      	ldr	r3, [pc, #4]	; (8003d88 <HAL_GetUIDw0+0x8>)
 8003d82:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8003d86:	4770      	bx	lr
 8003d88:	1fff7000 	.word	0x1fff7000

08003d8c <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003d8c:	4b01      	ldr	r3, [pc, #4]	; (8003d94 <HAL_GetUIDw1+0x8>)
 8003d8e:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8003d92:	4770      	bx	lr
 8003d94:	1fff7000 	.word	0x1fff7000

08003d98 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003d98:	4b01      	ldr	r3, [pc, #4]	; (8003da0 <HAL_GetUIDw2+0x8>)
 8003d9a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8003d9e:	4770      	bx	lr
 8003da0:	1fff7000 	.word	0x1fff7000

08003da4 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003da4:	4a02      	ldr	r2, [pc, #8]	; (8003db0 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003da6:	6853      	ldr	r3, [r2, #4]
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8003dae:	4770      	bx	lr
 8003db0:	e0042000 	.word	0xe0042000

08003db4 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003db4:	4a02      	ldr	r2, [pc, #8]	; (8003dc0 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003db6:	6853      	ldr	r3, [r2, #4]
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8003dbe:	4770      	bx	lr
 8003dc0:	e0042000 	.word	0xe0042000

08003dc4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003dc4:	4a02      	ldr	r2, [pc, #8]	; (8003dd0 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003dc6:	6853      	ldr	r3, [r2, #4]
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8003dce:	4770      	bx	lr
 8003dd0:	e0042000 	.word	0xe0042000

08003dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003dd4:	b530      	push	{r4, r5, lr}
 8003dd6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	f000 8106 	beq.w	8003fee <HAL_ADC_Init+0x21a>
 8003de2:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003de4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003de6:	b1bb      	cbz	r3, 8003e18 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003de8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003dea:	6893      	ldr	r3, [r2, #8]
 8003dec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003df0:	d11f      	bne.n	8003e32 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003df2:	6893      	ldr	r3, [r2, #8]
 8003df4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003df8:	f023 0317 	bic.w	r3, r3, #23
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e02:	4b7c      	ldr	r3, [pc, #496]	; (8003ff4 <HAL_ADC_Init+0x220>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	4a7b      	ldr	r2, [pc, #492]	; (8003ff8 <HAL_ADC_Init+0x224>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	3301      	adds	r3, #1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003e16:	e009      	b.n	8003e2c <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003e18:	f7fd facc 	bl	80013b4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003e20:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003e24:	e7e0      	b.n	8003de8 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003e26:	9b01      	ldr	r3, [sp, #4]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003e2c:	9b01      	ldr	r3, [sp, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f9      	bne.n	8003e26 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e32:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e34:	6893      	ldr	r3, [r2, #8]
 8003e36:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003e3a:	f040 809a 	bne.w	8003f72 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e40:	f043 0310 	orr.w	r3, r3, #16
 8003e44:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e4e:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e50:	6893      	ldr	r3, [r2, #8]
 8003e52:	f013 0304 	ands.w	r3, r3, #4
 8003e56:	d000      	beq.n	8003e5a <HAL_ADC_Init+0x86>
 8003e58:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003e5c:	f011 0f10 	tst.w	r1, #16
 8003e60:	f040 80be 	bne.w	8003fe0 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f040 80bb 	bne.w	8003fe0 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e76:	6893      	ldr	r3, [r2, #8]
 8003e78:	f013 0f01 	tst.w	r3, #1
 8003e7c:	d14f      	bne.n	8003f1e <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e7e:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e80:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e82:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e86:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e88:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e8c:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e8e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e94:	b109      	cbz	r1, 8003e9a <HAL_ADC_Init+0xc6>
 8003e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e9a:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8003e9c:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e9e:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ea0:	6921      	ldr	r1, [r4, #16]
 8003ea2:	2900      	cmp	r1, #0
 8003ea4:	db67      	blt.n	8003f76 <HAL_ADC_Init+0x1a2>
 8003ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003eaa:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003eac:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003eb0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eb4:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003eb8:	2901      	cmp	r1, #1
 8003eba:	d05f      	beq.n	8003f7c <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ebe:	b121      	cbz	r1, 8003eca <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ec0:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003ec4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ec6:	4329      	orrs	r1, r5
 8003ec8:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003eca:	68d1      	ldr	r1, [r2, #12]
 8003ecc:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 8003ed0:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8003ed4:	4319      	orrs	r1, r3
 8003ed6:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ed8:	6863      	ldr	r3, [r4, #4]
 8003eda:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003ede:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ee0:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ee2:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003ee6:	2901      	cmp	r1, #1
 8003ee8:	d055      	beq.n	8003f96 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003eea:	6821      	ldr	r1, [r4, #0]
 8003eec:	690d      	ldr	r5, [r1, #16]
 8003eee:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <HAL_ADC_Init+0x228>)
 8003ef0:	402b      	ands	r3, r5
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ef6:	6863      	ldr	r3, [r4, #4]
 8003ef8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003efc:	d00f      	beq.n	8003f1e <HAL_ADC_Init+0x14a>
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d00c      	beq.n	8003f1e <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f08:	d009      	beq.n	8003f1e <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003f0a:	493d      	ldr	r1, [pc, #244]	; (8004000 <HAL_ADC_Init+0x22c>)
 8003f0c:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8003f10:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8003f14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003f1e:	6821      	ldr	r1, [r4, #0]
 8003f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8003f22:	694a      	ldr	r2, [r1, #20]
 8003f24:	f022 0207 	bic.w	r2, r2, #7
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003f2c:	6822      	ldr	r2, [r4, #0]
 8003f2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f30:	6953      	ldr	r3, [r2, #20]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003f3a:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003f3c:	6923      	ldr	r3, [r4, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d133      	bne.n	8003faa <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003f46:	f063 030f 	orn	r3, r3, #15
 8003f4a:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f4c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003f54:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d039      	beq.n	8003fce <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f5c:	f023 0312 	bic.w	r3, r3, #18
 8003f60:	f043 0310 	orr.w	r3, r3, #16
 8003f64:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003f6e:	2001      	movs	r0, #1
 8003f70:	e03b      	b.n	8003fea <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f72:	2000      	movs	r0, #0
 8003f74:	e76c      	b.n	8003e50 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f76:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003f7a:	e796      	b.n	8003eaa <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f7c:	b915      	cbnz	r5, 8003f84 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f82:	e79b      	b.n	8003ebc <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f84:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003f86:	f041 0120 	orr.w	r1, r1, #32
 8003f8a:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003f8e:	f041 0101 	orr.w	r1, r1, #1
 8003f92:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003f94:	e792      	b.n	8003ebc <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003f96:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f98:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003f9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003f9c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003f9e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003fa0:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	e79f      	b.n	8003eea <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fae:	d1cd      	bne.n	8003f4c <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003fb0:	6821      	ldr	r1, [r4, #0]
 8003fb2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003fb4:	69e3      	ldr	r3, [r4, #28]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	f003 031c 	and.w	r3, r3, #28
 8003fbe:	f06f 020f 	mvn.w	r2, #15
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	628b      	str	r3, [r1, #40]	; 0x28
 8003fcc:	e7be      	b.n	8003f4c <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fd4:	f023 0303 	bic.w	r3, r3, #3
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fde:	e004      	b.n	8003fea <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe2:	f043 0310 	orr.w	r3, r3, #16
 8003fe6:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fe8:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003fea:	b003      	add	sp, #12
 8003fec:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003fee:	2001      	movs	r0, #1
 8003ff0:	e7fb      	b.n	8003fea <HAL_ADC_Init+0x216>
 8003ff2:	bf00      	nop
 8003ff4:	20000074 	.word	0x20000074
 8003ff8:	053e2d63 	.word	0x053e2d63
 8003ffc:	1ffffc02 	.word	0x1ffffc02
 8004000:	40012000 	.word	0x40012000

08004004 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	4604      	mov	r4, r0
 8004008:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800400a:	6946      	ldr	r6, [r0, #20]
 800400c:	2e08      	cmp	r6, #8
 800400e:	d005      	beq.n	800401c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004010:	6803      	ldr	r3, [r0, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f013 0f01 	tst.w	r3, #1
 8004018:	d11e      	bne.n	8004058 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800401a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800401c:	f7fe f804 	bl	8002028 <HAL_GetTick>
 8004020:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4232      	tst	r2, r6
 8004028:	d11c      	bne.n	8004064 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800402e:	d0f8      	beq.n	8004022 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004030:	f7fd fffa 	bl	8002028 <HAL_GetTick>
 8004034:	1bc3      	subs	r3, r0, r7
 8004036:	42ab      	cmp	r3, r5
 8004038:	d801      	bhi.n	800403e <HAL_ADC_PollForConversion+0x3a>
 800403a:	2d00      	cmp	r5, #0
 800403c:	d1f1      	bne.n	8004022 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4233      	tst	r3, r6
 8004044:	d1ed      	bne.n	8004022 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004046:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800404e:	2300      	movs	r3, #0
 8004050:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8004054:	2003      	movs	r0, #3
 8004056:	e028      	b.n	80040aa <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004058:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800405a:	f043 0320 	orr.w	r3, r3, #32
 800405e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8004060:	2001      	movs	r0, #1
 8004062:	e022      	b.n	80040aa <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004064:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004072:	d115      	bne.n	80040a0 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004074:	7ea2      	ldrb	r2, [r4, #26]
 8004076:	b99a      	cbnz	r2, 80040a0 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f012 0f08 	tst.w	r2, #8
 800407e:	d00f      	beq.n	80040a0 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	f012 0f04 	tst.w	r2, #4
 8004086:	d111      	bne.n	80040ac <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	f022 020c 	bic.w	r2, r2, #12
 800408e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80040a0:	7e20      	ldrb	r0, [r4, #24]
 80040a2:	b960      	cbnz	r0, 80040be <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	220c      	movs	r2, #12
 80040a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80040aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040ae:	f043 0320 	orr.w	r3, r3, #32
 80040b2:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	65e3      	str	r3, [r4, #92]	; 0x5c
 80040bc:	e7f0      	b.n	80040a0 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80040be:	2000      	movs	r0, #0
 80040c0:	e7f3      	b.n	80040aa <HAL_ADC_PollForConversion+0xa6>

080040c2 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80040c2:	6803      	ldr	r3, [r0, #0]
 80040c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80040c6:	4770      	bx	lr

080040c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80040c8:	b470      	push	{r4, r5, r6}
 80040ca:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040cc:	2200      	movs	r2, #0
 80040ce:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040d0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80040d2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80040d6:	2a01      	cmp	r2, #1
 80040d8:	f000 8103 	beq.w	80042e2 <HAL_ADC_ConfigChannel+0x21a>
 80040dc:	4603      	mov	r3, r0
 80040de:	2201      	movs	r2, #1
 80040e0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040e4:	6802      	ldr	r2, [r0, #0]
 80040e6:	6890      	ldr	r0, [r2, #8]
 80040e8:	f010 0f04 	tst.w	r0, #4
 80040ec:	d00a      	beq.n	8004104 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040f6:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 80040fe:	b003      	add	sp, #12
 8004100:	bc70      	pop	{r4, r5, r6}
 8004102:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8004104:	6848      	ldr	r0, [r1, #4]
 8004106:	2802      	cmp	r0, #2
 8004108:	f000 809c 	beq.w	8004244 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800410c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004110:	d027      	beq.n	8004162 <HAL_ADC_ConfigChannel+0x9a>
 8004112:	4d75      	ldr	r5, [pc, #468]	; (80042e8 <HAL_ADC_ConfigChannel+0x220>)
 8004114:	42ac      	cmp	r4, r5
 8004116:	d024      	beq.n	8004162 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004118:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800411a:	f000 001f 	and.w	r0, r0, #31
 800411e:	250f      	movs	r5, #15
 8004120:	4085      	lsls	r5, r0
 8004122:	ea24 0505 	bic.w	r5, r4, r5
 8004126:	680c      	ldr	r4, [r1, #0]
 8004128:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800412c:	2e00      	cmp	r6, #0
 800412e:	d131      	bne.n	8004194 <HAL_ADC_ConfigChannel+0xcc>
 8004130:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004134:	4084      	lsls	r4, r0
 8004136:	432c      	orrs	r4, r5
 8004138:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800413a:	684c      	ldr	r4, [r1, #4]
 800413c:	08a0      	lsrs	r0, r4, #2
 800413e:	3001      	adds	r0, #1
 8004140:	69dd      	ldr	r5, [r3, #28]
 8004142:	42a8      	cmp	r0, r5
 8004144:	d813      	bhi.n	800416e <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004146:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8004148:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800414a:	f004 041f 	and.w	r4, r4, #31
 800414e:	260f      	movs	r6, #15
 8004150:	40a6      	lsls	r6, r4
 8004152:	ea20 0006 	bic.w	r0, r0, r6
 8004156:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800415a:	40a5      	lsls	r5, r4
 800415c:	4328      	orrs	r0, r5
 800415e:	6290      	str	r0, [r2, #40]	; 0x28
}
 8004160:	e005      	b.n	800416e <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004162:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004164:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004166:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800416a:	4320      	orrs	r0, r4
 800416c:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800416e:	681c      	ldr	r4, [r3, #0]
 8004170:	680d      	ldr	r5, [r1, #0]
 8004172:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8004174:	6960      	ldr	r0, [r4, #20]
 8004176:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800417a:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800417e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8004182:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004186:	4302      	orrs	r2, r0
 8004188:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800418a:	680a      	ldr	r2, [r1, #0]
 800418c:	2a00      	cmp	r2, #0
 800418e:	db09      	blt.n	80041a4 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004190:	2000      	movs	r0, #0
 8004192:	e7b1      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004198:	b114      	cbz	r4, 80041a0 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800419a:	fab4 f484 	clz	r4, r4
 800419e:	e7c9      	b.n	8004134 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80041a0:	2420      	movs	r4, #32
 80041a2:	e7c7      	b.n	8004134 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041a4:	4951      	ldr	r1, [pc, #324]	; (80042ec <HAL_ADC_ConfigChannel+0x224>)
 80041a6:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 80041aa:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041ae:	4c50      	ldr	r4, [pc, #320]	; (80042f0 <HAL_ADC_ConfigChannel+0x228>)
 80041b0:	42a2      	cmp	r2, r4
 80041b2:	d007      	beq.n	80041c4 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80041b4:	4c4f      	ldr	r4, [pc, #316]	; (80042f4 <HAL_ADC_ConfigChannel+0x22c>)
 80041b6:	42a2      	cmp	r2, r4
 80041b8:	d026      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80041ba:	4c4f      	ldr	r4, [pc, #316]	; (80042f8 <HAL_ADC_ConfigChannel+0x230>)
 80041bc:	42a2      	cmp	r2, r4
 80041be:	d032      	beq.n	8004226 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c0:	2000      	movs	r0, #0
 80041c2:	e799      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041c4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80041c8:	d1f4      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041ce:	4847      	ldr	r0, [pc, #284]	; (80042ec <HAL_ADC_ConfigChannel+0x224>)
 80041d0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80041d4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80041d8:	4311      	orrs	r1, r2
 80041da:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041de:	4a47      	ldr	r2, [pc, #284]	; (80042fc <HAL_ADC_ConfigChannel+0x234>)
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	0992      	lsrs	r2, r2, #6
 80041e4:	4946      	ldr	r1, [pc, #280]	; (8004300 <HAL_ADC_ConfigChannel+0x238>)
 80041e6:	fba1 1202 	umull	r1, r2, r1, r2
 80041ea:	0992      	lsrs	r2, r2, #6
 80041ec:	3201      	adds	r2, #1
 80041ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80041f6:	e002      	b.n	80041fe <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 80041f8:	9a01      	ldr	r2, [sp, #4]
 80041fa:	3a01      	subs	r2, #1
 80041fc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80041fe:	9a01      	ldr	r2, [sp, #4]
 8004200:	2a00      	cmp	r2, #0
 8004202:	d1f9      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004204:	2000      	movs	r0, #0
 8004206:	e777      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004208:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800420c:	d1d5      	bne.n	80041ba <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800420e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004212:	4836      	ldr	r0, [pc, #216]	; (80042ec <HAL_ADC_ConfigChannel+0x224>)
 8004214:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004218:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800421c:	4311      	orrs	r1, r2
 800421e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004222:	2000      	movs	r0, #0
}
 8004224:	e768      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004226:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800422a:	d158      	bne.n	80042de <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800422c:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004230:	482e      	ldr	r0, [pc, #184]	; (80042ec <HAL_ADC_ConfigChannel+0x224>)
 8004232:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8004236:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800423a:	430a      	orrs	r2, r1
 800423c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004240:	2000      	movs	r0, #0
}
 8004242:	e759      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004244:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004248:	d002      	beq.n	8004250 <HAL_ADC_ConfigChannel+0x188>
 800424a:	4827      	ldr	r0, [pc, #156]	; (80042e8 <HAL_ADC_ConfigChannel+0x220>)
 800424c:	4284      	cmp	r4, r0
 800424e:	d106      	bne.n	800425e <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004250:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004252:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004254:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8004258:	ea20 0004 	bic.w	r0, r0, r4
 800425c:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800425e:	680a      	ldr	r2, [r1, #0]
 8004260:	2a00      	cmp	r2, #0
 8004262:	db01      	blt.n	8004268 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004264:	2000      	movs	r0, #0
 8004266:	e747      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004268:	4920      	ldr	r1, [pc, #128]	; (80042ec <HAL_ADC_ConfigChannel+0x224>)
 800426a:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800426e:	4820      	ldr	r0, [pc, #128]	; (80042f0 <HAL_ADC_ConfigChannel+0x228>)
 8004270:	4282      	cmp	r2, r0
 8004272:	d007      	beq.n	8004284 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004274:	481f      	ldr	r0, [pc, #124]	; (80042f4 <HAL_ADC_ConfigChannel+0x22c>)
 8004276:	4282      	cmp	r2, r0
 8004278:	d013      	beq.n	80042a2 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800427a:	481f      	ldr	r0, [pc, #124]	; (80042f8 <HAL_ADC_ConfigChannel+0x230>)
 800427c:	4282      	cmp	r2, r0
 800427e:	d01f      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004280:	2000      	movs	r0, #0
 8004282:	e739      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004284:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004288:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 800428c:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8004290:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004294:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004298:	4311      	orrs	r1, r2
 800429a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800429e:	2000      	movs	r0, #0
}
 80042a0:	e72a      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042a2:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042a6:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 80042aa:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 80042ae:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80042b2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80042b6:	430a      	orrs	r2, r1
 80042b8:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042bc:	2000      	movs	r0, #0
}
 80042be:	e71b      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c0:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042c4:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80042c8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80042cc:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80042d0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80042d4:	430a      	orrs	r2, r1
 80042d6:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042da:	2000      	movs	r0, #0
}
 80042dc:	e70c      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
 80042de:	2000      	movs	r0, #0
 80042e0:	e70a      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80042e2:	2002      	movs	r0, #2
 80042e4:	e70b      	b.n	80040fe <HAL_ADC_ConfigChannel+0x36>
 80042e6:	bf00      	nop
 80042e8:	80000004 	.word	0x80000004
 80042ec:	40012000 	.word	0x40012000
 80042f0:	b0001000 	.word	0xb0001000
 80042f4:	b8004000 	.word	0xb8004000
 80042f8:	b4002000 	.word	0xb4002000
 80042fc:	20000074 	.word	0x20000074
 8004300:	053e2d63 	.word	0x053e2d63

08004304 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004304:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004306:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	f012 0f04 	tst.w	r2, #4
 800430e:	d02a      	beq.n	8004366 <ADC_ConversionStop+0x62>
 8004310:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	f012 0f02 	tst.w	r2, #2
 8004318:	d107      	bne.n	800432a <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004320:	f022 0217 	bic.w	r2, r2, #23
 8004324:	f042 0210 	orr.w	r2, r2, #16
 8004328:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800432a:	f7fd fe7d 	bl	8002028 <HAL_GetTick>
 800432e:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f013 0f04 	tst.w	r3, #4
 8004338:	d013      	beq.n	8004362 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800433a:	f7fd fe75 	bl	8002028 <HAL_GetTick>
 800433e:	1b43      	subs	r3, r0, r5
 8004340:	2b02      	cmp	r3, #2
 8004342:	d9f5      	bls.n	8004330 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f013 0f04 	tst.w	r3, #4
 800434c:	d0f0      	beq.n	8004330 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004350:	f043 0310 	orr.w	r3, r3, #16
 8004354:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004356:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800435e:	2001      	movs	r0, #1
 8004360:	e002      	b.n	8004368 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004362:	2000      	movs	r0, #0
 8004364:	e000      	b.n	8004368 <ADC_ConversionStop+0x64>
 8004366:	2000      	movs	r0, #0
}
 8004368:	bd38      	pop	{r3, r4, r5, pc}
	...

0800436c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800436c:	b530      	push	{r4, r5, lr}
 800436e:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004370:	2300      	movs	r3, #0
 8004372:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004374:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	f012 0f01 	tst.w	r2, #1
 800437c:	d15b      	bne.n	8004436 <ADC_Enable+0xca>
 800437e:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004380:	6899      	ldr	r1, [r3, #8]
 8004382:	4a2e      	ldr	r2, [pc, #184]	; (800443c <ADC_Enable+0xd0>)
 8004384:	4211      	tst	r1, r2
 8004386:	d117      	bne.n	80043b8 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800438e:	f022 0217 	bic.w	r2, r2, #23
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <ADC_Enable+0xd4>)
 800439a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800439e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80043a2:	d019      	beq.n	80043d8 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043a4:	4b27      	ldr	r3, [pc, #156]	; (8004444 <ADC_Enable+0xd8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	4a27      	ldr	r2, [pc, #156]	; (8004448 <ADC_Enable+0xdc>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	099b      	lsrs	r3, r3, #6
 80043b2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80043b4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80043b6:	e00c      	b.n	80043d2 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80043ba:	f043 0310 	orr.w	r3, r3, #16
 80043be:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80043c8:	2001      	movs	r0, #1
 80043ca:	e035      	b.n	8004438 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80043cc:	9b01      	ldr	r3, [sp, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80043d2:	9b01      	ldr	r3, [sp, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f9      	bne.n	80043cc <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80043d8:	7e63      	ldrb	r3, [r4, #25]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043de:	2000      	movs	r0, #0
 80043e0:	e02a      	b.n	8004438 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80043e2:	f7fd fe21 	bl	8002028 <HAL_GetTick>
 80043e6:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f012 0f01 	tst.w	r2, #1
 80043f0:	d11f      	bne.n	8004432 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	f012 0f01 	tst.w	r2, #1
 80043f8:	d107      	bne.n	800440a <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004400:	f022 0217 	bic.w	r2, r2, #23
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800440a:	f7fd fe0d 	bl	8002028 <HAL_GetTick>
 800440e:	1b40      	subs	r0, r0, r5
 8004410:	2802      	cmp	r0, #2
 8004412:	d9e9      	bls.n	80043e8 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f013 0f01 	tst.w	r3, #1
 800441c:	d1e4      	bne.n	80043e8 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004420:	f043 0310 	orr.w	r3, r3, #16
 8004424:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004426:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800442e:	2001      	movs	r0, #1
 8004430:	e002      	b.n	8004438 <ADC_Enable+0xcc>
  return HAL_OK;
 8004432:	2000      	movs	r0, #0
 8004434:	e000      	b.n	8004438 <ADC_Enable+0xcc>
 8004436:	2000      	movs	r0, #0
}
 8004438:	b003      	add	sp, #12
 800443a:	bd30      	pop	{r4, r5, pc}
 800443c:	80000017 	.word	0x80000017
 8004440:	40012000 	.word	0x40012000
 8004444:	20000074 	.word	0x20000074
 8004448:	053e2d63 	.word	0x053e2d63

0800444c <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800444c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f013 0f04 	tst.w	r3, #4
 8004454:	d128      	bne.n	80044a8 <HAL_ADC_Start+0x5c>
{
 8004456:	b510      	push	{r4, lr}
 8004458:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800445a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800445e:	2b01      	cmp	r3, #1
 8004460:	d024      	beq.n	80044ac <HAL_ADC_Start+0x60>
 8004462:	2301      	movs	r3, #1
 8004464:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8004468:	f7ff ff80 	bl	800436c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800446c:	b9c0      	cbnz	r0, 80044a0 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800446e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004470:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800447e:	2300      	movs	r3, #0
 8004480:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	211c      	movs	r1, #28
 8004486:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004488:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 800448c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800448e:	6893      	ldr	r3, [r2, #8]
 8004490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004494:	f023 0317 	bic.w	r3, r3, #23
 8004498:	f043 0304 	orr.w	r3, r3, #4
 800449c:	6093      	str	r3, [r2, #8]
}
 800449e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80044a0:	2300      	movs	r3, #0
 80044a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80044a6:	e7fa      	b.n	800449e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80044a8:	2002      	movs	r0, #2
}
 80044aa:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80044ac:	2002      	movs	r0, #2
 80044ae:	e7f6      	b.n	800449e <HAL_ADC_Start+0x52>

080044b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044b4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044b6:	6893      	ldr	r3, [r2, #8]
 80044b8:	f013 0302 	ands.w	r3, r3, #2
 80044bc:	d000      	beq.n	80044c0 <ADC_Disable+0x10>
 80044be:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044c0:	6891      	ldr	r1, [r2, #8]
 80044c2:	f011 0f01 	tst.w	r1, #1
 80044c6:	d039      	beq.n	800453c <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d139      	bne.n	8004540 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044cc:	6893      	ldr	r3, [r2, #8]
 80044ce:	f003 0305 	and.w	r3, r3, #5
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d009      	beq.n	80044ea <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044d8:	f043 0310 	orr.w	r3, r3, #16
 80044dc:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80044e6:	2001      	movs	r0, #1
 80044e8:	e029      	b.n	800453e <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80044ea:	6893      	ldr	r3, [r2, #8]
 80044ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f0:	f023 0317 	bic.w	r3, r3, #23
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	2203      	movs	r2, #3
 80044fe:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004500:	f7fd fd92 	bl	8002028 <HAL_GetTick>
 8004504:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f013 0f01 	tst.w	r3, #1
 800450e:	d013      	beq.n	8004538 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004510:	f7fd fd8a 	bl	8002028 <HAL_GetTick>
 8004514:	1b40      	subs	r0, r0, r5
 8004516:	2802      	cmp	r0, #2
 8004518:	d9f5      	bls.n	8004506 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f013 0f01 	tst.w	r3, #1
 8004522:	d0f0      	beq.n	8004506 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004524:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004526:	f043 0310 	orr.w	r3, r3, #16
 800452a:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8004534:	2001      	movs	r0, #1
 8004536:	e002      	b.n	800453e <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004538:	2000      	movs	r0, #0
 800453a:	e000      	b.n	800453e <ADC_Disable+0x8e>
 800453c:	2000      	movs	r0, #0
}
 800453e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004540:	2000      	movs	r0, #0
 8004542:	e7fc      	b.n	800453e <ADC_Disable+0x8e>

08004544 <HAL_ADC_DeInit>:
{
 8004544:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8004546:	2800      	cmp	r0, #0
 8004548:	d056      	beq.n	80045f8 <HAL_ADC_DeInit+0xb4>
 800454a:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800454c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800454e:	f043 0302 	orr.w	r3, r3, #2
 8004552:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004554:	f7ff fed6 	bl	8004304 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004558:	4606      	mov	r6, r0
 800455a:	2800      	cmp	r0, #0
 800455c:	d03d      	beq.n	80045da <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800455e:	6822      	ldr	r2, [r4, #0]
 8004560:	6853      	ldr	r3, [r2, #4]
 8004562:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004566:	f023 0303 	bic.w	r3, r3, #3
 800456a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	f240 329f 	movw	r2, #927	; 0x39f
 8004572:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	68d1      	ldr	r1, [r2, #12]
 8004578:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_ADC_DeInit+0xb8>)
 800457a:	400b      	ands	r3, r1
 800457c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	6913      	ldr	r3, [r2, #16]
 8004582:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004586:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	6953      	ldr	r3, [r2, #20]
 800458c:	f023 0307 	bic.w	r3, r3, #7
 8004590:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	6a13      	ldr	r3, [r2, #32]
 8004596:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800459a:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80045a0:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80045a4:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80045aa:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80045ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b4:	2500      	movs	r5, #0
 80045b6:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80045b8:	4a11      	ldr	r2, [pc, #68]	; (8004600 <HAL_ADC_DeInit+0xbc>)
 80045ba:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80045be:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80045c2:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80045c6:	4620      	mov	r0, r4
 80045c8:	f7fc ff0a 	bl	80013e0 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80045cc:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80045ce:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80045d0:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80045d2:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80045d6:	4630      	mov	r0, r6
 80045d8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80045da:	4620      	mov	r0, r4
 80045dc:	f7ff ff68 	bl	80044b0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80045e0:	4606      	mov	r6, r0
 80045e2:	b908      	cbnz	r0, 80045e8 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80045e4:	2301      	movs	r3, #1
 80045e6:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80045e8:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80045ea:	6893      	ldr	r3, [r2, #8]
 80045ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80045f0:	f023 0317 	bic.w	r3, r3, #23
 80045f4:	6093      	str	r3, [r2, #8]
}
 80045f6:	e7b2      	b.n	800455e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80045f8:	2601      	movs	r6, #1
 80045fa:	e7ec      	b.n	80045d6 <HAL_ADC_DeInit+0x92>
 80045fc:	833e0200 	.word	0x833e0200
 8004600:	40012000 	.word	0x40012000

08004604 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004604:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004608:	2b01      	cmp	r3, #1
 800460a:	d019      	beq.n	8004640 <HAL_ADC_Stop+0x3c>
{
 800460c:	b510      	push	{r4, lr}
 800460e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004610:	2301      	movs	r3, #1
 8004612:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004616:	f7ff fe75 	bl	8004304 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800461a:	b118      	cbz	r0, 8004624 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800461c:	2300      	movs	r3, #0
 800461e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8004622:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004624:	4620      	mov	r0, r4
 8004626:	f7ff ff43 	bl	80044b0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800462a:	2800      	cmp	r0, #0
 800462c:	d1f6      	bne.n	800461c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800462e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	65a3      	str	r3, [r4, #88]	; 0x58
 800463e:	e7ed      	b.n	800461c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8004640:	2002      	movs	r0, #2
}
 8004642:	4770      	bx	lr

08004644 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004646:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004648:	2300      	movs	r3, #0
 800464a:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800464c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004650:	2b01      	cmp	r3, #1
 8004652:	f000 8094 	beq.w	800477e <HAL_ADCEx_Calibration_Start+0x13a>
 8004656:	4604      	mov	r4, r0
 8004658:	2301      	movs	r3, #1
 800465a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800465e:	f7ff ff27 	bl	80044b0 <ADC_Disable>
 8004662:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004664:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	f012 0201 	ands.w	r2, r2, #1
 800466c:	d009      	beq.n	8004682 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004670:	f043 0310 	orr.w	r3, r3, #16
 8004674:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004676:	2300      	movs	r3, #0
 8004678:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800467c:	4628      	mov	r0, r5
 800467e:	b003      	add	sp, #12
 8004680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004682:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004684:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8004688:	f041 0102 	orr.w	r1, r1, #2
 800468c:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800468e:	68de      	ldr	r6, [r3, #12]
 8004690:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8004694:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8004698:	0436      	lsls	r6, r6, #16
 800469a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80046a2:	f021 0103 	bic.w	r1, r1, #3
 80046a6:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80046a8:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80046aa:	e005      	b.n	80046b8 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80046ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80046b4:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80046b6:	3201      	adds	r2, #1
 80046b8:	2a07      	cmp	r2, #7
 80046ba:	d81e      	bhi.n	80046fa <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80046bc:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80046be:	688b      	ldr	r3, [r1, #8]
 80046c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046c4:	f023 0317 	bic.w	r3, r3, #23
 80046c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046cc:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046ce:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046d0:	6899      	ldr	r1, [r3, #8]
 80046d2:	2900      	cmp	r1, #0
 80046d4:	daea      	bge.n	80046ac <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	3301      	adds	r3, #1
 80046da:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046dc:	9b01      	ldr	r3, [sp, #4]
 80046de:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80046e2:	d3f4      	bcc.n	80046ce <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 80046e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046e6:	f023 0312 	bic.w	r3, r3, #18
 80046ea:	f043 0310 	orr.w	r3, r3, #16
 80046ee:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80046f0:	2300      	movs	r3, #0
 80046f2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80046f6:	2501      	movs	r5, #1
 80046f8:	e7c0      	b.n	800467c <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80046fa:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80046fe:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004700:	6893      	ldr	r3, [r2, #8]
 8004702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004706:	f023 0317 	bic.w	r3, r3, #23
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004710:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004712:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8004716:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800471a:	4318      	orrs	r0, r3
 800471c:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8004720:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004722:	6893      	ldr	r3, [r2, #8]
 8004724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004728:	f023 0317 	bic.w	r3, r3, #23
 800472c:	f043 0302 	orr.w	r3, r3, #2
 8004730:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004732:	f7fd fc79 	bl	8002028 <HAL_GetTick>
 8004736:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004738:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	f012 0f01 	tst.w	r2, #1
 8004740:	d109      	bne.n	8004756 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	4332      	orrs	r2, r6
 8004746:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	65a3      	str	r3, [r4, #88]	; 0x58
 8004754:	e78f      	b.n	8004676 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004756:	f7fd fc67 	bl	8002028 <HAL_GetTick>
 800475a:	1bc3      	subs	r3, r0, r7
 800475c:	2b02      	cmp	r3, #2
 800475e:	d9eb      	bls.n	8004738 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f013 0f01 	tst.w	r3, #1
 8004768:	d0e6      	beq.n	8004738 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800476a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800476c:	f043 0310 	orr.w	r3, r3, #16
 8004770:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004772:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800477a:	2501      	movs	r5, #1
 800477c:	e77e      	b.n	800467c <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800477e:	2502      	movs	r5, #2
 8004780:	e77c      	b.n	800467c <HAL_ADCEx_Calibration_Start+0x38>
	...

08004784 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004784:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004786:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004788:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004790:	0200      	lsls	r0, r0, #8
 8004792:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004796:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800479c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80047a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80047a2:	4770      	bx	lr
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047aa:	4b19      	ldr	r3, [pc, #100]	; (8004810 <HAL_NVIC_SetPriority+0x68>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047b2:	f1c3 0c07 	rsb	ip, r3, #7
 80047b6:	f1bc 0f04 	cmp.w	ip, #4
 80047ba:	bf28      	it	cs
 80047bc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c0:	f103 0e04 	add.w	lr, r3, #4
 80047c4:	f1be 0f06 	cmp.w	lr, #6
 80047c8:	d918      	bls.n	80047fc <HAL_NVIC_SetPriority+0x54>
 80047ca:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047cc:	f04f 3eff 	mov.w	lr, #4294967295
 80047d0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80047d4:	ea21 010c 	bic.w	r1, r1, ip
 80047d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047da:	fa0e fe03 	lsl.w	lr, lr, r3
 80047de:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80047e4:	2800      	cmp	r0, #0
 80047e6:	db0b      	blt.n	8004800 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80047f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80047f4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80047f8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fc:	2300      	movs	r3, #0
 80047fe:	e7e5      	b.n	80047cc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004800:	f000 000f 	and.w	r0, r0, #15
 8004804:	0112      	lsls	r2, r2, #4
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <HAL_NVIC_SetPriority+0x6c>)
 800480a:	541a      	strb	r2, [r3, r0]
 800480c:	e7f4      	b.n	80047f8 <HAL_NVIC_SetPriority+0x50>
 800480e:	bf00      	nop
 8004810:	e000ed00 	.word	0xe000ed00
 8004814:	e000ed14 	.word	0xe000ed14

08004818 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004818:	2800      	cmp	r0, #0
 800481a:	db07      	blt.n	800482c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800481c:	f000 021f 	and.w	r2, r0, #31
 8004820:	0940      	lsrs	r0, r0, #5
 8004822:	2301      	movs	r3, #1
 8004824:	4093      	lsls	r3, r2
 8004826:	4a02      	ldr	r2, [pc, #8]	; (8004830 <HAL_NVIC_EnableIRQ+0x18>)
 8004828:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000e100 	.word	0xe000e100

08004834 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004834:	2800      	cmp	r0, #0
 8004836:	db0c      	blt.n	8004852 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004838:	f000 021f 	and.w	r2, r0, #31
 800483c:	0940      	lsrs	r0, r0, #5
 800483e:	2301      	movs	r3, #1
 8004840:	4093      	lsls	r3, r2
 8004842:	3020      	adds	r0, #32
 8004844:	4a03      	ldr	r2, [pc, #12]	; (8004854 <HAL_NVIC_DisableIRQ+0x20>)
 8004846:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800484a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800484e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004852:	4770      	bx	lr
 8004854:	e000e100 	.word	0xe000e100

08004858 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004858:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800485a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800485c:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8004860:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004864:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004866:	b124      	cbz	r4, 8004872 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004868:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800486a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 800486e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004872:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004874:	f004 0c1c 	and.w	ip, r4, #28
 8004878:	2401      	movs	r4, #1
 800487a:	fa04 f40c 	lsl.w	r4, r4, ip
 800487e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8004882:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004886:	6804      	ldr	r4, [r0, #0]
 8004888:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800488a:	6883      	ldr	r3, [r0, #8]
 800488c:	2b10      	cmp	r3, #16
 800488e:	d005      	beq.n	800489c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004890:	6803      	ldr	r3, [r0, #0]
 8004892:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004894:	6803      	ldr	r3, [r0, #0]
 8004896:	60da      	str	r2, [r3, #12]
  }
}
 8004898:	bc10      	pop	{r4}
 800489a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800489c:	6803      	ldr	r3, [r0, #0]
 800489e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80048a0:	6803      	ldr	r3, [r0, #0]
 80048a2:	60d9      	str	r1, [r3, #12]
 80048a4:	e7f8      	b.n	8004898 <DMA_SetConfig+0x40>
	...

080048a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80048a8:	6803      	ldr	r3, [r0, #0]
 80048aa:	4a14      	ldr	r2, [pc, #80]	; (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d816      	bhi.n	80048de <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80048b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80048b2:	f022 0203 	bic.w	r2, r2, #3
 80048b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80048ba:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80048be:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	3b08      	subs	r3, #8
 80048c4:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048cc:	4a0d      	ldr	r2, [pc, #52]	; (8004904 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80048ce:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2201      	movs	r2, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	6503      	str	r3, [r0, #80]	; 0x50
}
 80048dc:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80048de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80048e0:	f022 0103 	bic.w	r1, r2, #3
 80048e4:	4a08      	ldr	r2, [pc, #32]	; (8004908 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80048e6:	440a      	add	r2, r1
 80048e8:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3b08      	subs	r3, #8
 80048ee:	4a04      	ldr	r2, [pc, #16]	; (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	3307      	adds	r3, #7
 80048f8:	e7e8      	b.n	80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80048fa:	bf00      	nop
 80048fc:	40020407 	.word	0x40020407
 8004900:	cccccccd 	.word	0xcccccccd
 8004904:	40020880 	.word	0x40020880
 8004908:	4002081c 	.word	0x4002081c

0800490c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800490c:	6843      	ldr	r3, [r0, #4]
 800490e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004912:	4a07      	ldr	r2, [pc, #28]	; (8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004914:	441a      	add	r2, r3
 8004916:	0092      	lsls	r2, r2, #2
 8004918:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800491a:	4a06      	ldr	r2, [pc, #24]	; (8004934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 800491c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800491e:	3b01      	subs	r3, #1
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	2201      	movs	r2, #1
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	1000823f 	.word	0x1000823f
 8004934:	40020940 	.word	0x40020940

08004938 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004938:	2800      	cmp	r0, #0
 800493a:	d060      	beq.n	80049fe <HAL_DMA_Init+0xc6>
{
 800493c:	b510      	push	{r4, lr}
 800493e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004940:	6802      	ldr	r2, [r0, #0]
 8004942:	4b30      	ldr	r3, [pc, #192]	; (8004a04 <HAL_DMA_Init+0xcc>)
 8004944:	429a      	cmp	r2, r3
 8004946:	d842      	bhi.n	80049ce <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004948:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <HAL_DMA_Init+0xd0>)
 800494a:	4413      	add	r3, r2
 800494c:	492f      	ldr	r1, [pc, #188]	; (8004a0c <HAL_DMA_Init+0xd4>)
 800494e:	fba1 1303 	umull	r1, r3, r1, r3
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004958:	4b2d      	ldr	r3, [pc, #180]	; (8004a10 <HAL_DMA_Init+0xd8>)
 800495a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800495c:	2302      	movs	r3, #2
 800495e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004962:	6813      	ldr	r3, [r2, #0]
 8004964:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800496e:	6821      	ldr	r1, [r4, #0]
 8004970:	680a      	ldr	r2, [r1, #0]
 8004972:	68a3      	ldr	r3, [r4, #8]
 8004974:	68e0      	ldr	r0, [r4, #12]
 8004976:	4303      	orrs	r3, r0
 8004978:	6920      	ldr	r0, [r4, #16]
 800497a:	4303      	orrs	r3, r0
 800497c:	6960      	ldr	r0, [r4, #20]
 800497e:	4303      	orrs	r3, r0
 8004980:	69a0      	ldr	r0, [r4, #24]
 8004982:	4303      	orrs	r3, r0
 8004984:	69e0      	ldr	r0, [r4, #28]
 8004986:	4303      	orrs	r3, r0
 8004988:	6a20      	ldr	r0, [r4, #32]
 800498a:	4303      	orrs	r3, r0
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff ff89 	bl	80048a8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004996:	68a3      	ldr	r3, [r4, #8]
 8004998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499c:	d022      	beq.n	80049e4 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80049a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80049aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049ac:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d919      	bls.n	80049ea <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80049ba:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049bc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049be:	2000      	movs	r0, #0
 80049c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80049c8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80049cc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_DMA_Init+0xdc>)
 80049d0:	4413      	add	r3, r2
 80049d2:	490e      	ldr	r1, [pc, #56]	; (8004a0c <HAL_DMA_Init+0xd4>)
 80049d4:	fba1 1303 	umull	r1, r3, r1, r3
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <HAL_DMA_Init+0xe0>)
 80049e0:	6403      	str	r3, [r0, #64]	; 0x40
 80049e2:	e7bb      	b.n	800495c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049e4:	2300      	movs	r3, #0
 80049e6:	6063      	str	r3, [r4, #4]
 80049e8:	e7d9      	b.n	800499e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049ea:	4620      	mov	r0, r4
 80049ec:	f7ff ff8e 	bl	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	e7df      	b.n	80049be <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80049fe:	2001      	movs	r0, #1
}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40020407 	.word	0x40020407
 8004a08:	bffdfff8 	.word	0xbffdfff8
 8004a0c:	cccccccd 	.word	0xcccccccd
 8004a10:	40020000 	.word	0x40020000
 8004a14:	bffdfbf8 	.word	0xbffdfbf8
 8004a18:	40020400 	.word	0x40020400

08004a1c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d04b      	beq.n	8004ab8 <HAL_DMA_DeInit+0x9c>
{
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004a24:	6802      	ldr	r2, [r0, #0]
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a2e:	6802      	ldr	r2, [r0, #0]
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <HAL_DMA_DeInit+0xa0>)
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d82c      	bhi.n	8004a90 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a36:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <HAL_DMA_DeInit+0xa4>)
 8004a38:	4413      	add	r3, r2
 8004a3a:	4922      	ldr	r1, [pc, #136]	; (8004ac4 <HAL_DMA_DeInit+0xa8>)
 8004a3c:	fba1 1303 	umull	r1, r3, r1, r3
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a46:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_DMA_DeInit+0xac>)
 8004a48:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8004a4a:	2500      	movs	r5, #0
 8004a4c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a50:	f003 021c 	and.w	r2, r3, #28
 8004a54:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a56:	2301      	movs	r3, #1
 8004a58:	4093      	lsls	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f7ff ff23 	bl	80048a8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8004a62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a64:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004a6a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a6c:	6863      	ldr	r3, [r4, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d918      	bls.n	8004aa6 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8004a74:	2000      	movs	r0, #0
 8004a76:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004a78:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a7a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8004a7c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004a7e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004a80:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004a82:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a84:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004a86:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004a8a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a90:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <HAL_DMA_DeInit+0xb0>)
 8004a92:	4413      	add	r3, r2
 8004a94:	490b      	ldr	r1, [pc, #44]	; (8004ac4 <HAL_DMA_DeInit+0xa8>)
 8004a96:	fba1 1303 	umull	r1, r3, r1, r3
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_DMA_DeInit+0xb4>)
 8004aa2:	6403      	str	r3, [r0, #64]	; 0x40
 8004aa4:	e7d1      	b.n	8004a4a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7ff ff30 	bl	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004aae:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ab2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	e7dd      	b.n	8004a74 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004ab8:	2001      	movs	r0, #1
}
 8004aba:	4770      	bx	lr
 8004abc:	40020407 	.word	0x40020407
 8004ac0:	bffdfff8 	.word	0xbffdfff8
 8004ac4:	cccccccd 	.word	0xcccccccd
 8004ac8:	40020000 	.word	0x40020000
 8004acc:	bffdfbf8 	.word	0xbffdfbf8
 8004ad0:	40020400 	.word	0x40020400

08004ad4 <HAL_DMA_Start_IT>:
{
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004ad8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004adc:	2801      	cmp	r0, #1
 8004ade:	d043      	beq.n	8004b68 <HAL_DMA_Start_IT+0x94>
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004ae6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004aea:	b2c0      	uxtb	r0, r0
 8004aec:	2801      	cmp	r0, #1
 8004aee:	d006      	beq.n	8004afe <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004af4:	2300      	movs	r3, #0
 8004af6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004afa:	2001      	movs	r0, #1
}
 8004afc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004afe:	2002      	movs	r0, #2
 8004b00:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b04:	2000      	movs	r0, #0
 8004b06:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004b08:	6825      	ldr	r5, [r4, #0]
 8004b0a:	6828      	ldr	r0, [r5, #0]
 8004b0c:	f020 0001 	bic.w	r0, r0, #1
 8004b10:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7ff fea0 	bl	8004858 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004b18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b1a:	b1d3      	cbz	r3, 8004b52 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b1c:	6822      	ldr	r2, [r4, #0]
 8004b1e:	6813      	ldr	r3, [r2, #0]
 8004b20:	f043 030e 	orr.w	r3, r3, #14
 8004b24:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004b2e:	d003      	beq.n	8004b38 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b36:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004b38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b3a:	b11b      	cbz	r3, 8004b44 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b42:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e7d4      	b.n	8004afc <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	6813      	ldr	r3, [r2, #0]
 8004b56:	f023 0304 	bic.w	r3, r3, #4
 8004b5a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	f043 030a 	orr.w	r3, r3, #10
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e7de      	b.n	8004b26 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004b68:	2002      	movs	r0, #2
 8004b6a:	e7c7      	b.n	8004afc <HAL_DMA_Start_IT+0x28>

08004b6c <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d034      	beq.n	8004bdc <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b72:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	2a02      	cmp	r2, #2
 8004b7a:	d006      	beq.n	8004b8a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004b80:	2200      	movs	r2, #0
 8004b82:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004b86:	2001      	movs	r0, #1
 8004b88:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b8a:	6801      	ldr	r1, [r0, #0]
 8004b8c:	680a      	ldr	r2, [r1, #0]
 8004b8e:	f022 020e 	bic.w	r2, r2, #14
 8004b92:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b94:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004b96:	680a      	ldr	r2, [r1, #0]
 8004b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b9c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004b9e:	6801      	ldr	r1, [r0, #0]
 8004ba0:	680a      	ldr	r2, [r1, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004baa:	f002 011c 	and.w	r1, r2, #28
 8004bae:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	408a      	lsls	r2, r1
 8004bb4:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bba:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bbe:	b132      	cbz	r2, 8004bce <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bc0:	6811      	ldr	r1, [r2, #0]
 8004bc2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004bc6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004bcc:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004bda:	4770      	bx	lr
    return HAL_ERROR;
 8004bdc:	2001      	movs	r0, #1
}
 8004bde:	4770      	bx	lr

08004be0 <HAL_DMA_Abort_IT>:
{
 8004be0:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004be2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d003      	beq.n	8004bf4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bec:	2304      	movs	r3, #4
 8004bee:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004bf0:	2001      	movs	r0, #1
}
 8004bf2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bf4:	6802      	ldr	r2, [r0, #0]
 8004bf6:	6813      	ldr	r3, [r2, #0]
 8004bf8:	f023 030e 	bic.w	r3, r3, #14
 8004bfc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004bfe:	6802      	ldr	r2, [r0, #0]
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c08:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004c0a:	6813      	ldr	r3, [r2, #0]
 8004c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c10:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c14:	f003 021c 	and.w	r2, r3, #28
 8004c18:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4093      	lsls	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004c22:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004c24:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004c26:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004c28:	b133      	cbz	r3, 8004c38 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c30:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c32:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004c34:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004c36:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004c44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c46:	b113      	cbz	r3, 8004c4e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004c48:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e7d1      	b.n	8004bf2 <HAL_DMA_Abort_IT+0x12>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7cf      	b.n	8004bf2 <HAL_DMA_Abort_IT+0x12>
	...

08004c54 <HAL_DMA_IRQHandler>:
{
 8004c54:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c58:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004c5a:	6804      	ldr	r4, [r0, #0]
 8004c5c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c5e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c60:	f003 031c 	and.w	r3, r3, #28
 8004c64:	2204      	movs	r2, #4
 8004c66:	409a      	lsls	r2, r3
 8004c68:	420a      	tst	r2, r1
 8004c6a:	d015      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x44>
 8004c6c:	f015 0f04 	tst.w	r5, #4
 8004c70:	d012      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	f013 0f20 	tst.w	r3, #32
 8004c78:	d103      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	f023 0304 	bic.w	r3, r3, #4
 8004c80:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c82:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c84:	f003 021c 	and.w	r2, r3, #28
 8004c88:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	4093      	lsls	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004c90:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004c92:	b103      	cbz	r3, 8004c96 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004c94:	4798      	blx	r3
}
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004c98:	2202      	movs	r2, #2
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	420a      	tst	r2, r1
 8004c9e:	d028      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x9e>
 8004ca0:	f015 0f02 	tst.w	r5, #2
 8004ca4:	d025      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	f013 0f20 	tst.w	r3, #32
 8004cac:	d106      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	f023 030a 	bic.w	r3, r3, #10
 8004cb4:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004cbc:	6802      	ldr	r2, [r0, #0]
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <HAL_DMA_IRQHandler+0xdc>)
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d90e      	bls.n	8004ce2 <HAL_DMA_IRQHandler+0x8e>
 8004cc4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004cc6:	f003 021c 	and.w	r2, r3, #28
 8004cca:	2302      	movs	r3, #2
 8004ccc:	4093      	lsls	r3, r2
 8004cce:	4a19      	ldr	r2, [pc, #100]	; (8004d34 <HAL_DMA_IRQHandler+0xe0>)
 8004cd0:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004cd8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0db      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004cde:	4798      	blx	r3
 8004ce0:	e7d9      	b.n	8004c96 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004ce2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ce4:	f003 021c 	and.w	r2, r3, #28
 8004ce8:	2302      	movs	r3, #2
 8004cea:	4093      	lsls	r3, r2
 8004cec:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <HAL_DMA_IRQHandler+0xe4>)
 8004cee:	6053      	str	r3, [r2, #4]
 8004cf0:	e7ef      	b.n	8004cd2 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	420b      	tst	r3, r1
 8004cfa:	d0cc      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x42>
 8004cfc:	f015 0f08 	tst.w	r5, #8
 8004d00:	d0c9      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	f023 030e 	bic.w	r3, r3, #14
 8004d08:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d0c:	f003 031c 	and.w	r3, r3, #28
 8004d10:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d12:	2201      	movs	r2, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d1a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004d1c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004d20:	2300      	movs	r3, #0
 8004d22:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004d26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0b4      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004d2c:	4798      	blx	r3
  return;
 8004d2e:	e7b2      	b.n	8004c96 <HAL_DMA_IRQHandler+0x42>
 8004d30:	40020080 	.word	0x40020080
 8004d34:	40020400 	.word	0x40020400
 8004d38:	40020000 	.word	0x40020000

08004d3c <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004d3c:	b178      	cbz	r0, 8004d5e <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004d3e:	6803      	ldr	r3, [r0, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004d42:	f011 0f10 	tst.w	r1, #16
 8004d46:	d004      	beq.n	8004d52 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004d48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004d4c:	d004      	beq.n	8004d58 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004d4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004d52:	601a      	str	r2, [r3, #0]
  return status;
 8004d54:	2000      	movs	r0, #0
 8004d56:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004d58:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004d5c:	e7f9      	b.n	8004d52 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004d5e:	2001      	movs	r0, #1
}
 8004d60:	4770      	bx	lr
	...

08004d64 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004d64:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004d66:	4c05      	ldr	r4, [pc, #20]	; (8004d7c <FLASH_Program_DoubleWord+0x18>)
 8004d68:	6961      	ldr	r1, [r4, #20]
 8004d6a:	f041 0101 	orr.w	r1, r1, #1
 8004d6e:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004d70:	6002      	str	r2, [r0, #0]
 8004d72:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004d76:	6043      	str	r3, [r0, #4]
}
 8004d78:	bc10      	pop	{r4}
 8004d7a:	4770      	bx	lr
 8004d7c:	58004000 	.word	0x58004000

08004d80 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004d80:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <FLASH_Program_Fast+0x34>)
 8004d82:	6953      	ldr	r3, [r2, #20]
 8004d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004d8e:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004d90:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004d92:	f851 2b04 	ldr.w	r2, [r1], #4
 8004d96:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8004d9a:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004d9c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004da0:	d1f7      	bne.n	8004d92 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <FLASH_Program_Fast+0x34>)
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004daa:	d1fa      	bne.n	8004da2 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dac:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	58004000 	.word	0x58004000

08004db8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <HAL_FLASH_Unlock+0x28>)
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	db01      	blt.n	8004dc4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_FLASH_Unlock+0x28>)
 8004dc6:	4a07      	ldr	r2, [pc, #28]	; (8004de4 <HAL_FLASH_Unlock+0x2c>)
 8004dc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004dca:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004dce:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	db01      	blt.n	8004dda <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	4770      	bx	lr
      status = HAL_ERROR;
 8004dda:	2001      	movs	r0, #1
}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	58004000 	.word	0x58004000
 8004de4:	45670123 	.word	0x45670123

08004de8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <HAL_FLASH_Lock+0x18>)
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004df0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	db01      	blt.n	8004dfc <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004df8:	2001      	movs	r0, #1
}
 8004dfa:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	4770      	bx	lr
 8004e00:	58004000 	.word	0x58004000

08004e04 <FLASH_WaitForLastOperation>:
{
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004e08:	f7fd f90e 	bl	8002028 <HAL_GetTick>
 8004e0c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e0e:	4b16      	ldr	r3, [pc, #88]	; (8004e68 <FLASH_WaitForLastOperation+0x64>)
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004e16:	d006      	beq.n	8004e26 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004e18:	f7fd f906 	bl	8002028 <HAL_GetTick>
 8004e1c:	1b00      	subs	r0, r0, r4
 8004e1e:	42a8      	cmp	r0, r5
 8004e20:	d3f5      	bcc.n	8004e0e <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004e22:	2003      	movs	r0, #3
}
 8004e24:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <FLASH_WaitForLastOperation+0x64>)
 8004e28:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004e2a:	f013 0f01 	tst.w	r3, #1
 8004e2e:	d002      	beq.n	8004e36 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e30:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <FLASH_WaitForLastOperation+0x64>)
 8004e32:	2101      	movs	r1, #1
 8004e34:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004e36:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d001      	beq.n	8004e42 <FLASH_WaitForLastOperation+0x3e>
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <FLASH_WaitForLastOperation+0x64>)
 8004e40:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004e42:	b95b      	cbnz	r3, 8004e5c <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <FLASH_WaitForLastOperation+0x64>)
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004e4c:	d00a      	beq.n	8004e64 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004e4e:	f7fd f8eb 	bl	8002028 <HAL_GetTick>
 8004e52:	1b00      	subs	r0, r0, r4
 8004e54:	42a8      	cmp	r0, r5
 8004e56:	d3f5      	bcc.n	8004e44 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004e58:	2003      	movs	r0, #3
 8004e5a:	e7e3      	b.n	8004e24 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004e5c:	4a03      	ldr	r2, [pc, #12]	; (8004e6c <FLASH_WaitForLastOperation+0x68>)
 8004e5e:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004e60:	2001      	movs	r0, #1
 8004e62:	e7df      	b.n	8004e24 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004e64:	2000      	movs	r0, #0
 8004e66:	e7dd      	b.n	8004e24 <FLASH_WaitForLastOperation+0x20>
 8004e68:	58004000 	.word	0x58004000
 8004e6c:	200006d4 	.word	0x200006d4

08004e70 <HAL_FLASH_Program>:
{
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004e74:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <HAL_FLASH_Program+0x5c>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d025      	beq.n	8004ec8 <HAL_FLASH_Program+0x58>
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	460d      	mov	r5, r1
 8004e80:	4616      	mov	r6, r2
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <HAL_FLASH_Program+0x5c>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e88:	2200      	movs	r2, #0
 8004e8a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e90:	f7ff ffb8 	bl	8004e04 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004e94:	b970      	cbnz	r0, 8004eb4 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004e96:	2c01      	cmp	r4, #1
 8004e98:	d010      	beq.n	8004ebc <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f7ff ff6f 	bl	8004d80 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ea6:	f7ff ffad 	bl	8004e04 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <HAL_FLASH_Program+0x60>)
 8004eac:	6953      	ldr	r3, [r2, #20]
 8004eae:	ea23 0304 	bic.w	r3, r3, r4
 8004eb2:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_FLASH_Program+0x5c>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
}
 8004eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f7ff ff4f 	bl	8004d64 <FLASH_Program_DoubleWord>
 8004ec6:	e7ec      	b.n	8004ea2 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004ec8:	2002      	movs	r0, #2
 8004eca:	e7f6      	b.n	8004eba <HAL_FLASH_Program+0x4a>
 8004ecc:	200006d4 	.word	0x200006d4
 8004ed0:	58004000 	.word	0x58004000

08004ed4 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004ed4:	4a03      	ldr	r2, [pc, #12]	; (8004ee4 <FLASH_MassErase+0x10>)
 8004ed6:	6953      	ldr	r3, [r2, #20]
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	6153      	str	r3, [r2, #20]
#endif
}
 8004ee2:	4770      	bx	lr
 8004ee4:	58004000 	.word	0x58004000

08004ee8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004ee8:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <FLASH_FlushCaches+0x64>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d006      	beq.n	8004f02 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004ef4:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <FLASH_FlushCaches+0x64>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d012      	beq.n	8004f26 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004f00:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <FLASH_FlushCaches+0x64>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e7e6      	b.n	8004ef4 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f26:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <FLASH_FlushCaches+0x64>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f3e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f46:	601a      	str	r2, [r3, #0]
}
 8004f48:	e7da      	b.n	8004f00 <FLASH_FlushCaches+0x18>
 8004f4a:	bf00      	nop
 8004f4c:	58004000 	.word	0x58004000

08004f50 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004f50:	4a03      	ldr	r2, [pc, #12]	; (8004f60 <FLASH_AcknowledgePageErase+0x10>)
 8004f52:	6953      	ldr	r3, [r2, #20]
 8004f54:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	6153      	str	r3, [r2, #20]
#endif
}
 8004f5e:	4770      	bx	lr
 8004f60:	58004000 	.word	0x58004000

08004f64 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004f64:	4a05      	ldr	r2, [pc, #20]	; (8004f7c <FLASH_PageErase+0x18>)
 8004f66:	6953      	ldr	r3, [r2, #20]
 8004f68:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004f6c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004f70:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004f74:	f040 0002 	orr.w	r0, r0, #2
 8004f78:	6150      	str	r0, [r2, #20]
}
 8004f7a:	4770      	bx	lr
 8004f7c:	58004000 	.word	0x58004000

08004f80 <HAL_FLASHEx_Erase>:
{
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004f82:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <HAL_FLASHEx_Erase+0x7c>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d035      	beq.n	8004ff6 <HAL_FLASHEx_Erase+0x76>
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	460f      	mov	r7, r1
 8004f8e:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_FLASHEx_Erase+0x7c>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f94:	2200      	movs	r2, #0
 8004f96:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f9c:	f7ff ff32 	bl	8004e04 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	bb18      	cbnz	r0, 8004fec <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d013      	beq.n	8004fd2 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
 8004fae:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004fb0:	686c      	ldr	r4, [r5, #4]
 8004fb2:	686b      	ldr	r3, [r5, #4]
 8004fb4:	68aa      	ldr	r2, [r5, #8]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d913      	bls.n	8004fe4 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7ff ffd1 	bl	8004f64 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fc6:	f7ff ff1d 	bl	8004e04 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004fca:	4606      	mov	r6, r0
 8004fcc:	b948      	cbnz	r0, 8004fe2 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004fce:	3401      	adds	r4, #1
 8004fd0:	e7ef      	b.n	8004fb2 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004fd2:	f7ff ff7f 	bl	8004ed4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fda:	f7ff ff13 	bl	8004e04 <FLASH_WaitForLastOperation>
 8004fde:	4606      	mov	r6, r0
 8004fe0:	e002      	b.n	8004fe8 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004fe2:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004fe4:	f7ff ffb4 	bl	8004f50 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004fe8:	f7ff ff7e 	bl	8004ee8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_FLASHEx_Erase+0x7c>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
}
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004ff6:	2602      	movs	r6, #2
 8004ff8:	e7fb      	b.n	8004ff2 <HAL_FLASHEx_Erase+0x72>
 8004ffa:	bf00      	nop
 8004ffc:	200006d4 	.word	0x200006d4

08005000 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005000:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8005002:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005004:	e069      	b.n	80050da <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005006:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005008:	005e      	lsls	r6, r3, #1
 800500a:	2403      	movs	r4, #3
 800500c:	40b4      	lsls	r4, r6
 800500e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005012:	68cc      	ldr	r4, [r1, #12]
 8005014:	40b4      	lsls	r4, r6
 8005016:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005018:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800501a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800501c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005020:	684c      	ldr	r4, [r1, #4]
 8005022:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8005026:	409c      	lsls	r4, r3
 8005028:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800502a:	6044      	str	r4, [r0, #4]
 800502c:	e066      	b.n	80050fc <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800502e:	08dd      	lsrs	r5, r3, #3
 8005030:	3508      	adds	r5, #8
 8005032:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005036:	f003 0c07 	and.w	ip, r3, #7
 800503a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800503e:	f04f 0e0f 	mov.w	lr, #15
 8005042:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005046:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800504a:	690c      	ldr	r4, [r1, #16]
 800504c:	fa04 f40c 	lsl.w	r4, r4, ip
 8005050:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8005054:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005058:	e067      	b.n	800512a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800505a:	2402      	movs	r4, #2
 800505c:	e000      	b.n	8005060 <HAL_GPIO_Init+0x60>
 800505e:	2400      	movs	r4, #0
 8005060:	fa04 f40e 	lsl.w	r4, r4, lr
 8005064:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005066:	f10c 0c02 	add.w	ip, ip, #2
 800506a:	4d4b      	ldr	r5, [pc, #300]	; (8005198 <HAL_GPIO_Init+0x198>)
 800506c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005070:	4c4a      	ldr	r4, [pc, #296]	; (800519c <HAL_GPIO_Init+0x19c>)
 8005072:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005074:	43d4      	mvns	r4, r2
 8005076:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800507a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800507e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8005082:	d001      	beq.n	8005088 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8005084:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005088:	4d44      	ldr	r5, [pc, #272]	; (800519c <HAL_GPIO_Init+0x19c>)
 800508a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800508c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800508e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005092:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005096:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 800509a:	d001      	beq.n	80050a0 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 800509c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80050a0:	4d3e      	ldr	r5, [pc, #248]	; (800519c <HAL_GPIO_Init+0x19c>)
 80050a2:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80050a4:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80050a8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050ac:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80050b0:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 80050b4:	d001      	beq.n	80050ba <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80050b6:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80050ba:	4d38      	ldr	r5, [pc, #224]	; (800519c <HAL_GPIO_Init+0x19c>)
 80050bc:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80050c0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80050c4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050c6:	684e      	ldr	r6, [r1, #4]
 80050c8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80050cc:	d001      	beq.n	80050d2 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80050ce:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80050d2:	4a32      	ldr	r2, [pc, #200]	; (800519c <HAL_GPIO_Init+0x19c>)
 80050d4:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80050d8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050da:	680a      	ldr	r2, [r1, #0]
 80050dc:	fa32 f403 	lsrs.w	r4, r2, r3
 80050e0:	d058      	beq.n	8005194 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050e2:	f04f 0c01 	mov.w	ip, #1
 80050e6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80050ea:	ea1c 0202 	ands.w	r2, ip, r2
 80050ee:	d0f3      	beq.n	80050d8 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050f0:	684c      	ldr	r4, [r1, #4]
 80050f2:	f004 0403 	and.w	r4, r4, #3
 80050f6:	3c01      	subs	r4, #1
 80050f8:	2c01      	cmp	r4, #1
 80050fa:	d984      	bls.n	8005006 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050fc:	684c      	ldr	r4, [r1, #4]
 80050fe:	f004 0403 	and.w	r4, r4, #3
 8005102:	2c03      	cmp	r4, #3
 8005104:	d00c      	beq.n	8005120 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8005106:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005108:	005d      	lsls	r5, r3, #1
 800510a:	f04f 0c03 	mov.w	ip, #3
 800510e:	fa0c fc05 	lsl.w	ip, ip, r5
 8005112:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005116:	688c      	ldr	r4, [r1, #8]
 8005118:	40ac      	lsls	r4, r5
 800511a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800511e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005120:	684c      	ldr	r4, [r1, #4]
 8005122:	f004 0403 	and.w	r4, r4, #3
 8005126:	2c02      	cmp	r4, #2
 8005128:	d081      	beq.n	800502e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800512a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800512c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005130:	f04f 0c03 	mov.w	ip, #3
 8005134:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005138:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800513c:	684c      	ldr	r4, [r1, #4]
 800513e:	f004 0403 	and.w	r4, r4, #3
 8005142:	fa04 f40e 	lsl.w	r4, r4, lr
 8005146:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800514a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800514c:	684c      	ldr	r4, [r1, #4]
 800514e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005152:	d0c1      	beq.n	80050d8 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8005154:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005158:	f10c 0502 	add.w	r5, ip, #2
 800515c:	4c0e      	ldr	r4, [pc, #56]	; (8005198 <HAL_GPIO_Init+0x198>)
 800515e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005162:	f003 0e03 	and.w	lr, r3, #3
 8005166:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800516a:	2407      	movs	r4, #7
 800516c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005170:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005174:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005178:	f43f af71 	beq.w	800505e <HAL_GPIO_Init+0x5e>
 800517c:	4c08      	ldr	r4, [pc, #32]	; (80051a0 <HAL_GPIO_Init+0x1a0>)
 800517e:	42a0      	cmp	r0, r4
 8005180:	d006      	beq.n	8005190 <HAL_GPIO_Init+0x190>
 8005182:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005186:	42a0      	cmp	r0, r4
 8005188:	f43f af67 	beq.w	800505a <HAL_GPIO_Init+0x5a>
 800518c:	2407      	movs	r4, #7
 800518e:	e767      	b.n	8005060 <HAL_GPIO_Init+0x60>
 8005190:	2401      	movs	r4, #1
 8005192:	e765      	b.n	8005060 <HAL_GPIO_Init+0x60>
  }
}
 8005194:	bd70      	pop	{r4, r5, r6, pc}
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	58000800 	.word	0x58000800
 80051a0:	48000400 	.word	0x48000400

080051a4 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80051a4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80051a6:	fa31 f203 	lsrs.w	r2, r1, r3
 80051aa:	d071      	beq.n	8005290 <HAL_GPIO_DeInit+0xec>
{
 80051ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ae:	e02e      	b.n	800520e <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051b0:	2502      	movs	r5, #2
 80051b2:	e000      	b.n	80051b6 <HAL_GPIO_DeInit+0x12>
 80051b4:	2500      	movs	r5, #0
 80051b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80051ba:	42a5      	cmp	r5, r4
 80051bc:	d049      	beq.n	8005252 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80051be:	6804      	ldr	r4, [r0, #0]
 80051c0:	005d      	lsls	r5, r3, #1
 80051c2:	f04f 0c03 	mov.w	ip, #3
 80051c6:	fa0c fc05 	lsl.w	ip, ip, r5
 80051ca:	ea44 040c 	orr.w	r4, r4, ip
 80051ce:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80051d0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80051d4:	f10e 0e08 	add.w	lr, lr, #8
 80051d8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80051dc:	f003 0607 	and.w	r6, r3, #7
 80051e0:	00b6      	lsls	r6, r6, #2
 80051e2:	250f      	movs	r5, #15
 80051e4:	40b5      	lsls	r5, r6
 80051e6:	ea24 0405 	bic.w	r4, r4, r5
 80051ea:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051ee:	6884      	ldr	r4, [r0, #8]
 80051f0:	ea24 040c 	bic.w	r4, r4, ip
 80051f4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80051f6:	6844      	ldr	r4, [r0, #4]
 80051f8:	ea24 0202 	bic.w	r2, r4, r2
 80051fc:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051fe:	68c2      	ldr	r2, [r0, #12]
 8005200:	ea22 020c 	bic.w	r2, r2, ip
 8005204:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8005206:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8005208:	fa31 f203 	lsrs.w	r2, r1, r3
 800520c:	d03f      	beq.n	800528e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800520e:	2201      	movs	r2, #1
 8005210:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8005212:	ea12 0701 	ands.w	r7, r2, r1
 8005216:	d0f6      	beq.n	8005206 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005218:	089e      	lsrs	r6, r3, #2
 800521a:	1cb5      	adds	r5, r6, #2
 800521c:	4c1d      	ldr	r4, [pc, #116]	; (8005294 <HAL_GPIO_DeInit+0xf0>)
 800521e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005222:	f003 0c03 	and.w	ip, r3, #3
 8005226:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800522a:	f04f 0e07 	mov.w	lr, #7
 800522e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005232:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005236:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800523a:	d0bb      	beq.n	80051b4 <HAL_GPIO_DeInit+0x10>
 800523c:	4d16      	ldr	r5, [pc, #88]	; (8005298 <HAL_GPIO_DeInit+0xf4>)
 800523e:	42a8      	cmp	r0, r5
 8005240:	d005      	beq.n	800524e <HAL_GPIO_DeInit+0xaa>
 8005242:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005246:	42a8      	cmp	r0, r5
 8005248:	d0b2      	beq.n	80051b0 <HAL_GPIO_DeInit+0xc>
 800524a:	2507      	movs	r5, #7
 800524c:	e7b3      	b.n	80051b6 <HAL_GPIO_DeInit+0x12>
 800524e:	2501      	movs	r5, #1
 8005250:	e7b1      	b.n	80051b6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8005252:	4c12      	ldr	r4, [pc, #72]	; (800529c <HAL_GPIO_DeInit+0xf8>)
 8005254:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005258:	ea25 0507 	bic.w	r5, r5, r7
 800525c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005260:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8005264:	ea25 0507 	bic.w	r5, r5, r7
 8005268:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800526c:	6825      	ldr	r5, [r4, #0]
 800526e:	ea25 0507 	bic.w	r5, r5, r7
 8005272:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005274:	6865      	ldr	r5, [r4, #4]
 8005276:	ea25 0507 	bic.w	r5, r5, r7
 800527a:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800527c:	4d05      	ldr	r5, [pc, #20]	; (8005294 <HAL_GPIO_DeInit+0xf0>)
 800527e:	3602      	adds	r6, #2
 8005280:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8005284:	ea24 040e 	bic.w	r4, r4, lr
 8005288:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 800528c:	e797      	b.n	80051be <HAL_GPIO_DeInit+0x1a>
  }
}
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	48000400 	.word	0x48000400
 800529c:	58000800 	.word	0x58000800

080052a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052a0:	b10a      	cbz	r2, 80052a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052a2:	6181      	str	r1, [r0, #24]
 80052a4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052a6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80052a8:	4770      	bx	lr

080052aa <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052aa:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052ac:	ea01 0203 	and.w	r2, r1, r3
 80052b0:	ea21 0103 	bic.w	r1, r1, r3
 80052b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80052b8:	6181      	str	r1, [r0, #24]
}
 80052ba:	4770      	bx	lr

080052bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052bc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4203      	tst	r3, r0
 80052c4:	d100      	bne.n	80052c8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80052c6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052c8:	4b02      	ldr	r3, [pc, #8]	; (80052d4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80052ca:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052cc:	f7fd ff46 	bl	800315c <HAL_GPIO_EXTI_Callback>
}
 80052d0:	e7f9      	b.n	80052c6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80052d2:	bf00      	nop
 80052d4:	58000800 	.word	0x58000800

080052d8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052d8:	6803      	ldr	r3, [r0, #0]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	f012 0f02 	tst.w	r2, #2
 80052e0:	d001      	beq.n	80052e6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052e2:	2200      	movs	r2, #0
 80052e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e6:	6803      	ldr	r3, [r0, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	f012 0f01 	tst.w	r2, #1
 80052ee:	d103      	bne.n	80052f8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	619a      	str	r2, [r3, #24]
  }
}
 80052f8:	4770      	bx	lr

080052fa <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052fa:	b410      	push	{r4}
 80052fc:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052fe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005302:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005306:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005308:	4321      	orrs	r1, r4
 800530a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800530e:	6802      	ldr	r2, [r0, #0]
 8005310:	6853      	ldr	r3, [r2, #4]
 8005312:	0d64      	lsrs	r4, r4, #21
 8005314:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005318:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800531c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8005320:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005324:	f044 0403 	orr.w	r4, r4, #3
 8005328:	ea23 0304 	bic.w	r3, r3, r4
 800532c:	430b      	orrs	r3, r1
 800532e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005330:	bc10      	pop	{r4}
 8005332:	4770      	bx	lr

08005334 <I2C_IsErrorOccurred>:
{
 8005334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005338:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800533a:	6803      	ldr	r3, [r0, #0]
 800533c:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800533e:	f016 0610 	ands.w	r6, r6, #16
 8005342:	d07c      	beq.n	800543e <I2C_IsErrorOccurred+0x10a>
 8005344:	460d      	mov	r5, r1
 8005346:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005348:	2210      	movs	r2, #16
 800534a:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800534c:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	6998      	ldr	r0, [r3, #24]
 8005354:	f010 0f20 	tst.w	r0, #32
 8005358:	d130      	bne.n	80053bc <I2C_IsErrorOccurred+0x88>
 800535a:	bb7f      	cbnz	r7, 80053bc <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 800535c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005360:	d0f6      	beq.n	8005350 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fc fe61 	bl	8002028 <HAL_GetTick>
 8005366:	eba0 0008 	sub.w	r0, r0, r8
 800536a:	42a8      	cmp	r0, r5
 800536c:	d801      	bhi.n	8005372 <I2C_IsErrorOccurred+0x3e>
 800536e:	2d00      	cmp	r5, #0
 8005370:	d1ee      	bne.n	8005350 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005372:	6821      	ldr	r1, [r4, #0]
 8005374:	684b      	ldr	r3, [r1, #4]
 8005376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800537a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800537e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005380:	6988      	ldr	r0, [r1, #24]
 8005382:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005386:	d002      	beq.n	800538e <I2C_IsErrorOccurred+0x5a>
 8005388:	b90b      	cbnz	r3, 800538e <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800538a:	2a20      	cmp	r2, #32
 800538c:	d10e      	bne.n	80053ac <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f013 0f20 	tst.w	r3, #32
 8005396:	d1db      	bne.n	8005350 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005398:	f7fc fe46 	bl	8002028 <HAL_GetTick>
 800539c:	eba0 0008 	sub.w	r0, r0, r8
 80053a0:	2819      	cmp	r0, #25
 80053a2:	d9f4      	bls.n	800538e <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80053a4:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80053a8:	2701      	movs	r7, #1
              break;
 80053aa:	e7d1      	b.n	8005350 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053ac:	684b      	ldr	r3, [r1, #4]
 80053ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053b2:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80053b4:	f7fc fe38 	bl	8002028 <HAL_GetTick>
 80053b8:	4680      	mov	r8, r0
 80053ba:	e7e8      	b.n	800538e <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80053bc:	b90f      	cbnz	r7, 80053c2 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053be:	2220      	movs	r2, #32
 80053c0:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80053c2:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80053c6:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80053d0:	d005      	beq.n	80053de <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 80053d2:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053da:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80053dc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053e2:	d006      	beq.n	80053f2 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 80053e4:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053ee:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80053f0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053f2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80053f6:	d024      	beq.n	8005442 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 80053f8:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005402:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8005404:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8005406:	4620      	mov	r0, r4
 8005408:	f7ff ff66 	bl	80052d8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800540c:	6822      	ldr	r2, [r4, #0]
 800540e:	6853      	ldr	r3, [r2, #4]
 8005410:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005414:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005418:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005422:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005424:	4333      	orrs	r3, r6
 8005426:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005428:	2320      	movs	r3, #32
 800542a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800542e:	2300      	movs	r3, #0
 8005430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005434:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005438:	4628      	mov	r0, r5
 800543a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2500      	movs	r5, #0
 8005440:	e7c2      	b.n	80053c8 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8005442:	2d00      	cmp	r5, #0
 8005444:	d0f8      	beq.n	8005438 <I2C_IsErrorOccurred+0x104>
 8005446:	e7de      	b.n	8005406 <I2C_IsErrorOccurred+0xd2>

08005448 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4604      	mov	r4, r0
 800544c:	460d      	mov	r5, r1
 800544e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f013 0f02 	tst.w	r3, #2
 8005458:	d11d      	bne.n	8005496 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800545a:	4632      	mov	r2, r6
 800545c:	4629      	mov	r1, r5
 800545e:	4620      	mov	r0, r4
 8005460:	f7ff ff68 	bl	8005334 <I2C_IsErrorOccurred>
 8005464:	b9c8      	cbnz	r0, 800549a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005466:	f1b5 3fff 	cmp.w	r5, #4294967295
 800546a:	d0f1      	beq.n	8005450 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546c:	f7fc fddc 	bl	8002028 <HAL_GetTick>
 8005470:	1b80      	subs	r0, r0, r6
 8005472:	42a8      	cmp	r0, r5
 8005474:	d801      	bhi.n	800547a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005476:	2d00      	cmp	r5, #0
 8005478:	d1ea      	bne.n	8005450 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800547c:	f043 0320 	orr.w	r3, r3, #32
 8005480:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005482:	2320      	movs	r3, #32
 8005484:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005488:	2300      	movs	r3, #0
 800548a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800548e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005492:	2001      	movs	r0, #1
 8005494:	e000      	b.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8005496:	2000      	movs	r0, #0
}
 8005498:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800549a:	2001      	movs	r0, #1
 800549c:	e7fc      	b.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800549e <I2C_WaitOnFlagUntilTimeout>:
{
 800549e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a2:	4606      	mov	r6, r0
 80054a4:	4688      	mov	r8, r1
 80054a6:	4617      	mov	r7, r2
 80054a8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054aa:	6834      	ldr	r4, [r6, #0]
 80054ac:	69a4      	ldr	r4, [r4, #24]
 80054ae:	ea38 0404 	bics.w	r4, r8, r4
 80054b2:	bf0c      	ite	eq
 80054b4:	2401      	moveq	r4, #1
 80054b6:	2400      	movne	r4, #0
 80054b8:	42bc      	cmp	r4, r7
 80054ba:	d118      	bne.n	80054ee <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80054bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80054c0:	d0f3      	beq.n	80054aa <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fc fdb1 	bl	8002028 <HAL_GetTick>
 80054c6:	9b06      	ldr	r3, [sp, #24]
 80054c8:	1ac0      	subs	r0, r0, r3
 80054ca:	42a8      	cmp	r0, r5
 80054cc:	d801      	bhi.n	80054d2 <I2C_WaitOnFlagUntilTimeout+0x34>
 80054ce:	2d00      	cmp	r5, #0
 80054d0:	d1eb      	bne.n	80054aa <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80054d4:	f043 0320 	orr.w	r3, r3, #32
 80054d8:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054da:	2320      	movs	r3, #32
 80054dc:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80054e6:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80054ea:	2001      	movs	r0, #1
 80054ec:	e000      	b.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 80054ee:	2000      	movs	r0, #0
}
 80054f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054f4 <I2C_RequestMemoryWrite>:
{
 80054f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	4604      	mov	r4, r0
 80054fc:	4690      	mov	r8, r2
 80054fe:	461d      	mov	r5, r3
 8005500:	9e08      	ldr	r6, [sp, #32]
 8005502:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005504:	4b19      	ldr	r3, [pc, #100]	; (800556c <I2C_RequestMemoryWrite+0x78>)
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800550c:	b2ea      	uxtb	r2, r5
 800550e:	f7ff fef4 	bl	80052fa <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005512:	463a      	mov	r2, r7
 8005514:	4631      	mov	r1, r6
 8005516:	4620      	mov	r0, r4
 8005518:	f7ff ff96 	bl	8005448 <I2C_WaitOnTXISFlagUntilTimeout>
 800551c:	b9f8      	cbnz	r0, 800555e <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800551e:	2d01      	cmp	r5, #1
 8005520:	d10e      	bne.n	8005540 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	fa5f f288 	uxtb.w	r2, r8
 8005528:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800552a:	9700      	str	r7, [sp, #0]
 800552c:	4633      	mov	r3, r6
 800552e:	2200      	movs	r2, #0
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	4620      	mov	r0, r4
 8005534:	f7ff ffb3 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 8005538:	b9a8      	cbnz	r0, 8005566 <I2C_RequestMemoryWrite+0x72>
}
 800553a:	b002      	add	sp, #8
 800553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005546:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005548:	463a      	mov	r2, r7
 800554a:	4631      	mov	r1, r6
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff ff7b 	bl	8005448 <I2C_WaitOnTXISFlagUntilTimeout>
 8005552:	b930      	cbnz	r0, 8005562 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	fa5f f288 	uxtb.w	r2, r8
 800555a:	629a      	str	r2, [r3, #40]	; 0x28
 800555c:	e7e5      	b.n	800552a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800555e:	2001      	movs	r0, #1
 8005560:	e7eb      	b.n	800553a <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8005562:	2001      	movs	r0, #1
 8005564:	e7e9      	b.n	800553a <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8005566:	2001      	movs	r0, #1
 8005568:	e7e7      	b.n	800553a <I2C_RequestMemoryWrite+0x46>
 800556a:	bf00      	nop
 800556c:	80002000 	.word	0x80002000

08005570 <I2C_RequestMemoryRead>:
{
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	4604      	mov	r4, r0
 8005578:	4690      	mov	r8, r2
 800557a:	461d      	mov	r5, r3
 800557c:	9e08      	ldr	r6, [sp, #32]
 800557e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005580:	4b18      	ldr	r3, [pc, #96]	; (80055e4 <I2C_RequestMemoryRead+0x74>)
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	b2ea      	uxtb	r2, r5
 8005588:	f7ff feb7 	bl	80052fa <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558c:	463a      	mov	r2, r7
 800558e:	4631      	mov	r1, r6
 8005590:	4620      	mov	r0, r4
 8005592:	f7ff ff59 	bl	8005448 <I2C_WaitOnTXISFlagUntilTimeout>
 8005596:	b9f8      	cbnz	r0, 80055d8 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005598:	2d01      	cmp	r5, #1
 800559a:	d10e      	bne.n	80055ba <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	fa5f f288 	uxtb.w	r2, r8
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055a4:	9700      	str	r7, [sp, #0]
 80055a6:	4633      	mov	r3, r6
 80055a8:	2200      	movs	r2, #0
 80055aa:	2140      	movs	r1, #64	; 0x40
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7ff ff76 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 80055b2:	b9a8      	cbnz	r0, 80055e0 <I2C_RequestMemoryRead+0x70>
}
 80055b4:	b002      	add	sp, #8
 80055b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80055c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	463a      	mov	r2, r7
 80055c4:	4631      	mov	r1, r6
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff ff3e 	bl	8005448 <I2C_WaitOnTXISFlagUntilTimeout>
 80055cc:	b930      	cbnz	r0, 80055dc <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	fa5f f288 	uxtb.w	r2, r8
 80055d4:	629a      	str	r2, [r3, #40]	; 0x28
 80055d6:	e7e5      	b.n	80055a4 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80055d8:	2001      	movs	r0, #1
 80055da:	e7eb      	b.n	80055b4 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80055dc:	2001      	movs	r0, #1
 80055de:	e7e9      	b.n	80055b4 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80055e0:	2001      	movs	r0, #1
 80055e2:	e7e7      	b.n	80055b4 <I2C_RequestMemoryRead+0x44>
 80055e4:	80002000 	.word	0x80002000

080055e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4605      	mov	r5, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f013 0f20 	tst.w	r3, #32
 80055f8:	d11a      	bne.n	8005630 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fa:	4632      	mov	r2, r6
 80055fc:	4621      	mov	r1, r4
 80055fe:	4628      	mov	r0, r5
 8005600:	f7ff fe98 	bl	8005334 <I2C_IsErrorOccurred>
 8005604:	b9b0      	cbnz	r0, 8005634 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fc fd0f 	bl	8002028 <HAL_GetTick>
 800560a:	1b80      	subs	r0, r0, r6
 800560c:	42a0      	cmp	r0, r4
 800560e:	d801      	bhi.n	8005614 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005610:	2c00      	cmp	r4, #0
 8005612:	d1ed      	bne.n	80055f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005614:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005616:	f043 0320 	orr.w	r3, r3, #32
 800561a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800561c:	2320      	movs	r3, #32
 800561e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005622:	2300      	movs	r3, #0
 8005624:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005628:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800562c:	2001      	movs	r0, #1
}
 800562e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005630:	2000      	movs	r0, #0
 8005632:	e7fc      	b.n	800562e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005634:	2001      	movs	r0, #1
 8005636:	e7fa      	b.n	800562e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005638 <HAL_I2C_MspInit>:
}
 8005638:	4770      	bx	lr

0800563a <HAL_I2C_Init>:
  if (hi2c == NULL)
 800563a:	2800      	cmp	r0, #0
 800563c:	d059      	beq.n	80056f2 <HAL_I2C_Init+0xb8>
{
 800563e:	b510      	push	{r4, lr}
 8005640:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005642:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005646:	2b00      	cmp	r3, #0
 8005648:	d043      	beq.n	80056d2 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800564a:	2324      	movs	r3, #36	; 0x24
 800564c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	f023 0301 	bic.w	r3, r3, #1
 8005658:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	6822      	ldr	r2, [r4, #0]
 800565e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005662:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005664:	6822      	ldr	r2, [r4, #0]
 8005666:	6893      	ldr	r3, [r2, #8]
 8005668:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800566c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d033      	beq.n	80056dc <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005674:	68a3      	ldr	r3, [r4, #8]
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800567c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800567e:	68e3      	ldr	r3, [r4, #12]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d031      	beq.n	80056e8 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	6853      	ldr	r3, [r2, #4]
 8005688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800568c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005690:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	68d3      	ldr	r3, [r2, #12]
 8005696:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800569a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	6962      	ldr	r2, [r4, #20]
 80056a0:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056a2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80056aa:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056ac:	69e3      	ldr	r3, [r4, #28]
 80056ae:	6a21      	ldr	r1, [r4, #32]
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	430b      	orrs	r3, r1
 80056b4:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	6813      	ldr	r3, [r2, #0]
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c0:	2000      	movs	r0, #0
 80056c2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	2320      	movs	r3, #32
 80056c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056cc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80056d0:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80056d2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80056d6:	f7ff ffaf 	bl	8005638 <HAL_I2C_MspInit>
 80056da:	e7b6      	b.n	800564a <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056dc:	68a3      	ldr	r3, [r4, #8]
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e4:	6093      	str	r3, [r2, #8]
 80056e6:	e7ca      	b.n	800567e <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ee:	605a      	str	r2, [r3, #4]
 80056f0:	e7c8      	b.n	8005684 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80056f2:	2001      	movs	r0, #1
}
 80056f4:	4770      	bx	lr

080056f6 <HAL_I2C_Mem_Write>:
{
 80056f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fa:	b083      	sub	sp, #12
 80056fc:	460e      	mov	r6, r1
 80056fe:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005702:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005704:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005708:	b2c9      	uxtb	r1, r1
 800570a:	2920      	cmp	r1, #32
 800570c:	f040 80bb 	bne.w	8005886 <HAL_I2C_Mem_Write+0x190>
 8005710:	4604      	mov	r4, r0
 8005712:	4690      	mov	r8, r2
 8005714:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005718:	b1cb      	cbz	r3, 800574e <HAL_I2C_Mem_Write+0x58>
 800571a:	f1ba 0f00 	cmp.w	sl, #0
 800571e:	d016      	beq.n	800574e <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8005720:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005724:	2b01      	cmp	r3, #1
 8005726:	f000 80b2 	beq.w	800588e <HAL_I2C_Mem_Write+0x198>
 800572a:	f04f 0b01 	mov.w	fp, #1
 800572e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005732:	f7fc fc79 	bl	8002028 <HAL_GetTick>
 8005736:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005738:	9000      	str	r0, [sp, #0]
 800573a:	2319      	movs	r3, #25
 800573c:	465a      	mov	r2, fp
 800573e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005742:	4620      	mov	r0, r4
 8005744:	f7ff feab 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 8005748:	b130      	cbz	r0, 8005758 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 800574a:	2001      	movs	r0, #1
 800574c:	e09c      	b.n	8005888 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800574e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005752:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005754:	2001      	movs	r0, #1
 8005756:	e097      	b.n	8005888 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005758:	2321      	movs	r3, #33	; 0x21
 800575a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800575e:	2340      	movs	r3, #64	; 0x40
 8005760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005764:	2300      	movs	r3, #0
 8005766:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800576a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800576c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005770:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005772:	9701      	str	r7, [sp, #4]
 8005774:	9500      	str	r5, [sp, #0]
 8005776:	464b      	mov	r3, r9
 8005778:	4642      	mov	r2, r8
 800577a:	4631      	mov	r1, r6
 800577c:	4620      	mov	r0, r4
 800577e:	f7ff feb9 	bl	80054f4 <I2C_RequestMemoryWrite>
 8005782:	b970      	cbnz	r0, 80057a2 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	2bff      	cmp	r3, #255	; 0xff
 800578a:	d90f      	bls.n	80057ac <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800578c:	22ff      	movs	r2, #255	; 0xff
 800578e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005798:	4631      	mov	r1, r6
 800579a:	4620      	mov	r0, r4
 800579c:	f7ff fdad 	bl	80052fa <I2C_TransferConfig>
 80057a0:	e021      	b.n	80057e6 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 80057a2:	2300      	movs	r3, #0
 80057a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80057a8:	4658      	mov	r0, fp
 80057aa:	e06d      	b.n	8005888 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 80057ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057ae:	b292      	uxth	r2, r2
 80057b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057b2:	2300      	movs	r3, #0
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	4631      	mov	r1, r6
 80057be:	4620      	mov	r0, r4
 80057c0:	f7ff fd9b 	bl	80052fa <I2C_TransferConfig>
 80057c4:	e00f      	b.n	80057e6 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80057c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057c8:	b292      	uxth	r2, r2
 80057ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057cc:	2300      	movs	r3, #0
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	4631      	mov	r1, r6
 80057d8:	4620      	mov	r0, r4
 80057da:	f7ff fd8e 	bl	80052fa <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80057de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d033      	beq.n	800584e <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e6:	463a      	mov	r2, r7
 80057e8:	4629      	mov	r1, r5
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff fe2c 	bl	8005448 <I2C_WaitOnTXISFlagUntilTimeout>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d14e      	bne.n	8005892 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80057fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057fe:	3301      	adds	r3, #1
 8005800:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005802:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800580c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800580e:	3b01      	subs	r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005814:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005816:	b292      	uxth	r2, r2
 8005818:	2a00      	cmp	r2, #0
 800581a:	d0e0      	beq.n	80057de <HAL_I2C_Mem_Write+0xe8>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1de      	bne.n	80057de <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005820:	9700      	str	r7, [sp, #0]
 8005822:	462b      	mov	r3, r5
 8005824:	2200      	movs	r2, #0
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff fe38 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 800582e:	bb90      	cbnz	r0, 8005896 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005830:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	2bff      	cmp	r3, #255	; 0xff
 8005836:	d9c6      	bls.n	80057c6 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005838:	22ff      	movs	r2, #255	; 0xff
 800583a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800583c:	2300      	movs	r3, #0
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005844:	4631      	mov	r1, r6
 8005846:	4620      	mov	r0, r4
 8005848:	f7ff fd57 	bl	80052fa <I2C_TransferConfig>
 800584c:	e7c7      	b.n	80057de <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584e:	463a      	mov	r2, r7
 8005850:	4629      	mov	r1, r5
 8005852:	4620      	mov	r0, r4
 8005854:	f7ff fec8 	bl	80055e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005858:	b9f8      	cbnz	r0, 800589a <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	2220      	movs	r2, #32
 800585e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005860:	6821      	ldr	r1, [r4, #0]
 8005862:	684b      	ldr	r3, [r1, #4]
 8005864:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005868:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800586c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005876:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800587a:	2300      	movs	r3, #0
 800587c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005880:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005884:	e000      	b.n	8005888 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8005886:	2002      	movs	r0, #2
}
 8005888:	b003      	add	sp, #12
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800588e:	2002      	movs	r0, #2
 8005890:	e7fa      	b.n	8005888 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8005892:	2001      	movs	r0, #1
 8005894:	e7f8      	b.n	8005888 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8005896:	2001      	movs	r0, #1
 8005898:	e7f6      	b.n	8005888 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 800589a:	2001      	movs	r0, #1
 800589c:	e7f4      	b.n	8005888 <HAL_I2C_Mem_Write+0x192>
	...

080058a0 <HAL_I2C_Mem_Read>:
{
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	b083      	sub	sp, #12
 80058a6:	460e      	mov	r6, r1
 80058a8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80058ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ae:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80058b2:	b2c9      	uxtb	r1, r1
 80058b4:	2920      	cmp	r1, #32
 80058b6:	f040 80bc 	bne.w	8005a32 <HAL_I2C_Mem_Read+0x192>
 80058ba:	4604      	mov	r4, r0
 80058bc:	4690      	mov	r8, r2
 80058be:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80058c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058c2:	b1cb      	cbz	r3, 80058f8 <HAL_I2C_Mem_Read+0x58>
 80058c4:	f1ba 0f00 	cmp.w	sl, #0
 80058c8:	d016      	beq.n	80058f8 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80058ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	f000 80b3 	beq.w	8005a3a <HAL_I2C_Mem_Read+0x19a>
 80058d4:	f04f 0b01 	mov.w	fp, #1
 80058d8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80058dc:	f7fc fba4 	bl	8002028 <HAL_GetTick>
 80058e0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058e2:	9000      	str	r0, [sp, #0]
 80058e4:	2319      	movs	r3, #25
 80058e6:	465a      	mov	r2, fp
 80058e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff fdd6 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 80058f2:	b130      	cbz	r0, 8005902 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80058f4:	2001      	movs	r0, #1
 80058f6:	e09d      	b.n	8005a34 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058fc:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80058fe:	2001      	movs	r0, #1
 8005900:	e098      	b.n	8005a34 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005902:	2322      	movs	r3, #34	; 0x22
 8005904:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005908:	2340      	movs	r3, #64	; 0x40
 800590a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800590e:	2300      	movs	r3, #0
 8005910:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005914:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005916:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800591a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800591c:	9701      	str	r7, [sp, #4]
 800591e:	9500      	str	r5, [sp, #0]
 8005920:	464b      	mov	r3, r9
 8005922:	4642      	mov	r2, r8
 8005924:	4631      	mov	r1, r6
 8005926:	4620      	mov	r0, r4
 8005928:	f7ff fe22 	bl	8005570 <I2C_RequestMemoryRead>
 800592c:	b970      	cbnz	r0, 800594c <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800592e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	2bff      	cmp	r3, #255	; 0xff
 8005934:	d90f      	bls.n	8005956 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800593a:	4b44      	ldr	r3, [pc, #272]	; (8005a4c <HAL_I2C_Mem_Read+0x1ac>)
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005942:	4631      	mov	r1, r6
 8005944:	4620      	mov	r0, r4
 8005946:	f7ff fcd8 	bl	80052fa <I2C_TransferConfig>
 800594a:	e021      	b.n	8005990 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 800594c:	2300      	movs	r3, #0
 800594e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005952:	4658      	mov	r0, fp
 8005954:	e06e      	b.n	8005a34 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8005956:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005958:	b292      	uxth	r2, r2
 800595a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800595c:	4b3b      	ldr	r3, [pc, #236]	; (8005a4c <HAL_I2C_Mem_Read+0x1ac>)
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	4631      	mov	r1, r6
 8005968:	4620      	mov	r0, r4
 800596a:	f7ff fcc6 	bl	80052fa <I2C_TransferConfig>
 800596e:	e00f      	b.n	8005990 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8005970:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005972:	b292      	uxth	r2, r2
 8005974:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005976:	2300      	movs	r3, #0
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	4631      	mov	r1, r6
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff fcb9 	bl	80052fa <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005988:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d034      	beq.n	80059fa <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005990:	9700      	str	r7, [sp, #0]
 8005992:	462b      	mov	r3, r5
 8005994:	2200      	movs	r2, #0
 8005996:	2104      	movs	r1, #4
 8005998:	4620      	mov	r0, r4
 800599a:	f7ff fd80 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d14d      	bne.n	8005a3e <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80059aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ac:	3301      	adds	r3, #1
 80059ae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80059b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80059b2:	3a01      	subs	r2, #1
 80059b4:	b292      	uxth	r2, r2
 80059b6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80059b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0de      	beq.n	8005988 <HAL_I2C_Mem_Read+0xe8>
 80059ca:	2a00      	cmp	r2, #0
 80059cc:	d1dc      	bne.n	8005988 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059ce:	9700      	str	r7, [sp, #0]
 80059d0:	462b      	mov	r3, r5
 80059d2:	2180      	movs	r1, #128	; 0x80
 80059d4:	4620      	mov	r0, r4
 80059d6:	f7ff fd62 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 80059da:	bb90      	cbnz	r0, 8005a42 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2bff      	cmp	r3, #255	; 0xff
 80059e2:	d9c5      	bls.n	8005970 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059e4:	22ff      	movs	r2, #255	; 0xff
 80059e6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80059e8:	2300      	movs	r3, #0
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059f0:	4631      	mov	r1, r6
 80059f2:	4620      	mov	r0, r4
 80059f4:	f7ff fc81 	bl	80052fa <I2C_TransferConfig>
 80059f8:	e7c6      	b.n	8005988 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059fa:	463a      	mov	r2, r7
 80059fc:	4629      	mov	r1, r5
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7ff fdf2 	bl	80055e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a04:	b9f8      	cbnz	r0, 8005a46 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005a0c:	6821      	ldr	r1, [r4, #0]
 8005a0e:	684b      	ldr	r3, [r1, #4]
 8005a10:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005a14:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005a18:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005a30:	e000      	b.n	8005a34 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8005a32:	2002      	movs	r0, #2
}
 8005a34:	b003      	add	sp, #12
 8005a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005a3a:	2002      	movs	r0, #2
 8005a3c:	e7fa      	b.n	8005a34 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8005a3e:	2001      	movs	r0, #1
 8005a40:	e7f8      	b.n	8005a34 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8005a42:	2001      	movs	r0, #1
 8005a44:	e7f6      	b.n	8005a34 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8005a46:	2001      	movs	r0, #1
 8005a48:	e7f4      	b.n	8005a34 <HAL_I2C_Mem_Read+0x194>
 8005a4a:	bf00      	nop
 8005a4c:	80002400 	.word	0x80002400

08005a50 <HAL_I2C_GetState>:
  return hi2c->State;
 8005a50:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005a54:	4770      	bx	lr

08005a56 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005a56:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005a58:	4770      	bx	lr

08005a5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a5a:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	2a20      	cmp	r2, #32
 8005a64:	d123      	bne.n	8005aae <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a66:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005a6a:	2a01      	cmp	r2, #1
 8005a6c:	d021      	beq.n	8005ab2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a74:	2224      	movs	r2, #36	; 0x24
 8005a76:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	6802      	ldr	r2, [r0, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	6802      	ldr	r2, [r0, #0]
 8005a88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a8c:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	6802      	ldr	r2, [r0, #0]
 8005a92:	4311      	orrs	r1, r2
 8005a94:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	680a      	ldr	r2, [r1, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005aac:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005aae:	2002      	movs	r0, #2
 8005ab0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005ab2:	2002      	movs	r0, #2
  }
}
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ab6:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	2a20      	cmp	r2, #32
 8005ac0:	d121      	bne.n	8005b06 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005ac6:	2a01      	cmp	r2, #1
 8005ac8:	d01f      	beq.n	8005b0a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005aca:	2201      	movs	r2, #1
 8005acc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad0:	2224      	movs	r2, #36	; 0x24
 8005ad2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ad6:	6800      	ldr	r0, [r0, #0]
 8005ad8:	6802      	ldr	r2, [r0, #0]
 8005ada:	f022 0201 	bic.w	r2, r2, #1
 8005ade:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ae4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ae8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aec:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	680a      	ldr	r2, [r1, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afe:	2000      	movs	r0, #0
 8005b00:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005b04:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2002      	movs	r0, #2
 8005b08:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005b0a:	2002      	movs	r0, #2
  }
}
 8005b0c:	4770      	bx	lr
	...

08005b10 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b10:	4a02      	ldr	r2, [pc, #8]	; (8005b1c <HAL_PWR_EnableBkUpAccess+0xc>)
 8005b12:	6813      	ldr	r3, [r2, #0]
 8005b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b18:	6013      	str	r3, [r2, #0]
}
 8005b1a:	4770      	bx	lr
 8005b1c:	58000400 	.word	0x58000400

08005b20 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005b20:	b510      	push	{r4, lr}
 8005b22:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005b24:	b9a0      	cbnz	r0, 8005b50 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005b26:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005b2e:	d10a      	bne.n	8005b46 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b30:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <HAL_PWR_EnterSLEEPMode+0x48>)
 8005b32:	6913      	ldr	r3, [r2, #16]
 8005b34:	f023 0304 	bic.w	r3, r3, #4
 8005b38:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005b3a:	2c01      	cmp	r4, #1
 8005b3c:	d010      	beq.n	8005b60 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005b3e:	bf40      	sev
    __WFE();
 8005b40:	bf20      	wfe
    __WFE();
 8005b42:	bf20      	wfe
  }
}
 8005b44:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005b46:	f000 f821 	bl	8005b8c <HAL_PWREx_DisableLowPowerRunMode>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_PWR_EnterSLEEPMode+0x10>
 8005b4e:	e7f9      	b.n	8005b44 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005b58:	d1ea      	bne.n	8005b30 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8005b5a:	f000 f80f 	bl	8005b7c <HAL_PWREx_EnableLowPowerRunMode>
 8005b5e:	e7e7      	b.n	8005b30 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005b60:	bf30      	wfi
 8005b62:	e7ef      	b.n	8005b44 <HAL_PWR_EnterSLEEPMode+0x24>
 8005b64:	58000400 	.word	0x58000400
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005b6c:	4b02      	ldr	r3, [pc, #8]	; (8005b78 <HAL_PWREx_GetVoltageRange+0xc>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
}
 8005b70:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	58000400 	.word	0x58000400

08005b7c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005b7c:	4a02      	ldr	r2, [pc, #8]	; (8005b88 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005b7e:	6813      	ldr	r3, [r2, #0]
 8005b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b84:	6013      	str	r3, [r2, #0]
}
 8005b86:	4770      	bx	lr
 8005b88:	58000400 	.word	0x58000400

08005b8c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005b8c:	4a0f      	ldr	r2, [pc, #60]	; (8005bcc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b94:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2232      	movs	r2, #50	; 0x32
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	4a0c      	ldr	r2, [pc, #48]	; (8005bd4 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005ba8:	e000      	b.n	8005bac <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8005baa:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005bac:	4a07      	ldr	r2, [pc, #28]	; (8005bcc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005bae:	6952      	ldr	r2, [r2, #20]
 8005bb0:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005bb4:	d001      	beq.n	8005bba <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f7      	bne.n	8005baa <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005bba:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005bc2:	d101      	bne.n	8005bc8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005bc8:	2003      	movs	r0, #3
}
 8005bca:	4770      	bx	lr
 8005bcc:	58000400 	.word	0x58000400
 8005bd0:	20000074 	.word	0x20000074
 8005bd4:	431bde83 	.word	0x431bde83

08005bd8 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	f043 0302 	orr.w	r3, r3, #2
 8005be4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005be6:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005be8:	6913      	ldr	r3, [r2, #16]
 8005bea:	f043 0304 	orr.w	r3, r3, #4
 8005bee:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005bf0:	2801      	cmp	r0, #1
 8005bf2:	d008      	beq.n	8005c06 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005bf4:	bf40      	sev
    __WFE();
 8005bf6:	bf20      	wfe
    __WFE();
 8005bf8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005bfa:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005bfc:	6913      	ldr	r3, [r2, #16]
 8005bfe:	f023 0304 	bic.w	r3, r3, #4
 8005c02:	6113      	str	r3, [r2, #16]
}
 8005c04:	4770      	bx	lr
    __WFI();
 8005c06:	bf30      	wfi
 8005c08:	e7f7      	b.n	8005bfa <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005c0a:	bf00      	nop
 8005c0c:	58000400 	.word	0x58000400
 8005c10:	e000ed00 	.word	0xe000ed00

08005c14 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005c14:	b530      	push	{r4, r5, lr}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	4604      	mov	r4, r0
 8005c1a:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	; (8005cc8 <RCC_SetFlashLatency+0xb4>)
 8005c1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c22:	9006      	str	r0, [sp, #24]
 8005c24:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005c28:	f103 0208 	add.w	r2, r3, #8
 8005c2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c30:	9004      	str	r0, [sp, #16]
 8005c32:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005c36:	ad01      	add	r5, sp, #4
 8005c38:	3310      	adds	r3, #16
 8005c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c42:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005c46:	d007      	beq.n	8005c58 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e014      	b.n	8005c76 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005c4c:	aa08      	add	r2, sp, #32
 8005c4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c52:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005c56:	e01e      	b.n	8005c96 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d808      	bhi.n	8005c70 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005c5e:	aa08      	add	r2, sp, #32
 8005c60:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005c64:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005c68:	42a2      	cmp	r2, r4
 8005c6a:	d2ef      	bcs.n	8005c4c <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	e7f4      	b.n	8005c5a <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005c70:	2500      	movs	r5, #0
 8005c72:	e010      	b.n	8005c96 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c74:	3301      	adds	r3, #1
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d80c      	bhi.n	8005c94 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005c7a:	aa08      	add	r2, sp, #32
 8005c7c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005c80:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005c84:	42a2      	cmp	r2, r4
 8005c86:	d3f5      	bcc.n	8005c74 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c88:	aa08      	add	r2, sp, #32
 8005c8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c8e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005c92:	e000      	b.n	8005c96 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005c94:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c96:	4a0d      	ldr	r2, [pc, #52]	; (8005ccc <RCC_SetFlashLatency+0xb8>)
 8005c98:	6813      	ldr	r3, [r2, #0]
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	432b      	orrs	r3, r5
 8005ca0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ca2:	f7fc f9c1 	bl	8002028 <HAL_GetTick>
 8005ca6:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ca8:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <RCC_SetFlashLatency+0xb8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	d006      	beq.n	8005cc2 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cb4:	f7fc f9b8 	bl	8002028 <HAL_GetTick>
 8005cb8:	1b00      	subs	r0, r0, r4
 8005cba:	2802      	cmp	r0, #2
 8005cbc:	d9f4      	bls.n	8005ca8 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8005cbe:	2003      	movs	r0, #3
 8005cc0:	e000      	b.n	8005cc4 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8005cc2:	2000      	movs	r0, #0
}
 8005cc4:	b009      	add	sp, #36	; 0x24
 8005cc6:	bd30      	pop	{r4, r5, pc}
 8005cc8:	08016650 	.word	0x08016650
 8005ccc:	58004000 	.word	0x58004000

08005cd0 <RCC_SetFlashLatencyFromMSIRange>:
{
 8005cd0:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005cd2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005cd8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cee:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005cf2:	f7ff ff3b 	bl	8005b6c <HAL_PWREx_GetVoltageRange>
 8005cf6:	4601      	mov	r1, r0
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005cfa:	fba3 3404 	umull	r3, r4, r3, r4
 8005cfe:	0ca0      	lsrs	r0, r4, #18
 8005d00:	f7ff ff88 	bl	8005c14 <RCC_SetFlashLatency>
}
 8005d04:	bd10      	pop	{r4, pc}
 8005d06:	bf00      	nop
 8005d08:	08016c00 	.word	0x08016c00
 8005d0c:	08016ba0 	.word	0x08016ba0
 8005d10:	431bde83 	.word	0x431bde83

08005d14 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d18:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d20:	f011 010c 	ands.w	r1, r1, #12
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0x28>
 8005d26:	290c      	cmp	r1, #12
 8005d28:	d006      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d2a:	2904      	cmp	r1, #4
 8005d2c:	d047      	beq.n	8005dbe <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d2e:	2908      	cmp	r1, #8
 8005d30:	d03b      	beq.n	8005daa <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005d32:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005d34:	4610      	mov	r0, r2
 8005d36:	e026      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d1f6      	bne.n	8005d2a <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f013 0308 	ands.w	r3, r3, #8
 8005d46:	d00d      	beq.n	8005d64 <HAL_RCC_GetSysClockFreq+0x50>
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f013 0308 	ands.w	r3, r3, #8
 8005d52:	d124      	bne.n	8005d9e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d58:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005d5c:	4a2e      	ldr	r2, [pc, #184]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d62:	e00e      	b.n	8005d82 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	f012 0f08 	tst.w	r2, #8
 8005d6e:	d112      	bne.n	8005d96 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d78:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005d7c:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d82:	b1d1      	cbz	r1, 8005dba <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005d84:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d01a      	beq.n	8005dca <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005d94:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	e7ee      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x68>
 8005d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da2:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005da4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005da8:	e7d8      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005db4:	d106      	bne.n	8005dc4 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005db6:	4819      	ldr	r0, [pc, #100]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005db8:	e7e5      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005dba:	4610      	mov	r0, r2
 8005dbc:	e7e3      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005dbe:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005dc0:	4817      	ldr	r0, [pc, #92]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005dc2:	e7e0      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005dc4:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005dc6:	4816      	ldr	r0, [pc, #88]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005dc8:	e7dd      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d009      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0xd8>
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d108      	bne.n	8005dee <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005de6:	d115      	bne.n	8005e14 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005de8:	4a0c      	ldr	r2, [pc, #48]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dea:	e000      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8005dec:	4a0c      	ldr	r2, [pc, #48]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df2:	68cb      	ldr	r3, [r1, #12]
 8005df4:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005df8:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005dfc:	68cb      	ldr	r3, [r1, #12]
 8005dfe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005e02:	3301      	adds	r3, #1
 8005e04:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005e08:	68c8      	ldr	r0, [r1, #12]
 8005e0a:	0f40      	lsrs	r0, r0, #29
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005e12:	e7bf      	b.n	8005d94 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005e14:	4a02      	ldr	r2, [pc, #8]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e16:	e7ea      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0xda>
 8005e18:	08016c00 	.word	0x08016c00
 8005e1c:	01e84800 	.word	0x01e84800
 8005e20:	00f42400 	.word	0x00f42400

08005e24 <HAL_RCC_GetHCLKFreq>:
{
 8005e24:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005e26:	f7ff ff75 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e34:	4a02      	ldr	r2, [pc, #8]	; (8005e40 <HAL_RCC_GetHCLKFreq+0x1c>)
 8005e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005e3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e3e:	bd08      	pop	{r3, pc}
 8005e40:	08016ba0 	.word	0x08016ba0

08005e44 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005e44:	2800      	cmp	r0, #0
 8005e46:	f000 8311 	beq.w	800646c <HAL_RCC_OscConfig+0x628>
{
 8005e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	689d      	ldr	r5, [r3, #8]
 8005e54:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005e58:	68de      	ldr	r6, [r3, #12]
 8005e5a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e5e:	6803      	ldr	r3, [r0, #0]
 8005e60:	f013 0f20 	tst.w	r3, #32
 8005e64:	d02a      	beq.n	8005ebc <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	d065      	beq.n	8005f36 <HAL_RCC_OscConfig+0xf2>
 8005e6a:	2d0c      	cmp	r5, #12
 8005e6c:	d061      	beq.n	8005f32 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e6e:	6a23      	ldr	r3, [r4, #32]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80bf 	beq.w	8005ff4 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e82:	f7fc f8d1 	bl	8002028 <HAL_GetTick>
 8005e86:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f013 0f02 	tst.w	r3, #2
 8005e92:	f000 80a7 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f042 0208 	orr.w	r2, r2, #8
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005ea8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eae:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005eb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005eba:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	f013 0f01 	tst.w	r3, #1
 8005ec2:	f000 80b5 	beq.w	8006030 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ec6:	2d08      	cmp	r5, #8
 8005ec8:	f000 80ae 	beq.w	8006028 <HAL_RCC_OscConfig+0x1e4>
 8005ecc:	2d0c      	cmp	r5, #12
 8005ece:	f000 80a8 	beq.w	8006022 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed6:	6813      	ldr	r3, [r2, #0]
 8005ed8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005edc:	68a1      	ldr	r1, [r4, #8]
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee8:	f000 80c4 	beq.w	8006074 <HAL_RCC_OscConfig+0x230>
 8005eec:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005ef0:	f000 80c5 	beq.w	800607e <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005efe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005f06:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 80c2 	beq.w	8006094 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8005f10:	f7fc f88a 	bl	8002028 <HAL_GetTick>
 8005f14:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005f20:	f040 8086 	bne.w	8006030 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f24:	f7fc f880 	bl	8002028 <HAL_GetTick>
 8005f28:	1bc0      	subs	r0, r0, r7
 8005f2a:	2864      	cmp	r0, #100	; 0x64
 8005f2c:	d9f3      	bls.n	8005f16 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8005f2e:	2003      	movs	r0, #3
 8005f30:	e2a9      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f32:	2e01      	cmp	r6, #1
 8005f34:	d19b      	bne.n	8005e6e <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f36:	6a23      	ldr	r3, [r4, #32]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8299 	beq.w	8006470 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f013 0f08 	tst.w	r3, #8
 8005f4a:	d029      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x15c>
 8005f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f56:	4298      	cmp	r0, r3
 8005f58:	d92a      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f5a:	f7ff feb9 	bl	8005cd0 <RCC_SetFlashLatencyFromMSIRange>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f040 8288 	bne.w	8006474 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	f042 0208 	orr.w	r2, r2, #8
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005f76:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005f84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005f88:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f8a:	f7ff ff4b 	bl	8005e24 <HAL_RCC_GetHCLKFreq>
 8005f8e:	4bba      	ldr	r3, [pc, #744]	; (8006278 <HAL_RCC_OscConfig+0x434>)
 8005f90:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005f92:	4bba      	ldr	r3, [pc, #744]	; (800627c <HAL_RCC_OscConfig+0x438>)
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f7fc f845 	bl	8002024 <HAL_InitTick>
        if (status != HAL_OK)
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d08e      	beq.n	8005ebc <HAL_RCC_OscConfig+0x78>
 8005f9e:	e272      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fae:	e7d2      	b.n	8005f56 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	f042 0208 	orr.w	r2, r2, #8
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005fc2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005fd0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005fd4:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005fd8:	f7ff fe7a 	bl	8005cd0 <RCC_SetFlashLatencyFromMSIRange>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d0d4      	beq.n	8005f8a <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	e250      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fe4:	f7fc f820 	bl	8002028 <HAL_GetTick>
 8005fe8:	1bc0      	subs	r0, r0, r7
 8005fea:	2802      	cmp	r0, #2
 8005fec:	f67f af4c 	bls.w	8005e88 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005ff0:	2003      	movs	r0, #3
 8005ff2:	e248      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff8:	6813      	ldr	r3, [r2, #0]
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006000:	f7fc f812 	bl	8002028 <HAL_GetTick>
 8006004:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f013 0f02 	tst.w	r3, #2
 8006010:	f43f af54 	beq.w	8005ebc <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006014:	f7fc f808 	bl	8002028 <HAL_GetTick>
 8006018:	1bc0      	subs	r0, r0, r7
 800601a:	2802      	cmp	r0, #2
 800601c:	d9f3      	bls.n	8006006 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 800601e:	2003      	movs	r0, #3
 8006020:	e231      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006022:	2e03      	cmp	r6, #3
 8006024:	f47f af55 	bne.w	8005ed2 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006028:	6863      	ldr	r3, [r4, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 8224 	beq.w	8006478 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	f013 0f02 	tst.w	r3, #2
 8006036:	d056      	beq.n	80060e6 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006038:	2d04      	cmp	r5, #4
 800603a:	d03d      	beq.n	80060b8 <HAL_RCC_OscConfig+0x274>
 800603c:	2d0c      	cmp	r5, #12
 800603e:	d039      	beq.n	80060b4 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 808a 	beq.w	800615c <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800604c:	6813      	ldr	r3, [r2, #0]
 800604e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006052:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006054:	f7fb ffe8 	bl	8002028 <HAL_GetTick>
 8006058:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006064:	d136      	bne.n	80060d4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006066:	f7fb ffdf 	bl	8002028 <HAL_GetTick>
 800606a:	1b80      	subs	r0, r0, r6
 800606c:	2802      	cmp	r0, #2
 800606e:	d9f4      	bls.n	800605a <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8006070:	2003      	movs	r0, #3
 8006072:	e208      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006074:	6813      	ldr	r3, [r2, #0]
 8006076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607a:	6013      	str	r3, [r2, #0]
}
 800607c:	e744      	b.n	8005f08 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800607e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006088:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	e739      	b.n	8005f08 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8006094:	f7fb ffc8 	bl	8002028 <HAL_GetTick>
 8006098:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80060a4:	d0c4      	beq.n	8006030 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a6:	f7fb ffbf 	bl	8002028 <HAL_GetTick>
 80060aa:	1bc0      	subs	r0, r0, r7
 80060ac:	2864      	cmp	r0, #100	; 0x64
 80060ae:	d9f4      	bls.n	800609a <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 80060b0:	2003      	movs	r0, #3
 80060b2:	e1e8      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060b4:	2e02      	cmp	r6, #2
 80060b6:	d1c3      	bne.n	8006040 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 81de 	beq.w	800647c <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80060c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c6:	6853      	ldr	r3, [r2, #4]
 80060c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80060d0:	6053      	str	r3, [r2, #4]
}
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80060d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060da:	6853      	ldr	r3, [r2, #4]
 80060dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80060e4:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	f013 0f08 	tst.w	r3, #8
 80060ec:	d07e      	beq.n	80061ec <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ee:	69a3      	ldr	r3, [r4, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d062      	beq.n	80061ba <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80060f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80060fc:	69e1      	ldr	r1, [r4, #28]
 80060fe:	f003 0210 	and.w	r2, r3, #16
 8006102:	4291      	cmp	r1, r2
 8006104:	d011      	beq.n	800612a <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006106:	f003 0203 	and.w	r2, r3, #3
 800610a:	2a02      	cmp	r2, #2
 800610c:	f000 81b8 	beq.w	8006480 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006110:	f013 0f01 	tst.w	r3, #1
 8006114:	d138      	bne.n	8006188 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800611a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	69e1      	ldr	r1, [r4, #28]
 8006124:	430b      	orrs	r3, r1
 8006126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800612a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800612e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800613a:	f7fb ff75 	bl	8002028 <HAL_GetTick>
 800613e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006148:	f013 0f02 	tst.w	r3, #2
 800614c:	d14e      	bne.n	80061ec <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800614e:	f7fb ff6b 	bl	8002028 <HAL_GetTick>
 8006152:	1b80      	subs	r0, r0, r6
 8006154:	2811      	cmp	r0, #17
 8006156:	d9f3      	bls.n	8006140 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8006158:	2003      	movs	r0, #3
 800615a:	e194      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800615c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006160:	6813      	ldr	r3, [r2, #0]
 8006162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006166:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006168:	f7fb ff5e 	bl	8002028 <HAL_GetTick>
 800616c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006178:	d0b5      	beq.n	80060e6 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800617a:	f7fb ff55 	bl	8002028 <HAL_GetTick>
 800617e:	1b80      	subs	r0, r0, r6
 8006180:	2802      	cmp	r0, #2
 8006182:	d9f4      	bls.n	800616e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8006184:	2003      	movs	r0, #3
 8006186:	e17e      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800618c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8006198:	f7fb ff46 	bl	8002028 <HAL_GetTick>
 800619c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800619e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061a6:	f013 0f02 	tst.w	r3, #2
 80061aa:	d0b4      	beq.n	8006116 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ac:	f7fb ff3c 	bl	8002028 <HAL_GetTick>
 80061b0:	1b80      	subs	r0, r0, r6
 80061b2:	2811      	cmp	r0, #17
 80061b4:	d9f3      	bls.n	800619e <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80061b6:	2003      	movs	r0, #3
 80061b8:	e165      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80061ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061be:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80061ca:	f7fb ff2d 	bl	8002028 <HAL_GetTick>
 80061ce:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80061d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d8:	f013 0f02 	tst.w	r3, #2
 80061dc:	d006      	beq.n	80061ec <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061de:	f7fb ff23 	bl	8002028 <HAL_GetTick>
 80061e2:	1b80      	subs	r0, r0, r6
 80061e4:	2811      	cmp	r0, #17
 80061e6:	d9f3      	bls.n	80061d0 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80061e8:	2003      	movs	r0, #3
 80061ea:	e14c      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	f013 0f04 	tst.w	r3, #4
 80061f2:	f000 80b8 	beq.w	8006366 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80061f6:	4b22      	ldr	r3, [pc, #136]	; (8006280 <HAL_RCC_OscConfig+0x43c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80061fe:	d110      	bne.n	8006222 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8006200:	f7ff fc86 	bl	8005b10 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8006204:	f7fb ff10 	bl	8002028 <HAL_GetTick>
 8006208:	4606      	mov	r6, r0
 800620a:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <HAL_RCC_OscConfig+0x43c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006212:	d106      	bne.n	8006222 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006214:	f7fb ff08 	bl	8002028 <HAL_GetTick>
 8006218:	1b80      	subs	r0, r0, r6
 800621a:	2802      	cmp	r0, #2
 800621c:	d9f5      	bls.n	800620a <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800621e:	2003      	movs	r0, #3
 8006220:	e131      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d068      	beq.n	80062fa <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006228:	2b85      	cmp	r3, #133	; 0x85
 800622a:	d001      	beq.n	8006230 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800622c:	2b05      	cmp	r3, #5
 800622e:	d107      	bne.n	8006240 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006234:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006238:	f043 0304 	orr.w	r3, r3, #4
 800623c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006240:	f7fb fef2 	bl	8002028 <HAL_GetTick>
 8006244:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800624a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625e:	f013 0f02 	tst.w	r3, #2
 8006262:	d10f      	bne.n	8006284 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006264:	f7fb fee0 	bl	8002028 <HAL_GetTick>
 8006268:	1b80      	subs	r0, r0, r6
 800626a:	f241 3388 	movw	r3, #5000	; 0x1388
 800626e:	4298      	cmp	r0, r3
 8006270:	d9f1      	bls.n	8006256 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8006272:	2003      	movs	r0, #3
 8006274:	e107      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
 8006276:	bf00      	nop
 8006278:	20000074 	.word	0x20000074
 800627c:	20000078 	.word	0x20000078
 8006280:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006284:	68e3      	ldr	r3, [r4, #12]
 8006286:	2b81      	cmp	r3, #129	; 0x81
 8006288:	d001      	beq.n	800628e <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800628a:	2b85      	cmp	r3, #133	; 0x85
 800628c:	d11a      	bne.n	80062c4 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800628e:	f7fb fecb 	bl	8002028 <HAL_GetTick>
 8006292:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006298:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800629c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80062b0:	d159      	bne.n	8006366 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b2:	f7fb feb9 	bl	8002028 <HAL_GetTick>
 80062b6:	1b80      	subs	r0, r0, r6
 80062b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80062bc:	4298      	cmp	r0, r3
 80062be:	d9f1      	bls.n	80062a4 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80062c0:	2003      	movs	r0, #3
 80062c2:	e0e0      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 80062c4:	f7fb feb0 	bl	8002028 <HAL_GetTick>
 80062c8:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80062ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80062d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80062e6:	d03e      	beq.n	8006366 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e8:	f7fb fe9e 	bl	8002028 <HAL_GetTick>
 80062ec:	1b80      	subs	r0, r0, r6
 80062ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80062f2:	4298      	cmp	r0, r3
 80062f4:	d9f1      	bls.n	80062da <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80062f6:	2003      	movs	r0, #3
 80062f8:	e0c5      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80062fa:	f7fb fe95 	bl	8002028 <HAL_GetTick>
 80062fe:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006304:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006318:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800631c:	d008      	beq.n	8006330 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631e:	f7fb fe83 	bl	8002028 <HAL_GetTick>
 8006322:	1b80      	subs	r0, r0, r6
 8006324:	f241 3388 	movw	r3, #5000	; 0x1388
 8006328:	4298      	cmp	r0, r3
 800632a:	d9f1      	bls.n	8006310 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 800632c:	2003      	movs	r0, #3
 800632e:	e0aa      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8006330:	f7fb fe7a 	bl	8002028 <HAL_GetTick>
 8006334:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800633a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f013 0f02 	tst.w	r3, #2
 8006352:	d008      	beq.n	8006366 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fb fe68 	bl	8002028 <HAL_GetTick>
 8006358:	1b80      	subs	r0, r0, r6
 800635a:	f241 3388 	movw	r3, #5000	; 0x1388
 800635e:	4298      	cmp	r0, r3
 8006360:	d9f1      	bls.n	8006346 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8006362:	2003      	movs	r0, #3
 8006364:	e08f      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 808b 	beq.w	8006484 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800636e:	2d0c      	cmp	r5, #12
 8006370:	d060      	beq.n	8006434 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006372:	2b02      	cmp	r3, #2
 8006374:	d016      	beq.n	80063a4 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800637a:	6813      	ldr	r3, [r2, #0]
 800637c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006380:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006382:	f7fb fe51 	bl	8002028 <HAL_GetTick>
 8006386:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006392:	d148      	bne.n	8006426 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006398:	68d1      	ldr	r1, [r2, #12]
 800639a:	4b41      	ldr	r3, [pc, #260]	; (80064a0 <HAL_RCC_OscConfig+0x65c>)
 800639c:	400b      	ands	r3, r1
 800639e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80063a0:	2000      	movs	r0, #0
 80063a2:	e070      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80063a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a8:	6813      	ldr	r3, [r2, #0]
 80063aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80063b0:	f7fb fe3a 	bl	8002028 <HAL_GetTick>
 80063b4:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80063b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80063c0:	d12a      	bne.n	8006418 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063c6:	68d3      	ldr	r3, [r2, #12]
 80063c8:	4936      	ldr	r1, [pc, #216]	; (80064a4 <HAL_RCC_OscConfig+0x660>)
 80063ca:	4019      	ands	r1, r3
 80063cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80063d0:	4303      	orrs	r3, r0
 80063d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063d4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80063d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80063da:	4303      	orrs	r3, r0
 80063dc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80063de:	4303      	orrs	r3, r0
 80063e0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80063e2:	4303      	orrs	r3, r0
 80063e4:	4319      	orrs	r1, r3
 80063e6:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80063e8:	6813      	ldr	r3, [r2, #0]
 80063ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ee:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063f0:	68d3      	ldr	r3, [r2, #12]
 80063f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80063f8:	f7fb fe16 	bl	8002028 <HAL_GetTick>
 80063fc:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80063fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006408:	d13e      	bne.n	8006488 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640a:	f7fb fe0d 	bl	8002028 <HAL_GetTick>
 800640e:	1b00      	subs	r0, r0, r4
 8006410:	280a      	cmp	r0, #10
 8006412:	d9f4      	bls.n	80063fe <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8006414:	2003      	movs	r0, #3
 8006416:	e036      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006418:	f7fb fe06 	bl	8002028 <HAL_GetTick>
 800641c:	1b40      	subs	r0, r0, r5
 800641e:	280a      	cmp	r0, #10
 8006420:	d9c9      	bls.n	80063b6 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8006422:	2003      	movs	r0, #3
 8006424:	e02f      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fb fdff 	bl	8002028 <HAL_GetTick>
 800642a:	1b00      	subs	r0, r0, r4
 800642c:	280a      	cmp	r0, #10
 800642e:	d9ab      	bls.n	8006388 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8006430:	2003      	movs	r0, #3
 8006432:	e028      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006434:	2b01      	cmp	r3, #1
 8006436:	d029      	beq.n	800648c <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800643e:	f003 0103 	and.w	r1, r3, #3
 8006442:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006444:	4291      	cmp	r1, r2
 8006446:	d123      	bne.n	8006490 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006448:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800644c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800644e:	428a      	cmp	r2, r1
 8006450:	d120      	bne.n	8006494 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006452:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006456:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006458:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800645c:	d11c      	bne.n	8006498 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800645e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8006462:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006464:	4293      	cmp	r3, r2
 8006466:	d119      	bne.n	800649c <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8006468:	2000      	movs	r0, #0
 800646a:	e00c      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 800646c:	2001      	movs	r0, #1
}
 800646e:	4770      	bx	lr
        return HAL_ERROR;
 8006470:	2001      	movs	r0, #1
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8006474:	2001      	movs	r0, #1
 8006476:	e006      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006478:	2001      	movs	r0, #1
 800647a:	e004      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800647c:	2001      	movs	r0, #1
 800647e:	e002      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006480:	2001      	movs	r0, #1
 8006482:	e000      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8006484:	2000      	movs	r0, #0
}
 8006486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8006488:	2000      	movs	r0, #0
 800648a:	e7fc      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800648c:	2001      	movs	r0, #1
 800648e:	e7fa      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006490:	2001      	movs	r0, #1
 8006492:	e7f8      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
 8006494:	2001      	movs	r0, #1
 8006496:	e7f6      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
 8006498:	2001      	movs	r0, #1
 800649a:	e7f4      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
 800649c:	2001      	movs	r0, #1
 800649e:	e7f2      	b.n	8006486 <HAL_RCC_OscConfig+0x642>
 80064a0:	eefefffc 	.word	0xeefefffc
 80064a4:	11c1808c 	.word	0x11c1808c

080064a8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f000 8127 	beq.w	80066fc <HAL_RCC_ClockConfig+0x254>
{
 80064ae:	b570      	push	{r4, r5, r6, lr}
 80064b0:	460c      	mov	r4, r1
 80064b2:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064b4:	4b93      	ldr	r3, [pc, #588]	; (8006704 <HAL_RCC_ClockConfig+0x25c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	428b      	cmp	r3, r1
 80064be:	d32d      	bcc.n	800651c <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	f013 0f02 	tst.w	r3, #2
 80064c6:	d13f      	bne.n	8006548 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	f013 0f20 	tst.w	r3, #32
 80064ce:	d153      	bne.n	8006578 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064d6:	d16a      	bne.n	80065ae <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	f013 0f04 	tst.w	r3, #4
 80064de:	f040 8083 	bne.w	80065e8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	f013 0f08 	tst.w	r3, #8
 80064e8:	f040 8097 	bne.w	800661a <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	f013 0f01 	tst.w	r3, #1
 80064f2:	f000 80de 	beq.w	80066b2 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f6:	686b      	ldr	r3, [r5, #4]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	f000 80a8 	beq.w	800664e <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064fe:	2b03      	cmp	r3, #3
 8006500:	f000 80ad 	beq.w	800665e <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 80b2 	bne.w	800666e <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800650a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800650e:	6812      	ldr	r2, [r2, #0]
 8006510:	f012 0f02 	tst.w	r2, #2
 8006514:	f040 80b1 	bne.w	800667a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006518:	2001      	movs	r0, #1
 800651a:	e0ee      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651c:	4a79      	ldr	r2, [pc, #484]	; (8006704 <HAL_RCC_ClockConfig+0x25c>)
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	f023 0307 	bic.w	r3, r3, #7
 8006524:	430b      	orrs	r3, r1
 8006526:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006528:	f7fb fd7e 	bl	8002028 <HAL_GetTick>
 800652c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652e:	4b75      	ldr	r3, [pc, #468]	; (8006704 <HAL_RCC_ClockConfig+0x25c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	42a3      	cmp	r3, r4
 8006538:	d0c2      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800653a:	f7fb fd75 	bl	8002028 <HAL_GetTick>
 800653e:	1b80      	subs	r0, r0, r6
 8006540:	2802      	cmp	r0, #2
 8006542:	d9f4      	bls.n	800652e <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8006544:	2003      	movs	r0, #3
 8006546:	e0d8      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006548:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800654a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800654e:	688a      	ldr	r2, [r1, #8]
 8006550:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006554:	4313      	orrs	r3, r2
 8006556:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006558:	f7fb fd66 	bl	8002028 <HAL_GetTick>
 800655c:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800655e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006568:	d1ae      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800656a:	f7fb fd5d 	bl	8002028 <HAL_GetTick>
 800656e:	1b80      	subs	r0, r0, r6
 8006570:	2802      	cmp	r0, #2
 8006572:	d9f4      	bls.n	800655e <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006574:	2003      	movs	r0, #3
 8006576:	e0c0      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006578:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800657a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800657e:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8006582:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 800658c:	f7fb fd4c 	bl	8002028 <HAL_GetTick>
 8006590:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006596:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800659a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800659e:	d197      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065a0:	f7fb fd42 	bl	8002028 <HAL_GetTick>
 80065a4:	1b80      	subs	r0, r0, r6
 80065a6:	2802      	cmp	r0, #2
 80065a8:	d9f3      	bls.n	8006592 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80065aa:	2003      	movs	r0, #3
 80065ac:	e0a5      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80065ae:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80065b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065b4:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80065b8:	f023 030f 	bic.w	r3, r3, #15
 80065bc:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80065c0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80065c4:	f7fb fd30 	bl	8002028 <HAL_GetTick>
 80065c8:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80065ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80065d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80065d6:	f47f af7f 	bne.w	80064d8 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065da:	f7fb fd25 	bl	8002028 <HAL_GetTick>
 80065de:	1b80      	subs	r0, r0, r6
 80065e0:	2802      	cmp	r0, #2
 80065e2:	d9f2      	bls.n	80065ca <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80065e4:	2003      	movs	r0, #3
 80065e6:	e088      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80065e8:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80065ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ee:	688a      	ldr	r2, [r1, #8]
 80065f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065f4:	4313      	orrs	r3, r2
 80065f6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80065f8:	f7fb fd16 	bl	8002028 <HAL_GetTick>
 80065fc:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80065fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006608:	f47f af6b 	bne.w	80064e2 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800660c:	f7fb fd0c 	bl	8002028 <HAL_GetTick>
 8006610:	1b80      	subs	r0, r0, r6
 8006612:	2802      	cmp	r0, #2
 8006614:	d9f3      	bls.n	80065fe <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006616:	2003      	movs	r0, #3
 8006618:	e06f      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800661a:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800661c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006620:	6893      	ldr	r3, [r2, #8]
 8006622:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006626:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800662a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800662c:	f7fb fcfc 	bl	8002028 <HAL_GetTick>
 8006630:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800663c:	f47f af56 	bne.w	80064ec <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006640:	f7fb fcf2 	bl	8002028 <HAL_GetTick>
 8006644:	1b80      	subs	r0, r0, r6
 8006646:	2802      	cmp	r0, #2
 8006648:	d9f3      	bls.n	8006632 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800664a:	2003      	movs	r0, #3
 800664c:	e055      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800664e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006658:	d10f      	bne.n	800667a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800665a:	2001      	movs	r0, #1
 800665c:	e04d      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800665e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006668:	d107      	bne.n	800667a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800666a:	2001      	movs	r0, #1
 800666c:	e045      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800666e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006678:	d042      	beq.n	8006700 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800667a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800667e:	688a      	ldr	r2, [r1, #8]
 8006680:	f022 0203 	bic.w	r2, r2, #3
 8006684:	4313      	orrs	r3, r2
 8006686:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006688:	f7fb fcce 	bl	8002028 <HAL_GetTick>
 800668c:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006698:	686a      	ldr	r2, [r5, #4]
 800669a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800669e:	d008      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a0:	f7fb fcc2 	bl	8002028 <HAL_GetTick>
 80066a4:	1b80      	subs	r0, r0, r6
 80066a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80066aa:	4298      	cmp	r0, r3
 80066ac:	d9ef      	bls.n	800668e <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80066ae:	2003      	movs	r0, #3
 80066b0:	e023      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066b2:	4b14      	ldr	r3, [pc, #80]	; (8006704 <HAL_RCC_ClockConfig+0x25c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	d915      	bls.n	80066ea <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066be:	4a11      	ldr	r2, [pc, #68]	; (8006704 <HAL_RCC_ClockConfig+0x25c>)
 80066c0:	6813      	ldr	r3, [r2, #0]
 80066c2:	f023 0307 	bic.w	r3, r3, #7
 80066c6:	4323      	orrs	r3, r4
 80066c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80066ca:	f7fb fcad 	bl	8002028 <HAL_GetTick>
 80066ce:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <HAL_RCC_ClockConfig+0x25c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	42a3      	cmp	r3, r4
 80066da:	d006      	beq.n	80066ea <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80066dc:	f7fb fca4 	bl	8002028 <HAL_GetTick>
 80066e0:	1b40      	subs	r0, r0, r5
 80066e2:	2802      	cmp	r0, #2
 80066e4:	d9f4      	bls.n	80066d0 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80066e6:	2003      	movs	r0, #3
 80066e8:	e007      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066ea:	f7ff fb9b 	bl	8005e24 <HAL_RCC_GetHCLKFreq>
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <HAL_RCC_ClockConfig+0x260>)
 80066f0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80066f2:	4b06      	ldr	r3, [pc, #24]	; (800670c <HAL_RCC_ClockConfig+0x264>)
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f7fb fc95 	bl	8002024 <HAL_InitTick>
}
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80066fc:	2001      	movs	r0, #1
}
 80066fe:	4770      	bx	lr
        return HAL_ERROR;
 8006700:	2001      	movs	r0, #1
 8006702:	e7fa      	b.n	80066fa <HAL_RCC_ClockConfig+0x252>
 8006704:	58004000 	.word	0x58004000
 8006708:	20000074 	.word	0x20000074
 800670c:	20000078 	.word	0x20000078

08006710 <HAL_RCC_GetPCLK1Freq>:
{
 8006710:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006712:	f7ff fb87 	bl	8005e24 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006720:	4a02      	ldr	r2, [pc, #8]	; (800672c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006726:	40d8      	lsrs	r0, r3
 8006728:	bd08      	pop	{r3, pc}
 800672a:	bf00      	nop
 800672c:	08016be0 	.word	0x08016be0

08006730 <HAL_RCC_GetPCLK2Freq>:
{
 8006730:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006732:	f7ff fb77 	bl	8005e24 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006740:	4a02      	ldr	r2, [pc, #8]	; (800674c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006746:	40d8      	lsrs	r0, r3
 8006748:	bd08      	pop	{r3, pc}
 800674a:	bf00      	nop
 800674c:	08016be0 	.word	0x08016be0

08006750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006754:	6803      	ldr	r3, [r0, #0]
 8006756:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800675a:	f040 80ab 	bne.w	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800675e:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	f013 0f01 	tst.w	r3, #1
 8006766:	d00a      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006768:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800676a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800676e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006772:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006776:	b292      	uxth	r2, r2
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f013 0f02 	tst.w	r3, #2
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006786:	68a2      	ldr	r2, [r4, #8]
 8006788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800678c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006790:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006794:	b292      	uxth	r2, r2
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	f013 0f20 	tst.w	r3, #32
 80067a2:	d009      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067a4:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80067a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80067be:	d00c      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067c0:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80067c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80067ca:	0c02      	lsrs	r2, r0, #16
 80067cc:	0412      	lsls	r2, r2, #16
 80067ce:	ea23 0302 	bic.w	r3, r3, r2
 80067d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80067e0:	d00c      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80067ec:	0c02      	lsrs	r2, r0, #16
 80067ee:	0412      	lsls	r2, r2, #16
 80067f0:	ea23 0302 	bic.w	r3, r3, r2
 80067f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006802:	d00c      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006804:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800680a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800680e:	0c02      	lsrs	r2, r0, #16
 8006810:	0412      	lsls	r2, r2, #16
 8006812:	ea23 0302 	bic.w	r3, r3, r2
 8006816:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800681a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006824:	f040 809e 	bne.w	8006964 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800682e:	f040 80aa 	bne.w	8006986 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006838:	f040 80b6 	bne.w	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	f013 0f10 	tst.w	r3, #16
 8006842:	d00e      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006844:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800684a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800684e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006858:	68e3      	ldr	r3, [r4, #12]
 800685a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685e:	f000 80b4 	beq.w	80069ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006868:	d00f      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800686a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800686c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006870:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006874:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800687e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006880:	b91b      	cbnz	r3, 800688a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006882:	68cb      	ldr	r3, [r1, #12]
 8006884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006888:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006890:	d00e      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006898:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800689c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80068a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ac:	f000 8092 	beq.w	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80068b0:	4628      	mov	r0, r5
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80068b4:	f7ff f92c 	bl	8005b10 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80068b8:	f7fb fbb6 	bl	8002028 <HAL_GetTick>
 80068bc:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80068be:	4b48      	ldr	r3, [pc, #288]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80068c6:	d106      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c8:	f7fb fbae 	bl	8002028 <HAL_GetTick>
 80068cc:	1b40      	subs	r0, r0, r5
 80068ce:	2802      	cmp	r0, #2
 80068d0:	d9f5      	bls.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80068d2:	2503      	movs	r5, #3
 80068d4:	e000      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80068d6:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80068d8:	2d00      	cmp	r5, #0
 80068da:	f47f af41 	bne.w	8006760 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80068de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80068ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d024      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80068f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80068fc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006900:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006904:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006908:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800690c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006910:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006914:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006918:	f012 0f02 	tst.w	r2, #2
 800691c:	d10f      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800691e:	2d00      	cmp	r5, #0
 8006920:	f47f af1e 	bne.w	8006760 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006924:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800692a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800692e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006938:	e712      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800693a:	2200      	movs	r2, #0
 800693c:	e7ec      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800693e:	f7fb fb73 	bl	8002028 <HAL_GetTick>
 8006942:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694c:	f013 0f02 	tst.w	r3, #2
 8006950:	d1e5      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006952:	f7fb fb69 	bl	8002028 <HAL_GetTick>
 8006956:	1b80      	subs	r0, r0, r6
 8006958:	f241 3388 	movw	r3, #5000	; 0x1388
 800695c:	4298      	cmp	r0, r3
 800695e:	d9f1      	bls.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8006960:	2503      	movs	r5, #3
 8006962:	e7dc      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006964:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006966:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800696a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800696e:	0919      	lsrs	r1, r3, #4
 8006970:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006974:	ea22 0201 	bic.w	r2, r2, r1
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006984:	e750      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006986:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006988:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800698c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006990:	0919      	lsrs	r1, r3, #4
 8006992:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006996:	ea22 0201 	bic.w	r2, r2, r1
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80069a6:	e744      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069a8:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80069aa:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80069ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80069b2:	0919      	lsrs	r1, r3, #4
 80069b4:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80069b8:	ea22 0201 	bic.w	r2, r2, r1
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80069c8:	e738      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80069ca:	68cb      	ldr	r3, [r1, #12]
 80069cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069d0:	60cb      	str	r3, [r1, #12]
 80069d2:	e746      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80069d4:	68cb      	ldr	r3, [r1, #12]
 80069d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069da:	60cb      	str	r3, [r1, #12]
 80069dc:	e768      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80069de:	bf00      	nop
 80069e0:	58000400 	.word	0x58000400

080069e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80069e4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069e6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80069ea:	2a01      	cmp	r2, #1
 80069ec:	d035      	beq.n	8006a5a <HAL_RTC_DeactivateAlarm+0x76>
 80069ee:	2201      	movs	r2, #1
 80069f0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069f4:	2202      	movs	r2, #2
 80069f6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069fa:	4a19      	ldr	r2, [pc, #100]	; (8006a60 <HAL_RTC_DeactivateAlarm+0x7c>)
 80069fc:	20ca      	movs	r0, #202	; 0xca
 80069fe:	6250      	str	r0, [r2, #36]	; 0x24
 8006a00:	2053      	movs	r0, #83	; 0x53
 8006a02:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006a04:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006a08:	d018      	beq.n	8006a3c <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006a0a:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006a0c:	6991      	ldr	r1, [r2, #24]
 8006a0e:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8006a12:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006a14:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006a16:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006a1a:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006a1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a1e:	f021 0102 	bic.w	r1, r1, #2
 8006a22:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a24:	2102      	movs	r1, #2
 8006a26:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a28:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006a2a:	21ff      	movs	r1, #255	; 0xff
 8006a2c:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a34:	2000      	movs	r0, #0
 8006a36:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a3a:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006a3c:	6991      	ldr	r1, [r2, #24]
 8006a3e:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8006a42:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006a44:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006a46:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006a4a:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a4e:	f021 0101 	bic.w	r1, r1, #1
 8006a52:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a54:	2101      	movs	r1, #1
 8006a56:	65d1      	str	r1, [r2, #92]	; 0x5c
 8006a58:	e7e6      	b.n	8006a28 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8006a5a:	2002      	movs	r0, #2
}
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40002800 	.word	0x40002800

08006a64 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006a68:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006a6a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006a6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006a6e:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006a70:	f015 0f01 	tst.w	r5, #1
 8006a74:	d106      	bne.n	8006a84 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006a76:	f015 0f02 	tst.w	r5, #2
 8006a7a:	d109      	bne.n	8006a90 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006a86:	2201      	movs	r2, #1
 8006a88:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006a8a:	f7fb fcf7 	bl	800247c <HAL_RTC_AlarmAEventCallback>
 8006a8e:	e7f2      	b.n	8006a76 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006a92:	2202      	movs	r2, #2
 8006a94:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 f9ec 	bl	8006e74 <HAL_RTCEx_AlarmBEventCallback>
 8006a9c:	e7ee      	b.n	8006a7c <HAL_RTC_AlarmIRQHandler+0x18>
 8006a9e:	bf00      	nop
 8006aa0:	40002800 	.word	0x40002800

08006aa4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006aa4:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006aa6:	4a0b      	ldr	r2, [pc, #44]	; (8006ad4 <HAL_RTC_WaitForSynchro+0x30>)
 8006aa8:	68d3      	ldr	r3, [r2, #12]
 8006aaa:	f023 0320 	bic.w	r3, r3, #32
 8006aae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006ab0:	f7fb faba 	bl	8002028 <HAL_GetTick>
 8006ab4:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ab6:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <HAL_RTC_WaitForSynchro+0x30>)
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f013 0f20 	tst.w	r3, #32
 8006abe:	d107      	bne.n	8006ad0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ac0:	f7fb fab2 	bl	8002028 <HAL_GetTick>
 8006ac4:	1b00      	subs	r0, r0, r4
 8006ac6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006aca:	d9f4      	bls.n	8006ab6 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006acc:	2003      	movs	r0, #3
 8006ace:	e000      	b.n	8006ad2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006ad0:	2000      	movs	r0, #0
}
 8006ad2:	bd10      	pop	{r4, pc}
 8006ad4:	40002800 	.word	0x40002800

08006ad8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ad8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ada:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <RTC_EnterInitMode+0x48>)
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ae2:	d002      	beq.n	8006aea <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006ae4:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	bd70      	pop	{r4, r5, r6, pc}
 8006aea:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006aec:	4a0c      	ldr	r2, [pc, #48]	; (8006b20 <RTC_EnterInitMode+0x48>)
 8006aee:	68d3      	ldr	r3, [r2, #12]
 8006af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8006af6:	f7fb fa97 	bl	8002028 <HAL_GetTick>
 8006afa:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006afc:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006afe:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <RTC_EnterInitMode+0x48>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b06:	d1ee      	bne.n	8006ae6 <RTC_EnterInitMode+0xe>
 8006b08:	2c03      	cmp	r4, #3
 8006b0a:	d0ec      	beq.n	8006ae6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b0c:	f7fb fa8c 	bl	8002028 <HAL_GetTick>
 8006b10:	1b43      	subs	r3, r0, r5
 8006b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b16:	d9f2      	bls.n	8006afe <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b18:	2403      	movs	r4, #3
 8006b1a:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8006b1e:	e7ee      	b.n	8006afe <RTC_EnterInitMode+0x26>
 8006b20:	40002800 	.word	0x40002800

08006b24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b24:	b510      	push	{r4, lr}
 8006b26:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b28:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <RTC_ExitInitMode+0x48>)
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f013 0f20 	tst.w	r3, #32
 8006b38:	d106      	bne.n	8006b48 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b3a:	f7ff ffb3 	bl	8006aa4 <HAL_RTC_WaitForSynchro>
 8006b3e:	b198      	cbz	r0, 8006b68 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b40:	2003      	movs	r0, #3
 8006b42:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006b46:	e00f      	b.n	8006b68 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <RTC_ExitInitMode+0x48>)
 8006b4a:	6993      	ldr	r3, [r2, #24]
 8006b4c:	f023 0320 	bic.w	r3, r3, #32
 8006b50:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b52:	f7ff ffa7 	bl	8006aa4 <HAL_RTC_WaitForSynchro>
 8006b56:	b110      	cbz	r0, 8006b5e <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b58:	2003      	movs	r0, #3
 8006b5a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b5e:	4a03      	ldr	r2, [pc, #12]	; (8006b6c <RTC_ExitInitMode+0x48>)
 8006b60:	6993      	ldr	r3, [r2, #24]
 8006b62:	f043 0320 	orr.w	r3, r3, #32
 8006b66:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40002800 	.word	0x40002800

08006b70 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d052      	beq.n	8006c1a <HAL_RTC_Init+0xaa>
{
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b78:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006b7c:	b163      	cbz	r3, 8006b98 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006b7e:	2302      	movs	r3, #2
 8006b80:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b84:	4b26      	ldr	r3, [pc, #152]	; (8006c20 <HAL_RTC_Init+0xb0>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f013 0f10 	tst.w	r3, #16
 8006b8c:	d009      	beq.n	8006ba2 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8006b8e:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006b98:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8006b9c:	f7fa ffd0 	bl	8001b40 <HAL_RTC_MspInit>
 8006ba0:	e7ed      	b.n	8006b7e <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ba2:	4b1f      	ldr	r3, [pc, #124]	; (8006c20 <HAL_RTC_Init+0xb0>)
 8006ba4:	22ca      	movs	r2, #202	; 0xca
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8006ba8:	2253      	movs	r2, #83	; 0x53
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8006bac:	4620      	mov	r0, r4
 8006bae:	f7ff ff93 	bl	8006ad8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8006bb2:	b128      	cbz	r0, 8006bc0 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <HAL_RTC_Init+0xb0>)
 8006bb6:	22ff      	movs	r2, #255	; 0xff
 8006bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d1eb      	bne.n	8006b96 <HAL_RTC_Init+0x26>
 8006bbe:	e7e7      	b.n	8006b90 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006bc0:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <HAL_RTC_Init+0xb0>)
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bcc:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006bce:	6999      	ldr	r1, [r3, #24]
 8006bd0:	6862      	ldr	r2, [r4, #4]
 8006bd2:	6920      	ldr	r0, [r4, #16]
 8006bd4:	4302      	orrs	r2, r0
 8006bd6:	69a0      	ldr	r0, [r4, #24]
 8006bd8:	4302      	orrs	r2, r0
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006bde:	68e2      	ldr	r2, [r4, #12]
 8006be0:	68a1      	ldr	r1, [r4, #8]
 8006be2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006be6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8006bee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006bf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006bf2:	4301      	orrs	r1, r0
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f7ff ff93 	bl	8006b24 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d1d8      	bne.n	8006bb4 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8006c02:	4907      	ldr	r1, [pc, #28]	; (8006c20 <HAL_RTC_Init+0xb0>)
 8006c04:	698b      	ldr	r3, [r1, #24]
 8006c06:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006c0a:	6a22      	ldr	r2, [r4, #32]
 8006c0c:	69e5      	ldr	r5, [r4, #28]
 8006c0e:	432a      	orrs	r2, r5
 8006c10:	6965      	ldr	r5, [r4, #20]
 8006c12:	432a      	orrs	r2, r5
 8006c14:	4313      	orrs	r3, r2
 8006c16:	618b      	str	r3, [r1, #24]
 8006c18:	e7cc      	b.n	8006bb4 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c1a:	2001      	movs	r0, #1
}
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40002800 	.word	0x40002800

08006c24 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006c24:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006c26:	e002      	b.n	8006c2e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006c28:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006c2a:	380a      	subs	r0, #10
 8006c2c:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8006c2e:	2809      	cmp	r0, #9
 8006c30:	d8fa      	bhi.n	8006c28 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	b2db      	uxtb	r3, r3
}
 8006c36:	4318      	orrs	r0, r3
 8006c38:	4770      	bx	lr
	...

08006c3c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006c3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f000 80b0 	beq.w	8006da6 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c54:	2302      	movs	r3, #2
 8006c56:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006c5a:	4b54      	ldr	r3, [pc, #336]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006c5c:	68de      	ldr	r6, [r3, #12]
 8006c5e:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006c62:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006c66:	d043      	beq.n	8006cf0 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006c68:	bb12      	cbnz	r2, 8006cb0 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c70:	d101      	bne.n	8006c76 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006c76:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c7a:	7820      	ldrb	r0, [r4, #0]
 8006c7c:	f7ff ffd2 	bl	8006c24 <RTC_ByteToBcd2>
 8006c80:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c82:	7860      	ldrb	r0, [r4, #1]
 8006c84:	f7ff ffce 	bl	8006c24 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c88:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c8c:	78a0      	ldrb	r0, [r4, #2]
 8006c8e:	f7ff ffc9 	bl	8006c24 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c92:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c94:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c96:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c9a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006c9e:	f7ff ffc1 	bl	8006c24 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ca2:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ca6:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ca8:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006caa:	ea48 0000 	orr.w	r0, r8, r0
 8006cae:	e020      	b.n	8006cf2 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006cb0:	6948      	ldr	r0, [r1, #20]
 8006cb2:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006cb6:	d009      	beq.n	8006ccc <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006cb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006cbc:	d006      	beq.n	8006ccc <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006cbe:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006cc6:	d101      	bne.n	8006ccc <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ccc:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cce:	7863      	ldrb	r3, [r4, #1]
 8006cd0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cd6:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cd8:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cda:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cdc:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ce0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ce4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ce8:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cea:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cec:	4318      	orrs	r0, r3
 8006cee:	e000      	b.n	8006cf2 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006cf0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006cf4:	22ca      	movs	r2, #202	; 0xca
 8006cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8006cf8:	2253      	movs	r2, #83	; 0x53
 8006cfa:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006cfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d02:	d02a      	beq.n	8006d5a <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006d04:	4b29      	ldr	r3, [pc, #164]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006d06:	699a      	ldr	r2, [r3, #24]
 8006d08:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006d0c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006d0e:	2202      	movs	r2, #2
 8006d10:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006d12:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006d16:	d040      	beq.n	8006d9a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006d18:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006d1a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006d1c:	69a2      	ldr	r2, [r4, #24]
 8006d1e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006d20:	6862      	ldr	r2, [r4, #4]
 8006d22:	4b22      	ldr	r3, [pc, #136]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006d24:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006d26:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006d28:	f042 0202 	orr.w	r2, r2, #2
 8006d2c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006d34:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d36:	4a1e      	ldr	r2, [pc, #120]	; (8006db0 <HAL_RTC_SetAlarm_IT+0x174>)
 8006d38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d44:	4b19      	ldr	r3, [pc, #100]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006d46:	22ff      	movs	r2, #255	; 0xff
 8006d48:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006d50:	2000      	movs	r0, #0
 8006d52:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006d62:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006d64:	2201      	movs	r2, #1
 8006d66:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006d68:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006d6c:	d00f      	beq.n	8006d8e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006d6e:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006d70:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006d72:	69a2      	ldr	r2, [r4, #24]
 8006d74:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006d76:	6862      	ldr	r2, [r4, #4]
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006d7a:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006d7c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006d8a:	619a      	str	r2, [r3, #24]
 8006d8c:	e7d3      	b.n	8006d36 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006d8e:	69a3      	ldr	r3, [r4, #24]
 8006d90:	69e2      	ldr	r2, [r4, #28]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	4a05      	ldr	r2, [pc, #20]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006d96:	6453      	str	r3, [r2, #68]	; 0x44
 8006d98:	e7ed      	b.n	8006d76 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006d9a:	69a3      	ldr	r3, [r4, #24]
 8006d9c:	69e2      	ldr	r2, [r4, #28]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	4a02      	ldr	r2, [pc, #8]	; (8006dac <HAL_RTC_SetAlarm_IT+0x170>)
 8006da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006da4:	e7bc      	b.n	8006d20 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006da6:	2002      	movs	r0, #2
}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40002800 	.word	0x40002800
 8006db0:	58000800 	.word	0x58000800

08006db4 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006db4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d017      	beq.n	8006dec <HAL_RTCEx_EnableBypassShadow+0x38>
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dc8:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8006dca:	22ca      	movs	r2, #202	; 0xca
 8006dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8006dce:	2253      	movs	r2, #83	; 0x53
 8006dd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	f042 0220 	orr.w	r2, r2, #32
 8006dd8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dda:	22ff      	movs	r2, #255	; 0xff
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006dde:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006de2:	2300      	movs	r3, #0
 8006de4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006de8:	4618      	mov	r0, r3
 8006dea:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006dec:	2002      	movs	r0, #2
}
 8006dee:	4770      	bx	lr
 8006df0:	40002800 	.word	0x40002800

08006df4 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006df4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d020      	beq.n	8006e3e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8006dfc:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8006dfe:	2101      	movs	r1, #1
 8006e00:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e04:	2302      	movs	r3, #2
 8006e06:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e0a:	4b0e      	ldr	r3, [pc, #56]	; (8006e44 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8006e0c:	22ca      	movs	r2, #202	; 0xca
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24
 8006e10:	2253      	movs	r2, #83	; 0x53
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e1a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006e1c:	4c0a      	ldr	r4, [pc, #40]	; (8006e48 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8006e1e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006e22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e26:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e2a:	22ff      	movs	r2, #255	; 0xff
 8006e2c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e2e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e32:	2300      	movs	r3, #0
 8006e34:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006e38:	4618      	mov	r0, r3
}
 8006e3a:	bc10      	pop	{r4}
 8006e3c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006e3e:	2002      	movs	r0, #2
}
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40002800 	.word	0x40002800
 8006e48:	58000800 	.word	0x58000800

08006e4c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e58:	d103      	bne.n	8006e62 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006e60:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006e62:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006e64:	2240      	movs	r2, #64	; 0x40
 8006e66:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006e68:	f7fb fb0c 	bl	8002484 <HAL_RTCEx_SSRUEventCallback>
 8006e6c:	e7f5      	b.n	8006e5a <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006e6e:	bf00      	nop
 8006e70:	40002800 	.word	0x40002800

08006e74 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006e74:	4770      	bx	lr

08006e76 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006e76:	0089      	lsls	r1, r1, #2
 8006e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006e7c:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006e80:	600a      	str	r2, [r1, #0]
}
 8006e82:	4770      	bx	lr

08006e84 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006e84:	0089      	lsls	r1, r1, #2
 8006e86:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006e8a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006e8e:	6808      	ldr	r0, [r1, #0]
}
 8006e90:	4770      	bx	lr
	...

08006e94 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <SUBGHZSPI_Init+0x20>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006e9e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006ea2:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006ea4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006ea8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb0:	601a      	str	r2, [r3, #0]
}
 8006eb2:	4770      	bx	lr
 8006eb4:	58010000 	.word	0x58010000

08006eb8 <HAL_SUBGHZ_Init>:
{
 8006eb8:	b530      	push	{r4, r5, lr}
 8006eba:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d058      	beq.n	8006f72 <HAL_SUBGHZ_Init+0xba>
 8006ec0:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8006ec2:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006ec4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006ec8:	b10b      	cbz	r3, 8006ece <HAL_SUBGHZ_Init+0x16>
 8006eca:	2d03      	cmp	r5, #3
 8006ecc:	d10b      	bne.n	8006ee6 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7fa ffb2 	bl	8001e3c <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006ed8:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <HAL_SUBGHZ_Init+0xc0>)
 8006eda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ede:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006ee6:	b185      	cbz	r5, 8006f0a <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006ee8:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <HAL_SUBGHZ_Init+0xc4>)
 8006eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eee:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8006ef0:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	f7ff ffce 	bl	8006e94 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f00:	2301      	movs	r3, #1
 8006f02:	71a3      	strb	r3, [r4, #6]
}
 8006f04:	4628      	mov	r0, r5
 8006f06:	b003      	add	sp, #12
 8006f08:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f12:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006f16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f1e:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <HAL_SUBGHZ_Init+0xc8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006f26:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006f2a:	2264      	movs	r2, #100	; 0x64
 8006f2c:	fb02 f303 	mul.w	r3, r2, r3
 8006f30:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006f32:	9b01      	ldr	r3, [sp, #4]
 8006f34:	b1d3      	cbz	r3, 8006f6c <HAL_SUBGHZ_Init+0xb4>
      count--;
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f44:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006f48:	d1f3      	bne.n	8006f32 <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <HAL_SUBGHZ_Init+0xc4>)
 8006f4c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f5e:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f64:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	d1ca      	bne.n	8006f00 <HAL_SUBGHZ_Init+0x48>
 8006f6a:	e7c2      	b.n	8006ef2 <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f6c:	2501      	movs	r5, #1
 8006f6e:	60a5      	str	r5, [r4, #8]
        break;
 8006f70:	e7eb      	b.n	8006f4a <HAL_SUBGHZ_Init+0x92>
    return status;
 8006f72:	2501      	movs	r5, #1
 8006f74:	e7c6      	b.n	8006f04 <HAL_SUBGHZ_Init+0x4c>
 8006f76:	bf00      	nop
 8006f78:	58000800 	.word	0x58000800
 8006f7c:	58000400 	.word	0x58000400
 8006f80:	20000074 	.word	0x20000074

08006f84 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006f84:	b082      	sub	sp, #8
 8006f86:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f88:	4b1a      	ldr	r3, [pc, #104]	; (8006ff4 <SUBGHZSPI_Transmit+0x70>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006f90:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006f94:	2064      	movs	r0, #100	; 0x64
 8006f96:	fb00 f303 	mul.w	r3, r0, r3
 8006f9a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006f9c:	9b01      	ldr	r3, [sp, #4]
 8006f9e:	b14b      	cbz	r3, 8006fb4 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006fa6:	4b14      	ldr	r3, [pc, #80]	; (8006ff8 <SUBGHZSPI_Transmit+0x74>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f013 0f02 	tst.w	r3, #2
 8006fae:	d0f5      	beq.n	8006f9c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e001      	b.n	8006fb8 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <SUBGHZSPI_Transmit+0x74>)
 8006fba:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <SUBGHZSPI_Transmit+0x70>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006fc4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006fc8:	2164      	movs	r1, #100	; 0x64
 8006fca:	fb01 f303 	mul.w	r3, r1, r3
 8006fce:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006fd0:	9b01      	ldr	r3, [sp, #4]
 8006fd2:	b143      	cbz	r3, 8006fe6 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <SUBGHZSPI_Transmit+0x74>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f013 0f01 	tst.w	r3, #1
 8006fe2:	d0f5      	beq.n	8006fd0 <SUBGHZSPI_Transmit+0x4c>
 8006fe4:	e001      	b.n	8006fea <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006fea:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <SUBGHZSPI_Transmit+0x74>)
 8006fec:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006fee:	b002      	add	sp, #8
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000074 	.word	0x20000074
 8006ff8:	58010000 	.word	0x58010000

08006ffc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007000:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <SUBGHZSPI_Receive+0x78>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007008:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800700c:	2064      	movs	r0, #100	; 0x64
 800700e:	fb00 f303 	mul.w	r3, r0, r3
 8007012:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	b14b      	cbz	r3, 800702c <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	3b01      	subs	r3, #1
 800701c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800701e:	4b16      	ldr	r3, [pc, #88]	; (8007078 <SUBGHZSPI_Receive+0x7c>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f013 0f02 	tst.w	r3, #2
 8007026:	d0f5      	beq.n	8007014 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8007028:	2000      	movs	r0, #0
 800702a:	e001      	b.n	8007030 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800702c:	2001      	movs	r0, #1
 800702e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8007030:	4b11      	ldr	r3, [pc, #68]	; (8007078 <SUBGHZSPI_Receive+0x7c>)
 8007032:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007036:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800703a:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <SUBGHZSPI_Receive+0x78>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007042:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007046:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800704a:	fb0c f303 	mul.w	r3, ip, r3
 800704e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	b143      	cbz	r3, 8007066 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	3b01      	subs	r3, #1
 8007058:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800705a:	4b07      	ldr	r3, [pc, #28]	; (8007078 <SUBGHZSPI_Receive+0x7c>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f013 0f01 	tst.w	r3, #1
 8007062:	d0f5      	beq.n	8007050 <SUBGHZSPI_Receive+0x54>
 8007064:	e001      	b.n	800706a <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007066:	2001      	movs	r0, #1
 8007068:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800706a:	4b03      	ldr	r3, [pc, #12]	; (8007078 <SUBGHZSPI_Receive+0x7c>)
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	700b      	strb	r3, [r1, #0]

  return status;
}
 8007070:	b002      	add	sp, #8
 8007072:	4770      	bx	lr
 8007074:	20000074 	.word	0x20000074
 8007078:	58010000 	.word	0x58010000

0800707c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800707c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800707e:	4b13      	ldr	r3, [pc, #76]	; (80070cc <SUBGHZ_WaitOnBusy+0x50>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007086:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800708a:	2264      	movs	r2, #100	; 0x64
 800708c:	fb02 f303 	mul.w	r3, r2, r3
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	e006      	b.n	80070a2 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007094:	2302      	movs	r3, #2
 8007096:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8007098:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800709a:	b002      	add	sp, #8
 800709c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800709e:	4213      	tst	r3, r2
 80070a0:	d012      	beq.n	80070c8 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <SUBGHZ_WaitOnBusy+0x54>)
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f013 0304 	ands.w	r3, r3, #4
 80070aa:	d000      	beq.n	80070ae <SUBGHZ_WaitOnBusy+0x32>
 80070ac:	2301      	movs	r3, #1
    if (count == 0U)
 80070ae:	9a01      	ldr	r2, [sp, #4]
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	d0ef      	beq.n	8007094 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 80070b4:	9a01      	ldr	r2, [sp, #4]
 80070b6:	3a01      	subs	r2, #1
 80070b8:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80070ba:	4a05      	ldr	r2, [pc, #20]	; (80070d0 <SUBGHZ_WaitOnBusy+0x54>)
 80070bc:	6952      	ldr	r2, [r2, #20]
 80070be:	f012 0202 	ands.w	r2, r2, #2
 80070c2:	d0ec      	beq.n	800709e <SUBGHZ_WaitOnBusy+0x22>
 80070c4:	2201      	movs	r2, #1
 80070c6:	e7ea      	b.n	800709e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 80070c8:	2000      	movs	r0, #0
 80070ca:	e7e6      	b.n	800709a <SUBGHZ_WaitOnBusy+0x1e>
 80070cc:	20000074 	.word	0x20000074
 80070d0:	58000400 	.word	0x58000400

080070d4 <SUBGHZ_CheckDeviceReady>:
{
 80070d4:	b500      	push	{lr}
 80070d6:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80070d8:	7903      	ldrb	r3, [r0, #4]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d004      	beq.n	80070e8 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80070de:	f7ff ffcd 	bl	800707c <SUBGHZ_WaitOnBusy>
}
 80070e2:	b003      	add	sp, #12
 80070e4:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80070e8:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <SUBGHZ_CheckDeviceReady+0x4c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80070f0:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80070f4:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <SUBGHZ_CheckDeviceReady+0x50>)
 80070f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	3b01      	subs	r3, #1
 8007108:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f9      	bne.n	8007104 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007110:	4a04      	ldr	r2, [pc, #16]	; (8007124 <SUBGHZ_CheckDeviceReady+0x50>)
 8007112:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800711e:	e7de      	b.n	80070de <SUBGHZ_CheckDeviceReady+0xa>
 8007120:	20000074 	.word	0x20000074
 8007124:	58000400 	.word	0x58000400

08007128 <HAL_SUBGHZ_WriteRegisters>:
{
 8007128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800712e:	7980      	ldrb	r0, [r0, #6]
 8007130:	fa5f f880 	uxtb.w	r8, r0
 8007134:	f1b8 0f01 	cmp.w	r8, #1
 8007138:	d13e      	bne.n	80071b8 <HAL_SUBGHZ_WriteRegisters+0x90>
 800713a:	460c      	mov	r4, r1
 800713c:	4617      	mov	r7, r2
 800713e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007140:	796b      	ldrb	r3, [r5, #5]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d03b      	beq.n	80071be <HAL_SUBGHZ_WriteRegisters+0x96>
 8007146:	2301      	movs	r3, #1
 8007148:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800714a:	2302      	movs	r3, #2
 800714c:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800714e:	4628      	mov	r0, r5
 8007150:	f7ff ffc0 	bl	80070d4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007154:	4a1b      	ldr	r2, [pc, #108]	; (80071c4 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8007156:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800715a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800715e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007162:	210d      	movs	r1, #13
 8007164:	4628      	mov	r0, r5
 8007166:	f7ff ff0d 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800716a:	0a21      	lsrs	r1, r4, #8
 800716c:	4628      	mov	r0, r5
 800716e:	f7ff ff09 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007172:	b2e1      	uxtb	r1, r4
 8007174:	4628      	mov	r0, r5
 8007176:	f7ff ff05 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800717a:	2400      	movs	r4, #0
 800717c:	e005      	b.n	800718a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800717e:	5d39      	ldrb	r1, [r7, r4]
 8007180:	4628      	mov	r0, r5
 8007182:	f7ff feff 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007186:	3401      	adds	r4, #1
 8007188:	b2a4      	uxth	r4, r4
 800718a:	42b4      	cmp	r4, r6
 800718c:	d3f7      	bcc.n	800717e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800718e:	4a0d      	ldr	r2, [pc, #52]	; (80071c4 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8007190:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800719c:	4628      	mov	r0, r5
 800719e:	f7ff ff6d 	bl	800707c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071a2:	68ab      	ldr	r3, [r5, #8]
 80071a4:	b90b      	cbnz	r3, 80071aa <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 80071a6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071aa:	2301      	movs	r3, #1
 80071ac:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80071ae:	2300      	movs	r3, #0
 80071b0:	716b      	strb	r3, [r5, #5]
}
 80071b2:	4640      	mov	r0, r8
 80071b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80071b8:	f04f 0802 	mov.w	r8, #2
 80071bc:	e7f9      	b.n	80071b2 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80071be:	f04f 0802 	mov.w	r8, #2
 80071c2:	e7f6      	b.n	80071b2 <HAL_SUBGHZ_WriteRegisters+0x8a>
 80071c4:	58000400 	.word	0x58000400

080071c8 <HAL_SUBGHZ_ReadRegisters>:
{
 80071c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071cc:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071ce:	7980      	ldrb	r0, [r0, #6]
 80071d0:	fa5f f880 	uxtb.w	r8, r0
 80071d4:	f1b8 0f01 	cmp.w	r8, #1
 80071d8:	d141      	bne.n	800725e <HAL_SUBGHZ_ReadRegisters+0x96>
 80071da:	460c      	mov	r4, r1
 80071dc:	4615      	mov	r5, r2
 80071de:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80071e0:	7973      	ldrb	r3, [r6, #5]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d03e      	beq.n	8007264 <HAL_SUBGHZ_ReadRegisters+0x9c>
 80071e6:	2301      	movs	r3, #1
 80071e8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071ea:	4630      	mov	r0, r6
 80071ec:	f7ff ff72 	bl	80070d4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071f0:	4a1e      	ldr	r2, [pc, #120]	; (800726c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80071f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80071f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80071fe:	211d      	movs	r1, #29
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff febf 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007206:	0a21      	lsrs	r1, r4, #8
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff febb 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800720e:	b2e1      	uxtb	r1, r4
 8007210:	4630      	mov	r0, r6
 8007212:	f7ff feb7 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007216:	2100      	movs	r1, #0
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff feb3 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800721e:	2400      	movs	r4, #0
 8007220:	e006      	b.n	8007230 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007222:	4629      	mov	r1, r5
 8007224:	4630      	mov	r0, r6
 8007226:	f7ff fee9 	bl	8006ffc <SUBGHZSPI_Receive>
      pData++;
 800722a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800722c:	3401      	adds	r4, #1
 800722e:	b2a4      	uxth	r4, r4
 8007230:	42bc      	cmp	r4, r7
 8007232:	d3f6      	bcc.n	8007222 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007234:	4a0d      	ldr	r2, [pc, #52]	; (800726c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007236:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800723a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ff1a 	bl	800707c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007248:	68b3      	ldr	r3, [r6, #8]
 800724a:	b90b      	cbnz	r3, 8007250 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 800724c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007250:	2301      	movs	r3, #1
 8007252:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007254:	2300      	movs	r3, #0
 8007256:	7173      	strb	r3, [r6, #5]
}
 8007258:	4640      	mov	r0, r8
 800725a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800725e:	f04f 0802 	mov.w	r8, #2
 8007262:	e7f9      	b.n	8007258 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8007264:	f04f 0802 	mov.w	r8, #2
 8007268:	e7f6      	b.n	8007258 <HAL_SUBGHZ_ReadRegisters+0x90>
 800726a:	bf00      	nop
 800726c:	58000400 	.word	0x58000400

08007270 <HAL_SUBGHZ_ExecSetCmd>:
{
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007276:	7980      	ldrb	r0, [r0, #6]
 8007278:	fa5f f980 	uxtb.w	r9, r0
 800727c:	f1b9 0f01 	cmp.w	r9, #1
 8007280:	d143      	bne.n	800730a <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8007282:	4688      	mov	r8, r1
 8007284:	4617      	mov	r7, r2
 8007286:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007288:	796b      	ldrb	r3, [r5, #5]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d040      	beq.n	8007310 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800728e:	2301      	movs	r3, #1
 8007290:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007292:	4628      	mov	r0, r5
 8007294:	f7ff ff1e 	bl	80070d4 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007298:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800729c:	d005      	beq.n	80072aa <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800729e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 80072a2:	d002      	beq.n	80072aa <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	712b      	strb	r3, [r5, #4]
 80072a8:	e001      	b.n	80072ae <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80072aa:	2301      	movs	r3, #1
 80072ac:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80072ae:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80072b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80072b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80072bc:	4641      	mov	r1, r8
 80072be:	4628      	mov	r0, r5
 80072c0:	f7ff fe60 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072c4:	2400      	movs	r4, #0
 80072c6:	e005      	b.n	80072d4 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80072c8:	5d39      	ldrb	r1, [r7, r4]
 80072ca:	4628      	mov	r0, r5
 80072cc:	f7ff fe5a 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072d0:	3401      	adds	r4, #1
 80072d2:	b2a4      	uxth	r4, r4
 80072d4:	42b4      	cmp	r4, r6
 80072d6:	d3f7      	bcc.n	80072c8 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80072d8:	4a0f      	ldr	r2, [pc, #60]	; (8007318 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80072da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80072de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 80072e6:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80072ea:	d10a      	bne.n	8007302 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072ec:	68ab      	ldr	r3, [r5, #8]
 80072ee:	b90b      	cbnz	r3, 80072f4 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80072f0:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072f4:	2301      	movs	r3, #1
 80072f6:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80072f8:	2300      	movs	r3, #0
 80072fa:	716b      	strb	r3, [r5, #5]
}
 80072fc:	4648      	mov	r0, r9
 80072fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007302:	4628      	mov	r0, r5
 8007304:	f7ff feba 	bl	800707c <SUBGHZ_WaitOnBusy>
 8007308:	e7f0      	b.n	80072ec <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800730a:	f04f 0902 	mov.w	r9, #2
 800730e:	e7f5      	b.n	80072fc <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8007310:	f04f 0902 	mov.w	r9, #2
 8007314:	e7f2      	b.n	80072fc <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8007316:	bf00      	nop
 8007318:	58000400 	.word	0x58000400

0800731c <HAL_SUBGHZ_ExecGetCmd>:
{
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007322:	7980      	ldrb	r0, [r0, #6]
 8007324:	fa5f f880 	uxtb.w	r8, r0
 8007328:	f1b8 0f01 	cmp.w	r8, #1
 800732c:	d139      	bne.n	80073a2 <HAL_SUBGHZ_ExecGetCmd+0x86>
 800732e:	460c      	mov	r4, r1
 8007330:	4615      	mov	r5, r2
 8007332:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007334:	7973      	ldrb	r3, [r6, #5]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d036      	beq.n	80073a8 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 800733a:	2301      	movs	r3, #1
 800733c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800733e:	4630      	mov	r0, r6
 8007340:	f7ff fec8 	bl	80070d4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007344:	4a1a      	ldr	r2, [pc, #104]	; (80073b0 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8007346:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800734a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800734e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007352:	4621      	mov	r1, r4
 8007354:	4630      	mov	r0, r6
 8007356:	f7ff fe15 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800735a:	2100      	movs	r1, #0
 800735c:	4630      	mov	r0, r6
 800735e:	f7ff fe11 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007362:	2400      	movs	r4, #0
 8007364:	e006      	b.n	8007374 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007366:	4629      	mov	r1, r5
 8007368:	4630      	mov	r0, r6
 800736a:	f7ff fe47 	bl	8006ffc <SUBGHZSPI_Receive>
      pData++;
 800736e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007370:	3401      	adds	r4, #1
 8007372:	b2a4      	uxth	r4, r4
 8007374:	42bc      	cmp	r4, r7
 8007376:	d3f6      	bcc.n	8007366 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007378:	4a0d      	ldr	r2, [pc, #52]	; (80073b0 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800737a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800737e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007386:	4630      	mov	r0, r6
 8007388:	f7ff fe78 	bl	800707c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800738c:	68b3      	ldr	r3, [r6, #8]
 800738e:	b90b      	cbnz	r3, 8007394 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8007390:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007394:	2301      	movs	r3, #1
 8007396:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007398:	2300      	movs	r3, #0
 800739a:	7173      	strb	r3, [r6, #5]
}
 800739c:	4640      	mov	r0, r8
 800739e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80073a2:	f04f 0802 	mov.w	r8, #2
 80073a6:	e7f9      	b.n	800739c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80073a8:	f04f 0802 	mov.w	r8, #2
 80073ac:	e7f6      	b.n	800739c <HAL_SUBGHZ_ExecGetCmd+0x80>
 80073ae:	bf00      	nop
 80073b0:	58000400 	.word	0x58000400

080073b4 <HAL_SUBGHZ_IRQHandler>:
{
 80073b4:	b530      	push	{r4, r5, lr}
 80073b6:	b083      	sub	sp, #12
 80073b8:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80073ba:	2300      	movs	r3, #0
 80073bc:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80073c0:	2302      	movs	r3, #2
 80073c2:	aa01      	add	r2, sp, #4
 80073c4:	2112      	movs	r1, #18
 80073c6:	f7ff ffa9 	bl	800731c <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80073ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 80073ce:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80073d2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80073d6:	2302      	movs	r3, #2
 80073d8:	aa01      	add	r2, sp, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4628      	mov	r0, r5
 80073de:	f7ff ff47 	bl	8007270 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80073e2:	f014 0f01 	tst.w	r4, #1
 80073e6:	d123      	bne.n	8007430 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80073e8:	f014 0f02 	tst.w	r4, #2
 80073ec:	d124      	bne.n	8007438 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80073ee:	f014 0f04 	tst.w	r4, #4
 80073f2:	d125      	bne.n	8007440 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80073f4:	f014 0f08 	tst.w	r4, #8
 80073f8:	d126      	bne.n	8007448 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80073fa:	f014 0f10 	tst.w	r4, #16
 80073fe:	d127      	bne.n	8007450 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007400:	f014 0f20 	tst.w	r4, #32
 8007404:	d128      	bne.n	8007458 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007406:	f014 0f40 	tst.w	r4, #64	; 0x40
 800740a:	d129      	bne.n	8007460 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800740c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007410:	d006      	beq.n	8007420 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007412:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007416:	d027      	beq.n	8007468 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007418:	2101      	movs	r1, #1
 800741a:	4628      	mov	r0, r5
 800741c:	f00b fcba 	bl	8012d94 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007420:	f414 7f00 	tst.w	r4, #512	; 0x200
 8007424:	d125      	bne.n	8007472 <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007426:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 800742a:	d126      	bne.n	800747a <HAL_SUBGHZ_IRQHandler+0xc6>
}
 800742c:	b003      	add	sp, #12
 800742e:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007430:	4628      	mov	r0, r5
 8007432:	f00b fc97 	bl	8012d64 <HAL_SUBGHZ_TxCpltCallback>
 8007436:	e7d7      	b.n	80073e8 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007438:	4628      	mov	r0, r5
 800743a:	f00b fc9b 	bl	8012d74 <HAL_SUBGHZ_RxCpltCallback>
 800743e:	e7d6      	b.n	80073ee <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007440:	4628      	mov	r0, r5
 8007442:	f00b fccb 	bl	8012ddc <HAL_SUBGHZ_PreambleDetectedCallback>
 8007446:	e7d5      	b.n	80073f4 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007448:	4628      	mov	r0, r5
 800744a:	f00b fccf 	bl	8012dec <HAL_SUBGHZ_SyncWordValidCallback>
 800744e:	e7d4      	b.n	80073fa <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007450:	4628      	mov	r0, r5
 8007452:	f00b fcd3 	bl	8012dfc <HAL_SUBGHZ_HeaderValidCallback>
 8007456:	e7d3      	b.n	8007400 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007458:	4628      	mov	r0, r5
 800745a:	f00b fcb7 	bl	8012dcc <HAL_SUBGHZ_HeaderErrorCallback>
 800745e:	e7d2      	b.n	8007406 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007460:	4628      	mov	r0, r5
 8007462:	f00b fc8f 	bl	8012d84 <HAL_SUBGHZ_CRCErrorCallback>
 8007466:	e7d1      	b.n	800740c <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007468:	2100      	movs	r1, #0
 800746a:	4628      	mov	r0, r5
 800746c:	f00b fc92 	bl	8012d94 <HAL_SUBGHZ_CADStatusCallback>
 8007470:	e7d6      	b.n	8007420 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007472:	4628      	mov	r0, r5
 8007474:	f00b fca0 	bl	8012db8 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007478:	e7d5      	b.n	8007426 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800747a:	4628      	mov	r0, r5
 800747c:	f00b fcc6 	bl	8012e0c <HAL_SUBGHZ_LrFhssHopCallback>
}
 8007480:	e7d4      	b.n	800742c <HAL_SUBGHZ_IRQHandler+0x78>
	...

08007484 <HAL_SUBGHZ_WriteBuffer>:
{
 8007484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007488:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800748a:	7980      	ldrb	r0, [r0, #6]
 800748c:	fa5f f880 	uxtb.w	r8, r0
 8007490:	f1b8 0f01 	cmp.w	r8, #1
 8007494:	d138      	bne.n	8007508 <HAL_SUBGHZ_WriteBuffer+0x84>
 8007496:	460c      	mov	r4, r1
 8007498:	4617      	mov	r7, r2
 800749a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800749c:	796b      	ldrb	r3, [r5, #5]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d035      	beq.n	800750e <HAL_SUBGHZ_WriteBuffer+0x8a>
 80074a2:	2301      	movs	r3, #1
 80074a4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7ff fe14 	bl	80070d4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80074ac:	4a19      	ldr	r2, [pc, #100]	; (8007514 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80074ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80074b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80074ba:	210e      	movs	r1, #14
 80074bc:	4628      	mov	r0, r5
 80074be:	f7ff fd61 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80074c2:	4621      	mov	r1, r4
 80074c4:	4628      	mov	r0, r5
 80074c6:	f7ff fd5d 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80074ca:	2400      	movs	r4, #0
 80074cc:	e005      	b.n	80074da <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80074ce:	5d39      	ldrb	r1, [r7, r4]
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7ff fd57 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80074d6:	3401      	adds	r4, #1
 80074d8:	b2a4      	uxth	r4, r4
 80074da:	42b4      	cmp	r4, r6
 80074dc:	d3f7      	bcc.n	80074ce <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80074de:	4a0d      	ldr	r2, [pc, #52]	; (8007514 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80074e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80074e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074ec:	4628      	mov	r0, r5
 80074ee:	f7ff fdc5 	bl	800707c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074f2:	68ab      	ldr	r3, [r5, #8]
 80074f4:	b90b      	cbnz	r3, 80074fa <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80074f6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074fa:	2301      	movs	r3, #1
 80074fc:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80074fe:	2300      	movs	r3, #0
 8007500:	716b      	strb	r3, [r5, #5]
}
 8007502:	4640      	mov	r0, r8
 8007504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007508:	f04f 0802 	mov.w	r8, #2
 800750c:	e7f9      	b.n	8007502 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800750e:	f04f 0802 	mov.w	r8, #2
 8007512:	e7f6      	b.n	8007502 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007514:	58000400 	.word	0x58000400

08007518 <HAL_SUBGHZ_ReadBuffer>:
{
 8007518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800751c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800751e:	7980      	ldrb	r0, [r0, #6]
 8007520:	fa5f f880 	uxtb.w	r8, r0
 8007524:	f1b8 0f01 	cmp.w	r8, #1
 8007528:	d13d      	bne.n	80075a6 <HAL_SUBGHZ_ReadBuffer+0x8e>
 800752a:	460c      	mov	r4, r1
 800752c:	4615      	mov	r5, r2
 800752e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007530:	7973      	ldrb	r3, [r6, #5]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d03a      	beq.n	80075ac <HAL_SUBGHZ_ReadBuffer+0x94>
 8007536:	2301      	movs	r3, #1
 8007538:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800753a:	4630      	mov	r0, r6
 800753c:	f7ff fdca 	bl	80070d4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007540:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007542:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007546:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800754a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800754e:	211e      	movs	r1, #30
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff fd17 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007556:	4621      	mov	r1, r4
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff fd13 	bl	8006f84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800755e:	2100      	movs	r1, #0
 8007560:	4630      	mov	r0, r6
 8007562:	f7ff fd0f 	bl	8006f84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007566:	2400      	movs	r4, #0
 8007568:	e006      	b.n	8007578 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800756a:	4629      	mov	r1, r5
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff fd45 	bl	8006ffc <SUBGHZSPI_Receive>
      pData++;
 8007572:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007574:	3401      	adds	r4, #1
 8007576:	b2a4      	uxth	r4, r4
 8007578:	42bc      	cmp	r4, r7
 800757a:	d3f6      	bcc.n	800756a <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800757c:	4a0d      	ldr	r2, [pc, #52]	; (80075b4 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800757e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800758a:	4630      	mov	r0, r6
 800758c:	f7ff fd76 	bl	800707c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007590:	68b3      	ldr	r3, [r6, #8]
 8007592:	b90b      	cbnz	r3, 8007598 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8007594:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007598:	2301      	movs	r3, #1
 800759a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800759c:	2300      	movs	r3, #0
 800759e:	7173      	strb	r3, [r6, #5]
}
 80075a0:	4640      	mov	r0, r8
 80075a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80075a6:	f04f 0802 	mov.w	r8, #2
 80075aa:	e7f9      	b.n	80075a0 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80075ac:	f04f 0802 	mov.w	r8, #2
 80075b0:	e7f6      	b.n	80075a0 <HAL_SUBGHZ_ReadBuffer+0x88>
 80075b2:	bf00      	nop
 80075b4:	58000400 	.word	0x58000400

080075b8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80075b8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	e852 3f00 	ldrex	r3, [r2]
 80075be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	e842 3100 	strex	r1, r3, [r2]
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d1f6      	bne.n	80075b8 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80075ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	f102 0308 	add.w	r3, r2, #8
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	3208      	adds	r2, #8
 80075da:	e842 3100 	strex	r1, r3, [r2]
 80075de:	2900      	cmp	r1, #0
 80075e0:	d1f3      	bne.n	80075ca <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075e2:	2320      	movs	r3, #32
 80075e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80075e8:	4770      	bx	lr

080075ea <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	e852 3f00 	ldrex	r3, [r2]
 80075f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	e842 3100 	strex	r1, r3, [r2]
 80075f8:	2900      	cmp	r1, #0
 80075fa:	d1f6      	bne.n	80075ea <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	f102 0308 	add.w	r3, r2, #8
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800760a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	3208      	adds	r2, #8
 8007610:	e842 3100 	strex	r1, r3, [r2]
 8007614:	2900      	cmp	r1, #0
 8007616:	d1f1      	bne.n	80075fc <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007618:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d006      	beq.n	800762c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800761e:	2320      	movs	r3, #32
 8007620:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007624:	2300      	movs	r3, #0
 8007626:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007628:	6743      	str	r3, [r0, #116]	; 0x74
}
 800762a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	e852 3f00 	ldrex	r3, [r2]
 8007632:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	e842 3100 	strex	r1, r3, [r2]
 800763a:	2900      	cmp	r1, #0
 800763c:	d1f6      	bne.n	800762c <UART_EndRxTransfer+0x42>
 800763e:	e7ee      	b.n	800761e <UART_EndRxTransfer+0x34>

08007640 <HAL_UART_Transmit_DMA>:
{
 8007640:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007642:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007646:	2a20      	cmp	r2, #32
 8007648:	d13d      	bne.n	80076c6 <HAL_UART_Transmit_DMA+0x86>
{
 800764a:	b510      	push	{r4, lr}
 800764c:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800764e:	2900      	cmp	r1, #0
 8007650:	d03b      	beq.n	80076ca <HAL_UART_Transmit_DMA+0x8a>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d03b      	beq.n	80076ce <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8007656:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007658:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800765c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007660:	2200      	movs	r2, #0
 8007662:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007666:	2221      	movs	r2, #33	; 0x21
 8007668:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 800766c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800766e:	b1ca      	cbz	r2, 80076a4 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007670:	4918      	ldr	r1, [pc, #96]	; (80076d4 <HAL_UART_Transmit_DMA+0x94>)
 8007672:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007674:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007676:	4918      	ldr	r1, [pc, #96]	; (80076d8 <HAL_UART_Transmit_DMA+0x98>)
 8007678:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800767a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800767c:	4917      	ldr	r1, [pc, #92]	; (80076dc <HAL_UART_Transmit_DMA+0x9c>)
 800767e:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007680:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007682:	2100      	movs	r1, #0
 8007684:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007686:	6802      	ldr	r2, [r0, #0]
 8007688:	3228      	adds	r2, #40	; 0x28
 800768a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800768c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800768e:	f7fd fa21 	bl	8004ad4 <HAL_DMA_Start_IT>
 8007692:	b138      	cbz	r0, 80076a4 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007694:	2310      	movs	r3, #16
 8007696:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 800769a:	2320      	movs	r3, #32
 800769c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 80076a0:	2001      	movs	r0, #1
 80076a2:	e00f      	b.n	80076c4 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	2240      	movs	r2, #64	; 0x40
 80076a8:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	f102 0308 	add.w	r3, r2, #8
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	3208      	adds	r2, #8
 80076ba:	e842 3100 	strex	r1, r3, [r2]
 80076be:	2900      	cmp	r1, #0
 80076c0:	d1f3      	bne.n	80076aa <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80076c2:	2000      	movs	r0, #0
}
 80076c4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80076c6:	2002      	movs	r0, #2
}
 80076c8:	4770      	bx	lr
      return HAL_ERROR;
 80076ca:	2001      	movs	r0, #1
 80076cc:	e7fa      	b.n	80076c4 <HAL_UART_Transmit_DMA+0x84>
 80076ce:	2001      	movs	r0, #1
 80076d0:	e7f8      	b.n	80076c4 <HAL_UART_Transmit_DMA+0x84>
 80076d2:	bf00      	nop
 80076d4:	080076e1 	.word	0x080076e1
 80076d8:	0800774f 	.word	0x0800774f
 80076dc:	0800775b 	.word	0x0800775b

080076e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076e0:	b508      	push	{r3, lr}
 80076e2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076e4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f013 0f20 	tst.w	r3, #32
 80076ee:	d118      	bne.n	8007722 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	f102 0308 	add.w	r3, r2, #8
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	3208      	adds	r2, #8
 8007706:	e842 3100 	strex	r1, r3, [r2]
 800770a:	2900      	cmp	r1, #0
 800770c:	d1f3      	bne.n	80076f6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800770e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	e852 3f00 	ldrex	r3, [r2]
 8007714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	e842 3100 	strex	r1, r3, [r2]
 800771c:	2900      	cmp	r1, #0
 800771e:	d1f6      	bne.n	800770e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007720:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007722:	f7fa ffef 	bl	8002704 <HAL_UART_TxCpltCallback>
}
 8007726:	e7fb      	b.n	8007720 <UART_DMATransmitCplt+0x40>

08007728 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007728:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800772a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	e852 3f00 	ldrex	r3, [r2]
 8007730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	e842 3100 	strex	r1, r3, [r2]
 8007738:	2900      	cmp	r1, #0
 800773a:	d1f6      	bne.n	800772a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800773c:	2320      	movs	r3, #32
 800773e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007746:	f7fa ffdd 	bl	8002704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800774a:	bd08      	pop	{r3, pc}

0800774c <HAL_UART_TxHalfCpltCallback>:
}
 800774c:	4770      	bx	lr

0800774e <UART_DMATxHalfCplt>:
{
 800774e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007750:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007752:	f7ff fffb 	bl	800774c <HAL_UART_TxHalfCpltCallback>
}
 8007756:	bd08      	pop	{r3, pc}

08007758 <HAL_UART_ErrorCallback>:
}
 8007758:	4770      	bx	lr

0800775a <UART_DMAError>:
{
 800775a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800775c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800775e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007762:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800776e:	d001      	beq.n	8007774 <UART_DMAError+0x1a>
 8007770:	2a21      	cmp	r2, #33	; 0x21
 8007772:	d010      	beq.n	8007796 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f013 0f40 	tst.w	r3, #64	; 0x40
 800777c:	d001      	beq.n	8007782 <UART_DMAError+0x28>
 800777e:	2d22      	cmp	r5, #34	; 0x22
 8007780:	d010      	beq.n	80077a4 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007782:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007786:	f043 0310 	orr.w	r3, r3, #16
 800778a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800778e:	4620      	mov	r0, r4
 8007790:	f7ff ffe2 	bl	8007758 <HAL_UART_ErrorCallback>
}
 8007794:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800779c:	4620      	mov	r0, r4
 800779e:	f7ff ff0b 	bl	80075b8 <UART_EndTxTransfer>
 80077a2:	e7e7      	b.n	8007774 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80077aa:	4620      	mov	r0, r4
 80077ac:	f7ff ff1d 	bl	80075ea <UART_EndRxTransfer>
 80077b0:	e7e7      	b.n	8007782 <UART_DMAError+0x28>

080077b2 <UART_DMAAbortOnError>:
{
 80077b2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80077bc:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80077c0:	f7ff ffca 	bl	8007758 <HAL_UART_ErrorCallback>
}
 80077c4:	bd08      	pop	{r3, pc}

080077c6 <HAL_UARTEx_RxEventCallback>:
}
 80077c6:	4770      	bx	lr

080077c8 <HAL_UART_IRQHandler>:
{
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077cc:	6801      	ldr	r1, [r0, #0]
 80077ce:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077d0:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077d2:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077d4:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80077d8:	401a      	ands	r2, r3
 80077da:	d108      	bne.n	80077ee <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077dc:	f013 0f20 	tst.w	r3, #32
 80077e0:	d005      	beq.n	80077ee <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077e2:	f010 0f20 	tst.w	r0, #32
 80077e6:	d134      	bne.n	8007852 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077e8:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80077ec:	d131      	bne.n	8007852 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80077ee:	b12a      	cbz	r2, 80077fc <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077f0:	4a99      	ldr	r2, [pc, #612]	; (8007a58 <HAL_UART_IRQHandler+0x290>)
 80077f2:	402a      	ands	r2, r5
 80077f4:	d133      	bne.n	800785e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80077f6:	4e99      	ldr	r6, [pc, #612]	; (8007a5c <HAL_UART_IRQHandler+0x294>)
 80077f8:	4230      	tst	r0, r6
 80077fa:	d130      	bne.n	800785e <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80077fe:	2a01      	cmp	r2, #1
 8007800:	f000 80c6 	beq.w	8007990 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007808:	d003      	beq.n	8007812 <HAL_UART_IRQHandler+0x4a>
 800780a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800780e:	f040 8165 	bne.w	8007adc <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007812:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007816:	d007      	beq.n	8007828 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007818:	f010 0f80 	tst.w	r0, #128	; 0x80
 800781c:	f040 8165 	bne.w	8007aea <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007820:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8007824:	f040 8161 	bne.w	8007aea <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007828:	f013 0f40 	tst.w	r3, #64	; 0x40
 800782c:	d003      	beq.n	8007836 <HAL_UART_IRQHandler+0x6e>
 800782e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007832:	f040 8161 	bne.w	8007af8 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007836:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800783a:	d003      	beq.n	8007844 <HAL_UART_IRQHandler+0x7c>
 800783c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007840:	f040 815e 	bne.w	8007b00 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007844:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007848:	d002      	beq.n	8007850 <HAL_UART_IRQHandler+0x88>
 800784a:	2800      	cmp	r0, #0
 800784c:	f2c0 815c 	blt.w	8007b08 <HAL_UART_IRQHandler+0x340>
}
 8007850:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8007852:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0fb      	beq.n	8007850 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8007858:	4620      	mov	r0, r4
 800785a:	4798      	blx	r3
      return;
 800785c:	e7f8      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800785e:	f013 0f01 	tst.w	r3, #1
 8007862:	d009      	beq.n	8007878 <HAL_UART_IRQHandler+0xb0>
 8007864:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007868:	d006      	beq.n	8007878 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800786a:	2601      	movs	r6, #1
 800786c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800786e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007872:	4331      	orrs	r1, r6
 8007874:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007878:	f013 0f02 	tst.w	r3, #2
 800787c:	d00b      	beq.n	8007896 <HAL_UART_IRQHandler+0xce>
 800787e:	f015 0f01 	tst.w	r5, #1
 8007882:	d008      	beq.n	8007896 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007884:	6821      	ldr	r1, [r4, #0]
 8007886:	2602      	movs	r6, #2
 8007888:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800788a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800788e:	f041 0104 	orr.w	r1, r1, #4
 8007892:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007896:	f013 0f04 	tst.w	r3, #4
 800789a:	d00b      	beq.n	80078b4 <HAL_UART_IRQHandler+0xec>
 800789c:	f015 0f01 	tst.w	r5, #1
 80078a0:	d008      	beq.n	80078b4 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078a2:	6821      	ldr	r1, [r4, #0]
 80078a4:	2604      	movs	r6, #4
 80078a6:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078a8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80078ac:	f041 0102 	orr.w	r1, r1, #2
 80078b0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078b4:	f013 0f08 	tst.w	r3, #8
 80078b8:	d00b      	beq.n	80078d2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078ba:	f010 0f20 	tst.w	r0, #32
 80078be:	d100      	bne.n	80078c2 <HAL_UART_IRQHandler+0xfa>
 80078c0:	b13a      	cbz	r2, 80078d2 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	2108      	movs	r1, #8
 80078c6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078c8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80078cc:	430a      	orrs	r2, r1
 80078ce:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078d2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80078d6:	d00c      	beq.n	80078f2 <HAL_UART_IRQHandler+0x12a>
 80078d8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80078dc:	d009      	beq.n	80078f2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078e4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078e6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80078ea:	f042 0220 	orr.w	r2, r2, #32
 80078ee:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	d0aa      	beq.n	8007850 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078fa:	f013 0f20 	tst.w	r3, #32
 80078fe:	d009      	beq.n	8007914 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007900:	f010 0f20 	tst.w	r0, #32
 8007904:	d102      	bne.n	800790c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007906:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800790a:	d003      	beq.n	8007914 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800790c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800790e:	b10b      	cbz	r3, 8007914 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8007910:	4620      	mov	r0, r4
 8007912:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8007914:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007920:	d102      	bne.n	8007928 <HAL_UART_IRQHandler+0x160>
 8007922:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007926:	d02c      	beq.n	8007982 <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8007928:	4620      	mov	r0, r4
 800792a:	f7ff fe5e 	bl	80075ea <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007936:	d020      	beq.n	800797a <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007938:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	f102 0308 	add.w	r3, r2, #8
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	3208      	adds	r2, #8
 8007948:	e842 3100 	strex	r1, r3, [r2]
 800794c:	2900      	cmp	r1, #0
 800794e:	d1f3      	bne.n	8007938 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8007950:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007954:	b16b      	cbz	r3, 8007972 <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007956:	4a42      	ldr	r2, [pc, #264]	; (8007a60 <HAL_UART_IRQHandler+0x298>)
 8007958:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800795a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800795e:	f7fd f93f 	bl	8004be0 <HAL_DMA_Abort_IT>
 8007962:	2800      	cmp	r0, #0
 8007964:	f43f af74 	beq.w	8007850 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007968:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800796c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800796e:	4798      	blx	r3
 8007970:	e76e      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007972:	4620      	mov	r0, r4
 8007974:	f7ff fef0 	bl	8007758 <HAL_UART_ErrorCallback>
 8007978:	e76a      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800797a:	4620      	mov	r0, r4
 800797c:	f7ff feec 	bl	8007758 <HAL_UART_ErrorCallback>
 8007980:	e766      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007982:	4620      	mov	r0, r4
 8007984:	f7ff fee8 	bl	8007758 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007988:	2300      	movs	r3, #0
 800798a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800798e:	e75f      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007990:	f013 0f10 	tst.w	r3, #16
 8007994:	f43f af36 	beq.w	8007804 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007998:	f010 0f10 	tst.w	r0, #16
 800799c:	f43f af32 	beq.w	8007804 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079a0:	2310      	movs	r3, #16
 80079a2:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079ac:	d05a      	beq.n	8007a64 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079ae:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f43f af49 	beq.w	8007850 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079be:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80079c2:	4299      	cmp	r1, r3
 80079c4:	f67f af44 	bls.w	8007850 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80079c8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079cc:	6813      	ldr	r3, [r2, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f013 0f20 	tst.w	r3, #32
 80079d4:	d132      	bne.n	8007a3c <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	e852 3f00 	ldrex	r3, [r2]
 80079dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	e842 3100 	strex	r1, r3, [r2]
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d1f6      	bne.n	80079d6 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	f102 0308 	add.w	r3, r2, #8
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	3208      	adds	r2, #8
 80079f8:	e842 3100 	strex	r1, r3, [r2]
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d1f3      	bne.n	80079e8 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	f102 0308 	add.w	r3, r2, #8
 8007a06:	e853 3f00 	ldrex	r3, [r3]
 8007a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	3208      	adds	r2, #8
 8007a10:	e842 3100 	strex	r1, r3, [r2]
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d1f3      	bne.n	8007a00 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	e852 3f00 	ldrex	r3, [r2]
 8007a28:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	e842 3100 	strex	r1, r3, [r2]
 8007a30:	2900      	cmp	r1, #0
 8007a32:	d1f6      	bne.n	8007a22 <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a34:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007a38:	f7fd f898 	bl	8004b6c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a40:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007a44:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	1ac9      	subs	r1, r1, r3
 8007a4c:	b289      	uxth	r1, r1
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f7ff feb9 	bl	80077c6 <HAL_UARTEx_RxEventCallback>
      return;
 8007a54:	e6fc      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
 8007a56:	bf00      	nop
 8007a58:	10000001 	.word	0x10000001
 8007a5c:	04000120 	.word	0x04000120
 8007a60:	080077b3 	.word	0x080077b3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a64:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007a68:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	1ac9      	subs	r1, r1, r3
 8007a70:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007a72:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f43f aee9 	beq.w	8007850 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8007a7e:	2900      	cmp	r1, #0
 8007a80:	f43f aee6 	beq.w	8007850 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	e852 3f00 	ldrex	r3, [r2]
 8007a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	e842 3000 	strex	r0, r3, [r2]
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d1f6      	bne.n	8007a84 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	f102 0308 	add.w	r3, r2, #8
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	3208      	adds	r2, #8
 8007aaa:	e842 3000 	strex	r0, r3, [r2]
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1f1      	bne.n	8007a96 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 8007ab2:	2320      	movs	r3, #32
 8007ab4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8007abc:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	e852 3f00 	ldrex	r3, [r2]
 8007ac4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	e842 3000 	strex	r0, r3, [r2]
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d1f6      	bne.n	8007abe <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f7ff fe76 	bl	80077c6 <HAL_UARTEx_RxEventCallback>
      return;
 8007ada:	e6b9      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007adc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ae0:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 fec2 	bl	800886c <HAL_UARTEx_WakeupCallback>
    return;
 8007ae8:	e6b2      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8007aea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f43f aeaf 	beq.w	8007850 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8007af2:	4620      	mov	r0, r4
 8007af4:	4798      	blx	r3
    return;
 8007af6:	e6ab      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007af8:	4620      	mov	r0, r4
 8007afa:	f7ff fe15 	bl	8007728 <UART_EndTransmit_IT>
    return;
 8007afe:	e6a7      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 feb5 	bl	8008870 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007b06:	e6a3      	b.n	8007850 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 feb0 	bl	800886e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8007b0e:	e69f      	b.n	8007850 <HAL_UART_IRQHandler+0x88>

08007b10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b10:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8007b12:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b16:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007b1a:	2a22      	cmp	r2, #34	; 0x22
 8007b1c:	d005      	beq.n	8007b2a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b1e:	6802      	ldr	r2, [r0, #0]
 8007b20:	6993      	ldr	r3, [r2, #24]
 8007b22:	f043 0308 	orr.w	r3, r3, #8
 8007b26:	6193      	str	r3, [r2, #24]
  }
}
 8007b28:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b2a:	6802      	ldr	r2, [r0, #0]
 8007b2c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007b32:	400b      	ands	r3, r1
 8007b34:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007b36:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007b38:	3301      	adds	r3, #1
 8007b3a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007b3c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007b4a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e9      	bne.n	8007b28 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b54:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	e852 3f00 	ldrex	r3, [r2]
 8007b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	e842 3100 	strex	r1, r3, [r2]
 8007b62:	2900      	cmp	r1, #0
 8007b64:	d1f6      	bne.n	8007b54 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	f102 0308 	add.w	r3, r2, #8
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	3208      	adds	r2, #8
 8007b76:	e842 3100 	strex	r1, r3, [r2]
 8007b7a:	2900      	cmp	r1, #0
 8007b7c:	d1f3      	bne.n	8007b66 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	2320      	movs	r3, #32
 8007b80:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b88:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b8a:	6803      	ldr	r3, [r0, #0]
 8007b8c:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <UART_RxISR_8BIT+0xd8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00c      	beq.n	8007bac <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007b98:	d008      	beq.n	8007bac <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	e852 3f00 	ldrex	r3, [r2]
 8007ba0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	e842 3100 	strex	r1, r3, [r2]
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	d1f6      	bne.n	8007b9a <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d116      	bne.n	8007be0 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	e852 3f00 	ldrex	r3, [r2]
 8007bbc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	e842 3100 	strex	r1, r3, [r2]
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	d1f6      	bne.n	8007bb6 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bc8:	6803      	ldr	r3, [r0, #0]
 8007bca:	69da      	ldr	r2, [r3, #28]
 8007bcc:	f012 0f10 	tst.w	r2, #16
 8007bd0:	d001      	beq.n	8007bd6 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bd2:	2210      	movs	r2, #16
 8007bd4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bd6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007bda:	f7ff fdf4 	bl	80077c6 <HAL_UARTEx_RxEventCallback>
 8007bde:	e7a3      	b.n	8007b28 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007be0:	f7fa fda0 	bl	8002724 <HAL_UART_RxCpltCallback>
 8007be4:	e7a0      	b.n	8007b28 <UART_RxISR_8BIT+0x18>
 8007be6:	bf00      	nop
 8007be8:	40008000 	.word	0x40008000

08007bec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bec:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007bee:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bf2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007bf6:	2b22      	cmp	r3, #34	; 0x22
 8007bf8:	d005      	beq.n	8007c06 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bfa:	6802      	ldr	r2, [r0, #0]
 8007bfc:	6993      	ldr	r3, [r2, #24]
 8007bfe:	f043 0308 	orr.w	r3, r3, #8
 8007c02:	6193      	str	r3, [r2, #24]
  }
}
 8007c04:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c06:	6803      	ldr	r3, [r0, #0]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c0a:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007c10:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007c12:	3302      	adds	r3, #2
 8007c14:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007c16:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007c24:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1ea      	bne.n	8007c04 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c2e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	e852 3f00 	ldrex	r3, [r2]
 8007c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	e842 3100 	strex	r1, r3, [r2]
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d1f6      	bne.n	8007c2e <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	f102 0308 	add.w	r3, r2, #8
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	3208      	adds	r2, #8
 8007c50:	e842 3100 	strex	r1, r3, [r2]
 8007c54:	2900      	cmp	r1, #0
 8007c56:	d1f3      	bne.n	8007c40 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007c58:	2320      	movs	r3, #32
 8007c5a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c62:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c64:	6803      	ldr	r3, [r0, #0]
 8007c66:	4a16      	ldr	r2, [pc, #88]	; (8007cc0 <UART_RxISR_16BIT+0xd4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00c      	beq.n	8007c86 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007c72:	d008      	beq.n	8007c86 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c74:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	e852 3f00 	ldrex	r3, [r2]
 8007c7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	e842 3100 	strex	r1, r3, [r2]
 8007c82:	2900      	cmp	r1, #0
 8007c84:	d1f6      	bne.n	8007c74 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c86:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d116      	bne.n	8007cba <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	e852 3f00 	ldrex	r3, [r2]
 8007c96:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	e842 3100 	strex	r1, r3, [r2]
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	d1f6      	bne.n	8007c90 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ca2:	6803      	ldr	r3, [r0, #0]
 8007ca4:	69da      	ldr	r2, [r3, #28]
 8007ca6:	f012 0f10 	tst.w	r2, #16
 8007caa:	d001      	beq.n	8007cb0 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cac:	2210      	movs	r2, #16
 8007cae:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cb0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007cb4:	f7ff fd87 	bl	80077c6 <HAL_UARTEx_RxEventCallback>
 8007cb8:	e7a4      	b.n	8007c04 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007cba:	f7fa fd33 	bl	8002724 <HAL_UART_RxCpltCallback>
 8007cbe:	e7a1      	b.n	8007c04 <UART_RxISR_16BIT+0x18>
 8007cc0:	40008000 	.word	0x40008000

08007cc4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8007cc8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ccc:	6803      	ldr	r3, [r0, #0]
 8007cce:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cd0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cd4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cd8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007cdc:	2a22      	cmp	r2, #34	; 0x22
 8007cde:	d005      	beq.n	8007cec <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	f042 0208 	orr.w	r2, r2, #8
 8007ce6:	619a      	str	r2, [r3, #24]
  }
}
 8007ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cec:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007cee:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cf2:	e008      	b.n	8007d06 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cf4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d14c      	bne.n	8007d96 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8007cfc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d04e      	beq.n	8007da4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d06:	2f00      	cmp	r7, #0
 8007d08:	f000 809a 	beq.w	8007e40 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8007d0c:	f015 0f20 	tst.w	r5, #32
 8007d10:	f000 8096 	beq.w	8007e40 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d18:	b2f3      	uxtb	r3, r6
 8007d1a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007d1c:	400b      	ands	r3, r1
 8007d1e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d22:	3301      	adds	r3, #1
 8007d24:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007d26:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d38:	f015 0f07 	tst.w	r5, #7
 8007d3c:	d0de      	beq.n	8007cfc <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d3e:	f015 0f01 	tst.w	r5, #1
 8007d42:	d009      	beq.n	8007d58 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007d44:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007d48:	d006      	beq.n	8007d58 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d58:	f015 0f02 	tst.w	r5, #2
 8007d5c:	d00b      	beq.n	8007d76 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8007d5e:	f018 0f01 	tst.w	r8, #1
 8007d62:	d008      	beq.n	8007d76 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	2202      	movs	r2, #2
 8007d68:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d6a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007d6e:	f043 0304 	orr.w	r3, r3, #4
 8007d72:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d76:	f015 0f04 	tst.w	r5, #4
 8007d7a:	d0bb      	beq.n	8007cf4 <UART_RxISR_8BIT_FIFOEN+0x30>
 8007d7c:	f018 0f01 	tst.w	r8, #1
 8007d80:	d0b8      	beq.n	8007cf4 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	2204      	movs	r2, #4
 8007d86:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d88:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007d8c:	f043 0302 	orr.w	r3, r3, #2
 8007d90:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007d94:	e7ae      	b.n	8007cf4 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007d96:	4620      	mov	r0, r4
 8007d98:	f7ff fcde 	bl	8007758 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007da2:	e7ab      	b.n	8007cfc <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	e852 3f00 	ldrex	r3, [r2]
 8007daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	e842 3100 	strex	r1, r3, [r2]
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d1f6      	bne.n	8007da4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007db6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	f102 0308 	add.w	r3, r2, #8
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	3208      	adds	r2, #8
 8007dca:	e842 3100 	strex	r1, r3, [r2]
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	d1f1      	bne.n	8007db6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007dd2:	2320      	movs	r3, #32
 8007dd4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ddc:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	4a29      	ldr	r2, [pc, #164]	; (8007e88 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007dec:	d106      	bne.n	8007dfc <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d00d      	beq.n	8007e10 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8007df4:	4620      	mov	r0, r4
 8007df6:	f7fa fc95 	bl	8002724 <HAL_UART_RxCpltCallback>
 8007dfa:	e784      	b.n	8007d06 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dfc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	e852 3f00 	ldrex	r3, [r2]
 8007e02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	e842 3100 	strex	r1, r3, [r2]
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	d1f6      	bne.n	8007dfc <UART_RxISR_8BIT_FIFOEN+0x138>
 8007e0e:	e7ee      	b.n	8007dee <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e10:	2300      	movs	r3, #0
 8007e12:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e14:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	e852 3f00 	ldrex	r3, [r2]
 8007e1a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	e842 3100 	strex	r1, r3, [r2]
 8007e22:	2900      	cmp	r1, #0
 8007e24:	d1f6      	bne.n	8007e14 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	69da      	ldr	r2, [r3, #28]
 8007e2a:	f012 0f10 	tst.w	r2, #16
 8007e2e:	d001      	beq.n	8007e34 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e30:	2210      	movs	r2, #16
 8007e32:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e34:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7ff fcc4 	bl	80077c6 <HAL_UARTEx_RxEventCallback>
 8007e3e:	e762      	b.n	8007d06 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007e40:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007e44:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f43f af4e 	beq.w	8007ce8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007e4c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007e50:	429a      	cmp	r2, r3
 8007e52:	f67f af49 	bls.w	8007ce8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	f102 0308 	add.w	r3, r2, #8
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	3208      	adds	r2, #8
 8007e66:	e842 3100 	strex	r1, r3, [r2]
 8007e6a:	2900      	cmp	r1, #0
 8007e6c:	d1f3      	bne.n	8007e56 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8007e6e:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8007e70:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	e852 3f00 	ldrex	r3, [r2]
 8007e78:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	e842 3100 	strex	r1, r3, [r2]
 8007e80:	2900      	cmp	r1, #0
 8007e82:	d1f6      	bne.n	8007e72 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8007e84:	e730      	b.n	8007ce8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007e86:	bf00      	nop
 8007e88:	40008000 	.word	0x40008000
 8007e8c:	08007b11 	.word	0x08007b11

08007e90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e94:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e98:	6803      	ldr	r3, [r0, #0]
 8007e9a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e9c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ea0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ea4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007ea8:	2a22      	cmp	r2, #34	; 0x22
 8007eaa:	d005      	beq.n	8007eb8 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	f042 0208 	orr.w	r2, r2, #8
 8007eb2:	619a      	str	r2, [r3, #24]
  }
}
 8007eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007eba:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ebe:	e008      	b.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ec0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d14b      	bne.n	8007f60 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007ec8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d04d      	beq.n	8007f6e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	f000 8099 	beq.w	800800a <UART_RxISR_16BIT_FIFOEN+0x17a>
 8007ed8:	f015 0f20 	tst.w	r5, #32
 8007edc:	f000 8095 	beq.w	800800a <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ee4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ee6:	4033      	ands	r3, r6
 8007ee8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007eea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007eec:	3302      	adds	r3, #2
 8007eee:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007ef0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f02:	f015 0f07 	tst.w	r5, #7
 8007f06:	d0df      	beq.n	8007ec8 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f08:	f015 0f01 	tst.w	r5, #1
 8007f0c:	d009      	beq.n	8007f22 <UART_RxISR_16BIT_FIFOEN+0x92>
 8007f0e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007f12:	d006      	beq.n	8007f22 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f14:	2201      	movs	r2, #1
 8007f16:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f18:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f22:	f015 0f02 	tst.w	r5, #2
 8007f26:	d00b      	beq.n	8007f40 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007f28:	f018 0f01 	tst.w	r8, #1
 8007f2c:	d008      	beq.n	8007f40 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	2202      	movs	r2, #2
 8007f32:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f34:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007f38:	f043 0304 	orr.w	r3, r3, #4
 8007f3c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f40:	f015 0f04 	tst.w	r5, #4
 8007f44:	d0bc      	beq.n	8007ec0 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007f46:	f018 0f01 	tst.w	r8, #1
 8007f4a:	d0b9      	beq.n	8007ec0 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	2204      	movs	r2, #4
 8007f50:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007f56:	f043 0302 	orr.w	r3, r3, #2
 8007f5a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007f5e:	e7af      	b.n	8007ec0 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007f60:	4620      	mov	r0, r4
 8007f62:	f7ff fbf9 	bl	8007758 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007f6c:	e7ac      	b.n	8007ec8 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	e852 3f00 	ldrex	r3, [r2]
 8007f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	e842 3100 	strex	r1, r3, [r2]
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	d1f6      	bne.n	8007f6e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f80:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	f102 0308 	add.w	r3, r2, #8
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	3208      	adds	r2, #8
 8007f94:	e842 3100 	strex	r1, r3, [r2]
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	d1f1      	bne.n	8007f80 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fa6:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	4a29      	ldr	r2, [pc, #164]	; (8008050 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d003      	beq.n	8007fb8 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007fb6:	d106      	bne.n	8007fc6 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d00d      	beq.n	8007fda <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7fa fbb0 	bl	8002724 <HAL_UART_RxCpltCallback>
 8007fc4:	e785      	b.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fc6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	e852 3f00 	ldrex	r3, [r2]
 8007fcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	e842 3100 	strex	r1, r3, [r2]
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d1f6      	bne.n	8007fc6 <UART_RxISR_16BIT_FIFOEN+0x136>
 8007fd8:	e7ee      	b.n	8007fb8 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fde:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	e852 3f00 	ldrex	r3, [r2]
 8007fe4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	e842 3100 	strex	r1, r3, [r2]
 8007fec:	2900      	cmp	r1, #0
 8007fee:	d1f6      	bne.n	8007fde <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	69da      	ldr	r2, [r3, #28]
 8007ff4:	f012 0f10 	tst.w	r2, #16
 8007ff8:	d001      	beq.n	8007ffe <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ffa:	2210      	movs	r2, #16
 8007ffc:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ffe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008002:	4620      	mov	r0, r4
 8008004:	f7ff fbdf 	bl	80077c6 <HAL_UARTEx_RxEventCallback>
 8008008:	e763      	b.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800800a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800800e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008010:	2b00      	cmp	r3, #0
 8008012:	f43f af4f 	beq.w	8007eb4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8008016:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800801a:	429a      	cmp	r2, r3
 800801c:	f67f af4a 	bls.w	8007eb4 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008020:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	f102 0308 	add.w	r3, r2, #8
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	3208      	adds	r2, #8
 8008030:	e842 3100 	strex	r1, r3, [r2]
 8008034:	2900      	cmp	r1, #0
 8008036:	d1f3      	bne.n	8008020 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8008038:	4b06      	ldr	r3, [pc, #24]	; (8008054 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 800803a:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800803c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	e852 3f00 	ldrex	r3, [r2]
 8008042:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	e842 3100 	strex	r1, r3, [r2]
 800804a:	2900      	cmp	r1, #0
 800804c:	d1f6      	bne.n	800803c <UART_RxISR_16BIT_FIFOEN+0x1ac>
 800804e:	e731      	b.n	8007eb4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8008050:	40008000 	.word	0x40008000
 8008054:	08007bed 	.word	0x08007bed

08008058 <UART_SetConfig>:
{
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800805c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800805e:	6883      	ldr	r3, [r0, #8]
 8008060:	6902      	ldr	r2, [r0, #16]
 8008062:	4313      	orrs	r3, r2
 8008064:	6942      	ldr	r2, [r0, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	69c2      	ldr	r2, [r0, #28]
 800806a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800806c:	6808      	ldr	r0, [r1, #0]
 800806e:	4a9d      	ldr	r2, [pc, #628]	; (80082e4 <UART_SetConfig+0x28c>)
 8008070:	4002      	ands	r2, r0
 8008072:	431a      	orrs	r2, r3
 8008074:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008076:	6822      	ldr	r2, [r4, #0]
 8008078:	6853      	ldr	r3, [r2, #4]
 800807a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800807e:	68e1      	ldr	r1, [r4, #12]
 8008080:	430b      	orrs	r3, r1
 8008082:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008084:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	4b97      	ldr	r3, [pc, #604]	; (80082e8 <UART_SetConfig+0x290>)
 800808a:	429a      	cmp	r2, r3
 800808c:	d001      	beq.n	8008092 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800808e:	6a23      	ldr	r3, [r4, #32]
 8008090:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008092:	6893      	ldr	r3, [r2, #8]
 8008094:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008098:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800809c:	430b      	orrs	r3, r1
 800809e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080a0:	6822      	ldr	r2, [r4, #0]
 80080a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80080a4:	f023 030f 	bic.w	r3, r3, #15
 80080a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080aa:	430b      	orrs	r3, r1
 80080ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	4a8e      	ldr	r2, [pc, #568]	; (80082ec <UART_SetConfig+0x294>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d01c      	beq.n	80080f0 <UART_SetConfig+0x98>
 80080b6:	4a8e      	ldr	r2, [pc, #568]	; (80082f0 <UART_SetConfig+0x298>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d031      	beq.n	8008120 <UART_SetConfig+0xc8>
 80080bc:	4a8a      	ldr	r2, [pc, #552]	; (80082e8 <UART_SetConfig+0x290>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d04b      	beq.n	800815a <UART_SetConfig+0x102>
 80080c2:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80080c4:	4988      	ldr	r1, [pc, #544]	; (80082e8 <UART_SetConfig+0x290>)
 80080c6:	428b      	cmp	r3, r1
 80080c8:	d068      	beq.n	800819c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ca:	69e0      	ldr	r0, [r4, #28]
 80080cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80080d0:	f000 80a5 	beq.w	800821e <UART_SetConfig+0x1c6>
    switch (clocksource)
 80080d4:	2a08      	cmp	r2, #8
 80080d6:	f200 811f 	bhi.w	8008318 <UART_SetConfig+0x2c0>
 80080da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80080de:	00d3      	.short	0x00d3
 80080e0:	00d100f5 	.word	0x00d100f5
 80080e4:	00f8011d 	.word	0x00f8011d
 80080e8:	011d011d 	.word	0x011d011d
 80080ec:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80080f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080f4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80080f8:	f002 0203 	and.w	r2, r2, #3
 80080fc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008100:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8008104:	2a03      	cmp	r2, #3
 8008106:	d809      	bhi.n	800811c <UART_SetConfig+0xc4>
 8008108:	e8df f002 	tbb	[pc, r2]
 800810c:	063c0402 	.word	0x063c0402
 8008110:	2201      	movs	r2, #1
 8008112:	e7d7      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008114:	2204      	movs	r2, #4
 8008116:	e7d5      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008118:	2208      	movs	r2, #8
 800811a:	e7d3      	b.n	80080c4 <UART_SetConfig+0x6c>
 800811c:	2210      	movs	r2, #16
 800811e:	e7d1      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008124:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008128:	f002 020c 	and.w	r2, r2, #12
 800812c:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8008130:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8008134:	2a0c      	cmp	r2, #12
 8008136:	d80e      	bhi.n	8008156 <UART_SetConfig+0xfe>
 8008138:	e8df f002 	tbb	[pc, r2]
 800813c:	0d0d0d07 	.word	0x0d0d0d07
 8008140:	0d0d0d09 	.word	0x0d0d0d09
 8008144:	0d0d0d26 	.word	0x0d0d0d26
 8008148:	0b          	.byte	0x0b
 8008149:	00          	.byte	0x00
 800814a:	2200      	movs	r2, #0
 800814c:	e7ba      	b.n	80080c4 <UART_SetConfig+0x6c>
 800814e:	2204      	movs	r2, #4
 8008150:	e7b8      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008152:	2208      	movs	r2, #8
 8008154:	e7b6      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008156:	2210      	movs	r2, #16
 8008158:	e7b4      	b.n	80080c4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800815a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800815e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008162:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8008166:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800816a:	d00f      	beq.n	800818c <UART_SetConfig+0x134>
 800816c:	d805      	bhi.n	800817a <UART_SetConfig+0x122>
 800816e:	b17a      	cbz	r2, 8008190 <UART_SetConfig+0x138>
 8008170:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008174:	d10e      	bne.n	8008194 <UART_SetConfig+0x13c>
 8008176:	2204      	movs	r2, #4
 8008178:	e7a4      	b.n	80080c4 <UART_SetConfig+0x6c>
 800817a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800817e:	d10b      	bne.n	8008198 <UART_SetConfig+0x140>
 8008180:	2208      	movs	r2, #8
 8008182:	e79f      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008184:	2202      	movs	r2, #2
 8008186:	e79d      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008188:	2202      	movs	r2, #2
 800818a:	e79b      	b.n	80080c4 <UART_SetConfig+0x6c>
 800818c:	2202      	movs	r2, #2
 800818e:	e799      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008190:	2200      	movs	r2, #0
 8008192:	e797      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008194:	2210      	movs	r2, #16
 8008196:	e795      	b.n	80080c4 <UART_SetConfig+0x6c>
 8008198:	2210      	movs	r2, #16
 800819a:	e793      	b.n	80080c4 <UART_SetConfig+0x6c>
    switch (clocksource)
 800819c:	2a08      	cmp	r2, #8
 800819e:	f200 809c 	bhi.w	80082da <UART_SetConfig+0x282>
 80081a2:	e8df f002 	tbb	[pc, r2]
 80081a6:	9a08      	.short	0x9a08
 80081a8:	9a379a3a 	.word	0x9a379a3a
 80081ac:	9a9a      	.short	0x9a9a
 80081ae:	05          	.byte	0x05
 80081af:	00          	.byte	0x00
 80081b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80081b4:	e004      	b.n	80081c0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b6:	f7fe faab 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80081ba:	2800      	cmp	r0, #0
 80081bc:	f000 808f 	beq.w	80082de <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80081c2:	4b4c      	ldr	r3, [pc, #304]	; (80082f4 <UART_SetConfig+0x29c>)
 80081c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80081c8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081cc:	6865      	ldr	r5, [r4, #4]
 80081ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80081d2:	4299      	cmp	r1, r3
 80081d4:	f200 8094 	bhi.w	8008300 <UART_SetConfig+0x2a8>
 80081d8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80081dc:	f200 8092 	bhi.w	8008304 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081e0:	2600      	movs	r6, #0
 80081e2:	4633      	mov	r3, r6
 80081e4:	4631      	mov	r1, r6
 80081e6:	f7f8 ff3b 	bl	8001060 <__aeabi_uldivmod>
 80081ea:	0209      	lsls	r1, r1, #8
 80081ec:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80081f0:	0200      	lsls	r0, r0, #8
 80081f2:	086b      	lsrs	r3, r5, #1
 80081f4:	18c0      	adds	r0, r0, r3
 80081f6:	462a      	mov	r2, r5
 80081f8:	4633      	mov	r3, r6
 80081fa:	f141 0100 	adc.w	r1, r1, #0
 80081fe:	f7f8 ff2f 	bl	8001060 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008202:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008206:	4b3c      	ldr	r3, [pc, #240]	; (80082f8 <UART_SetConfig+0x2a0>)
 8008208:	429a      	cmp	r2, r3
 800820a:	d87d      	bhi.n	8008308 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	60d8      	str	r0, [r3, #12]
 8008210:	4630      	mov	r0, r6
 8008212:	e050      	b.n	80082b6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008214:	f7fd fd7e 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
        break;
 8008218:	e7cf      	b.n	80081ba <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800821a:	4838      	ldr	r0, [pc, #224]	; (80082fc <UART_SetConfig+0x2a4>)
 800821c:	e7d0      	b.n	80081c0 <UART_SetConfig+0x168>
    switch (clocksource)
 800821e:	2a08      	cmp	r2, #8
 8008220:	d874      	bhi.n	800830c <UART_SetConfig+0x2b4>
 8008222:	e8df f002 	tbb	[pc, r2]
 8008226:	2707      	.short	0x2707
 8008228:	732a7305 	.word	0x732a7305
 800822c:	7373      	.short	0x7373
 800822e:	0b          	.byte	0x0b
 800822f:	00          	.byte	0x00
 8008230:	4832      	ldr	r0, [pc, #200]	; (80082fc <UART_SetConfig+0x2a4>)
 8008232:	e003      	b.n	800823c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008234:	f7fe fa6c 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008238:	2800      	cmp	r0, #0
 800823a:	d069      	beq.n	8008310 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800823c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800823e:	4b2d      	ldr	r3, [pc, #180]	; (80082f4 <UART_SetConfig+0x29c>)
 8008240:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008244:	fbb0 f0f3 	udiv	r0, r0, r3
 8008248:	6862      	ldr	r2, [r4, #4]
 800824a:	0853      	lsrs	r3, r2, #1
 800824c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008250:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008254:	f1a3 0110 	sub.w	r1, r3, #16
 8008258:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800825c:	4291      	cmp	r1, r2
 800825e:	d859      	bhi.n	8008314 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008260:	b29a      	uxth	r2, r3
 8008262:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008266:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800826a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800826c:	6822      	ldr	r2, [r4, #0]
 800826e:	60d3      	str	r3, [r2, #12]
 8008270:	2000      	movs	r0, #0
 8008272:	e020      	b.n	80082b6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008274:	f7fe fa5c 	bl	8006730 <HAL_RCC_GetPCLK2Freq>
        break;
 8008278:	e7de      	b.n	8008238 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800827a:	f7fd fd4b 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
        break;
 800827e:	e7db      	b.n	8008238 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8008280:	481e      	ldr	r0, [pc, #120]	; (80082fc <UART_SetConfig+0x2a4>)
 8008282:	e003      	b.n	800828c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008284:	f7fe fa44 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008288:	2800      	cmp	r0, #0
 800828a:	d047      	beq.n	800831c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800828c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800828e:	4b19      	ldr	r3, [pc, #100]	; (80082f4 <UART_SetConfig+0x29c>)
 8008290:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008294:	fbb0 f0f3 	udiv	r0, r0, r3
 8008298:	6863      	ldr	r3, [r4, #4]
 800829a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800829e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a2:	f1a0 0210 	sub.w	r2, r0, #16
 80082a6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d838      	bhi.n	8008320 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	b280      	uxth	r0, r0
 80082b2:	60d8      	str	r0, [r3, #12]
 80082b4:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082bc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80082c0:	2300      	movs	r3, #0
 80082c2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80082c4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c8:	f7fe fa32 	bl	8006730 <HAL_RCC_GetPCLK2Freq>
        break;
 80082cc:	e7dc      	b.n	8008288 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80082ce:	f7fd fd21 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
        break;
 80082d2:	e7d9      	b.n	8008288 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80082d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80082d8:	e7d8      	b.n	800828c <UART_SetConfig+0x234>
    switch (clocksource)
 80082da:	2001      	movs	r0, #1
 80082dc:	e7eb      	b.n	80082b6 <UART_SetConfig+0x25e>
 80082de:	2000      	movs	r0, #0
 80082e0:	e7e9      	b.n	80082b6 <UART_SetConfig+0x25e>
 80082e2:	bf00      	nop
 80082e4:	cfff69f3 	.word	0xcfff69f3
 80082e8:	40008000 	.word	0x40008000
 80082ec:	40013800 	.word	0x40013800
 80082f0:	40004400 	.word	0x40004400
 80082f4:	08016c40 	.word	0x08016c40
 80082f8:	000ffcff 	.word	0x000ffcff
 80082fc:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8008300:	2001      	movs	r0, #1
 8008302:	e7d8      	b.n	80082b6 <UART_SetConfig+0x25e>
 8008304:	2001      	movs	r0, #1
 8008306:	e7d6      	b.n	80082b6 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8008308:	2001      	movs	r0, #1
 800830a:	e7d4      	b.n	80082b6 <UART_SetConfig+0x25e>
    switch (clocksource)
 800830c:	2001      	movs	r0, #1
 800830e:	e7d2      	b.n	80082b6 <UART_SetConfig+0x25e>
 8008310:	2000      	movs	r0, #0
 8008312:	e7d0      	b.n	80082b6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008314:	2001      	movs	r0, #1
 8008316:	e7ce      	b.n	80082b6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8008318:	2001      	movs	r0, #1
 800831a:	e7cc      	b.n	80082b6 <UART_SetConfig+0x25e>
 800831c:	2000      	movs	r0, #0
 800831e:	e7ca      	b.n	80082b6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008320:	2001      	movs	r0, #1
 8008322:	e7c8      	b.n	80082b6 <UART_SetConfig+0x25e>

08008324 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008324:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008326:	f013 0f01 	tst.w	r3, #1
 800832a:	d006      	beq.n	800833a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800832c:	6802      	ldr	r2, [r0, #0]
 800832e:	6853      	ldr	r3, [r2, #4]
 8008330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008334:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008336:	430b      	orrs	r3, r1
 8008338:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800833a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800833c:	f013 0f02 	tst.w	r3, #2
 8008340:	d006      	beq.n	8008350 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008342:	6802      	ldr	r2, [r0, #0]
 8008344:	6853      	ldr	r3, [r2, #4]
 8008346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800834a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800834c:	430b      	orrs	r3, r1
 800834e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008350:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008352:	f013 0f04 	tst.w	r3, #4
 8008356:	d006      	beq.n	8008366 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008358:	6802      	ldr	r2, [r0, #0]
 800835a:	6853      	ldr	r3, [r2, #4]
 800835c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008360:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008362:	430b      	orrs	r3, r1
 8008364:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008366:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008368:	f013 0f08 	tst.w	r3, #8
 800836c:	d006      	beq.n	800837c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800836e:	6802      	ldr	r2, [r0, #0]
 8008370:	6853      	ldr	r3, [r2, #4]
 8008372:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008376:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008378:	430b      	orrs	r3, r1
 800837a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800837c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800837e:	f013 0f10 	tst.w	r3, #16
 8008382:	d006      	beq.n	8008392 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008384:	6802      	ldr	r2, [r0, #0]
 8008386:	6893      	ldr	r3, [r2, #8]
 8008388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800838c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800838e:	430b      	orrs	r3, r1
 8008390:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008392:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008394:	f013 0f20 	tst.w	r3, #32
 8008398:	d006      	beq.n	80083a8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800839a:	6802      	ldr	r2, [r0, #0]
 800839c:	6893      	ldr	r3, [r2, #8]
 800839e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80083a4:	430b      	orrs	r3, r1
 80083a6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80083aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80083ae:	d00a      	beq.n	80083c6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083b0:	6802      	ldr	r2, [r0, #0]
 80083b2:	6853      	ldr	r3, [r2, #4]
 80083b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083b8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80083ba:	430b      	orrs	r3, r1
 80083bc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80083c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c4:	d00b      	beq.n	80083de <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80083c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083cc:	d006      	beq.n	80083dc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ce:	6802      	ldr	r2, [r0, #0]
 80083d0:	6853      	ldr	r3, [r2, #4]
 80083d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80083d6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80083d8:	430b      	orrs	r3, r1
 80083da:	6053      	str	r3, [r2, #4]
}
 80083dc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083de:	6802      	ldr	r2, [r0, #0]
 80083e0:	6853      	ldr	r3, [r2, #4]
 80083e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80083e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80083e8:	430b      	orrs	r3, r1
 80083ea:	6053      	str	r3, [r2, #4]
 80083ec:	e7eb      	b.n	80083c6 <UART_AdvFeatureConfig+0xa2>

080083ee <UART_WaitOnFlagUntilTimeout>:
{
 80083ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f2:	4605      	mov	r5, r0
 80083f4:	460f      	mov	r7, r1
 80083f6:	4616      	mov	r6, r2
 80083f8:	4699      	mov	r9, r3
 80083fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	69dc      	ldr	r4, [r3, #28]
 8008402:	ea37 0404 	bics.w	r4, r7, r4
 8008406:	bf0c      	ite	eq
 8008408:	2401      	moveq	r4, #1
 800840a:	2400      	movne	r4, #0
 800840c:	42b4      	cmp	r4, r6
 800840e:	d157      	bne.n	80084c0 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8008410:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008414:	d0f3      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008416:	f7f9 fe07 	bl	8002028 <HAL_GetTick>
 800841a:	eba0 0009 	sub.w	r0, r0, r9
 800841e:	4540      	cmp	r0, r8
 8008420:	d82f      	bhi.n	8008482 <UART_WaitOnFlagUntilTimeout+0x94>
 8008422:	f1b8 0f00 	cmp.w	r8, #0
 8008426:	d02c      	beq.n	8008482 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	f012 0f04 	tst.w	r2, #4
 8008430:	d0e5      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008438:	d0e1      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800843a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800843e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008440:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	e852 3f00 	ldrex	r3, [r2]
 8008446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	e842 3100 	strex	r1, r3, [r2]
 800844e:	2900      	cmp	r1, #0
 8008450:	d1f6      	bne.n	8008440 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	f102 0308 	add.w	r3, r2, #8
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	3208      	adds	r2, #8
 8008462:	e842 3100 	strex	r1, r3, [r2]
 8008466:	2900      	cmp	r1, #0
 8008468:	d1f3      	bne.n	8008452 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800846a:	2320      	movs	r3, #32
 800846c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008470:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008474:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8008478:	2300      	movs	r3, #0
 800847a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800847e:	2003      	movs	r0, #3
 8008480:	e01f      	b.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008482:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	e852 3f00 	ldrex	r3, [r2]
 8008488:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	e842 3100 	strex	r1, r3, [r2]
 8008490:	2900      	cmp	r1, #0
 8008492:	d1f6      	bne.n	8008482 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008494:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	f102 0308 	add.w	r3, r2, #8
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	3208      	adds	r2, #8
 80084a4:	e842 3100 	strex	r1, r3, [r2]
 80084a8:	2900      	cmp	r1, #0
 80084aa:	d1f3      	bne.n	8008494 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 80084ac:	2320      	movs	r3, #32
 80084ae:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80084b2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80084b6:	2300      	movs	r3, #0
 80084b8:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 80084bc:	2003      	movs	r0, #3
 80084be:	e000      	b.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 80084c0:	2000      	movs	r0, #0
}
 80084c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080084c6 <HAL_UART_Transmit>:
{
 80084c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80084ce:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d14f      	bne.n	8008576 <HAL_UART_Transmit+0xb0>
 80084d6:	4604      	mov	r4, r0
 80084d8:	460d      	mov	r5, r1
 80084da:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80084dc:	2900      	cmp	r1, #0
 80084de:	d04e      	beq.n	800857e <HAL_UART_Transmit+0xb8>
 80084e0:	b90a      	cbnz	r2, 80084e6 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 80084e2:	2001      	movs	r0, #1
 80084e4:	e048      	b.n	8008578 <HAL_UART_Transmit+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084ec:	2321      	movs	r3, #33	; 0x21
 80084ee:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 80084f2:	f7f9 fd99 	bl	8002028 <HAL_GetTick>
 80084f6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80084f8:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 80084fc:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008500:	68a3      	ldr	r3, [r4, #8]
 8008502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008506:	d002      	beq.n	800850e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8008508:	f04f 0800 	mov.w	r8, #0
 800850c:	e011      	b.n	8008532 <HAL_UART_Transmit+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	b313      	cbz	r3, 8008558 <HAL_UART_Transmit+0x92>
      pdata16bits = NULL;
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	e00c      	b.n	8008532 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008518:	f838 3b02 	ldrh.w	r3, [r8], #2
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008522:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8008524:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8008528:	b292      	uxth	r2, r2
 800852a:	3a01      	subs	r2, #1
 800852c:	b292      	uxth	r2, r2
 800852e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008532:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008536:	b29b      	uxth	r3, r3
 8008538:	b18b      	cbz	r3, 800855e <HAL_UART_Transmit+0x98>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800853a:	9600      	str	r6, [sp, #0]
 800853c:	463b      	mov	r3, r7
 800853e:	2200      	movs	r2, #0
 8008540:	2180      	movs	r1, #128	; 0x80
 8008542:	4620      	mov	r0, r4
 8008544:	f7ff ff53 	bl	80083ee <UART_WaitOnFlagUntilTimeout>
 8008548:	b9d8      	cbnz	r0, 8008582 <HAL_UART_Transmit+0xbc>
      if (pdata8bits == NULL)
 800854a:	2d00      	cmp	r5, #0
 800854c:	d0e4      	beq.n	8008518 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800854e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008556:	e7e5      	b.n	8008524 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 8008558:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800855a:	2500      	movs	r5, #0
 800855c:	e7e9      	b.n	8008532 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800855e:	9600      	str	r6, [sp, #0]
 8008560:	463b      	mov	r3, r7
 8008562:	2200      	movs	r2, #0
 8008564:	2140      	movs	r1, #64	; 0x40
 8008566:	4620      	mov	r0, r4
 8008568:	f7ff ff41 	bl	80083ee <UART_WaitOnFlagUntilTimeout>
 800856c:	b958      	cbnz	r0, 8008586 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 800856e:	2320      	movs	r3, #32
 8008570:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 8008574:	e000      	b.n	8008578 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8008576:	2002      	movs	r0, #2
}
 8008578:	b002      	add	sp, #8
 800857a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800857e:	2001      	movs	r0, #1
 8008580:	e7fa      	b.n	8008578 <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 8008582:	2003      	movs	r0, #3
 8008584:	e7f8      	b.n	8008578 <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 8008586:	2003      	movs	r0, #3
 8008588:	e7f6      	b.n	8008578 <HAL_UART_Transmit+0xb2>

0800858a <UART_CheckIdleState>:
{
 800858a:	b530      	push	{r4, r5, lr}
 800858c:	b083      	sub	sp, #12
 800858e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008590:	2300      	movs	r3, #0
 8008592:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8008596:	f7f9 fd47 	bl	8002028 <HAL_GetTick>
 800859a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800859c:	6822      	ldr	r2, [r4, #0]
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	f012 0f08 	tst.w	r2, #8
 80085a4:	d110      	bne.n	80085c8 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f013 0f04 	tst.w	r3, #4
 80085ae:	d119      	bne.n	80085e4 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80085b0:	2320      	movs	r3, #32
 80085b2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ba:	2000      	movs	r0, #0
 80085bc:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085be:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80085c0:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80085c4:	b003      	add	sp, #12
 80085c6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4603      	mov	r3, r0
 80085d0:	2200      	movs	r2, #0
 80085d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085d6:	4620      	mov	r0, r4
 80085d8:	f7ff ff09 	bl	80083ee <UART_WaitOnFlagUntilTimeout>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d0e2      	beq.n	80085a6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80085e0:	2003      	movs	r0, #3
 80085e2:	e7ef      	b.n	80085c4 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	462b      	mov	r3, r5
 80085ec:	2200      	movs	r2, #0
 80085ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff fefb 	bl	80083ee <UART_WaitOnFlagUntilTimeout>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d0d9      	beq.n	80085b0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80085fc:	2003      	movs	r0, #3
 80085fe:	e7e1      	b.n	80085c4 <UART_CheckIdleState+0x3a>

08008600 <HAL_UART_Init>:
  if (huart == NULL)
 8008600:	b378      	cbz	r0, 8008662 <HAL_UART_Init+0x62>
{
 8008602:	b510      	push	{r4, lr}
 8008604:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008606:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800860a:	b30b      	cbz	r3, 8008650 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800860c:	2324      	movs	r3, #36	; 0x24
 800860e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	6813      	ldr	r3, [r2, #0]
 8008616:	f023 0301 	bic.w	r3, r3, #1
 800861a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800861c:	4620      	mov	r0, r4
 800861e:	f7ff fd1b 	bl	8008058 <UART_SetConfig>
 8008622:	2801      	cmp	r0, #1
 8008624:	d013      	beq.n	800864e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008628:	b9bb      	cbnz	r3, 800865a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	6853      	ldr	r3, [r2, #4]
 800862e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008632:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	6893      	ldr	r3, [r2, #8]
 8008638:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800863c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800863e:	6822      	ldr	r2, [r4, #0]
 8008640:	6813      	ldr	r3, [r2, #0]
 8008642:	f043 0301 	orr.w	r3, r3, #1
 8008646:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008648:	4620      	mov	r0, r4
 800864a:	f7ff ff9e 	bl	800858a <UART_CheckIdleState>
}
 800864e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008650:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8008654:	f7f9 ff52 	bl	80024fc <HAL_UART_MspInit>
 8008658:	e7d8      	b.n	800860c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800865a:	4620      	mov	r0, r4
 800865c:	f7ff fe62 	bl	8008324 <UART_AdvFeatureConfig>
 8008660:	e7e3      	b.n	800862a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008662:	2001      	movs	r0, #1
}
 8008664:	4770      	bx	lr
	...

08008668 <UART_Start_Receive_IT>:
{
 8008668:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800866a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800866c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008670:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008674:	2300      	movs	r3, #0
 8008676:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8008678:	6883      	ldr	r3, [r0, #8]
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867e:	d006      	beq.n	800868e <UART_Start_Receive_IT+0x26>
 8008680:	b9a3      	cbnz	r3, 80086ac <UART_Start_Receive_IT+0x44>
 8008682:	6903      	ldr	r3, [r0, #16]
 8008684:	b973      	cbnz	r3, 80086a4 <UART_Start_Receive_IT+0x3c>
 8008686:	23ff      	movs	r3, #255	; 0xff
 8008688:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800868c:	e014      	b.n	80086b8 <UART_Start_Receive_IT+0x50>
 800868e:	6903      	ldr	r3, [r0, #16]
 8008690:	b923      	cbnz	r3, 800869c <UART_Start_Receive_IT+0x34>
 8008692:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008696:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800869a:	e00d      	b.n	80086b8 <UART_Start_Receive_IT+0x50>
 800869c:	23ff      	movs	r3, #255	; 0xff
 800869e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80086a2:	e009      	b.n	80086b8 <UART_Start_Receive_IT+0x50>
 80086a4:	237f      	movs	r3, #127	; 0x7f
 80086a6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80086aa:	e005      	b.n	80086b8 <UART_Start_Receive_IT+0x50>
 80086ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086b0:	d02d      	beq.n	800870e <UART_Start_Receive_IT+0xa6>
 80086b2:	2300      	movs	r3, #0
 80086b4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086be:	2322      	movs	r3, #34	; 0x22
 80086c0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c4:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	f101 0308 	add.w	r3, r1, #8
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	3108      	adds	r1, #8
 80086d4:	e841 3400 	strex	r4, r3, [r1]
 80086d8:	2c00      	cmp	r4, #0
 80086da:	d1f3      	bne.n	80086c4 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80086dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80086de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086e2:	d01e      	beq.n	8008722 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086e4:	6883      	ldr	r3, [r0, #8]
 80086e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ea:	d042      	beq.n	8008772 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 80086ec:	4b29      	ldr	r3, [pc, #164]	; (8008794 <UART_Start_Receive_IT+0x12c>)
 80086ee:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086f0:	6903      	ldr	r3, [r0, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d043      	beq.n	800877e <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80086f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	e852 3f00 	ldrex	r3, [r2]
 80086fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	e842 3100 	strex	r1, r3, [r2]
 8008704:	2900      	cmp	r1, #0
 8008706:	d1f6      	bne.n	80086f6 <UART_Start_Receive_IT+0x8e>
}
 8008708:	2000      	movs	r0, #0
 800870a:	bc10      	pop	{r4}
 800870c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800870e:	6903      	ldr	r3, [r0, #16]
 8008710:	b91b      	cbnz	r3, 800871a <UART_Start_Receive_IT+0xb2>
 8008712:	237f      	movs	r3, #127	; 0x7f
 8008714:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008718:	e7ce      	b.n	80086b8 <UART_Start_Receive_IT+0x50>
 800871a:	233f      	movs	r3, #63	; 0x3f
 800871c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008720:	e7ca      	b.n	80086b8 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008722:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008726:	4293      	cmp	r3, r2
 8008728:	d8dc      	bhi.n	80086e4 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800872a:	6883      	ldr	r3, [r0, #8]
 800872c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008730:	d019      	beq.n	8008766 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008732:	4b19      	ldr	r3, [pc, #100]	; (8008798 <UART_Start_Receive_IT+0x130>)
 8008734:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008736:	6903      	ldr	r3, [r0, #16]
 8008738:	b143      	cbz	r3, 800874c <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800873a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	e852 3f00 	ldrex	r3, [r2]
 8008740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	e842 3100 	strex	r1, r3, [r2]
 8008748:	2900      	cmp	r1, #0
 800874a:	d1f6      	bne.n	800873a <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800874c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	f102 0308 	add.w	r3, r2, #8
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	3208      	adds	r2, #8
 800875c:	e842 3100 	strex	r1, r3, [r2]
 8008760:	2900      	cmp	r1, #0
 8008762:	d1f3      	bne.n	800874c <UART_Start_Receive_IT+0xe4>
 8008764:	e7d0      	b.n	8008708 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008766:	6903      	ldr	r3, [r0, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e2      	bne.n	8008732 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800876c:	4b0b      	ldr	r3, [pc, #44]	; (800879c <UART_Start_Receive_IT+0x134>)
 800876e:	6743      	str	r3, [r0, #116]	; 0x74
 8008770:	e7e1      	b.n	8008736 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008772:	6903      	ldr	r3, [r0, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1b9      	bne.n	80086ec <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008778:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <UART_Start_Receive_IT+0x138>)
 800877a:	6743      	str	r3, [r0, #116]	; 0x74
 800877c:	e7b8      	b.n	80086f0 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800877e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	e852 3f00 	ldrex	r3, [r2]
 8008784:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	e842 3100 	strex	r1, r3, [r2]
 800878c:	2900      	cmp	r1, #0
 800878e:	d1f6      	bne.n	800877e <UART_Start_Receive_IT+0x116>
 8008790:	e7ba      	b.n	8008708 <UART_Start_Receive_IT+0xa0>
 8008792:	bf00      	nop
 8008794:	08007b11 	.word	0x08007b11
 8008798:	08007cc5 	.word	0x08007cc5
 800879c:	08007e91 	.word	0x08007e91
 80087a0:	08007bed 	.word	0x08007bed

080087a4 <HAL_UART_Receive_IT>:
{
 80087a4:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80087a6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	d117      	bne.n	80087de <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80087ae:	b1c1      	cbz	r1, 80087e2 <HAL_UART_Receive_IT+0x3e>
 80087b0:	b1ca      	cbz	r2, 80087e6 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b2:	2300      	movs	r3, #0
 80087b4:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087b6:	6803      	ldr	r3, [r0, #0]
 80087b8:	4c0c      	ldr	r4, [pc, #48]	; (80087ec <HAL_UART_Receive_IT+0x48>)
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	d00c      	beq.n	80087d8 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80087c4:	d008      	beq.n	80087d8 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087c6:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c8:	e854 3f00 	ldrex	r3, [r4]
 80087cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	e844 3500 	strex	r5, r3, [r4]
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	d1f6      	bne.n	80087c6 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80087d8:	f7ff ff46 	bl	8008668 <UART_Start_Receive_IT>
 80087dc:	e000      	b.n	80087e0 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 80087de:	2002      	movs	r0, #2
}
 80087e0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80087e2:	2001      	movs	r0, #1
 80087e4:	e7fc      	b.n	80087e0 <HAL_UART_Receive_IT+0x3c>
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7fa      	b.n	80087e0 <HAL_UART_Receive_IT+0x3c>
 80087ea:	bf00      	nop
 80087ec:	40008000 	.word	0x40008000

080087f0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80087f0:	b082      	sub	sp, #8
 80087f2:	ab02      	add	r3, sp, #8
 80087f4:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80087f8:	6802      	ldr	r2, [r0, #0]
 80087fa:	6853      	ldr	r3, [r2, #4]
 80087fc:	f023 0310 	bic.w	r3, r3, #16
 8008800:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008804:	430b      	orrs	r3, r1
 8008806:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008808:	6802      	ldr	r2, [r0, #0]
 800880a:	6853      	ldr	r3, [r2, #4]
 800880c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008810:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008814:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008818:	6053      	str	r3, [r2, #4]
}
 800881a:	b002      	add	sp, #8
 800881c:	4770      	bx	lr
	...

08008820 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008820:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008822:	b92b      	cbnz	r3, 8008830 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008824:	2301      	movs	r3, #1
 8008826:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800882a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800882e:	4770      	bx	lr
{
 8008830:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008832:	6803      	ldr	r3, [r0, #0]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800883a:	6899      	ldr	r1, [r3, #8]
 800883c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800883e:	4d09      	ldr	r5, [pc, #36]	; (8008864 <UARTEx_SetNbDataToProcess+0x44>)
 8008840:	5c6b      	ldrb	r3, [r5, r1]
 8008842:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008844:	4c08      	ldr	r4, [pc, #32]	; (8008868 <UARTEx_SetNbDataToProcess+0x48>)
 8008846:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008848:	fb93 f3f1 	sdiv	r3, r3, r1
 800884c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008850:	5cab      	ldrb	r3, [r5, r2]
 8008852:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008854:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008856:	fb93 f3f2 	sdiv	r3, r3, r2
 800885a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800885e:	bc30      	pop	{r4, r5}
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	08016c60 	.word	0x08016c60
 8008868:	08016c58 	.word	0x08016c58

0800886c <HAL_UARTEx_WakeupCallback>:
}
 800886c:	4770      	bx	lr

0800886e <HAL_UARTEx_RxFifoFullCallback>:
}
 800886e:	4770      	bx	lr

08008870 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8008870:	4770      	bx	lr

08008872 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8008872:	b510      	push	{r4, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	ab04      	add	r3, sp, #16
 8008878:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 800887c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008880:	2b01      	cmp	r3, #1
 8008882:	d035      	beq.n	80088f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8008884:	4604      	mov	r4, r0
 8008886:	2301      	movs	r3, #1
 8008888:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800888c:	2324      	movs	r3, #36	; 0x24
 800888e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8008892:	6802      	ldr	r2, [r0, #0]
 8008894:	6813      	ldr	r3, [r2, #0]
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800889c:	6801      	ldr	r1, [r0, #0]
 800889e:	688b      	ldr	r3, [r1, #8]
 80088a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80088a4:	9a02      	ldr	r2, [sp, #8]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80088aa:	b1aa      	cbz	r2, 80088d8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80088ac:	6822      	ldr	r2, [r4, #0]
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80088b6:	f7f9 fbb7 	bl	8002028 <HAL_GetTick>
 80088ba:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088bc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80088c0:	9200      	str	r2, [sp, #0]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7ff fd90 	bl	80083ee <UART_WaitOnFlagUntilTimeout>
 80088ce:	b948      	cbnz	r0, 80088e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80088d0:	2320      	movs	r3, #32
 80088d2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80088d6:	e006      	b.n	80088e6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80088d8:	ab04      	add	r3, sp, #16
 80088da:	e913 0006 	ldmdb	r3, {r1, r2}
 80088de:	f7ff ff87 	bl	80087f0 <UARTEx_Wakeup_AddressConfig>
 80088e2:	e7e3      	b.n	80088ac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80088e4:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80088e6:	2300      	movs	r3, #0
 80088e8:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 80088ec:	b004      	add	sp, #16
 80088ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80088f0:	2002      	movs	r0, #2
 80088f2:	e7fb      	b.n	80088ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080088f4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80088f4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d010      	beq.n	800891e <HAL_UARTEx_EnableStopMode+0x2a>
 80088fc:	2301      	movs	r3, #1
 80088fe:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008902:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	e852 3f00 	ldrex	r3, [r2]
 8008908:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	e842 3100 	strex	r1, r3, [r2]
 8008910:	2900      	cmp	r1, #0
 8008912:	d1f6      	bne.n	8008902 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008914:	2300      	movs	r3, #0
 8008916:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 800891a:	4618      	mov	r0, r3
 800891c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800891e:	2002      	movs	r0, #2
}
 8008920:	4770      	bx	lr

08008922 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8008922:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008926:	2b01      	cmp	r3, #1
 8008928:	d01d      	beq.n	8008966 <HAL_UARTEx_EnableFifoMode+0x44>
{
 800892a:	b510      	push	{r4, lr}
 800892c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800892e:	2301      	movs	r3, #1
 8008930:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008934:	2324      	movs	r3, #36	; 0x24
 8008936:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800893a:	6802      	ldr	r2, [r0, #0]
 800893c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800893e:	6811      	ldr	r1, [r2, #0]
 8008940:	f021 0101 	bic.w	r1, r1, #1
 8008944:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800894a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800894e:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008950:	6802      	ldr	r2, [r0, #0]
 8008952:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008954:	f7ff ff64 	bl	8008820 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008958:	2320      	movs	r3, #32
 800895a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800895e:	2000      	movs	r0, #0
 8008960:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008964:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008966:	2002      	movs	r0, #2
}
 8008968:	4770      	bx	lr

0800896a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800896a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800896c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008970:	2b01      	cmp	r3, #1
 8008972:	d01d      	beq.n	80089b0 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008974:	4604      	mov	r4, r0
 8008976:	2301      	movs	r3, #1
 8008978:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800897c:	2324      	movs	r3, #36	; 0x24
 800897e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008982:	6803      	ldr	r3, [r0, #0]
 8008984:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	f022 0201 	bic.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800898e:	6802      	ldr	r2, [r0, #0]
 8008990:	6893      	ldr	r3, [r2, #8]
 8008992:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008996:	4319      	orrs	r1, r3
 8008998:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800899a:	f7ff ff41 	bl	8008820 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80089a2:	2320      	movs	r3, #32
 80089a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80089a8:	2000      	movs	r0, #0
 80089aa:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80089b0:	2002      	movs	r0, #2
 80089b2:	e7fc      	b.n	80089ae <HAL_UARTEx_SetTxFifoThreshold+0x44>

080089b4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80089b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80089b6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d01d      	beq.n	80089fa <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80089be:	4604      	mov	r4, r0
 80089c0:	2301      	movs	r3, #1
 80089c2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80089c6:	2324      	movs	r3, #36	; 0x24
 80089c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089cc:	6803      	ldr	r3, [r0, #0]
 80089ce:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	f022 0201 	bic.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089d8:	6802      	ldr	r2, [r0, #0]
 80089da:	6893      	ldr	r3, [r2, #8]
 80089dc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80089e0:	4319      	orrs	r1, r3
 80089e2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80089e4:	f7ff ff1c 	bl	8008820 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80089ec:	2320      	movs	r3, #32
 80089ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80089f2:	2000      	movs	r0, #0
 80089f4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80089f8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80089fa:	2002      	movs	r0, #2
 80089fc:	e7fc      	b.n	80089f8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008a00 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8008a00:	2804      	cmp	r0, #4
 8008a02:	d807      	bhi.n	8008a14 <LmHandlerPackageIsInitialized+0x14>
{
 8008a04:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8008a06:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <LmHandlerPackageIsInitialized+0x1c>)
 8008a08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	b11b      	cbz	r3, 8008a18 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8008a10:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8008a12:	bd08      	pop	{r3, pc}
        return false;
 8008a14:	2000      	movs	r0, #0
}
 8008a16:	4770      	bx	lr
        return false;
 8008a18:	2000      	movs	r0, #0
 8008a1a:	e7fa      	b.n	8008a12 <LmHandlerPackageIsInitialized+0x12>
 8008a1c:	20000808 	.word	0x20000808

08008a20 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4605      	mov	r5, r0
 8008a24:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008a26:	2400      	movs	r4, #0
 8008a28:	e005      	b.n	8008a36 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	b10b      	cbz	r3, 8008a32 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8008a2e:	4630      	mov	r0, r6
 8008a30:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008a32:	3401      	adds	r4, #1
 8008a34:	b264      	sxtb	r4, r4
 8008a36:	2c04      	cmp	r4, #4
 8008a38:	dc24      	bgt.n	8008a84 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8008a3a:	4b13      	ldr	r3, [pc, #76]	; (8008a88 <LmHandlerPackagesNotify+0x68>)
 8008a3c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0f6      	beq.n	8008a32 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8008a44:	2d03      	cmp	r5, #3
 8008a46:	d8f4      	bhi.n	8008a32 <LmHandlerPackagesNotify+0x12>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <LmHandlerPackagesNotify+0x30>)
 8008a4a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a2b 	.word	0x08008a2b
 8008a54:	08008a61 	.word	0x08008a61
 8008a58:	08008a6d 	.word	0x08008a6d
 8008a5c:	08008a79 	.word	0x08008a79
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0e5      	beq.n	8008a32 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8008a66:	4630      	mov	r0, r6
 8008a68:	4798      	blx	r3
 8008a6a:	e7e2      	b.n	8008a32 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0df      	beq.n	8008a32 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8008a72:	4630      	mov	r0, r6
 8008a74:	4798      	blx	r3
 8008a76:	e7dc      	b.n	8008a32 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0d9      	beq.n	8008a32 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8008a7e:	4630      	mov	r0, r6
 8008a80:	4798      	blx	r3
 8008a82:	e7d6      	b.n	8008a32 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
 8008a86:	bf00      	nop
 8008a88:	20000808 	.word	0x20000808

08008a8c <MlmeIndication>:
{
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8008a90:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <MlmeIndication+0x4c>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8008a96:	7842      	ldrb	r2, [r0, #1]
 8008a98:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8008a9a:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8008a9e:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008aa0:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008aa4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008aa6:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8008aaa:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008aac:	78ca      	ldrb	r2, [r1, #3]
 8008aae:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8008ab0:	6842      	ldr	r2, [r0, #4]
 8008ab2:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8008ab4:	4b09      	ldr	r3, [pc, #36]	; (8008adc <MlmeIndication+0x50>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	b13b      	cbz	r3, 8008acc <MlmeIndication+0x40>
 8008abc:	7802      	ldrb	r2, [r0, #0]
 8008abe:	2a0a      	cmp	r2, #10
 8008ac0:	d004      	beq.n	8008acc <MlmeIndication+0x40>
 8008ac2:	2a0e      	cmp	r2, #14
 8008ac4:	d002      	beq.n	8008acc <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008ac6:	4904      	ldr	r1, [pc, #16]	; (8008ad8 <MlmeIndication+0x4c>)
 8008ac8:	2000      	movs	r0, #0
 8008aca:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8008acc:	4621      	mov	r1, r4
 8008ace:	2003      	movs	r0, #3
 8008ad0:	f7ff ffa6 	bl	8008a20 <LmHandlerPackagesNotify>
}
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000088 	.word	0x20000088
 8008adc:	20000804 	.word	0x20000804

08008ae0 <McpsConfirm>:
{
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8008ae4:	4b0d      	ldr	r3, [pc, #52]	; (8008b1c <McpsConfirm+0x3c>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8008aea:	7842      	ldrb	r2, [r0, #1]
 8008aec:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8008aee:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8008af2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8008af4:	68c2      	ldr	r2, [r0, #12]
 8008af6:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8008af8:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8008afc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8008afe:	6902      	ldr	r2, [r0, #16]
 8008b00:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008b02:	7902      	ldrb	r2, [r0, #4]
 8008b04:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <McpsConfirm+0x40>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	b10b      	cbz	r3, 8008b12 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8008b0e:	4803      	ldr	r0, [pc, #12]	; (8008b1c <McpsConfirm+0x3c>)
 8008b10:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8008b12:	4621      	mov	r1, r4
 8008b14:	2000      	movs	r0, #0
 8008b16:	f7ff ff83 	bl	8008a20 <LmHandlerPackagesNotify>
}
 8008b1a:	bd10      	pop	{r4, pc}
 8008b1c:	2000009c 	.word	0x2000009c
 8008b20:	20000804 	.word	0x20000804

08008b24 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8008b24:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008b26:	2400      	movs	r4, #0
 8008b28:	e001      	b.n	8008b2e <LmHandlerPackageIsTxPending+0xa>
 8008b2a:	3401      	adds	r4, #1
 8008b2c:	b264      	sxtb	r4, r4
 8008b2e:	2c04      	cmp	r4, #4
 8008b30:	dc0a      	bgt.n	8008b48 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <LmHandlerPackageIsTxPending+0x2c>)
 8008b34:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0f6      	beq.n	8008b2a <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	4798      	blx	r3
 8008b40:	4603      	mov	r3, r0
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d0f1      	beq.n	8008b2a <LmHandlerPackageIsTxPending+0x6>
 8008b46:	e000      	b.n	8008b4a <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000808 	.word	0x20000808

08008b54 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8008b54:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008b56:	2400      	movs	r4, #0
 8008b58:	e001      	b.n	8008b5e <LmHandlerPackagesProcess+0xa>
 8008b5a:	3401      	adds	r4, #1
 8008b5c:	b264      	sxtb	r4, r4
 8008b5e:	2c04      	cmp	r4, #4
 8008b60:	dc12      	bgt.n	8008b88 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008b62:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <LmHandlerPackagesProcess+0x38>)
 8008b64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0f6      	beq.n	8008b5a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008b6c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0f3      	beq.n	8008b5a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008b72:	b2e0      	uxtb	r0, r4
 8008b74:	f7ff ff44 	bl	8008a00 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d0ee      	beq.n	8008b5a <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8008b7c:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <LmHandlerPackagesProcess+0x38>)
 8008b7e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	4798      	blx	r3
 8008b86:	e7e8      	b.n	8008b5a <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000808 	.word	0x20000808

08008b90 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8008b90:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8008b92:	4b04      	ldr	r3, [pc, #16]	; (8008ba4 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 8008b94:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8008b96:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	b103      	cbz	r3, 8008ba0 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 8008b9e:	4798      	blx	r3
    }
}
 8008ba0:	bd08      	pop	{r3, pc}
 8008ba2:	bf00      	nop
 8008ba4:	2000081c 	.word	0x2000081c
 8008ba8:	20000804 	.word	0x20000804

08008bac <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 8008bac:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8008bae:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 8008bb0:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8008bb2:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	b103      	cbz	r3, 8008bbc <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8008bba:	4798      	blx	r3
    }
}
 8008bbc:	bd08      	pop	{r3, pc}
 8008bbe:	bf00      	nop
 8008bc0:	2000081c 	.word	0x2000081c
 8008bc4:	20000804 	.word	0x20000804

08008bc8 <LmHandlerJoin>:
{
 8008bc8:	b530      	push	{r4, r5, lr}
 8008bca:	b091      	sub	sp, #68	; 0x44
 8008bcc:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008bd4:	4b33      	ldr	r3, [pc, #204]	; (8008ca4 <LmHandlerJoin+0xdc>)
 8008bd6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008bda:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8008bde:	f993 1005 	ldrsb.w	r1, [r3, #5]
 8008be2:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8008be6:	2802      	cmp	r0, #2
 8008be8:	d022      	beq.n	8008c30 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008bea:	2001      	movs	r0, #1
 8008bec:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008bf0:	4b2d      	ldr	r3, [pc, #180]	; (8008ca8 <LmHandlerJoin+0xe0>)
 8008bf2:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008bf4:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8008bf6:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8008bfc:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 8008bfe:	4b2b      	ldr	r3, [pc, #172]	; (8008cac <LmHandlerJoin+0xe4>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b1f3      	cbz	r3, 8008c42 <LmHandlerJoin+0x7a>
        LoRaMacStart();
 8008c04:	f003 fb0c 	bl	800c220 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008c0e:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008c12:	a801      	add	r0, sp, #4
 8008c14:	f003 fd42 	bl	800c69c <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8008c18:	4b24      	ldr	r3, [pc, #144]	; (8008cac <LmHandlerJoin+0xe4>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	b103      	cbz	r3, 8008c20 <LmHandlerJoin+0x58>
 8008c1e:	b114      	cbz	r4, 8008c26 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 8008c20:	a80b      	add	r0, sp, #44	; 0x2c
 8008c22:	f003 ffef 	bl	800cc04 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008c26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c28:	4b21      	ldr	r3, [pc, #132]	; (8008cb0 <LmHandlerJoin+0xe8>)
 8008c2a:	601a      	str	r2, [r3, #0]
}
 8008c2c:	b011      	add	sp, #68	; 0x44
 8008c2e:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008c30:	2202      	movs	r2, #2
 8008c32:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008c36:	4b1c      	ldr	r3, [pc, #112]	; (8008ca8 <LmHandlerJoin+0xe0>)
 8008c38:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8008c3a:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 8008c3c:	f003 faf0 	bl	800c220 <LoRaMacStart>
 8008c40:	e7ea      	b.n	8008c18 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8008c42:	231f      	movs	r3, #31
 8008c44:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8008c48:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008c4c:	a801      	add	r0, sp, #4
 8008c4e:	f003 fd25 	bl	800c69c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8008c52:	2320      	movs	r3, #32
 8008c54:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8008c58:	4d12      	ldr	r5, [pc, #72]	; (8008ca4 <LmHandlerJoin+0xdc>)
 8008c5a:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8008c5e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008c62:	a801      	add	r0, sp, #4
 8008c64:	f003 fd1a 	bl	800c69c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8008c68:	2322      	movs	r3, #34	; 0x22
 8008c6a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8008c6e:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8008c72:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008c76:	a801      	add	r0, sp, #4
 8008c78:	f003 fd10 	bl	800c69c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8008c7c:	2321      	movs	r3, #33	; 0x21
 8008c7e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8008c82:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8008c86:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008c8a:	a801      	add	r0, sp, #4
 8008c8c:	f003 fd06 	bl	800c69c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008c90:	2329      	movs	r3, #41	; 0x29
 8008c92:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <LmHandlerJoin+0xec>)
 8008c98:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008c9a:	a801      	add	r0, sp, #4
 8008c9c:	f003 fcfe 	bl	800c69c <LoRaMacMibSetRequestConfirm>
 8008ca0:	e7b0      	b.n	8008c04 <LmHandlerJoin+0x3c>
 8008ca2:	bf00      	nop
 8008ca4:	2000081c 	.word	0x2000081c
 8008ca8:	2000007c 	.word	0x2000007c
 8008cac:	200007f8 	.word	0x200007f8
 8008cb0:	200007fc 	.word	0x200007fc
 8008cb4:	01000400 	.word	0x01000400

08008cb8 <LmHandlerDeviceTimeReq>:
{
 8008cb8:	b500      	push	{lr}
 8008cba:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8008cbc:	2309      	movs	r3, #9
 8008cbe:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8008cc2:	a801      	add	r0, sp, #4
 8008cc4:	f003 ff9e 	bl	800cc04 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008cc8:	9a05      	ldr	r2, [sp, #20]
 8008cca:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <LmHandlerDeviceTimeReq+0x24>)
 8008ccc:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8008cce:	b910      	cbnz	r0, 8008cd6 <LmHandlerDeviceTimeReq+0x1e>
}
 8008cd0:	b007      	add	sp, #28
 8008cd2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cda:	e7f9      	b.n	8008cd0 <LmHandlerDeviceTimeReq+0x18>
 8008cdc:	200007fc 	.word	0x200007fc

08008ce0 <LmHandlerGetDutyCycleWaitTime>:
}
 8008ce0:	4b01      	ldr	r3, [pc, #4]	; (8008ce8 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	200007fc 	.word	0x200007fc

08008cec <LmHandlerJoinStatus>:
{
 8008cec:	b500      	push	{lr}
 8008cee:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8008cf6:	4668      	mov	r0, sp
 8008cf8:	f003 fb5c 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008cfc:	b920      	cbnz	r0, 8008d08 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008cfe:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008d02:	b110      	cbz	r0, 8008d0a <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8008d04:	2001      	movs	r0, #1
 8008d06:	e000      	b.n	8008d0a <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8008d08:	2000      	movs	r0, #0
}
 8008d0a:	b00b      	add	sp, #44	; 0x2c
 8008d0c:	f85d fb04 	ldr.w	pc, [sp], #4

08008d10 <LmHandlerIsBusy>:
{
 8008d10:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 8008d12:	f003 f833 	bl	800bd7c <LoRaMacIsBusy>
 8008d16:	b100      	cbz	r0, 8008d1a <LmHandlerIsBusy+0xa>
}
 8008d18:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008d1a:	f7ff ffe7 	bl	8008cec <LmHandlerJoinStatus>
 8008d1e:	2801      	cmp	r0, #1
 8008d20:	d006      	beq.n	8008d30 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <LmHandlerIsBusy+0x28>)
 8008d24:	7a19      	ldrb	r1, [r3, #8]
 8008d26:	79d8      	ldrb	r0, [r3, #7]
 8008d28:	f7ff ff4e 	bl	8008bc8 <LmHandlerJoin>
        return true;
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	e7f3      	b.n	8008d18 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008d30:	f7ff fef8 	bl	8008b24 <LmHandlerPackageIsTxPending>
 8008d34:	e7f0      	b.n	8008d18 <LmHandlerIsBusy+0x8>
 8008d36:	bf00      	nop
 8008d38:	2000007c 	.word	0x2000007c

08008d3c <LmHandlerSend>:
{
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8008d46:	f003 f819 	bl	800bd7c <LoRaMacIsBusy>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d168      	bne.n	8008e20 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 8008d4e:	f003 f833 	bl	800bdb8 <LoRaMacIsStopped>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d167      	bne.n	8008e26 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008d56:	f7ff ffc9 	bl	8008cec <LmHandlerJoinStatus>
 8008d5a:	2801      	cmp	r0, #1
 8008d5c:	d137      	bne.n	8008dce <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 8008d5e:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <LmHandlerSend+0xf8>)
 8008d60:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8008d62:	3d00      	subs	r5, #0
 8008d64:	bf18      	it	ne
 8008d66:	2501      	movne	r5, #1
 8008d68:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8008d6c:	4b32      	ldr	r3, [pc, #200]	; (8008e38 <LmHandlerSend+0xfc>)
 8008d6e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008d72:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8008d76:	4669      	mov	r1, sp
 8008d78:	7860      	ldrb	r0, [r4, #1]
 8008d7a:	f003 fab1 	bl	800c2e0 <LoRaMacQueryTxPossible>
 8008d7e:	b370      	cbz	r0, 8008dde <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008d80:	2300      	movs	r3, #0
 8008d82:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008d86:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008d88:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8008d8c:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8008d90:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <LmHandlerSend+0xf8>)
 8008d92:	f103 0c10 	add.w	ip, r3, #16
 8008d96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d9a:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008d9e:	4a26      	ldr	r2, [pc, #152]	; (8008e38 <LmHandlerSend+0xfc>)
 8008da0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008da4:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8008da6:	4631      	mov	r1, r6
 8008da8:	a801      	add	r0, sp, #4
 8008daa:	f004 f82f 	bl	800ce0c <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008dae:	9a05      	ldr	r2, [sp, #20]
 8008db0:	4b22      	ldr	r3, [pc, #136]	; (8008e3c <LmHandlerSend+0x100>)
 8008db2:	601a      	str	r2, [r3, #0]
    switch( status )
 8008db4:	2811      	cmp	r0, #17
 8008db6:	d830      	bhi.n	8008e1a <LmHandlerSend+0xde>
 8008db8:	e8df f000 	tbb	[pc, r0]
 8008dbc:	2f2f1c21 	.word	0x2f2f1c21
 8008dc0:	382f2f2f 	.word	0x382f2f2f
 8008dc4:	2c2f2f2f 	.word	0x2c2f2f2f
 8008dc8:	1c1c2f2f 	.word	0x1c1c2f2f
 8008dcc:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008dce:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <LmHandlerSend+0x104>)
 8008dd0:	7a19      	ldrb	r1, [r3, #8]
 8008dd2:	79d8      	ldrb	r0, [r3, #7]
 8008dd4:	f7ff fef8 	bl	8008bc8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008dd8:	f06f 0502 	mvn.w	r5, #2
 8008ddc:	e00c      	b.n	8008df8 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008dde:	7823      	ldrb	r3, [r4, #0]
 8008de0:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008de4:	7863      	ldrb	r3, [r4, #1]
 8008de6:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008dea:	6863      	ldr	r3, [r4, #4]
 8008dec:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8008dee:	f04f 35ff 	mov.w	r5, #4294967295
 8008df2:	e7cd      	b.n	8008d90 <LmHandlerSend+0x54>
    switch( status )
 8008df4:	f06f 0501 	mvn.w	r5, #1
}
 8008df8:	4628      	mov	r0, r5
 8008dfa:	b006      	add	sp, #24
 8008dfc:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 8008dfe:	4b11      	ldr	r3, [pc, #68]	; (8008e44 <LmHandlerSend+0x108>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8008e04:	f115 0f07 	cmn.w	r5, #7
 8008e08:	d0f6      	beq.n	8008df8 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	e7f4      	b.n	8008df8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8008e0e:	f06f 0504 	mvn.w	r5, #4
            break;
 8008e12:	e7f1      	b.n	8008df8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008e14:	f06f 0505 	mvn.w	r5, #5
            break;
 8008e18:	e7ee      	b.n	8008df8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008e1a:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8008e1e:	e7eb      	b.n	8008df8 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008e20:	f06f 0501 	mvn.w	r5, #1
 8008e24:	e7e8      	b.n	8008df8 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008e26:	f06f 0502 	mvn.w	r5, #2
 8008e2a:	e7e5      	b.n	8008df8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008e2c:	f06f 0502 	mvn.w	r5, #2
 8008e30:	e7e2      	b.n	8008df8 <LmHandlerSend+0xbc>
 8008e32:	bf00      	nop
 8008e34:	2000009c 	.word	0x2000009c
 8008e38:	2000081c 	.word	0x2000081c
 8008e3c:	200007fc 	.word	0x200007fc
 8008e40:	2000007c 	.word	0x2000007c
 8008e44:	20000800 	.word	0x20000800

08008e48 <LmHandlerProcess>:
{
 8008e48:	b500      	push	{lr}
 8008e4a:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8008e4c:	f002 ffc0 	bl	800bdd0 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008e50:	f7ff fe80 	bl	8008b54 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008e54:	f7ff fe66 	bl	8008b24 <LmHandlerPackageIsTxPending>
 8008e58:	b910      	cbnz	r0, 8008e60 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8008e5a:	4b0b      	ldr	r3, [pc, #44]	; (8008e88 <LmHandlerProcess+0x40>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b913      	cbnz	r3, 8008e66 <LmHandlerProcess+0x1e>
}
 8008e60:	b003      	add	sp, #12
 8008e62:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8008e66:	2200      	movs	r2, #0
 8008e68:	f88d 2000 	strb.w	r2, [sp]
 8008e6c:	f88d 2001 	strb.w	r2, [sp, #1]
 8008e70:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8008e72:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <LmHandlerProcess+0x44>)
 8008e74:	78d9      	ldrb	r1, [r3, #3]
 8008e76:	4668      	mov	r0, sp
 8008e78:	f7ff ff60 	bl	8008d3c <LmHandlerSend>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d1ef      	bne.n	8008e60 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8008e80:	4b01      	ldr	r3, [pc, #4]	; (8008e88 <LmHandlerProcess+0x40>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	e7eb      	b.n	8008e60 <LmHandlerProcess+0x18>
 8008e88:	20000800 	.word	0x20000800
 8008e8c:	2000081c 	.word	0x2000081c

08008e90 <LmHandlerRequestClass>:
{
 8008e90:	b510      	push	{r4, lr}
 8008e92:	b08a      	sub	sp, #40	; 0x28
 8008e94:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 8008e96:	f002 ff71 	bl	800bd7c <LoRaMacIsBusy>
 8008e9a:	bbb0      	cbnz	r0, 8008f0a <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008e9c:	f7ff ff26 	bl	8008cec <LmHandlerJoinStatus>
 8008ea0:	2801      	cmp	r0, #1
 8008ea2:	d135      	bne.n	8008f10 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008eaa:	4668      	mov	r0, sp
 8008eac:	f003 fa82 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
 8008eb0:	bb88      	cbnz	r0, 8008f16 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 8008eb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 8008eb6:	42a3      	cmp	r3, r4
 8008eb8:	d030      	beq.n	8008f1c <LmHandlerRequestClass+0x8c>
        switch( newClass )
 8008eba:	2c01      	cmp	r4, #1
 8008ebc:	d030      	beq.n	8008f20 <LmHandlerRequestClass+0x90>
 8008ebe:	2c02      	cmp	r4, #2
 8008ec0:	d014      	beq.n	8008eec <LmHandlerRequestClass+0x5c>
 8008ec2:	b114      	cbz	r4, 8008eca <LmHandlerRequestClass+0x3a>
 8008ec4:	2000      	movs	r0, #0
}
 8008ec6:	b00a      	add	sp, #40	; 0x28
 8008ec8:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 8008eca:	b90b      	cbnz	r3, 8008ed0 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e7fa      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 8008ed0:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008ed4:	4668      	mov	r0, sp
 8008ed6:	f003 fbe1 	bl	800c69c <LoRaMacMibSetRequestConfirm>
 8008eda:	bb20      	cbnz	r0, 8008f26 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8008edc:	4b18      	ldr	r3, [pc, #96]	; (8008f40 <LmHandlerRequestClass+0xb0>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	b31b      	cbz	r3, 8008f2c <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008ee8:	2000      	movs	r0, #0
 8008eea:	e7ec      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 8008eec:	bb03      	cbnz	r3, 8008f30 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 8008eee:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008ef2:	4668      	mov	r0, sp
 8008ef4:	f003 fbd2 	bl	800c69c <LoRaMacMibSetRequestConfirm>
 8008ef8:	b9e8      	cbnz	r0, 8008f36 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8008efa:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <LmHandlerRequestClass+0xb0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f00:	b1e3      	cbz	r3, 8008f3c <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008f02:	4620      	mov	r0, r4
 8008f04:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f06:	2000      	movs	r0, #0
 8008f08:	e7dd      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008f0a:	f06f 0001 	mvn.w	r0, #1
 8008f0e:	e7da      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008f10:	f06f 0002 	mvn.w	r0, #2
 8008f14:	e7d7      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 8008f16:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1a:	e7d4      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e7d2      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8008f20:	f04f 30ff 	mov.w	r0, #4294967295
 8008f24:	e7cf      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	e7cc      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e7ca      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	e7c7      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3a:	e7c4      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	e7c2      	b.n	8008ec6 <LmHandlerRequestClass+0x36>
 8008f40:	20000804 	.word	0x20000804

08008f44 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8008f44:	b170      	cbz	r0, 8008f64 <LmHandlerGetCurrentClass+0x20>
{
 8008f46:	b510      	push	{r4, lr}
 8008f48:	b08a      	sub	sp, #40	; 0x28
 8008f4a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008f52:	4668      	mov	r0, sp
 8008f54:	f003 fa2e 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
 8008f58:	b938      	cbnz	r0, 8008f6a <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8008f5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008f5e:	7023      	strb	r3, [r4, #0]
}
 8008f60:	b00a      	add	sp, #40	; 0x28
 8008f62:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008f64:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f68:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6e:	e7f7      	b.n	8008f60 <LmHandlerGetCurrentClass+0x1c>

08008f70 <McpsIndication>:
{
 8008f70:	b510      	push	{r4, lr}
 8008f72:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 8008f74:	2300      	movs	r3, #0
 8008f76:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8008f7a:	4a1d      	ldr	r2, [pc, #116]	; (8008ff0 <McpsIndication+0x80>)
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8008f80:	7843      	ldrb	r3, [r0, #1]
 8008f82:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d131      	bne.n	8008fec <McpsIndication+0x7c>
 8008f88:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008f8a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8008f8e:	4b18      	ldr	r3, [pc, #96]	; (8008ff0 <McpsIndication+0x80>)
 8008f90:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008f92:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008f96:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008f98:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8008f9c:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008f9e:	78ca      	ldrb	r2, [r1, #3]
 8008fa0:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008fa2:	6902      	ldr	r2, [r0, #16]
 8008fa4:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 8008fa6:	78c3      	ldrb	r3, [r0, #3]
 8008fa8:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8008fac:	7b03      	ldrb	r3, [r0, #12]
 8008fae:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8008fb2:	6883      	ldr	r3, [r0, #8]
 8008fb4:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <McpsIndication+0x84>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	b113      	cbz	r3, 8008fc4 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8008fbe:	490c      	ldr	r1, [pc, #48]	; (8008ff0 <McpsIndication+0x80>)
 8008fc0:	a802      	add	r0, sp, #8
 8008fc2:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <McpsIndication+0x84>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	b113      	cbz	r3, 8008fd2 <McpsIndication+0x62>
 8008fcc:	7e22      	ldrb	r2, [r4, #24]
 8008fce:	b102      	cbz	r2, 8008fd2 <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008fd0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	f7ff fd23 	bl	8008a20 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8008fda:	f10d 0007 	add.w	r0, sp, #7
 8008fde:	f7ff ffb1 	bl	8008f44 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8008fe2:	7963      	ldrb	r3, [r4, #5]
 8008fe4:	b113      	cbz	r3, 8008fec <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 8008fe6:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <McpsIndication+0x88>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	701a      	strb	r2, [r3, #0]
}
 8008fec:	b004      	add	sp, #16
 8008fee:	bd10      	pop	{r4, pc}
 8008ff0:	20000088 	.word	0x20000088
 8008ff4:	20000804 	.word	0x20000804
 8008ff8:	20000800 	.word	0x20000800

08008ffc <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8008ffc:	b180      	cbz	r0, 8009020 <LmHandlerGetTxDatarate+0x24>
{
 8008ffe:	b510      	push	{r4, lr}
 8009000:	b08a      	sub	sp, #40	; 0x28
 8009002:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8009004:	2320      	movs	r3, #32
 8009006:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800900a:	4668      	mov	r0, sp
 800900c:	f003 f9d2 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
 8009010:	b948      	cbnz	r0, 8009026 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8009012:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8009016:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8009018:	4a04      	ldr	r2, [pc, #16]	; (800902c <LmHandlerGetTxDatarate+0x30>)
 800901a:	7113      	strb	r3, [r2, #4]
}
 800901c:	b00a      	add	sp, #40	; 0x28
 800901e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009024:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009026:	f04f 30ff 	mov.w	r0, #4294967295
 800902a:	e7f7      	b.n	800901c <LmHandlerGetTxDatarate+0x20>
 800902c:	2000081c 	.word	0x2000081c

08009030 <LmHandlerSetSystemMaxRxError>:
{
 8009030:	b500      	push	{lr}
 8009032:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8009034:	2323      	movs	r3, #35	; 0x23
 8009036:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800903a:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800903c:	4668      	mov	r0, sp
 800903e:	f003 fb2d 	bl	800c69c <LoRaMacMibSetRequestConfirm>
 8009042:	b910      	cbnz	r0, 800904a <LmHandlerSetSystemMaxRxError+0x1a>
}
 8009044:	b00b      	add	sp, #44	; 0x2c
 8009046:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800904a:	f04f 30ff 	mov.w	r0, #4294967295
 800904e:	e7f9      	b.n	8009044 <LmHandlerSetSystemMaxRxError+0x14>

08009050 <LmHandlerConfigure>:
{
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	b08e      	sub	sp, #56	; 0x38
 8009054:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8009056:	4c6d      	ldr	r4, [pc, #436]	; (800920c <LmHandlerConfigure+0x1bc>)
 8009058:	2218      	movs	r2, #24
 800905a:	4620      	mov	r0, r4
 800905c:	f008 f94d 	bl	80112fa <memcpy1>
    IsUplinkTxPending = false;
 8009060:	4b6b      	ldr	r3, [pc, #428]	; (8009210 <LmHandlerConfigure+0x1c0>)
 8009062:	2200      	movs	r2, #0
 8009064:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8009066:	f7fa f899 	bl	800319c <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800906a:	7822      	ldrb	r2, [r4, #0]
 800906c:	2301      	movs	r3, #1
 800906e:	4093      	lsls	r3, r2
 8009070:	6841      	ldr	r1, [r0, #4]
 8009072:	420b      	tst	r3, r1
 8009074:	d106      	bne.n	8009084 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8009076:	4b67      	ldr	r3, [pc, #412]	; (8009214 <LmHandlerConfigure+0x1c4>)
 8009078:	2201      	movs	r2, #1
 800907a:	2100      	movs	r1, #0
 800907c:	4608      	mov	r0, r1
 800907e:	f00a f819 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8009082:	e7fe      	b.n	8009082 <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8009084:	4964      	ldr	r1, [pc, #400]	; (8009218 <LmHandlerConfigure+0x1c8>)
 8009086:	4865      	ldr	r0, [pc, #404]	; (800921c <LmHandlerConfigure+0x1cc>)
 8009088:	f002 feea 	bl	800be60 <LoRaMacInitialization>
 800908c:	2800      	cmp	r0, #0
 800908e:	f040 80b7 	bne.w	8009200 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 8009092:	2327      	movs	r3, #39	; 0x27
 8009094:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009098:	a804      	add	r0, sp, #16
 800909a:	f003 faff 	bl	800c69c <LoRaMacMibSetRequestConfirm>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d17c      	bne.n	800919c <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 80090a2:	4b5f      	ldr	r3, [pc, #380]	; (8009220 <LmHandlerConfigure+0x1d0>)
 80090a4:	2201      	movs	r2, #1
 80090a6:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 80090a8:	4b5d      	ldr	r3, [pc, #372]	; (8009220 <LmHandlerConfigure+0x1d0>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 809e 	beq.w	80091ee <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80090b2:	4b5c      	ldr	r3, [pc, #368]	; (8009224 <LmHandlerConfigure+0x1d4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	b10b      	cbz	r3, 80090be <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80090ba:	2000      	movs	r0, #0
 80090bc:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80090be:	2327      	movs	r3, #39	; 0x27
 80090c0:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80090c4:	a804      	add	r0, sp, #16
 80090c6:	f003 f975 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80090ca:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 80090cc:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 80090d0:	4b4e      	ldr	r3, [pc, #312]	; (800920c <LmHandlerConfigure+0x1bc>)
 80090d2:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 80090d4:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 80090d8:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 80090da:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 80090de:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 80090e0:	4b4d      	ldr	r3, [pc, #308]	; (8009218 <LmHandlerConfigure+0x1c8>)
 80090e2:	68d9      	ldr	r1, [r3, #12]
 80090e4:	6898      	ldr	r0, [r3, #8]
 80090e6:	f008 f81b 	bl	8011120 <SecureElementInitMcuID>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f040 808b 	bne.w	8009206 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 80090f0:	2306      	movs	r3, #6
 80090f2:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80090f6:	a804      	add	r0, sp, #16
 80090f8:	f003 f95c 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80090fc:	4c4a      	ldr	r4, [pc, #296]	; (8009228 <LmHandlerConfigure+0x1d8>)
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009102:	a804      	add	r0, sp, #16
 8009104:	f003 faca 	bl	800c69c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8009108:	2302      	movs	r3, #2
 800910a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800910e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009110:	a804      	add	r0, sp, #16
 8009112:	f003 f94f 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8009116:	2303      	movs	r3, #3
 8009118:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800911c:	3408      	adds	r4, #8
 800911e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009120:	a804      	add	r0, sp, #16
 8009122:	f003 f947 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8009126:	f008 f895 	bl	8011254 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800912a:	260f      	movs	r6, #15
 800912c:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8009130:	2301      	movs	r3, #1
 8009132:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009136:	a804      	add	r0, sp, #16
 8009138:	f003 fab0 	bl	800c69c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800913c:	2310      	movs	r3, #16
 800913e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8009142:	2500      	movs	r5, #0
 8009144:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009148:	eb0d 0003 	add.w	r0, sp, r3
 800914c:	f003 faa6 	bl	800c69c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8009150:	2304      	movs	r3, #4
 8009152:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8009156:	4c2d      	ldr	r4, [pc, #180]	; (800920c <LmHandlerConfigure+0x1bc>)
 8009158:	78a3      	ldrb	r3, [r4, #2]
 800915a:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800915e:	a804      	add	r0, sp, #16
 8009160:	f003 fa9c 	bl	800c69c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8009164:	233a      	movs	r3, #58	; 0x3a
 8009166:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800916a:	6963      	ldr	r3, [r4, #20]
 800916c:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800916e:	a804      	add	r0, sp, #16
 8009170:	f003 fa94 	bl	800c69c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009174:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8009178:	a902      	add	r1, sp, #8
 800917a:	7820      	ldrb	r0, [r4, #0]
 800917c:	f004 ffea 	bl	800e154 <RegionGetPhyParam>
 8009180:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8009182:	1b43      	subs	r3, r0, r5
 8009184:	bf18      	it	ne
 8009186:	2301      	movne	r3, #1
 8009188:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800918a:	2014      	movs	r0, #20
 800918c:	f7ff ff50 	bl	8009030 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8009190:	79e0      	ldrb	r0, [r4, #7]
 8009192:	f003 ff29 	bl	800cfe8 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8009196:	4628      	mov	r0, r5
}
 8009198:	b00e      	add	sp, #56	; 0x38
 800919a:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800919c:	2328      	movs	r3, #40	; 0x28
 800919e:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 80091a2:	4b20      	ldr	r3, [pc, #128]	; (8009224 <LmHandlerConfigure+0x1d4>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	b14b      	cbz	r3, 80091be <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 80091aa:	a804      	add	r0, sp, #16
 80091ac:	f003 f902 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 80091b0:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <LmHandlerConfigure+0x1d4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f240 51cc 	movw	r1, #1484	; 0x5cc
 80091ba:	9805      	ldr	r0, [sp, #20]
 80091bc:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80091be:	2327      	movs	r3, #39	; 0x27
 80091c0:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80091c4:	a804      	add	r0, sp, #16
 80091c6:	f003 fa69 	bl	800c69c <LoRaMacMibSetRequestConfirm>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	f47f af6c 	bne.w	80090a8 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80091d6:	a804      	add	r0, sp, #16
 80091d8:	f003 f8ec 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 80091dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f43f af61 	beq.w	80090a8 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 80091e6:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <LmHandlerConfigure+0x1d0>)
 80091e8:	2201      	movs	r2, #1
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e75c      	b.n	80090a8 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 80091ee:	2305      	movs	r3, #5
 80091f0:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80091f4:	2300      	movs	r3, #0
 80091f6:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80091f8:	a804      	add	r0, sp, #16
 80091fa:	f003 fa4f 	bl	800c69c <LoRaMacMibSetRequestConfirm>
 80091fe:	e76f      	b.n	80090e0 <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	e7c8      	b.n	8009198 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 8009206:	f04f 30ff 	mov.w	r0, #4294967295
 800920a:	e7c5      	b.n	8009198 <LmHandlerConfigure+0x148>
 800920c:	2000081c 	.word	0x2000081c
 8009210:	20000800 	.word	0x20000800
 8009214:	08016c68 	.word	0x08016c68
 8009218:	20000844 	.word	0x20000844
 800921c:	2000085c 	.word	0x2000085c
 8009220:	200007f8 	.word	0x200007f8
 8009224:	20000804 	.word	0x20000804
 8009228:	200007e0 	.word	0x200007e0

0800922c <LmHandlerPackageRegister>:
{
 800922c:	b530      	push	{r4, r5, lr}
 800922e:	b083      	sub	sp, #12
 8009230:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	9301      	str	r3, [sp, #4]
    switch( id )
 8009236:	4604      	mov	r4, r0
 8009238:	b9d8      	cbnz	r0, 8009272 <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 800923a:	f000 fc1b 	bl	8009a74 <LmhpCompliancePackageFactory>
 800923e:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	b1f3      	cbz	r3, 8009282 <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 8009244:	4a10      	ldr	r2, [pc, #64]	; (8009288 <LmHandlerPackageRegister+0x5c>)
 8009246:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800924a:	4a10      	ldr	r2, [pc, #64]	; (800928c <LmHandlerPackageRegister+0x60>)
 800924c:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800924e:	4a10      	ldr	r2, [pc, #64]	; (8009290 <LmHandlerPackageRegister+0x64>)
 8009250:	6812      	ldr	r2, [r2, #0]
 8009252:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009254:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8009256:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8009258:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800925a:	490e      	ldr	r1, [pc, #56]	; (8009294 <LmHandlerPackageRegister+0x68>)
 800925c:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800925e:	6992      	ldr	r2, [r2, #24]
 8009260:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	22f2      	movs	r2, #242	; 0xf2
 8009266:	490c      	ldr	r1, [pc, #48]	; (8009298 <LmHandlerPackageRegister+0x6c>)
 8009268:	4628      	mov	r0, r5
 800926a:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800926c:	2000      	movs	r0, #0
}
 800926e:	b003      	add	sp, #12
 8009270:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8009272:	a901      	add	r1, sp, #4
 8009274:	f000 fc04 	bl	8009a80 <LmhpPackagesRegister>
 8009278:	2800      	cmp	r0, #0
 800927a:	d0e1      	beq.n	8009240 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	e7f5      	b.n	800926e <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 8009282:	f04f 30ff 	mov.w	r0, #4294967295
 8009286:	e7f2      	b.n	800926e <LmHandlerPackageRegister+0x42>
 8009288:	20000808 	.word	0x20000808
 800928c:	08008bc9 	.word	0x08008bc9
 8009290:	20000804 	.word	0x20000804
 8009294:	08008cb9 	.word	0x08008cb9
 8009298:	200006ec 	.word	0x200006ec

0800929c <LmHandlerInit>:
{
 800929c:	b500      	push	{lr}
 800929e:	b083      	sub	sp, #12
 80092a0:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 80092a2:	4b19      	ldr	r3, [pc, #100]	; (8009308 <LmHandlerInit+0x6c>)
 80092a4:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80092a6:	4b19      	ldr	r3, [pc, #100]	; (800930c <LmHandlerInit+0x70>)
 80092a8:	4a19      	ldr	r2, [pc, #100]	; (8009310 <LmHandlerInit+0x74>)
 80092aa:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80092ac:	4a19      	ldr	r2, [pc, #100]	; (8009314 <LmHandlerInit+0x78>)
 80092ae:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80092b0:	4a19      	ldr	r2, [pc, #100]	; (8009318 <LmHandlerInit+0x7c>)
 80092b2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80092b4:	4a19      	ldr	r2, [pc, #100]	; (800931c <LmHandlerInit+0x80>)
 80092b6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80092b8:	6802      	ldr	r2, [r0, #0]
 80092ba:	4b19      	ldr	r3, [pc, #100]	; (8009320 <LmHandlerInit+0x84>)
 80092bc:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80092be:	6842      	ldr	r2, [r0, #4]
 80092c0:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80092c2:	6882      	ldr	r2, [r0, #8]
 80092c4:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 80092c6:	68c2      	ldr	r2, [r0, #12]
 80092c8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80092ca:	4a16      	ldr	r2, [pc, #88]	; (8009324 <LmHandlerInit+0x88>)
 80092cc:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80092ce:	6982      	ldr	r2, [r0, #24]
 80092d0:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 80092d2:	4b15      	ldr	r3, [pc, #84]	; (8009328 <LmHandlerInit+0x8c>)
 80092d4:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 80092d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80092d8:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 80092da:	4a14      	ldr	r2, [pc, #80]	; (800932c <LmHandlerInit+0x90>)
 80092dc:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 80092de:	4a14      	ldr	r2, [pc, #80]	; (8009330 <LmHandlerInit+0x94>)
 80092e0:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 80092e2:	4619      	mov	r1, r3
 80092e4:	2000      	movs	r0, #0
 80092e6:	f7ff ffa1 	bl	800922c <LmHandlerPackageRegister>
 80092ea:	b930      	cbnz	r0, 80092fa <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 80092ec:	a801      	add	r0, sp, #4
 80092ee:	f000 fbc5 	bl	8009a7c <LmhpPackagesRegistrationInit>
 80092f2:	b928      	cbnz	r0, 8009300 <LmHandlerInit+0x64>
}
 80092f4:	b003      	add	sp, #12
 80092f6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80092fa:	f04f 30ff 	mov.w	r0, #4294967295
 80092fe:	e7f9      	b.n	80092f4 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	e7f6      	b.n	80092f4 <LmHandlerInit+0x58>
 8009306:	bf00      	nop
 8009308:	20000804 	.word	0x20000804
 800930c:	2000085c 	.word	0x2000085c
 8009310:	08008ae1 	.word	0x08008ae1
 8009314:	08008f71 	.word	0x08008f71
 8009318:	080093b5 	.word	0x080093b5
 800931c:	08008a8d 	.word	0x08008a8d
 8009320:	20000844 	.word	0x20000844
 8009324:	0800e0fd 	.word	0x0800e0fd
 8009328:	20000834 	.word	0x20000834
 800932c:	08008b91 	.word	0x08008b91
 8009330:	08008bad 	.word	0x08008bad

08009334 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8009334:	b161      	cbz	r1, 8009350 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 8009336:	b118      	cbz	r0, 8009340 <LmHandlerGetVersion+0xc>
 8009338:	2801      	cmp	r0, #1
 800933a:	d005      	beq.n	8009348 <LmHandlerGetVersion+0x14>
 800933c:	2000      	movs	r0, #0
 800933e:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8009340:	4a05      	ldr	r2, [pc, #20]	; (8009358 <LmHandlerGetVersion+0x24>)
 8009342:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8009344:	2000      	movs	r0, #0
            break;
 8009346:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8009348:	4a04      	ldr	r2, [pc, #16]	; (800935c <LmHandlerGetVersion+0x28>)
 800934a:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800934c:	2000      	movs	r0, #0
            break;
 800934e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	01000400 	.word	0x01000400
 800935c:	02010001 	.word	0x02010001

08009360 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8009360:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8009362:	f003 fe5f 	bl	800d024 <LoRaMacDeInitialization>
 8009366:	b900      	cbnz	r0, 800936a <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009368:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800936a:	f06f 0001 	mvn.w	r0, #1
 800936e:	e7fb      	b.n	8009368 <LmHandlerStop+0x8>

08009370 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8009370:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8009372:	f002 ff83 	bl	800c27c <LoRaMacHalt>
 8009376:	b900      	cbnz	r0, 800937a <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009378:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800937a:	f06f 0001 	mvn.w	r0, #1
 800937e:	e7fb      	b.n	8009378 <LmHandlerHalt+0x8>

08009380 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8009380:	b180      	cbz	r0, 80093a4 <LmHandlerGetTxPower+0x24>
{
 8009382:	b510      	push	{r4, lr}
 8009384:	b08a      	sub	sp, #40	; 0x28
 8009386:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8009388:	2321      	movs	r3, #33	; 0x21
 800938a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800938e:	4668      	mov	r0, sp
 8009390:	f003 f810 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
 8009394:	b948      	cbnz	r0, 80093aa <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8009396:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800939a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800939c:	4a04      	ldr	r2, [pc, #16]	; (80093b0 <LmHandlerGetTxPower+0x30>)
 800939e:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 80093a0:	b00a      	add	sp, #40	; 0x28
 80093a2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80093a8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295
 80093ae:	e7f7      	b.n	80093a0 <LmHandlerGetTxPower+0x20>
 80093b0:	2000081c 	.word	0x2000081c

080093b4 <MlmeConfirm>:
{
 80093b4:	b510      	push	{r4, lr}
 80093b6:	b08a      	sub	sp, #40	; 0x28
 80093b8:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80093ba:	4b2c      	ldr	r3, [pc, #176]	; (800946c <MlmeConfirm+0xb8>)
 80093bc:	2200      	movs	r2, #0
 80093be:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 80093c0:	7842      	ldrb	r2, [r0, #1]
 80093c2:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80093c4:	4b2a      	ldr	r3, [pc, #168]	; (8009470 <MlmeConfirm+0xbc>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	b10b      	cbz	r3, 80093d0 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80093cc:	4827      	ldr	r0, [pc, #156]	; (800946c <MlmeConfirm+0xb8>)
 80093ce:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80093d0:	4621      	mov	r1, r4
 80093d2:	2002      	movs	r0, #2
 80093d4:	f7ff fb24 	bl	8008a20 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80093d8:	7823      	ldrb	r3, [r4, #0]
 80093da:	2b05      	cmp	r3, #5
 80093dc:	d037      	beq.n	800944e <MlmeConfirm+0x9a>
 80093de:	2b0b      	cmp	r3, #11
 80093e0:	d03d      	beq.n	800945e <MlmeConfirm+0xaa>
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d001      	beq.n	80093ea <MlmeConfirm+0x36>
}
 80093e6:	b00a      	add	sp, #40	; 0x28
 80093e8:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 80093ea:	2306      	movs	r3, #6
 80093ec:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80093f0:	4668      	mov	r0, sp
 80093f2:	f002 ffdf 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80093f6:	9901      	ldr	r1, [sp, #4]
 80093f8:	4b1e      	ldr	r3, [pc, #120]	; (8009474 <MlmeConfirm+0xc0>)
 80093fa:	79d8      	ldrb	r0, [r3, #7]
 80093fc:	f007 fe6e 	bl	80110dc <SecureElementSetDevAddr>
 8009400:	b910      	cbnz	r0, 8009408 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8009402:	9a01      	ldr	r2, [sp, #4]
 8009404:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <MlmeConfirm+0xc4>)
 8009406:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8009408:	4c1a      	ldr	r4, [pc, #104]	; (8009474 <MlmeConfirm+0xc0>)
 800940a:	1d20      	adds	r0, r4, #4
 800940c:	f7ff fdf6 	bl	8008ffc <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8009410:	1d60      	adds	r0, r4, #5
 8009412:	f7ff ffb5 	bl	8009380 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009416:	4b15      	ldr	r3, [pc, #84]	; (800946c <MlmeConfirm+0xb8>)
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	b18b      	cbz	r3, 8009440 <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800941c:	4b15      	ldr	r3, [pc, #84]	; (8009474 <MlmeConfirm+0xc0>)
 800941e:	22ff      	movs	r2, #255	; 0xff
 8009420:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <MlmeConfirm+0xbc>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	b10b      	cbz	r3, 800942e <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800942a:	4812      	ldr	r0, [pc, #72]	; (8009474 <MlmeConfirm+0xc0>)
 800942c:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800942e:	4b0f      	ldr	r3, [pc, #60]	; (800946c <MlmeConfirm+0xb8>)
 8009430:	785b      	ldrb	r3, [r3, #1]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1d7      	bne.n	80093e6 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8009436:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <MlmeConfirm+0xc0>)
 8009438:	79d8      	ldrb	r0, [r3, #7]
 800943a:	f007 ff1d 	bl	8011278 <SecureElementPrintSessionKeys>
            break;
 800943e:	e7d2      	b.n	80093e6 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8009440:	2200      	movs	r2, #0
 8009442:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8009444:	4b0d      	ldr	r3, [pc, #52]	; (800947c <MlmeConfirm+0xc8>)
 8009446:	7858      	ldrb	r0, [r3, #1]
 8009448:	f7ff fd22 	bl	8008e90 <LmHandlerRequestClass>
 800944c:	e7e9      	b.n	8009422 <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 800944e:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <MlmeConfirm+0xcc>)
 8009450:	2201      	movs	r2, #1
 8009452:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8009454:	7a22      	ldrb	r2, [r4, #8]
 8009456:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8009458:	7a62      	ldrb	r2, [r4, #9]
 800945a:	74da      	strb	r2, [r3, #19]
            break;
 800945c:	e7c3      	b.n	80093e6 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800945e:	7863      	ldrb	r3, [r4, #1]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0c0      	beq.n	80093e6 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 8009464:	f7ff fc28 	bl	8008cb8 <LmHandlerDeviceTimeReq>
}
 8009468:	e7bd      	b.n	80093e6 <MlmeConfirm+0x32>
 800946a:	bf00      	nop
 800946c:	2000009c 	.word	0x2000009c
 8009470:	20000804 	.word	0x20000804
 8009474:	2000007c 	.word	0x2000007c
 8009478:	200007e0 	.word	0x200007e0
 800947c:	2000081c 	.word	0x2000081c
 8009480:	20000088 	.word	0x20000088

08009484 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8009484:	b510      	push	{r4, lr}
 8009486:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8009488:	f7ff ff72 	bl	8009370 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800948c:	4604      	mov	r4, r0
 800948e:	b148      	cbz	r0, 80094a4 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8009490:	b92c      	cbnz	r4, 800949e <LmHandlerNvmDataStore+0x1a>
 8009492:	4b18      	ldr	r3, [pc, #96]	; (80094f4 <LmHandlerNvmDataStore+0x70>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	b10b      	cbz	r3, 800949e <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800949a:	2001      	movs	r0, #1
 800949c:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800949e:	4620      	mov	r0, r4
 80094a0:	b00a      	add	sp, #40	; 0x28
 80094a2:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 80094a4:	f004 fe32 	bl	800e10c <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 80094a8:	f110 0f02 	cmn.w	r0, #2
 80094ac:	d012      	beq.n	80094d4 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 80094ae:	b9d0      	cbnz	r0, 80094e6 <LmHandlerNvmDataStore+0x62>
 80094b0:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <LmHandlerNvmDataStore+0x70>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	b1cb      	cbz	r3, 80094ec <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 80094b8:	2327      	movs	r3, #39	; 0x27
 80094ba:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80094be:	4668      	mov	r0, sp
 80094c0:	f002 ff78 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 80094c4:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <LmHandlerNvmDataStore+0x70>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 80094ce:	9801      	ldr	r0, [sp, #4]
 80094d0:	4798      	blx	r3
 80094d2:	e001      	b.n	80094d8 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80094d4:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80094d8:	f004 fe28 	bl	800e12c <NvmDataMgmtStoreEnd>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d0d7      	beq.n	8009490 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80094e0:	f04f 34ff 	mov.w	r4, #4294967295
 80094e4:	e7db      	b.n	800949e <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80094e6:	f04f 34ff 	mov.w	r4, #4294967295
 80094ea:	e7f5      	b.n	80094d8 <LmHandlerNvmDataStore+0x54>
 80094ec:	f04f 34ff 	mov.w	r4, #4294967295
 80094f0:	e7f2      	b.n	80094d8 <LmHandlerNvmDataStore+0x54>
 80094f2:	bf00      	nop
 80094f4:	20000804 	.word	0x20000804

080094f8 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 80094f8:	4b01      	ldr	r3, [pc, #4]	; (8009500 <LmhpComplianceIsInitialized+0x8>)
 80094fa:	7818      	ldrb	r0, [r3, #0]
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20000870 	.word	0x20000870

08009504 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8009504:	4b01      	ldr	r3, [pc, #4]	; (800950c <LmhpComplianceIsTxPending+0x8>)
 8009506:	7858      	ldrb	r0, [r3, #1]
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000870 	.word	0x20000870

08009510 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8009510:	4770      	bx	lr

08009512 <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8009512:	4770      	bx	lr

08009514 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8009514:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <OnProcessTimer+0x18>)
 8009518:	7a9b      	ldrb	r3, [r3, #10]
 800951a:	b113      	cbz	r3, 8009522 <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 800951c:	4b03      	ldr	r3, [pc, #12]	; (800952c <OnProcessTimer+0x18>)
 800951e:	2201      	movs	r2, #1
 8009520:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8009522:	4b03      	ldr	r3, [pc, #12]	; (8009530 <OnProcessTimer+0x1c>)
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	b103      	cbz	r3, 800952a <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 8009528:	4798      	blx	r3
    }
}
 800952a:	bd08      	pop	{r3, pc}
 800952c:	20000870 	.word	0x20000870
 8009530:	200000b8 	.word	0x200000b8

08009534 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8009534:	4b8c      	ldr	r3, [pc, #560]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 8205 	beq.w	8009948 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800953e:	78c3      	ldrb	r3, [r0, #3]
 8009540:	b90b      	cbnz	r3, 8009546 <LmhpComplianceOnMcpsIndication+0x12>
 8009542:	7b83      	ldrb	r3, [r0, #14]
 8009544:	b11b      	cbz	r3, 800954e <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8009546:	4a88      	ldr	r2, [pc, #544]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 8009548:	8a13      	ldrh	r3, [r2, #16]
 800954a:	3301      	adds	r3, #1
 800954c:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800954e:	7b43      	ldrb	r3, [r0, #13]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 81f9 	beq.w	8009948 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8009556:	78c3      	ldrb	r3, [r0, #3]
 8009558:	2be0      	cmp	r3, #224	; 0xe0
 800955a:	f040 81f5 	bne.w	8009948 <LmhpComplianceOnMcpsIndication+0x414>
{
 800955e:	b570      	push	{r4, r5, r6, lr}
 8009560:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 8009562:	4b81      	ldr	r3, [pc, #516]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 8009564:	2200      	movs	r2, #0
 8009566:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8009568:	6884      	ldr	r4, [r0, #8]
 800956a:	7823      	ldrb	r3, [r4, #0]
 800956c:	2b7f      	cmp	r3, #127	; 0x7f
 800956e:	f200 8093 	bhi.w	8009698 <LmhpComplianceOnMcpsIndication+0x164>
 8009572:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009576:	0080      	.short	0x0080
 8009578:	00a2009d 	.word	0x00a2009d
 800957c:	00b200aa 	.word	0x00b200aa
 8009580:	00c600bf 	.word	0x00c600bf
 8009584:	00f000df 	.word	0x00f000df
 8009588:	0131011d 	.word	0x0131011d
 800958c:	00910091 	.word	0x00910091
 8009590:	00910091 	.word	0x00910091
 8009594:	00910091 	.word	0x00910091
 8009598:	00910091 	.word	0x00910091
 800959c:	00910091 	.word	0x00910091
 80095a0:	00910091 	.word	0x00910091
 80095a4:	00910091 	.word	0x00910091
 80095a8:	00910091 	.word	0x00910091
 80095ac:	00910091 	.word	0x00910091
 80095b0:	00910091 	.word	0x00910091
 80095b4:	01350091 	.word	0x01350091
 80095b8:	0140013c 	.word	0x0140013c
 80095bc:	00910091 	.word	0x00910091
 80095c0:	00910091 	.word	0x00910091
 80095c4:	00910091 	.word	0x00910091
 80095c8:	00910091 	.word	0x00910091
 80095cc:	00910091 	.word	0x00910091
 80095d0:	00910091 	.word	0x00910091
 80095d4:	00910091 	.word	0x00910091
 80095d8:	00910091 	.word	0x00910091
 80095dc:	00910091 	.word	0x00910091
 80095e0:	00910091 	.word	0x00910091
 80095e4:	00910091 	.word	0x00910091
 80095e8:	00910091 	.word	0x00910091
 80095ec:	00910091 	.word	0x00910091
 80095f0:	00910091 	.word	0x00910091
 80095f4:	00910091 	.word	0x00910091
 80095f8:	00910091 	.word	0x00910091
 80095fc:	00910091 	.word	0x00910091
 8009600:	00910091 	.word	0x00910091
 8009604:	00910091 	.word	0x00910091
 8009608:	00910091 	.word	0x00910091
 800960c:	00910091 	.word	0x00910091
 8009610:	00910091 	.word	0x00910091
 8009614:	00910091 	.word	0x00910091
 8009618:	00910091 	.word	0x00910091
 800961c:	00910091 	.word	0x00910091
 8009620:	00910091 	.word	0x00910091
 8009624:	00910091 	.word	0x00910091
 8009628:	00910091 	.word	0x00910091
 800962c:	00910091 	.word	0x00910091
 8009630:	00910091 	.word	0x00910091
 8009634:	00910091 	.word	0x00910091
 8009638:	00910091 	.word	0x00910091
 800963c:	00910091 	.word	0x00910091
 8009640:	00910091 	.word	0x00910091
 8009644:	00910091 	.word	0x00910091
 8009648:	00910091 	.word	0x00910091
 800964c:	00910091 	.word	0x00910091
 8009650:	00910091 	.word	0x00910091
 8009654:	00910091 	.word	0x00910091
 8009658:	00910091 	.word	0x00910091
 800965c:	00910091 	.word	0x00910091
 8009660:	00910091 	.word	0x00910091
 8009664:	00910091 	.word	0x00910091
 8009668:	00910091 	.word	0x00910091
 800966c:	00910091 	.word	0x00910091
 8009670:	016c014b 	.word	0x016c014b
 8009674:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8009676:	4b3c      	ldr	r3, [pc, #240]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	2101      	movs	r1, #1
 800967c:	7299      	strb	r1, [r3, #10]
 800967e:	2000      	movs	r0, #0
 8009680:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8009682:	68d8      	ldr	r0, [r3, #12]
 8009684:	7a9a      	ldrb	r2, [r3, #10]
 8009686:	1854      	adds	r4, r2, r1
 8009688:	729c      	strb	r4, [r3, #10]
 800968a:	2406      	movs	r4, #6
 800968c:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800968e:	68d8      	ldr	r0, [r3, #12]
 8009690:	7a9a      	ldrb	r2, [r3, #10]
 8009692:	1854      	adds	r4, r2, r1
 8009694:	729c      	strb	r4, [r3, #10]
 8009696:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8009698:	4b33      	ldr	r3, [pc, #204]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 800969a:	7a9b      	ldrb	r3, [r3, #10]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 814c 	beq.w	800993a <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 80096a2:	4b32      	ldr	r3, [pc, #200]	; (800976c <LmhpComplianceOnMcpsIndication+0x238>)
 80096a4:	7a5b      	ldrb	r3, [r3, #9]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 813d 	beq.w	8009926 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 80096ac:	b016      	add	sp, #88	; 0x58
 80096ae:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 80096b0:	4b2d      	ldr	r3, [pc, #180]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 80096b8:	e7ee      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 80096ba:	4b2d      	ldr	r3, [pc, #180]	; (8009770 <LmhpComplianceOnMcpsIndication+0x23c>)
 80096bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0ea      	beq.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80096c2:	2101      	movs	r1, #1
 80096c4:	2002      	movs	r0, #2
 80096c6:	4798      	blx	r3
 80096c8:	e7e6      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 80096ca:	7862      	ldrb	r2, [r4, #1]
 80096cc:	4b26      	ldr	r3, [pc, #152]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 80096ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 80096d8:	e7de      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 80096da:	2304      	movs	r3, #4
 80096dc:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 80096e0:	7863      	ldrb	r3, [r4, #1]
 80096e2:	3b00      	subs	r3, #0
 80096e4:	bf18      	it	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80096ec:	a801      	add	r0, sp, #4
 80096ee:	f002 ffd5 	bl	800c69c <LoRaMacMibSetRequestConfirm>
                break;
 80096f2:	e7d1      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 80096f4:	7860      	ldrb	r0, [r4, #1]
 80096f6:	3800      	subs	r0, #0
 80096f8:	bf18      	it	ne
 80096fa:	2001      	movne	r0, #1
 80096fc:	f003 fc74 	bl	800cfe8 <LoRaMacTestSetDutyCycleOn>
                break;
 8009700:	e7ca      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8009702:	ad01      	add	r5, sp, #4
 8009704:	4e1b      	ldr	r6, [pc, #108]	; (8009774 <LmhpComplianceOnMcpsIndication+0x240>)
 8009706:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800970a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800970c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800970e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009712:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8009716:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8009718:	2b0a      	cmp	r3, #10
 800971a:	d8bd      	bhi.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800971c:	4a16      	ldr	r2, [pc, #88]	; (8009778 <LmhpComplianceOnMcpsIndication+0x244>)
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	6852      	ldr	r2, [r2, #4]
 8009722:	2a00      	cmp	r2, #0
 8009724:	d0b8      	beq.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8009726:	a916      	add	r1, sp, #88	; 0x58
 8009728:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800972c:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8009730:	4790      	blx	r2
                break;
 8009732:	e7b1      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8009734:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8009736:	1e53      	subs	r3, r2, #1
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b01      	cmp	r3, #1
 800973c:	d8ac      	bhi.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800973e:	1e50      	subs	r0, r2, #1
 8009740:	bf18      	it	ne
 8009742:	2001      	movne	r0, #1
 8009744:	4b08      	ldr	r3, [pc, #32]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 8009746:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8009748:	4b0b      	ldr	r3, [pc, #44]	; (8009778 <LmhpComplianceOnMcpsIndication+0x244>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0a2      	beq.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8009752:	4798      	blx	r3
 8009754:	e7a0      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8009756:	4b04      	ldr	r3, [pc, #16]	; (8009768 <LmhpComplianceOnMcpsIndication+0x234>)
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	2101      	movs	r1, #1
 800975c:	7299      	strb	r1, [r3, #10]
 800975e:	2308      	movs	r3, #8
 8009760:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8009762:	460b      	mov	r3, r1
 8009764:	e01b      	b.n	800979e <LmhpComplianceOnMcpsIndication+0x26a>
 8009766:	bf00      	nop
 8009768:	20000870 	.word	0x20000870
 800976c:	200008a8 	.word	0x200008a8
 8009770:	200000b8 	.word	0x200000b8
 8009774:	0801666c 	.word	0x0801666c
 8009778:	2000086c 	.word	0x2000086c
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800977c:	6882      	ldr	r2, [r0, #8]
 800977e:	f101 0c01 	add.w	ip, r1, #1
 8009782:	5c52      	ldrb	r2, [r2, r1]
 8009784:	4971      	ldr	r1, [pc, #452]	; (800994c <LmhpComplianceOnMcpsIndication+0x418>)
 8009786:	68cd      	ldr	r5, [r1, #12]
 8009788:	7a8c      	ldrb	r4, [r1, #10]
 800978a:	f104 0e01 	add.w	lr, r4, #1
 800978e:	f881 e00a 	strb.w	lr, [r1, #10]
 8009792:	3201      	adds	r2, #1
 8009794:	552a      	strb	r2, [r5, r4]
                     i++ )
 8009796:	3301      	adds	r3, #1
 8009798:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800979a:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800979e:	4a6b      	ldr	r2, [pc, #428]	; (800994c <LmhpComplianceOnMcpsIndication+0x418>)
 80097a0:	7a52      	ldrb	r2, [r2, #9]
 80097a2:	7b04      	ldrb	r4, [r0, #12]
 80097a4:	42a2      	cmp	r2, r4
 80097a6:	bf28      	it	cs
 80097a8:	4622      	movcs	r2, r4
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d8e6      	bhi.n	800977c <LmhpComplianceOnMcpsIndication+0x248>
 80097ae:	e773      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 80097b0:	4b66      	ldr	r3, [pc, #408]	; (800994c <LmhpComplianceOnMcpsIndication+0x418>)
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	2101      	movs	r1, #1
 80097b6:	7299      	strb	r1, [r3, #10]
 80097b8:	2109      	movs	r1, #9
 80097ba:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 80097bc:	8a18      	ldrh	r0, [r3, #16]
 80097be:	68d9      	ldr	r1, [r3, #12]
 80097c0:	7a9a      	ldrb	r2, [r3, #10]
 80097c2:	1c54      	adds	r4, r2, #1
 80097c4:	729c      	strb	r4, [r3, #10]
 80097c6:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 80097c8:	8a1a      	ldrh	r2, [r3, #16]
 80097ca:	68d8      	ldr	r0, [r3, #12]
 80097cc:	7a99      	ldrb	r1, [r3, #10]
 80097ce:	1c4c      	adds	r4, r1, #1
 80097d0:	729c      	strb	r4, [r3, #10]
 80097d2:	0a13      	lsrs	r3, r2, #8
 80097d4:	5443      	strb	r3, [r0, r1]
                break;
 80097d6:	e75f      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 80097d8:	4b5c      	ldr	r3, [pc, #368]	; (800994c <LmhpComplianceOnMcpsIndication+0x418>)
 80097da:	2200      	movs	r2, #0
 80097dc:	821a      	strh	r2, [r3, #16]
                break;
 80097de:	e75b      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 80097e0:	2305      	movs	r3, #5
 80097e2:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 80097e6:	a801      	add	r0, sp, #4
 80097e8:	f003 fa0c 	bl	800cc04 <LoRaMacMlmeRequest>
                break;
 80097ec:	e754      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 80097ee:	4b58      	ldr	r3, [pc, #352]	; (8009950 <LmhpComplianceOnMcpsIndication+0x41c>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	4798      	blx	r3
                break;
 80097f4:	e750      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 80097f6:	7860      	ldrb	r0, [r4, #1]
 80097f8:	4b54      	ldr	r3, [pc, #336]	; (800994c <LmhpComplianceOnMcpsIndication+0x418>)
 80097fa:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 80097fc:	4b55      	ldr	r3, [pc, #340]	; (8009954 <LmhpComplianceOnMcpsIndication+0x420>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f43f af48 	beq.w	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8009808:	4798      	blx	r3
 800980a:	e745      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 800980c:	7b03      	ldrb	r3, [r0, #12]
 800980e:	2b07      	cmp	r3, #7
 8009810:	f47f af42 	bne.w	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8009814:	2306      	movs	r3, #6
 8009816:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800981a:	7863      	ldrb	r3, [r4, #1]
 800981c:	78a2      	ldrb	r2, [r4, #2]
 800981e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8009822:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009826:	78e3      	ldrb	r3, [r4, #3]
 8009828:	7922      	ldrb	r2, [r4, #4]
 800982a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800982e:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8009834:	2264      	movs	r2, #100	; 0x64
 8009836:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800983a:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800983c:	6883      	ldr	r3, [r0, #8]
 800983e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8009842:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8009846:	a801      	add	r0, sp, #4
 8009848:	f003 f9dc 	bl	800cc04 <LoRaMacMlmeRequest>
                break;
 800984c:	e724      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800984e:	233b      	movs	r3, #59	; 0x3b
 8009850:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 8009854:	2300      	movs	r3, #0
 8009856:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 800985a:	a80c      	add	r0, sp, #48	; 0x30
 800985c:	f002 ff1e 	bl	800c69c <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8009860:	4b3a      	ldr	r3, [pc, #232]	; (800994c <LmhpComplianceOnMcpsIndication+0x418>)
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8009868:	e716      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 800986a:	232a      	movs	r3, #42	; 0x2a
 800986c:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8009870:	a801      	add	r0, sp, #4
 8009872:	f002 fd9f 	bl	800c3b4 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8009876:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8009878:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800987a:	4b34      	ldr	r3, [pc, #208]	; (800994c <LmhpComplianceOnMcpsIndication+0x418>)
 800987c:	68dc      	ldr	r4, [r3, #12]
 800987e:	7a98      	ldrb	r0, [r3, #10]
 8009880:	1c45      	adds	r5, r0, #1
 8009882:	729d      	strb	r5, [r3, #10]
 8009884:	257f      	movs	r5, #127	; 0x7f
 8009886:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8009888:	4832      	ldr	r0, [pc, #200]	; (8009954 <LmhpComplianceOnMcpsIndication+0x420>)
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	68dd      	ldr	r5, [r3, #12]
 800988e:	7a9c      	ldrb	r4, [r3, #10]
 8009890:	1c66      	adds	r6, r4, #1
 8009892:	729e      	strb	r6, [r3, #10]
 8009894:	78c6      	ldrb	r6, [r0, #3]
 8009896:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8009898:	68dd      	ldr	r5, [r3, #12]
 800989a:	7a9c      	ldrb	r4, [r3, #10]
 800989c:	1c66      	adds	r6, r4, #1
 800989e:	729e      	strb	r6, [r3, #10]
 80098a0:	7886      	ldrb	r6, [r0, #2]
 80098a2:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80098a4:	68dd      	ldr	r5, [r3, #12]
 80098a6:	7a9c      	ldrb	r4, [r3, #10]
 80098a8:	1c66      	adds	r6, r4, #1
 80098aa:	729e      	strb	r6, [r3, #10]
 80098ac:	7846      	ldrb	r6, [r0, #1]
 80098ae:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 80098b0:	68dd      	ldr	r5, [r3, #12]
 80098b2:	7a9c      	ldrb	r4, [r3, #10]
 80098b4:	1c66      	adds	r6, r4, #1
 80098b6:	729e      	strb	r6, [r3, #10]
 80098b8:	7800      	ldrb	r0, [r0, #0]
 80098ba:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 80098bc:	68dc      	ldr	r4, [r3, #12]
 80098be:	7a98      	ldrb	r0, [r3, #10]
 80098c0:	1c45      	adds	r5, r0, #1
 80098c2:	729d      	strb	r5, [r3, #10]
 80098c4:	f3c1 6507 	ubfx	r5, r1, #24, #8
 80098c8:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 80098ca:	68dc      	ldr	r4, [r3, #12]
 80098cc:	7a98      	ldrb	r0, [r3, #10]
 80098ce:	1c45      	adds	r5, r0, #1
 80098d0:	729d      	strb	r5, [r3, #10]
 80098d2:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80098d6:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 80098d8:	68dc      	ldr	r4, [r3, #12]
 80098da:	7a98      	ldrb	r0, [r3, #10]
 80098dc:	1c45      	adds	r5, r0, #1
 80098de:	729d      	strb	r5, [r3, #10]
 80098e0:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80098e4:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 80098e6:	68dc      	ldr	r4, [r3, #12]
 80098e8:	7a98      	ldrb	r0, [r3, #10]
 80098ea:	1c45      	adds	r5, r0, #1
 80098ec:	729d      	strb	r5, [r3, #10]
 80098ee:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 80098f0:	68d8      	ldr	r0, [r3, #12]
 80098f2:	7a99      	ldrb	r1, [r3, #10]
 80098f4:	1c4c      	adds	r4, r1, #1
 80098f6:	729c      	strb	r4, [r3, #10]
 80098f8:	f3c2 6407 	ubfx	r4, r2, #24, #8
 80098fc:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 80098fe:	68d8      	ldr	r0, [r3, #12]
 8009900:	7a99      	ldrb	r1, [r3, #10]
 8009902:	1c4c      	adds	r4, r1, #1
 8009904:	729c      	strb	r4, [r3, #10]
 8009906:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800990a:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800990c:	68d8      	ldr	r0, [r3, #12]
 800990e:	7a99      	ldrb	r1, [r3, #10]
 8009910:	1c4c      	adds	r4, r1, #1
 8009912:	729c      	strb	r4, [r3, #10]
 8009914:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009918:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800991a:	68d8      	ldr	r0, [r3, #12]
 800991c:	7a99      	ldrb	r1, [r3, #10]
 800991e:	1c4c      	adds	r4, r1, #1
 8009920:	729c      	strb	r4, [r3, #10]
 8009922:	5442      	strb	r2, [r0, r1]
                break;
 8009924:	e6b8      	b.n	8009698 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8009926:	4c0c      	ldr	r4, [pc, #48]	; (8009958 <LmhpComplianceOnMcpsIndication+0x424>)
 8009928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800992c:	4620      	mov	r0, r4
 800992e:	f009 ffb3 	bl	8013898 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8009932:	4620      	mov	r0, r4
 8009934:	f009 ff6a 	bl	801380c <UTIL_TIMER_Start>
 8009938:	e6b8      	b.n	80096ac <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 800993a:	4807      	ldr	r0, [pc, #28]	; (8009958 <LmhpComplianceOnMcpsIndication+0x424>)
 800993c:	f009 ff0c 	bl	8013758 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8009940:	4b02      	ldr	r3, [pc, #8]	; (800994c <LmhpComplianceOnMcpsIndication+0x418>)
 8009942:	2200      	movs	r2, #0
 8009944:	705a      	strb	r2, [r3, #1]
 8009946:	e6b1      	b.n	80096ac <LmhpComplianceOnMcpsIndication+0x178>
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20000870 	.word	0x20000870
 8009950:	200000b8 	.word	0x200000b8
 8009954:	2000086c 	.word	0x2000086c
 8009958:	200008a8 	.word	0x200008a8

0800995c <LmhpComplianceProcess>:
{
 800995c:	b530      	push	{r4, r5, lr}
 800995e:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8009960:	4b27      	ldr	r3, [pc, #156]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	b993      	cbnz	r3, 800998c <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8009966:	4b26      	ldr	r3, [pc, #152]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 8009968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800996c:	2b00      	cmp	r3, #0
 800996e:	d13d      	bne.n	80099ec <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8009970:	4b23      	ldr	r3, [pc, #140]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 8009972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009976:	b13b      	cbz	r3, 8009988 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8009978:	4b21      	ldr	r3, [pc, #132]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8009980:	4b20      	ldr	r3, [pc, #128]	; (8009a04 <LmhpComplianceProcess+0xa8>)
 8009982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009984:	b103      	cbz	r3, 8009988 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8009986:	4798      	blx	r3
}
 8009988:	b003      	add	sp, #12
 800998a:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800998c:	f009 fea4 	bl	80136d8 <UTIL_TIMER_GetCurrentTime>
 8009990:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8009992:	4b1b      	ldr	r3, [pc, #108]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 8009994:	685d      	ldr	r5, [r3, #4]
 8009996:	f7ff f9a3 	bl	8008ce0 <LmHandlerGetDutyCycleWaitTime>
 800999a:	4405      	add	r5, r0
 800999c:	42a5      	cmp	r5, r4
 800999e:	d2e7      	bcs.n	8009970 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 80099a0:	4b17      	ldr	r3, [pc, #92]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 80099a2:	7a9b      	ldrb	r3, [r3, #10]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d0e3      	beq.n	8009970 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 80099a8:	22e0      	movs	r2, #224	; 0xe0
 80099aa:	f88d 2000 	strb.w	r2, [sp]
 80099ae:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 80099b2:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 80099b4:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 80099b6:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 80099b8:	2201      	movs	r2, #1
 80099ba:	7a19      	ldrb	r1, [r3, #8]
 80099bc:	4668      	mov	r0, sp
 80099be:	f7ff f9bd 	bl	8008d3c <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 80099c2:	b110      	cbz	r0, 80099ca <LmhpComplianceProcess+0x6e>
 80099c4:	f110 0f07 	cmn.w	r0, #7
 80099c8:	d106      	bne.n	80099d8 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 80099ca:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 80099d0:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 80099d2:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 80099d4:	605c      	str	r4, [r3, #4]
 80099d6:	e7cb      	b.n	8009970 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 80099d8:	4d0b      	ldr	r5, [pc, #44]	; (8009a08 <LmhpComplianceProcess+0xac>)
 80099da:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80099de:	4628      	mov	r0, r5
 80099e0:	f009 ff5a 	bl	8013898 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 80099e4:	4628      	mov	r0, r5
 80099e6:	f009 ff11 	bl	801380c <UTIL_TIMER_Start>
 80099ea:	e7f2      	b.n	80099d2 <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 80099ec:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <LmhpComplianceProcess+0xa4>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 80099f4:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 80099f8:	f7ff fa4a 	bl	8008e90 <LmHandlerRequestClass>
 80099fc:	e7b8      	b.n	8009970 <LmhpComplianceProcess+0x14>
 80099fe:	bf00      	nop
 8009a00:	20000870 	.word	0x20000870
 8009a04:	200000b8 	.word	0x200000b8
 8009a08:	200008a8 	.word	0x200008a8

08009a0c <LmhpComplianceInit>:
{
 8009a0c:	b530      	push	{r4, r5, lr}
 8009a0e:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8009a10:	b188      	cbz	r0, 8009a36 <LmhpComplianceInit+0x2a>
 8009a12:	4603      	mov	r3, r0
 8009a14:	b179      	cbz	r1, 8009a36 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8009a16:	4813      	ldr	r0, [pc, #76]	; (8009a64 <LmhpComplianceInit+0x58>)
 8009a18:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8009a1a:	4b13      	ldr	r3, [pc, #76]	; (8009a68 <LmhpComplianceInit+0x5c>)
 8009a1c:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8009a1e:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8009a20:	2201      	movs	r2, #1
 8009a22:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8009a24:	2200      	movs	r2, #0
 8009a26:	9200      	str	r2, [sp, #0]
 8009a28:	4b10      	ldr	r3, [pc, #64]	; (8009a6c <LmhpComplianceInit+0x60>)
 8009a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a2e:	4810      	ldr	r0, [pc, #64]	; (8009a70 <LmhpComplianceInit+0x64>)
 8009a30:	f009 fe34 	bl	801369c <UTIL_TIMER_Create>
 8009a34:	e004      	b.n	8009a40 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	4a0a      	ldr	r2, [pc, #40]	; (8009a64 <LmhpComplianceInit+0x58>)
 8009a3a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8009a3c:	4a0a      	ldr	r2, [pc, #40]	; (8009a68 <LmhpComplianceInit+0x5c>)
 8009a3e:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8009a40:	4c09      	ldr	r4, [pc, #36]	; (8009a68 <LmhpComplianceInit+0x5c>)
 8009a42:	2500      	movs	r5, #0
 8009a44:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8009a46:	2220      	movs	r2, #32
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f104 0014 	add.w	r0, r4, #20
 8009a4e:	f007 fc6c 	bl	801132a <memset1>
    ComplianceTestState.IsTxPending = false;
 8009a52:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8009a54:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8009a56:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8009a5a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8009a5e:	b003      	add	sp, #12
 8009a60:	bd30      	pop	{r4, r5, pc}
 8009a62:	bf00      	nop
 8009a64:	2000086c 	.word	0x2000086c
 8009a68:	20000870 	.word	0x20000870
 8009a6c:	08009515 	.word	0x08009515
 8009a70:	200008a8 	.word	0x200008a8

08009a74 <LmhpCompliancePackageFactory>:
}
 8009a74:	4800      	ldr	r0, [pc, #0]	; (8009a78 <LmhpCompliancePackageFactory+0x4>)
 8009a76:	4770      	bx	lr
 8009a78:	200000b8 	.word	0x200000b8

08009a7c <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	4770      	bx	lr

08009a80 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	4770      	bx	lr
	...

08009a88 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009a88:	4b07      	ldr	r3, [pc, #28]	; (8009aa8 <UpdateRxSlotIdleState+0x20>)
 8009a8a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d004      	beq.n	8009a9c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8009a92:	4b06      	ldr	r3, [pc, #24]	; (8009aac <UpdateRxSlotIdleState+0x24>)
 8009a94:	2206      	movs	r2, #6
 8009a96:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 8009a9a:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009a9c:	4b03      	ldr	r3, [pc, #12]	; (8009aac <UpdateRxSlotIdleState+0x24>)
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	20008000 	.word	0x20008000
 8009aac:	200008c4 	.word	0x200008c4

08009ab0 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8009ab0:	4b01      	ldr	r3, [pc, #4]	; (8009ab8 <LoRaMacEnableRequests+0x8>)
 8009ab2:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 8009ab6:	4770      	bx	lr
 8009ab8:	200008c4 	.word	0x200008c4

08009abc <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8009abc:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8009abe:	4b15      	ldr	r3, [pc, #84]	; (8009b14 <LoRaMacHandleIndicationEvents+0x58>)
 8009ac0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009ac4:	f013 0f08 	tst.w	r3, #8
 8009ac8:	d00e      	beq.n	8009ae8 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009aca:	4812      	ldr	r0, [pc, #72]	; (8009b14 <LoRaMacHandleIndicationEvents+0x58>)
 8009acc:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 8009ad0:	f36f 03c3 	bfc	r3, #3, #1
 8009ad4:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8009ad8:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8009ae2:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 8009ae6:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009ae8:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <LoRaMacHandleIndicationEvents+0x58>)
 8009aea:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009aee:	f013 0f02 	tst.w	r3, #2
 8009af2:	d00e      	beq.n	8009b12 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009af4:	4807      	ldr	r0, [pc, #28]	; (8009b14 <LoRaMacHandleIndicationEvents+0x58>)
 8009af6:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 8009afa:	f36f 0341 	bfc	r3, #1, #1
 8009afe:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8009b02:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8009b0c:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 8009b10:	4798      	blx	r3
    }
}
 8009b12:	bd08      	pop	{r3, pc}
 8009b14:	200008c4 	.word	0x200008c4

08009b18 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8009b18:	b110      	cbz	r0, 8009b20 <CheckForMinimumAbpDatarate+0x8>
 8009b1a:	2901      	cmp	r1, #1
 8009b1c:	d001      	beq.n	8009b22 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8009b1e:	2000      	movs	r0, #0
}
 8009b20:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8009b22:	2a00      	cmp	r2, #0
 8009b24:	d0fc      	beq.n	8009b20 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8009b26:	2000      	movs	r0, #0
 8009b28:	4770      	bx	lr
	...

08009b2c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009b2c:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <LoRaMacCheckForRxAbort+0x20>)
 8009b2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009b32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b36:	d008      	beq.n	8009b4a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009b38:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009b3c:	4a03      	ldr	r2, [pc, #12]	; (8009b4c <LoRaMacCheckForRxAbort+0x20>)
 8009b3e:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009b42:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8009b46:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8009b4a:	4770      	bx	lr
 8009b4c:	200008c4 	.word	0x200008c4

08009b50 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8009b50:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <CalculateBackOff+0x1c>)
 8009b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b54:	b94b      	cbnz	r3, 8009b6a <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009b56:	4a05      	ldr	r2, [pc, #20]	; (8009b6c <CalculateBackOff+0x1c>)
 8009b58:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 8009b5c:	4904      	ldr	r1, [pc, #16]	; (8009b70 <CalculateBackOff+0x20>)
 8009b5e:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 8009b62:	3b01      	subs	r3, #1
 8009b64:	fb01 f303 	mul.w	r3, r1, r3
 8009b68:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8009b6a:	4770      	bx	lr
 8009b6c:	20008000 	.word	0x20008000
 8009b70:	200008c4 	.word	0x200008c4

08009b74 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8009b74:	b508      	push	{r3, lr}
 8009b76:	4684      	mov	ip, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009b7c:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <SetTxContinuousWave+0x24>)
 8009b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b80:	4662      	mov	r2, ip
 8009b82:	b249      	sxtb	r1, r1
 8009b84:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009b86:	4a05      	ldr	r2, [pc, #20]	; (8009b9c <SetTxContinuousWave+0x28>)
 8009b88:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009b8c:	f043 0302 	orr.w	r3, r3, #2
 8009b90:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8009b94:	2000      	movs	r0, #0
 8009b96:	bd08      	pop	{r3, pc}
 8009b98:	080173cc 	.word	0x080173cc
 8009b9c:	200008c4 	.word	0x200008c4

08009ba0 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	b1f8      	cbz	r0, 8009be4 <DetermineFrameType+0x44>
 8009ba4:	b301      	cbz	r1, 8009be8 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009ba6:	7b03      	ldrb	r3, [r0, #12]
 8009ba8:	f013 030f 	ands.w	r3, r3, #15
 8009bac:	d005      	beq.n	8009bba <DetermineFrameType+0x1a>
 8009bae:	f890 0020 	ldrb.w	r0, [r0, #32]
 8009bb2:	b110      	cbz	r0, 8009bba <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	7008      	strb	r0, [r1, #0]
 8009bb8:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8009bba:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8009bbe:	b910      	cbnz	r0, 8009bc6 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	700b      	strb	r3, [r1, #0]
 8009bc4:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009bc6:	b92b      	cbnz	r3, 8009bd4 <DetermineFrameType+0x34>
 8009bc8:	f892 0020 	ldrb.w	r0, [r2, #32]
 8009bcc:	b910      	cbnz	r0, 8009bd4 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	700b      	strb	r3, [r1, #0]
 8009bd2:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8009bd4:	b953      	cbnz	r3, 8009bec <DetermineFrameType+0x4c>
 8009bd6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009bda:	b14a      	cbz	r2, 8009bf0 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8009bdc:	2203      	movs	r2, #3
 8009bde:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8009be0:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8009be2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009be4:	2003      	movs	r0, #3
 8009be6:	4770      	bx	lr
 8009be8:	2003      	movs	r0, #3
 8009bea:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8009bec:	2018      	movs	r0, #24
 8009bee:	4770      	bx	lr
 8009bf0:	2018      	movs	r0, #24
}
 8009bf2:	4770      	bx	lr

08009bf4 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8009bf4:	4288      	cmp	r0, r1
 8009bf6:	d201      	bcs.n	8009bfc <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	4770      	bx	lr
        return true;
 8009bfc:	2001      	movs	r0, #1
}
 8009bfe:	4770      	bx	lr

08009c00 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8009c00:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8009c02:	4b0b      	ldr	r3, [pc, #44]	; (8009c30 <CheckRetransUnconfirmedUplink+0x30>)
 8009c04:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8009c08:	4b0a      	ldr	r3, [pc, #40]	; (8009c34 <CheckRetransUnconfirmedUplink+0x34>)
 8009c0a:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 8009c0e:	f7ff fff1 	bl	8009bf4 <CheckRetrans>
 8009c12:	b950      	cbnz	r0, 8009c2a <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009c14:	4b07      	ldr	r3, [pc, #28]	; (8009c34 <CheckRetransUnconfirmedUplink+0x34>)
 8009c16:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009c1a:	f013 0f02 	tst.w	r3, #2
 8009c1e:	d004      	beq.n	8009c2a <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009c20:	4b04      	ldr	r3, [pc, #16]	; (8009c34 <CheckRetransUnconfirmedUplink+0x34>)
 8009c22:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d900      	bls.n	8009c2c <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8009c2a:	bd08      	pop	{r3, pc}
            return true;
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	e7fc      	b.n	8009c2a <CheckRetransUnconfirmedUplink+0x2a>
 8009c30:	20008000 	.word	0x20008000
 8009c34:	200008c4 	.word	0x200008c4

08009c38 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8009c38:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8009c3a:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <CheckRetransConfirmedUplink+0x28>)
 8009c3c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8009c40:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <CheckRetransConfirmedUplink+0x2c>)
 8009c42:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 8009c46:	f7ff ffd5 	bl	8009bf4 <CheckRetrans>
 8009c4a:	b940      	cbnz	r0, 8009c5e <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <CheckRetransConfirmedUplink+0x2c>)
 8009c4e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009c52:	f013 0f02 	tst.w	r3, #2
 8009c56:	d002      	beq.n	8009c5e <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009c58:	4b02      	ldr	r3, [pc, #8]	; (8009c64 <CheckRetransConfirmedUplink+0x2c>)
 8009c5a:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 8009c5e:	bd08      	pop	{r3, pc}
 8009c60:	20008000 	.word	0x20008000
 8009c64:	200008c4 	.word	0x200008c4

08009c68 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8009c68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c6c:	d000      	beq.n	8009c70 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 8009c6e:	3001      	adds	r0, #1
    }
    return counter;
}
 8009c70:	4770      	bx	lr
	...

08009c74 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8009c74:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009c76:	4b12      	ldr	r3, [pc, #72]	; (8009cc0 <StopRetransmission+0x4c>)
 8009c78:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009c7c:	f013 0f02 	tst.w	r3, #2
 8009c80:	d004      	beq.n	8009c8c <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009c82:	4b0f      	ldr	r3, [pc, #60]	; (8009cc0 <StopRetransmission+0x4c>)
 8009c84:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d908      	bls.n	8009c9e <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <StopRetransmission+0x50>)
 8009c8e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8009c92:	b123      	cbz	r3, 8009c9e <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8009c94:	4c0b      	ldr	r4, [pc, #44]	; (8009cc4 <StopRetransmission+0x50>)
 8009c96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009c98:	f7ff ffe6 	bl	8009c68 <IncreaseAdrAckCounter>
 8009c9c:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8009c9e:	4b08      	ldr	r3, [pc, #32]	; (8009cc0 <StopRetransmission+0x4c>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8009ca6:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8009caa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009cae:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009cb2:	f022 0202 	bic.w	r2, r2, #2
 8009cb6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8009cba:	2001      	movs	r0, #1
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	bf00      	nop
 8009cc0:	200008c4 	.word	0x200008c4
 8009cc4:	20008000 	.word	0x20008000

08009cc8 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8009cc8:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009cca:	4b04      	ldr	r3, [pc, #16]	; (8009cdc <OnMacProcessNotify+0x14>)
 8009ccc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009cd0:	b113      	cbz	r3, 8009cd8 <OnMacProcessNotify+0x10>
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	b103      	cbz	r3, 8009cd8 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009cd6:	4798      	blx	r3
    }
}
 8009cd8:	bd08      	pop	{r3, pc}
 8009cda:	bf00      	nop
 8009cdc:	200008c4 	.word	0x200008c4

08009ce0 <OnRadioRxError>:
{
 8009ce0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8009ce2:	4a04      	ldr	r2, [pc, #16]	; (8009cf4 <OnRadioRxError+0x14>)
 8009ce4:	7813      	ldrb	r3, [r2, #0]
 8009ce6:	f043 0304 	orr.w	r3, r3, #4
 8009cea:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009cec:	f7ff ffec 	bl	8009cc8 <OnMacProcessNotify>
}
 8009cf0:	bd08      	pop	{r3, pc}
 8009cf2:	bf00      	nop
 8009cf4:	200008c0 	.word	0x200008c0

08009cf8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8009cf8:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8009cfa:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <CallNvmDataChangeCallback+0x14>)
 8009cfc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009d00:	b113      	cbz	r3, 8009d08 <CallNvmDataChangeCallback+0x10>
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	b103      	cbz	r3, 8009d08 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8009d06:	4798      	blx	r3
    }
}
 8009d08:	bd08      	pop	{r3, pc}
 8009d0a:	bf00      	nop
 8009d0c:	200008c4 	.word	0x200008c4

08009d10 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8009d10:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <IsRequestPending+0x14>)
 8009d12:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 8009d16:	f010 0005 	ands.w	r0, r0, #5
 8009d1a:	d100      	bne.n	8009d1e <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8009d1c:	4770      	bx	lr
        return 1;
 8009d1e:	2001      	movs	r0, #1
 8009d20:	e7fc      	b.n	8009d1c <IsRequestPending+0xc>
 8009d22:	bf00      	nop
 8009d24:	200008c4 	.word	0x200008c4

08009d28 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009d28:	b500      	push	{lr}
 8009d2a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009d2e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8009d32:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8009d36:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009d3a:	220d      	movs	r2, #13
 8009d3c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009d40:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009d44:	b113      	cbz	r3, 8009d4c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009d46:	230e      	movs	r3, #14
 8009d48:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d4c:	a902      	add	r1, sp, #8
 8009d4e:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009d50:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009d54:	f004 f9fe 	bl	800e154 <RegionGetPhyParam>
 8009d58:	9001      	str	r0, [sp, #4]
}
 8009d5a:	b2c0      	uxtb	r0, r0
 8009d5c:	b005      	add	sp, #20
 8009d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d62:	bf00      	nop
 8009d64:	20008000 	.word	0x20008000

08009d68 <ValidatePayloadLength>:
{
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009d6e:	4608      	mov	r0, r1
 8009d70:	f7ff ffda 	bl	8009d28 <GetMaxAppPayloadWithoutFOptsLength>
 8009d74:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8009d76:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d303      	bcc.n	8009d84 <ValidatePayloadLength+0x1c>
 8009d7c:	2aff      	cmp	r2, #255	; 0xff
 8009d7e:	d903      	bls.n	8009d88 <ValidatePayloadLength+0x20>
    return false;
 8009d80:	2000      	movs	r0, #0
 8009d82:	e000      	b.n	8009d86 <ValidatePayloadLength+0x1e>
 8009d84:	2000      	movs	r0, #0
}
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8009d88:	2001      	movs	r0, #1
 8009d8a:	e7fc      	b.n	8009d86 <ValidatePayloadLength+0x1e>

08009d8c <ProcessRadioTxDone>:
{
 8009d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d8e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009d90:	4b3b      	ldr	r3, [pc, #236]	; (8009e80 <ProcessRadioTxDone+0xf4>)
 8009d92:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d002      	beq.n	8009da0 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8009d9a:	4b3a      	ldr	r3, [pc, #232]	; (8009e84 <ProcessRadioTxDone+0xf8>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009da0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009da4:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8009da6:	f009 fc97 	bl	80136d8 <UTIL_TIMER_GetCurrentTime>
 8009daa:	4b37      	ldr	r3, [pc, #220]	; (8009e88 <ProcessRadioTxDone+0xfc>)
 8009dac:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8009dae:	4c37      	ldr	r4, [pc, #220]	; (8009e8c <ProcessRadioTxDone+0x100>)
 8009db0:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8009db4:	1a2d      	subs	r5, r5, r0
 8009db6:	f504 7660 	add.w	r6, r4, #896	; 0x380
 8009dba:	4429      	add	r1, r5
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f009 fd6b 	bl	8013898 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f009 fd22 	bl	801380c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8009dc8:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009dcc:	f504 7666 	add.w	r6, r4, #920	; 0x398
 8009dd0:	4429      	add	r1, r5
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f009 fd60 	bl	8013898 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f009 fd17 	bl	801380c <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dde:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 8009de2:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d134      	bne.n	8009e54 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009dea:	4b28      	ldr	r3, [pc, #160]	; (8009e8c <ProcessRadioTxDone+0x100>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009df2:	4b25      	ldr	r3, [pc, #148]	; (8009e88 <ProcessRadioTxDone+0xfc>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4c22      	ldr	r4, [pc, #136]	; (8009e80 <ProcessRadioTxDone+0xf4>)
 8009df8:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8009dfa:	4f24      	ldr	r7, [pc, #144]	; (8009e8c <ProcessRadioTxDone+0x100>)
 8009dfc:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 8009e00:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009e04:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009e06:	ae0c      	add	r6, sp, #48	; 0x30
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f009 fbd9 	bl	80135c0 <SysTimeGetMcuTime>
 8009e0e:	ad02      	add	r5, sp, #8
 8009e10:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8009e1a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f009 fb6b 	bl	80134fa <SysTimeSub>
 8009e24:	ab07      	add	r3, sp, #28
 8009e26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009e2a:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009e2e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8009e32:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e3a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 8009e3e:	b90b      	cbnz	r3, 8009e44 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 8009e40:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009e44:	a904      	add	r1, sp, #16
 8009e46:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <ProcessRadioTxDone+0xf4>)
 8009e48:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009e4c:	f004 f99a 	bl	800e184 <RegionSetBandTxDone>
}
 8009e50:	b00f      	add	sp, #60	; 0x3c
 8009e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8009e54:	2315      	movs	r3, #21
 8009e56:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e5a:	a90a      	add	r1, sp, #40	; 0x28
 8009e5c:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <ProcessRadioTxDone+0xf4>)
 8009e5e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009e62:	f004 f977 	bl	800e154 <RegionGetPhyParam>
 8009e66:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009e68:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009e6c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009e70:	4401      	add	r1, r0
 8009e72:	4620      	mov	r0, r4
 8009e74:	f009 fd10 	bl	8013898 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f009 fcc7 	bl	801380c <UTIL_TIMER_Start>
 8009e7e:	e7b8      	b.n	8009df2 <ProcessRadioTxDone+0x66>
 8009e80:	20008000 	.word	0x20008000
 8009e84:	080173cc 	.word	0x080173cc
 8009e88:	20000e80 	.word	0x20000e80
 8009e8c:	200008c4 	.word	0x200008c4

08009e90 <OnRetransmitTimeoutTimerEvent>:
{
 8009e90:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8009e92:	4c07      	ldr	r4, [pc, #28]	; (8009eb0 <OnRetransmitTimeoutTimerEvent+0x20>)
 8009e94:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8009e98:	f009 fc5e 	bl	8013758 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8009e9c:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8009ea0:	b113      	cbz	r3, 8009ea8 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 8009ea8:	f7ff ff0e 	bl	8009cc8 <OnMacProcessNotify>
}
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	bf00      	nop
 8009eb0:	200008c4 	.word	0x200008c4

08009eb4 <PrepareRxDoneAbort>:
{
 8009eb4:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009eb6:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <PrepareRxDoneAbort+0x3c>)
 8009eb8:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009ebc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ec0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8009ec4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8009ec8:	b973      	cbnz	r3, 8009ee8 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <PrepareRxDoneAbort+0x3c>)
 8009ecc:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 8009ed0:	f042 0202 	orr.w	r2, r2, #2
 8009ed4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	f042 0210 	orr.w	r2, r2, #16
 8009ede:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 8009ee2:	f7ff fdd1 	bl	8009a88 <UpdateRxSlotIdleState>
}
 8009ee6:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8009ee8:	2000      	movs	r0, #0
 8009eea:	f7ff ffd1 	bl	8009e90 <OnRetransmitTimeoutTimerEvent>
 8009eee:	e7ec      	b.n	8009eca <PrepareRxDoneAbort+0x16>
 8009ef0:	200008c4 	.word	0x200008c4

08009ef4 <LoRaMacCheckForBeaconAcquisition>:
{
 8009ef4:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009ef6:	200b      	movs	r0, #11
 8009ef8:	f003 fbb2 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 8009efc:	b188      	cbz	r0, 8009f22 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009efe:	4b0b      	ldr	r3, [pc, #44]	; (8009f2c <LoRaMacCheckForBeaconAcquisition+0x38>)
 8009f00:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009f04:	f010 0f01 	tst.w	r0, #1
 8009f08:	d10d      	bne.n	8009f26 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009f0a:	f010 0004 	ands.w	r0, r0, #4
 8009f0e:	d009      	beq.n	8009f24 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009f10:	461a      	mov	r2, r3
 8009f12:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009f16:	f023 0302 	bic.w	r3, r3, #2
 8009f1a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8009f1e:	2001      	movs	r0, #1
 8009f20:	e000      	b.n	8009f24 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8009f22:	2000      	movs	r0, #0
}
 8009f24:	bd08      	pop	{r3, pc}
    return 0x00;
 8009f26:	2000      	movs	r0, #0
 8009f28:	e7fc      	b.n	8009f24 <LoRaMacCheckForBeaconAcquisition+0x30>
 8009f2a:	bf00      	nop
 8009f2c:	200008c4 	.word	0x200008c4

08009f30 <GetFCntDown>:
{
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	9c04      	ldr	r4, [sp, #16]
 8009f34:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8009f36:	b1f2      	cbz	r2, 8009f76 <GetFCntDown+0x46>
 8009f38:	4694      	mov	ip, r2
 8009f3a:	b1f4      	cbz	r4, 8009f7a <GetFCntDown+0x4a>
 8009f3c:	b1fd      	cbz	r5, 8009f7e <GetFCntDown+0x4e>
    switch( addrID )
 8009f3e:	b188      	cbz	r0, 8009f64 <GetFCntDown+0x34>
 8009f40:	2801      	cmp	r0, #1
 8009f42:	d11e      	bne.n	8009f82 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8009f44:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d002      	beq.n	8009f52 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	7023      	strb	r3, [r4, #0]
 8009f50:	e00a      	b.n	8009f68 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009f52:	b121      	cbz	r1, 8009f5e <GetFCntDown+0x2e>
 8009f54:	2903      	cmp	r1, #3
 8009f56:	d002      	beq.n	8009f5e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	7023      	strb	r3, [r4, #0]
 8009f5c:	e004      	b.n	8009f68 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8009f5e:	2302      	movs	r3, #2
 8009f60:	7023      	strb	r3, [r4, #0]
 8009f62:	e001      	b.n	8009f68 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8009f64:	2304      	movs	r3, #4
 8009f66:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8009f68:	462a      	mov	r2, r5
 8009f6a:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8009f6e:	7820      	ldrb	r0, [r4, #0]
 8009f70:	f003 fda0 	bl	800dab4 <LoRaMacCryptoGetFCntDown>
}
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009f76:	2009      	movs	r0, #9
 8009f78:	e7fc      	b.n	8009f74 <GetFCntDown+0x44>
 8009f7a:	2009      	movs	r0, #9
 8009f7c:	e7fa      	b.n	8009f74 <GetFCntDown+0x44>
 8009f7e:	2009      	movs	r0, #9
 8009f80:	e7f8      	b.n	8009f74 <GetFCntDown+0x44>
    switch( addrID )
 8009f82:	2005      	movs	r0, #5
 8009f84:	e7f6      	b.n	8009f74 <GetFCntDown+0x44>

08009f86 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009f86:	2801      	cmp	r0, #1
 8009f88:	d900      	bls.n	8009f8c <RemoveMacCommands+0x6>
 8009f8a:	4770      	bx	lr
{
 8009f8c:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8009f8e:	2a01      	cmp	r2, #1
 8009f90:	d105      	bne.n	8009f9e <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8009f92:	f011 0f20 	tst.w	r1, #32
 8009f96:	d004      	beq.n	8009fa2 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009f98:	f003 fa0e 	bl	800d3b8 <LoRaMacCommandsRemoveStickyAnsCmds>
 8009f9c:	e001      	b.n	8009fa2 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8009f9e:	f003 fa0b 	bl	800d3b8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8009fa2:	bd08      	pop	{r3, pc}

08009fa4 <ProcessMacCommands>:
{
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	b08f      	sub	sp, #60	; 0x3c
 8009faa:	4698      	mov	r8, r3
    uint8_t status = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009fb2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8009fb6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	f200 82da 	bhi.w	800a574 <ProcessMacCommands+0x5d0>
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8009fc6:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 8009fca:	42bc      	cmp	r4, r7
 8009fcc:	f080 82d2 	bcs.w	800a574 <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009fd0:	5d28      	ldrb	r0, [r5, r4]
 8009fd2:	f003 fa49 	bl	800d468 <LoRaMacCommandsGetCmdSize>
 8009fd6:	4420      	add	r0, r4
 8009fd8:	42b8      	cmp	r0, r7
 8009fda:	f300 82cb 	bgt.w	800a574 <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 8009fde:	1c66      	adds	r6, r4, #1
 8009fe0:	b2f6      	uxtb	r6, r6
 8009fe2:	5d2b      	ldrb	r3, [r5, r4]
 8009fe4:	3b02      	subs	r3, #2
 8009fe6:	2b11      	cmp	r3, #17
 8009fe8:	f200 82c4 	bhi.w	800a574 <ProcessMacCommands+0x5d0>
 8009fec:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009ff0:	00280012 	.word	0x00280012
 8009ff4:	00c000ad 	.word	0x00c000ad
 8009ff8:	011e0106 	.word	0x011e0106
 8009ffc:	01740157 	.word	0x01740157
 800a000:	02c201c0 	.word	0x02c201c0
 800a004:	01f002c2 	.word	0x01f002c2
 800a008:	02c202c2 	.word	0x02c202c2
 800a00c:	02690252 	.word	0x02690252
 800a010:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800a014:	2005      	movs	r0, #5
 800a016:	f003 fb23 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 800a01a:	b908      	cbnz	r0, 800a020 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800a01c:	4634      	mov	r4, r6
 800a01e:	e7d4      	b.n	8009fca <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800a020:	2105      	movs	r1, #5
 800a022:	2000      	movs	r0, #0
 800a024:	f003 fad0 	bl	800d5c8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800a028:	1ca3      	adds	r3, r4, #2
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	5da9      	ldrb	r1, [r5, r6]
 800a02e:	4aa7      	ldr	r2, [pc, #668]	; (800a2cc <ProcessMacCommands+0x328>)
 800a030:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800a034:	3403      	adds	r4, #3
 800a036:	b2e4      	uxtb	r4, r4
 800a038:	5ceb      	ldrb	r3, [r5, r3]
 800a03a:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 800a03e:	e7c4      	b.n	8009fca <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800a040:	2300      	movs	r3, #0
 800a042:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800a046:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800a04a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800a04e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800a052:	f1b9 0f00 	cmp.w	r9, #0
 800a056:	d036      	beq.n	800a0c6 <ProcessMacCommands+0x122>
                    macIndex += 4;
 800a058:	3405      	adds	r4, #5
 800a05a:	b2e4      	uxtb	r4, r4
 800a05c:	e7b5      	b.n	8009fca <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800a05e:	2305      	movs	r3, #5
 800a060:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a064:	e050      	b.n	800a108 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800a066:	4b9a      	ldr	r3, [pc, #616]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a068:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a06c:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800a070:	4293      	cmp	r3, r2
 800a072:	da03      	bge.n	800a07c <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800a074:	4b96      	ldr	r3, [pc, #600]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a076:	2101      	movs	r1, #1
 800a078:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800a07c:	4b94      	ldr	r3, [pc, #592]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a07e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800a082:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800a086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800a08a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800a08e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800a092:	e04d      	b.n	800a130 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800a094:	2201      	movs	r2, #1
 800a096:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800a09a:	2003      	movs	r0, #3
 800a09c:	f003 f918 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a0a0:	3401      	adds	r4, #1
 800a0a2:	b2e4      	uxtb	r4, r4
 800a0a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a0a8:	498a      	ldr	r1, [pc, #552]	; (800a2d4 <ProcessMacCommands+0x330>)
 800a0aa:	fba1 2103 	umull	r2, r1, r1, r3
 800a0ae:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800a0b2:	d3ef      	bcc.n	800a094 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800a0b4:	4433      	add	r3, r6
 800a0b6:	b2de      	uxtb	r6, r3
 800a0b8:	1e74      	subs	r4, r6, #1
 800a0ba:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800a0bc:	42a7      	cmp	r7, r4
 800a0be:	d93a      	bls.n	800a136 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800a0c0:	5d2b      	ldrb	r3, [r5, r4]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d136      	bne.n	800a134 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800a0c6:	1e73      	subs	r3, r6, #1
 800a0c8:	442b      	add	r3, r5
 800a0ca:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a0cc:	4b80      	ldr	r3, [pc, #512]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a0ce:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800a0d2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0d6:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800a0da:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a0de:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a0e2:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a0e6:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800a0ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a0ee:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800a0f2:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800a0f6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800a0fa:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	d0ae      	beq.n	800a05e <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a100:	1bbb      	subs	r3, r7, r6
 800a102:	3301      	adds	r3, #1
 800a104:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800a108:	ab05      	add	r3, sp, #20
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	ab03      	add	r3, sp, #12
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	f10d 030b 	add.w	r3, sp, #11
 800a114:	f10d 020a 	add.w	r2, sp, #10
 800a118:	a907      	add	r1, sp, #28
 800a11a:	486d      	ldr	r0, [pc, #436]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a11c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800a120:	f004 f8b0 	bl	800e284 <RegionLinkAdrReq>
 800a124:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800a128:	f000 0007 	and.w	r0, r0, #7
 800a12c:	2807      	cmp	r0, #7
 800a12e:	d09a      	beq.n	800a066 <ProcessMacCommands+0xc2>
{
 800a130:	2400      	movs	r4, #0
 800a132:	e7b7      	b.n	800a0a4 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800a134:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800a136:	42bc      	cmp	r4, r7
 800a138:	d204      	bcs.n	800a144 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800a13a:	3c01      	subs	r4, #1
 800a13c:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800a13e:	f04f 0901 	mov.w	r9, #1
 800a142:	e742      	b.n	8009fca <ProcessMacCommands+0x26>
 800a144:	f04f 0901 	mov.w	r9, #1
                break;
 800a148:	e73f      	b.n	8009fca <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800a14a:	3402      	adds	r4, #2
 800a14c:	b2e4      	uxtb	r4, r4
 800a14e:	5dab      	ldrb	r3, [r5, r6]
 800a150:	f003 030f 	and.w	r3, r3, #15
 800a154:	495e      	ldr	r1, [pc, #376]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a156:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800a15a:	2201      	movs	r2, #1
 800a15c:	fa02 f303 	lsl.w	r3, r2, r3
 800a160:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800a164:	2200      	movs	r2, #0
 800a166:	a90b      	add	r1, sp, #44	; 0x2c
 800a168:	2004      	movs	r0, #4
 800a16a:	f003 f8b1 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                break;
 800a16e:	e72c      	b.n	8009fca <ProcessMacCommands+0x26>
                status = 0x07;
 800a170:	2307      	movs	r3, #7
 800a172:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800a176:	5dab      	ldrb	r3, [r5, r6]
 800a178:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a17c:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800a180:	57ab      	ldrsb	r3, [r5, r6]
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800a18a:	1ca3      	adds	r3, r4, #2
 800a18c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800a18e:	1ce1      	adds	r1, r4, #3
 800a190:	b2c9      	uxtb	r1, r1
 800a192:	5ceb      	ldrb	r3, [r5, r3]
 800a194:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a196:	1d22      	adds	r2, r4, #4
 800a198:	b2d2      	uxtb	r2, r2
 800a19a:	5c69      	ldrb	r1, [r5, r1]
 800a19c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a1a0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a1a2:	3405      	adds	r4, #5
 800a1a4:	b2e4      	uxtb	r4, r4
 800a1a6:	5caa      	ldrb	r2, [r5, r2]
 800a1a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1ac:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800a1ae:	2264      	movs	r2, #100	; 0x64
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800a1b6:	a907      	add	r1, sp, #28
 800a1b8:	4b45      	ldr	r3, [pc, #276]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a1ba:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a1be:	f004 f87d 	bl	800e2bc <RegionRxParamSetupReq>
 800a1c2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800a1c6:	f000 0307 	and.w	r3, r0, #7
 800a1ca:	2b07      	cmp	r3, #7
 800a1cc:	d007      	beq.n	800a1de <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800a1ce:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	a90b      	add	r1, sp, #44	; 0x2c
 800a1d6:	2005      	movs	r0, #5
 800a1d8:	f003 f87a 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                break;
 800a1dc:	e6f5      	b.n	8009fca <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800a1de:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a1e2:	4b3b      	ldr	r3, [pc, #236]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a1e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800a1e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800a1ec:	9a08      	ldr	r2, [sp, #32]
 800a1ee:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800a1f0:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800a1f2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800a1f6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800a1fa:	e7e8      	b.n	800a1ce <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800a1fc:	4b33      	ldr	r3, [pc, #204]	; (800a2cc <ProcessMacCommands+0x328>)
 800a1fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a202:	b17b      	cbz	r3, 800a224 <ProcessMacCommands+0x280>
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	b17b      	cbz	r3, 800a228 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800a208:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800a20a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800a20e:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800a212:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800a216:	2202      	movs	r2, #2
 800a218:	a90b      	add	r1, sp, #44	; 0x2c
 800a21a:	2006      	movs	r0, #6
 800a21c:	f003 f858 	bl	800d2d0 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800a220:	4634      	mov	r4, r6
                break;
 800a222:	e6d2      	b.n	8009fca <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800a224:	20ff      	movs	r0, #255	; 0xff
 800a226:	e7f0      	b.n	800a20a <ProcessMacCommands+0x266>
 800a228:	20ff      	movs	r0, #255	; 0xff
 800a22a:	e7ee      	b.n	800a20a <ProcessMacCommands+0x266>
                status = 0x03;
 800a22c:	2303      	movs	r3, #3
 800a22e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800a232:	1ca3      	adds	r3, r4, #2
 800a234:	b2db      	uxtb	r3, r3
 800a236:	57aa      	ldrsb	r2, [r5, r6]
 800a238:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800a23c:	aa07      	add	r2, sp, #28
 800a23e:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800a240:	1ce2      	adds	r2, r4, #3
 800a242:	b2d2      	uxtb	r2, r2
 800a244:	5ceb      	ldrb	r3, [r5, r3]
 800a246:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a248:	1d21      	adds	r1, r4, #4
 800a24a:	b2c9      	uxtb	r1, r1
 800a24c:	5caa      	ldrb	r2, [r5, r2]
 800a24e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a252:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a254:	1d62      	adds	r2, r4, #5
 800a256:	b2d2      	uxtb	r2, r2
 800a258:	5c69      	ldrb	r1, [r5, r1]
 800a25a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a25e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800a260:	2164      	movs	r1, #100	; 0x64
 800a262:	fb01 f303 	mul.w	r3, r1, r3
 800a266:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800a26c:	3406      	adds	r4, #6
 800a26e:	b2e4      	uxtb	r4, r4
 800a270:	56ab      	ldrsb	r3, [r5, r2]
 800a272:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800a276:	a905      	add	r1, sp, #20
 800a278:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a27a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a27e:	f004 f82c 	bl	800e2da <RegionNewChannelReq>
 800a282:	b2c3      	uxtb	r3, r0
 800a284:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800a288:	2800      	cmp	r0, #0
 800a28a:	f6ff ae9e 	blt.w	8009fca <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800a28e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800a292:	2201      	movs	r2, #1
 800a294:	a90b      	add	r1, sp, #44	; 0x2c
 800a296:	2007      	movs	r0, #7
 800a298:	f003 f81a 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                break;
 800a29c:	e695      	b.n	8009fca <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a29e:	3402      	adds	r4, #2
 800a2a0:	b2e4      	uxtb	r4, r4
 800a2a2:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800a2a4:	f013 030f 	ands.w	r3, r3, #15
 800a2a8:	d100      	bne.n	800a2ac <ProcessMacCommands+0x308>
                    delay++;
 800a2aa:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800a2ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2b0:	fb02 f303 	mul.w	r3, r2, r3
 800a2b4:	4a06      	ldr	r2, [pc, #24]	; (800a2d0 <ProcessMacCommands+0x32c>)
 800a2b6:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a2b8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800a2bc:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800a2be:	2200      	movs	r2, #0
 800a2c0:	a90b      	add	r1, sp, #44	; 0x2c
 800a2c2:	2008      	movs	r0, #8
 800a2c4:	f003 f804 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                break;
 800a2c8:	e67f      	b.n	8009fca <ProcessMacCommands+0x26>
 800a2ca:	bf00      	nop
 800a2cc:	200008c4 	.word	0x200008c4
 800a2d0:	20008000 	.word	0x20008000
 800a2d4:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800a2d8:	3402      	adds	r4, #2
 800a2da:	b2e4      	uxtb	r4, r4
 800a2dc:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800a2e4:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800a2e8:	f013 0f20 	tst.w	r3, #32
 800a2ec:	d002      	beq.n	800a2f4 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800a2f4:	f013 0f10 	tst.w	r3, #16
 800a2f8:	d002      	beq.n	800a300 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800a300:	f003 030f 	and.w	r3, r3, #15
 800a304:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800a308:	a903      	add	r1, sp, #12
 800a30a:	4b9c      	ldr	r3, [pc, #624]	; (800a57c <ProcessMacCommands+0x5d8>)
 800a30c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a310:	f003 fff2 	bl	800e2f8 <RegionTxParamSetupReq>
 800a314:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a318:	f43f ae57 	beq.w	8009fca <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800a31c:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800a320:	4e96      	ldr	r6, [pc, #600]	; (800a57c <ProcessMacCommands+0x5d8>)
 800a322:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800a326:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800a32a:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800a32e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a332:	4a93      	ldr	r2, [pc, #588]	; (800a580 <ProcessMacCommands+0x5dc>)
 800a334:	5cd0      	ldrb	r0, [r2, r3]
 800a336:	f7f6 fcc5 	bl	8000cc4 <__aeabi_ui2f>
 800a33a:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800a33e:	2302      	movs	r3, #2
 800a340:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a344:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a348:	a907      	add	r1, sp, #28
 800a34a:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800a34e:	f003 ff01 	bl	800e154 <RegionGetPhyParam>
 800a352:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800a354:	b240      	sxtb	r0, r0
 800a356:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800a35a:	4298      	cmp	r0, r3
 800a35c:	bfb8      	it	lt
 800a35e:	4618      	movlt	r0, r3
 800a360:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800a364:	2200      	movs	r2, #0
 800a366:	a90b      	add	r1, sp, #44	; 0x2c
 800a368:	2009      	movs	r0, #9
 800a36a:	f002 ffb1 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                break;
 800a36e:	e62c      	b.n	8009fca <ProcessMacCommands+0x26>
                status = 0x03;
 800a370:	2303      	movs	r3, #3
 800a372:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800a376:	1ca3      	adds	r3, r4, #2
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	5daa      	ldrb	r2, [r5, r6]
 800a37c:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800a380:	1ce1      	adds	r1, r4, #3
 800a382:	b2c9      	uxtb	r1, r1
 800a384:	5ceb      	ldrb	r3, [r5, r3]
 800a386:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a388:	1d22      	adds	r2, r4, #4
 800a38a:	b2d2      	uxtb	r2, r2
 800a38c:	5c69      	ldrb	r1, [r5, r1]
 800a38e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a392:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a394:	3405      	adds	r4, #5
 800a396:	b2e4      	uxtb	r4, r4
 800a398:	5caa      	ldrb	r2, [r5, r2]
 800a39a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800a3a0:	2264      	movs	r2, #100	; 0x64
 800a3a2:	fb02 f303 	mul.w	r3, r2, r3
 800a3a6:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800a3a8:	a907      	add	r1, sp, #28
 800a3aa:	4b74      	ldr	r3, [pc, #464]	; (800a57c <ProcessMacCommands+0x5d8>)
 800a3ac:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a3b0:	f003 ffb1 	bl	800e316 <RegionDlChannelReq>
 800a3b4:	b2c3      	uxtb	r3, r0
 800a3b6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	f6ff ae05 	blt.w	8009fca <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800a3c0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	a90b      	add	r1, sp, #44	; 0x2c
 800a3c8:	200a      	movs	r0, #10
 800a3ca:	f002 ff81 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                break;
 800a3ce:	e5fc      	b.n	8009fca <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800a3d0:	2009      	movs	r0, #9
 800a3d2:	f003 f945 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 800a3d6:	b928      	cbnz	r0, 800a3e4 <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a3d8:	4b6a      	ldr	r3, [pc, #424]	; (800a584 <ProcessMacCommands+0x5e0>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 800a3e0:	4634      	mov	r4, r6
 800a3e2:	e5f2      	b.n	8009fca <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800a3e4:	2109      	movs	r1, #9
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f003 f8ee 	bl	800d5c8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800a3ec:	a903      	add	r1, sp, #12
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9303      	str	r3, [sp, #12]
 800a3f2:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800a3f4:	f10d 0a14 	add.w	sl, sp, #20
 800a3f8:	9305      	str	r3, [sp, #20]
 800a3fa:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800a3fc:	f10d 0b1c 	add.w	fp, sp, #28
 800a400:	9307      	str	r3, [sp, #28]
 800a402:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800a404:	1ca0      	adds	r0, r4, #2
 800a406:	b2c0      	uxtb	r0, r0
 800a408:	5dab      	ldrb	r3, [r5, r6]
 800a40a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800a40c:	1ce2      	adds	r2, r4, #3
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	5c28      	ldrb	r0, [r5, r0]
 800a412:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a416:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a418:	1d20      	adds	r0, r4, #4
 800a41a:	b2c0      	uxtb	r0, r0
 800a41c:	5caa      	ldrb	r2, [r5, r2]
 800a41e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a422:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a424:	1d62      	adds	r2, r4, #5
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	5c28      	ldrb	r0, [r5, r0]
 800a42a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a42e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a430:	3406      	adds	r4, #6
 800a432:	b2e4      	uxtb	r4, r4
 800a434:	5caa      	ldrb	r2, [r5, r2]
 800a436:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a43a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a43e:	fb00 f202 	mul.w	r2, r0, r2
 800a442:	0a12      	lsrs	r2, r2, #8
 800a444:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800a448:	c903      	ldmia	r1, {r0, r1}
 800a44a:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a44e:	4a4e      	ldr	r2, [pc, #312]	; (800a588 <ProcessMacCommands+0x5e4>)
 800a450:	441a      	add	r2, r3
 800a452:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800a454:	4658      	mov	r0, fp
 800a456:	f009 f891 	bl	801357c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800a45a:	4e4a      	ldr	r6, [pc, #296]	; (800a584 <ProcessMacCommands+0x5e0>)
 800a45c:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800a466:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800a46a:	a80c      	add	r0, sp, #48	; 0x30
 800a46c:	f009 f845 	bl	80134fa <SysTimeSub>
 800a470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a476:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800a47a:	4650      	mov	r0, sl
 800a47c:	f009 f81e 	bl	80134bc <SysTimeAdd>
                    SysTimeSet( sysTime );
 800a480:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a484:	f009 f858 	bl	8013538 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800a488:	f002 fe88 	bl	800d19c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800a48c:	2301      	movs	r3, #1
 800a48e:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 800a492:	e59a      	b.n	8009fca <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800a494:	200c      	movs	r0, #12
 800a496:	f003 f8e3 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 800a49a:	b908      	cbnz	r0, 800a4a0 <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 800a49c:	4634      	mov	r4, r6
 800a49e:	e594      	b.n	8009fca <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800a4a0:	210c      	movs	r1, #12
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	f003 f890 	bl	800d5c8 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800a4a8:	4b36      	ldr	r3, [pc, #216]	; (800a584 <ProcessMacCommands+0x5e0>)
 800a4aa:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800a4ae:	3b04      	subs	r3, #4
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d801      	bhi.n	800a4ba <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 800a4b6:	4634      	mov	r4, r6
 800a4b8:	e587      	b.n	8009fca <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800a4ba:	f002 fe6b 	bl	800d194 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800a4be:	4634      	mov	r4, r6
 800a4c0:	e583      	b.n	8009fca <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800a4c2:	1ca2      	adds	r2, r4, #2
 800a4c4:	b2d2      	uxtb	r2, r2
 800a4c6:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a4c8:	1ce1      	adds	r1, r4, #3
 800a4ca:	b2c9      	uxtb	r1, r1
 800a4cc:	5caa      	ldrb	r2, [r5, r2]
 800a4ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a4d2:	1d22      	adds	r2, r4, #4
 800a4d4:	b2d2      	uxtb	r2, r2
 800a4d6:	5c69      	ldrb	r1, [r5, r1]
 800a4d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800a4dc:	3405      	adds	r4, #5
 800a4de:	b2e4      	uxtb	r4, r4
 800a4e0:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800a4e2:	2164      	movs	r1, #100	; 0x64
 800a4e4:	fb03 f101 	mul.w	r1, r3, r1
 800a4e8:	f000 000f 	and.w	r0, r0, #15
 800a4ec:	f002 fe53 	bl	800d196 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800a4f0:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	a90b      	add	r1, sp, #44	; 0x2c
 800a4f8:	2011      	movs	r0, #17
 800a4fa:	f002 fee9 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                break;
 800a4fe:	e564      	b.n	8009fca <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800a500:	200d      	movs	r0, #13
 800a502:	f003 f8ad 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 800a506:	b908      	cbnz	r0, 800a50c <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 800a508:	4634      	mov	r4, r6
 800a50a:	e55e      	b.n	8009fca <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800a50c:	210d      	movs	r1, #13
 800a50e:	2000      	movs	r0, #0
 800a510:	f003 f85a 	bl	800d5c8 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800a514:	1ca2      	adds	r2, r4, #2
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800a51a:	1ce3      	adds	r3, r4, #3
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800a520:	3404      	adds	r4, #4
 800a522:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800a524:	4a19      	ldr	r2, [pc, #100]	; (800a58c <ProcessMacCommands+0x5e8>)
 800a526:	6812      	ldr	r2, [r2, #0]
 800a528:	5ce9      	ldrb	r1, [r5, r3]
 800a52a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800a52e:	f002 fe34 	bl	800d19a <LoRaMacClassBBeaconTimingAns>
 800a532:	e54a      	b.n	8009fca <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800a534:	1ca1      	adds	r1, r4, #2
 800a536:	b2c9      	uxtb	r1, r1
 800a538:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a53a:	1ce2      	adds	r2, r4, #3
 800a53c:	b2d2      	uxtb	r2, r2
 800a53e:	5c69      	ldrb	r1, [r5, r1]
 800a540:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a544:	3404      	adds	r4, #4
 800a546:	b2e4      	uxtb	r4, r4
 800a548:	5caa      	ldrb	r2, [r5, r2]
 800a54a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800a54e:	2064      	movs	r0, #100	; 0x64
 800a550:	fb03 f000 	mul.w	r0, r3, r0
 800a554:	f002 fe23 	bl	800d19e <LoRaMacClassBBeaconFreqReq>
 800a558:	b140      	cbz	r0, 800a56c <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 800a55a:	2301      	movs	r3, #1
 800a55c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a560:	2201      	movs	r2, #1
 800a562:	a90b      	add	r1, sp, #44	; 0x2c
 800a564:	2013      	movs	r0, #19
 800a566:	f002 feb3 	bl	800d2d0 <LoRaMacCommandsAddCmd>
                break;
 800a56a:	e52e      	b.n	8009fca <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a572:	e7f5      	b.n	800a560 <ProcessMacCommands+0x5bc>
}
 800a574:	b00f      	add	sp, #60	; 0x3c
 800a576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57a:	bf00      	nop
 800a57c:	20008000 	.word	0x20008000
 800a580:	08016cf4 	.word	0x08016cf4
 800a584:	200008c4 	.word	0x200008c4
 800a588:	12d53d80 	.word	0x12d53d80
 800a58c:	20000e70 	.word	0x20000e70

0800a590 <ProcessRadioRxDone>:
{
 800a590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a594:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800a596:	4ba5      	ldr	r3, [pc, #660]	; (800a82c <ProcessRadioRxDone+0x29c>)
 800a598:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800a59a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800a59c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800a5a0:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800a5a8:	4aa1      	ldr	r2, [pc, #644]	; (800a830 <ProcessRadioRxDone+0x2a0>)
 800a5aa:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800a5ae:	4aa1      	ldr	r2, [pc, #644]	; (800a834 <ProcessRadioRxDone+0x2a4>)
 800a5b0:	7811      	ldrb	r1, [r2, #0]
 800a5b2:	f363 0100 	bfi	r1, r3, #0, #1
 800a5b6:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800a5b8:	4c9f      	ldr	r4, [pc, #636]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a5ba:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800a5be:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800a5c2:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800a5c6:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 800a5ca:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800a5ce:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800a5d2:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800a5d6:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800a5da:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800a5de:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800a5e2:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800a5e6:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a5ea:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a5ee:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800a5f2:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a5f6:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800a5fa:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 800a5fe:	4b8f      	ldr	r3, [pc, #572]	; (800a83c <ProcessRadioRxDone+0x2ac>)
 800a600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a602:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800a604:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800a608:	b1d3      	cbz	r3, 800a640 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a60a:	4629      	mov	r1, r5
 800a60c:	4630      	mov	r0, r6
 800a60e:	f002 fdae 	bl	800d16e <LoRaMacClassBRxBeacon>
 800a612:	b9d0      	cbnz	r0, 800a64a <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a614:	4b86      	ldr	r3, [pc, #536]	; (800a830 <ProcessRadioRxDone+0x2a0>)
 800a616:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d01d      	beq.n	800a65a <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800a61e:	2d00      	cmp	r5, #0
 800a620:	d038      	beq.n	800a694 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800a622:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800a624:	0963      	lsrs	r3, r4, #5
 800a626:	3b01      	subs	r3, #1
 800a628:	2b06      	cmp	r3, #6
 800a62a:	f200 82fd 	bhi.w	800ac28 <ProcessRadioRxDone+0x698>
 800a62e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a632:	0038      	.short	0x0038
 800a634:	00d102fb 	.word	0x00d102fb
 800a638:	00cd02fb 	.word	0x00cd02fb
 800a63c:	02cd02fb 	.word	0x02cd02fb
        TimerStop( &MacCtx.RxWindowTimer2 );
 800a640:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a644:	f009 f888 	bl	8013758 <UTIL_TIMER_Stop>
 800a648:	e7df      	b.n	800a60a <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a64a:	4b7b      	ldr	r3, [pc, #492]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a64c:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a650:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 800a654:	b025      	add	sp, #148	; 0x94
 800a656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a65a:	f002 fd8c 	bl	800d176 <LoRaMacClassBIsPingExpected>
 800a65e:	b150      	cbz	r0, 800a676 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a660:	2000      	movs	r0, #0
 800a662:	f002 fd7d 	bl	800d160 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a666:	2000      	movs	r0, #0
 800a668:	f002 fd7f 	bl	800d16a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a66c:	4b72      	ldr	r3, [pc, #456]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a66e:	2204      	movs	r2, #4
 800a670:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800a674:	e7d3      	b.n	800a61e <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a676:	f002 fd80 	bl	800d17a <LoRaMacClassBIsMulticastExpected>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d0cf      	beq.n	800a61e <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a67e:	2000      	movs	r0, #0
 800a680:	f002 fd6f 	bl	800d162 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a684:	2000      	movs	r0, #0
 800a686:	f002 fd71 	bl	800d16c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a68a:	4b6b      	ldr	r3, [pc, #428]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a68c:	2205      	movs	r2, #5
 800a68e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800a692:	e7c4      	b.n	800a61e <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a694:	4b68      	ldr	r3, [pc, #416]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800a69c:	f7ff fc0a 	bl	8009eb4 <PrepareRxDoneAbort>
        return;
 800a6a0:	e7d8      	b.n	800a654 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a6a2:	2d10      	cmp	r5, #16
 800a6a4:	d92e      	bls.n	800a704 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 800a6a6:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800a6a8:	b2ed      	uxtb	r5, r5
 800a6aa:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a6ae:	4b60      	ldr	r3, [pc, #384]	; (800a830 <ProcessRadioRxDone+0x2a0>)
 800a6b0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a6b4:	bb6b      	cbnz	r3, 800a712 <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 800a6b6:	a804      	add	r0, sp, #16
 800a6b8:	f006 fd02 	bl	80110c0 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800a6bc:	aa08      	add	r2, sp, #32
 800a6be:	a904      	add	r1, sp, #16
 800a6c0:	20ff      	movs	r0, #255	; 0xff
 800a6c2:	f003 fb49 	bl	800dd58 <LoRaMacCryptoHandleJoinAccept>
 800a6c6:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a6c8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800a6cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a6d0:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a6d4:	4b56      	ldr	r3, [pc, #344]	; (800a830 <ProcessRadioRxDone+0x2a0>)
 800a6d6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a6da:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800a6de:	2207      	movs	r2, #7
 800a6e0:	a903      	add	r1, sp, #12
 800a6e2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a6e6:	f003 fd69 	bl	800e1bc <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800a6ea:	b904      	cbnz	r4, 800a6ee <ProcessRadioRxDone+0x15e>
 800a6ec:	b9c0      	cbnz	r0, 800a720 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f002 ffb6 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	f000 8283 	beq.w	800ac00 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	2007      	movs	r0, #7
 800a6fe:	f002 ff63 	bl	800d5c8 <LoRaMacConfirmQueueSetStatus>
 800a702:	e27d      	b.n	800ac00 <ProcessRadioRxDone+0x670>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a704:	4b4c      	ldr	r3, [pc, #304]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a70c:	f7ff fbd2 	bl	8009eb4 <PrepareRxDoneAbort>
                return;
 800a710:	e7a0      	b.n	800a654 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a712:	4b49      	ldr	r3, [pc, #292]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a71a:	f7ff fbcb 	bl	8009eb4 <PrepareRxDoneAbort>
                return;
 800a71e:	e799      	b.n	800a654 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a720:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800a724:	4c42      	ldr	r4, [pc, #264]	; (800a830 <ProcessRadioRxDone+0x2a0>)
 800a726:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a72a:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 800a72e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a732:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a736:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800a73a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a73e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a744:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800a748:	2002      	movs	r0, #2
 800a74a:	f006 fcc7 	bl	80110dc <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a74e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800a752:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800a756:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a75a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a75e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a762:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a766:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800a76a:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800a76c:	b90b      	cbnz	r3, 800a772 <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800a76e:	2201      	movs	r2, #1
 800a770:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a772:	4c2f      	ldr	r4, [pc, #188]	; (800a830 <ProcessRadioRxDone+0x2a0>)
 800a774:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a77a:	fb02 f303 	mul.w	r3, r2, r3
 800a77e:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a780:	4413      	add	r3, r2
 800a782:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800a784:	2601      	movs	r6, #1
 800a786:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a790:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800a794:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 800a796:	3d11      	subs	r5, #17
 800a798:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 800a79c:	4b26      	ldr	r3, [pc, #152]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a79e:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800a7a2:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a7a6:	a921      	add	r1, sp, #132	; 0x84
 800a7a8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a7ac:	f003 fd16 	bl	800e1dc <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f002 ff52 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f000 821f 	beq.w	800ac00 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	f002 feff 	bl	800d5c8 <LoRaMacConfirmQueueSetStatus>
 800a7ca:	e219      	b.n	800ac00 <ProcessRadioRxDone+0x670>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a7cc:	4b1a      	ldr	r3, [pc, #104]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a7d4:	4b16      	ldr	r3, [pc, #88]	; (800a830 <ProcessRadioRxDone+0x2a0>)
 800a7d6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a7da:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a7de:	4a16      	ldr	r2, [pc, #88]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a7e0:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 800a7e4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a7e8:	220d      	movs	r2, #13
 800a7ea:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a7ee:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a7f2:	b113      	cbz	r3, 800a7fa <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a7f4:	230e      	movs	r3, #14
 800a7f6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7fa:	a91f      	add	r1, sp, #124	; 0x7c
 800a7fc:	4b0c      	ldr	r3, [pc, #48]	; (800a830 <ProcessRadioRxDone+0x2a0>)
 800a7fe:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a802:	f003 fca7 	bl	800e154 <RegionGetPhyParam>
 800a806:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a808:	f1a5 030d 	sub.w	r3, r5, #13
 800a80c:	b21b      	sxth	r3, r3
 800a80e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a812:	b200      	sxth	r0, r0
 800a814:	4283      	cmp	r3, r0
 800a816:	dc01      	bgt.n	800a81c <ProcessRadioRxDone+0x28c>
 800a818:	2d0b      	cmp	r5, #11
 800a81a:	d811      	bhi.n	800a840 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a81c:	4b06      	ldr	r3, [pc, #24]	; (800a838 <ProcessRadioRxDone+0x2a8>)
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a824:	f7ff fb46 	bl	8009eb4 <PrepareRxDoneAbort>
                return;
 800a828:	e714      	b.n	800a654 <ProcessRadioRxDone+0xc4>
 800a82a:	bf00      	nop
 800a82c:	20000e70 	.word	0x20000e70
 800a830:	20008000 	.word	0x20008000
 800a834:	200008c0 	.word	0x200008c0
 800a838:	200008c4 	.word	0x200008c4
 800a83c:	080173cc 	.word	0x080173cc
            macMsgData.Buffer = payload;
 800a840:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800a842:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a846:	4ba5      	ldr	r3, [pc, #660]	; (800aadc <ProcessRadioRxDone+0x54c>)
 800a848:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a84a:	23ff      	movs	r3, #255	; 0xff
 800a84c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a850:	a812      	add	r0, sp, #72	; 0x48
 800a852:	f003 fb4f 	bl	800def4 <LoRaMacParserData>
 800a856:	2800      	cmp	r0, #0
 800a858:	d142      	bne.n	800a8e0 <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a85a:	4ba1      	ldr	r3, [pc, #644]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800a85c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a860:	2b01      	cmp	r3, #1
 800a862:	d044      	beq.n	800a8ee <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a866:	4b9f      	ldr	r3, [pc, #636]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a868:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a86c:	a904      	add	r1, sp, #16
 800a86e:	a812      	add	r0, sp, #72	; 0x48
 800a870:	f7ff f996 	bl	8009ba0 <DetermineFrameType>
 800a874:	4605      	mov	r5, r0
 800a876:	2800      	cmp	r0, #0
 800a878:	d164      	bne.n	800a944 <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d066      	beq.n	800a952 <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a884:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a886:	2d01      	cmp	r5, #1
 800a888:	d10a      	bne.n	800a8a0 <ProcessRadioRxDone+0x310>
 800a88a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a88e:	2b03      	cmp	r3, #3
 800a890:	f040 808e 	bne.w	800a9b0 <ProcessRadioRxDone+0x420>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a894:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a898:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a89c:	f040 8088 	bne.w	800a9b0 <ProcessRadioRxDone+0x420>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800a8a0:	ab07      	add	r3, sp, #28
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	f10d 031b 	add.w	r3, sp, #27
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	4b8d      	ldr	r3, [pc, #564]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800a8ac:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800a8b0:	aa12      	add	r2, sp, #72	; 0x48
 800a8b2:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f7ff fb3a 	bl	8009f30 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f000 8083 	beq.w	800a9c8 <ProcessRadioRxDone+0x438>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a8c2:	2807      	cmp	r0, #7
 800a8c4:	d07b      	beq.n	800a9be <ProcessRadioRxDone+0x42e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8c6:	4b87      	ldr	r3, [pc, #540]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a8ce:	9a07      	ldr	r2, [sp, #28]
 800a8d0:	4b84      	ldr	r3, [pc, #528]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a8d2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a8d6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800a8da:	f7ff faeb 	bl	8009eb4 <PrepareRxDoneAbort>
                return;
 800a8de:	e6b9      	b.n	800a654 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8e0:	4b80      	ldr	r3, [pc, #512]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a8e8:	f7ff fae4 	bl	8009eb4 <PrepareRxDoneAbort>
                return;
 800a8ec:	e6b2      	b.n	800a654 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800a8ee:	f002 fc42 	bl	800d176 <LoRaMacClassBIsPingExpected>
 800a8f2:	b188      	cbz	r0, 800a918 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	f002 fc33 	bl	800d160 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	f002 fc35 	bl	800d16a <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a900:	4b78      	ldr	r3, [pc, #480]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a902:	2204      	movs	r2, #4
 800a904:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a908:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800a90c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a910:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a912:	f002 fc49 	bl	800d1a8 <LoRaMacClassBSetFPendingBit>
 800a916:	e7a5      	b.n	800a864 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a918:	f002 fc2f 	bl	800d17a <LoRaMacClassBIsMulticastExpected>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d0a1      	beq.n	800a864 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a920:	2000      	movs	r0, #0
 800a922:	f002 fc1e 	bl	800d162 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a926:	2000      	movs	r0, #0
 800a928:	f002 fc20 	bl	800d16c <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a92c:	4b6d      	ldr	r3, [pc, #436]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a92e:	2205      	movs	r2, #5
 800a930:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a934:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800a938:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a93c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a93e:	f002 fc33 	bl	800d1a8 <LoRaMacClassBSetFPendingBit>
 800a942:	e78f      	b.n	800a864 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a944:	4b67      	ldr	r3, [pc, #412]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a94c:	f7ff fab2 	bl	8009eb4 <PrepareRxDoneAbort>
                return;
 800a950:	e680      	b.n	800a654 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a952:	4618      	mov	r0, r3
 800a954:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800a958:	4a61      	ldr	r2, [pc, #388]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800a95a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a95e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800a962:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a964:	428a      	cmp	r2, r1
 800a966:	d002      	beq.n	800a96e <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a968:	3301      	adds	r3, #1
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	e788      	b.n	800a880 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a96e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800a972:	495b      	ldr	r1, [pc, #364]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800a974:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800a978:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a97c:	2900      	cmp	r1, #0
 800a97e:	d0f3      	beq.n	800a968 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a980:	4b57      	ldr	r3, [pc, #348]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800a982:	2130      	movs	r1, #48	; 0x30
 800a984:	fb01 3000 	mla	r0, r1, r0, r3
 800a988:	f890 60ea 	ldrb.w	r6, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a98c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800a990:	6809      	ldr	r1, [r1, #0]
 800a992:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a994:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d002      	beq.n	800a9a2 <ProcessRadioRxDone+0x412>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a99c:	4691      	mov	r9, r2
                    multicast = 1;
 800a99e:	2501      	movs	r5, #1
 800a9a0:	e771      	b.n	800a886 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a9a2:	4b50      	ldr	r3, [pc, #320]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a9a4:	2103      	movs	r1, #3
 800a9a6:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a9aa:	4691      	mov	r9, r2
                    multicast = 1;
 800a9ac:	2501      	movs	r5, #1
 800a9ae:	e76a      	b.n	800a886 <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a9b0:	4b4c      	ldr	r3, [pc, #304]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a9b8:	f7ff fa7c 	bl	8009eb4 <PrepareRxDoneAbort>
                return;
 800a9bc:	e64a      	b.n	800a654 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a9be:	4b49      	ldr	r3, [pc, #292]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a9c0:	2208      	movs	r2, #8
 800a9c2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800a9c6:	e782      	b.n	800a8ce <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a9c8:	ab12      	add	r3, sp, #72	; 0x48
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	9b07      	ldr	r3, [sp, #28]
 800a9ce:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f003 f917 	bl	800dc08 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d14a      	bne.n	800aa74 <ProcessRadioRxDone+0x4e4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a9de:	4b41      	ldr	r3, [pc, #260]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800a9e6:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800a9ea:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800a9ee:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a9f2:	9a07      	ldr	r2, [sp, #28]
 800a9f4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a9f8:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a9fc:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800aa00:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800aa04:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800aa08:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800aa0c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800aa10:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 800aa14:	2801      	cmp	r0, #1
 800aa16:	d93b      	bls.n	800aa90 <ProcessRadioRxDone+0x500>
            if( multicast == 1 )
 800aa18:	2d01      	cmp	r5, #1
 800aa1a:	d03f      	beq.n	800aa9c <ProcessRadioRxDone+0x50c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800aa1c:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800aa20:	2ca0      	cmp	r4, #160	; 0xa0
 800aa22:	d040      	beq.n	800aaa6 <ProcessRadioRxDone+0x516>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800aa24:	2300      	movs	r3, #0
 800aa26:	4a2e      	ldr	r2, [pc, #184]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800aa28:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800aa2c:	4a2d      	ldr	r2, [pc, #180]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800aa2e:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800aa32:	4b2b      	ldr	r3, [pc, #172]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800aa34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa38:	b923      	cbnz	r3, 800aa44 <ProcessRadioRxDone+0x4b4>
 800aa3a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800aa3e:	f013 0f10 	tst.w	r3, #16
 800aa42:	d007      	beq.n	800aa54 <ProcessRadioRxDone+0x4c4>
 800aa44:	4b26      	ldr	r3, [pc, #152]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800aa46:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800aa4a:	b91b      	cbnz	r3, 800aa54 <ProcessRadioRxDone+0x4c4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800aa4c:	4b25      	ldr	r3, [pc, #148]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800aa54:	4b23      	ldr	r3, [pc, #140]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800aa56:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 800aa5a:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800aa5e:	f7ff fa92 	bl	8009f86 <RemoveMacCommands>
            switch( fType )
 800aa62:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	f200 8099 	bhi.w	800ab9e <ProcessRadioRxDone+0x60e>
 800aa6c:	e8df f003 	tbb	[pc, r3]
 800aa70:	8777653e 	.word	0x8777653e
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800aa74:	2802      	cmp	r0, #2
 800aa76:	d006      	beq.n	800aa86 <ProcessRadioRxDone+0x4f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800aa78:	4b1a      	ldr	r3, [pc, #104]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800aa7a:	220b      	movs	r2, #11
 800aa7c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800aa80:	f7ff fa18 	bl	8009eb4 <PrepareRxDoneAbort>
                return;
 800aa84:	e5e6      	b.n	800a654 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800aa86:	4b17      	ldr	r3, [pc, #92]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800aa88:	220a      	movs	r2, #10
 800aa8a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800aa8e:	e7f7      	b.n	800aa80 <ProcessRadioRxDone+0x4f0>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800aa90:	4b13      	ldr	r3, [pc, #76]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800aa92:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 800aa9a:	e7bd      	b.n	800aa18 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800aa9c:	4b11      	ldr	r3, [pc, #68]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800aaa4:	e7c5      	b.n	800aa32 <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800aaae:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800aab2:	b913      	cbnz	r3, 800aaba <ProcessRadioRxDone+0x52a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800aab4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aab6:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800aab8:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800aaba:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800aac2:	4290      	cmp	r0, r2
 800aac4:	d9b5      	bls.n	800aa32 <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <ProcessRadioRxDone+0x550>)
 800aac8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800aacc:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <ProcessRadioRxDone+0x554>)
 800aace:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800aad2:	4a05      	ldr	r2, [pc, #20]	; (800aae8 <ProcessRadioRxDone+0x558>)
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 800aada:	e7aa      	b.n	800aa32 <ProcessRadioRxDone+0x4a2>
 800aadc:	20000afc 	.word	0x20000afc
 800aae0:	20008000 	.word	0x20008000
 800aae4:	200008c4 	.word	0x200008c4
 800aae8:	20000e70 	.word	0x20000e70
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800aaec:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800aaf0:	4c58      	ldr	r4, [pc, #352]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800aaf2:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	463b      	mov	r3, r7
 800aafa:	f002 020f 	and.w	r2, r2, #15
 800aafe:	2100      	movs	r1, #0
 800ab00:	a816      	add	r0, sp, #88	; 0x58
 800ab02:	f7ff fa4f 	bl	8009fa4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ab06:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ab0a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ab0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab10:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ab14:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800ab18:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ab22:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ab26:	2be0      	cmp	r3, #224	; 0xe0
 800ab28:	d040      	beq.n	800abac <ProcessRadioRxDone+0x61c>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ab2a:	4a4a      	ldr	r2, [pc, #296]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ab2c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ab30:	f043 0302 	orr.w	r3, r3, #2
 800ab34:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800ab38:	e062      	b.n	800ac00 <ProcessRadioRxDone+0x670>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ab3a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800ab3e:	4c45      	ldr	r4, [pc, #276]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ab40:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	463b      	mov	r3, r7
 800ab48:	f002 020f 	and.w	r2, r2, #15
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	a816      	add	r0, sp, #88	; 0x58
 800ab50:	f7ff fa28 	bl	8009fa4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ab54:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ab58:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800ab5c:	e7e1      	b.n	800ab22 <ProcessRadioRxDone+0x592>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ab5e:	4c3d      	ldr	r4, [pc, #244]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ab60:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	463b      	mov	r3, r7
 800ab68:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ab70:	f7ff fa18 	bl	8009fa4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ab74:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ab78:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800ab7c:	e7d1      	b.n	800ab22 <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ab7e:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800ab82:	4b34      	ldr	r3, [pc, #208]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ab84:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ab88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab8a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ab8e:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800ab92:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800ab9c:	e7c1      	b.n	800ab22 <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ab9e:	4b2d      	ldr	r3, [pc, #180]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800aba6:	f7ff f985 	bl	8009eb4 <PrepareRxDoneAbort>
                    break;
 800abaa:	e7ba      	b.n	800ab22 <ProcessRadioRxDone+0x592>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800abac:	4a2a      	ldr	r2, [pc, #168]	; (800ac58 <ProcessRadioRxDone+0x6c8>)
 800abae:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800abb2:	2a00      	cmp	r2, #0
 800abb4:	d1b9      	bne.n	800ab2a <ProcessRadioRxDone+0x59a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800abb6:	4a27      	ldr	r2, [pc, #156]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800abb8:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800abbc:	2300      	movs	r3, #0
 800abbe:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800abc2:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800abc6:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 800abca:	e7ae      	b.n	800ab2a <ProcessRadioRxDone+0x59a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800abcc:	1e6a      	subs	r2, r5, #1
 800abce:	4c21      	ldr	r4, [pc, #132]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800abd0:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800abd4:	b292      	uxth	r2, r2
 800abd6:	1c71      	adds	r1, r6, #1
 800abd8:	4638      	mov	r0, r7
 800abda:	f006 fb8e 	bl	80112fa <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800abde:	2303      	movs	r3, #3
 800abe0:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800abea:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800abee:	3d01      	subs	r5, #1
 800abf0:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800abf4:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800abf8:	f043 0302 	orr.w	r3, r3, #2
 800abfc:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ac00:	4b14      	ldr	r3, [pc, #80]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ac02:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d915      	bls.n	800ac36 <ProcessRadioRxDone+0x6a6>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800ac0a:	4b12      	ldr	r3, [pc, #72]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ac0c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d006      	beq.n	800ac22 <ProcessRadioRxDone+0x692>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ac14:	4a0f      	ldr	r2, [pc, #60]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ac16:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ac1a:	f043 0310 	orr.w	r3, r3, #16
 800ac1e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800ac22:	f7fe ff31 	bl	8009a88 <UpdateRxSlotIdleState>
 800ac26:	e515      	b.n	800a654 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800ac30:	f7ff f940 	bl	8009eb4 <PrepareRxDoneAbort>
            break;
 800ac34:	e7e4      	b.n	800ac00 <ProcessRadioRxDone+0x670>
        if( MacCtx.NodeAckRequested == true )
 800ac36:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ac38:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0e4      	beq.n	800ac0a <ProcessRadioRxDone+0x67a>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800ac40:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <ProcessRadioRxDone+0x6c4>)
 800ac42:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0df      	beq.n	800ac0a <ProcessRadioRxDone+0x67a>
                OnRetransmitTimeoutTimerEvent( NULL );
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	f7ff f920 	bl	8009e90 <OnRetransmitTimeoutTimerEvent>
 800ac50:	e7db      	b.n	800ac0a <ProcessRadioRxDone+0x67a>
 800ac52:	bf00      	nop
 800ac54:	200008c4 	.word	0x200008c4
 800ac58:	20008000 	.word	0x20008000

0800ac5c <ProcessRadioTxTimeout>:
{
 800ac5c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <ProcessRadioTxTimeout+0x40>)
 800ac60:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d002      	beq.n	800ac6e <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800ac68:	4b0d      	ldr	r3, [pc, #52]	; (800aca0 <ProcessRadioTxTimeout+0x44>)
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800ac6e:	f7fe ff0b 	bl	8009a88 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ac72:	4c0c      	ldr	r4, [pc, #48]	; (800aca4 <ProcessRadioTxTimeout+0x48>)
 800ac74:	2002      	movs	r0, #2
 800ac76:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ac7a:	f002 fcd3 	bl	800d624 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ac7e:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800ac82:	b113      	cbz	r3, 800ac8a <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800ac84:	2201      	movs	r2, #1
 800ac86:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ac8a:	4a06      	ldr	r2, [pc, #24]	; (800aca4 <ProcessRadioTxTimeout+0x48>)
 800ac8c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ac90:	f043 0310 	orr.w	r3, r3, #16
 800ac94:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20008000 	.word	0x20008000
 800aca0:	080173cc 	.word	0x080173cc
 800aca4:	200008c4 	.word	0x200008c4

0800aca8 <CheckForClassBCollision>:
{
 800aca8:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800acaa:	f002 fa62 	bl	800d172 <LoRaMacClassBIsBeaconExpected>
 800acae:	b978      	cbnz	r0, 800acd0 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800acb0:	4b09      	ldr	r3, [pc, #36]	; (800acd8 <CheckForClassBCollision+0x30>)
 800acb2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d001      	beq.n	800acbe <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800acba:	2000      	movs	r0, #0
}
 800acbc:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800acbe:	f002 fa5a 	bl	800d176 <LoRaMacClassBIsPingExpected>
 800acc2:	b938      	cbnz	r0, 800acd4 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800acc4:	f002 fa59 	bl	800d17a <LoRaMacClassBIsMulticastExpected>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d0f7      	beq.n	800acbc <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800accc:	200f      	movs	r0, #15
 800acce:	e7f5      	b.n	800acbc <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800acd0:	200e      	movs	r0, #14
 800acd2:	e7f3      	b.n	800acbc <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800acd4:	200f      	movs	r0, #15
 800acd6:	e7f1      	b.n	800acbc <CheckForClassBCollision+0x14>
 800acd8:	20008000 	.word	0x20008000

0800acdc <HandleRadioRxErrorTimeout>:
{
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	4605      	mov	r5, r0
 800ace0:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ace2:	4b34      	ldr	r3, [pc, #208]	; (800adb4 <HandleRadioRxErrorTimeout+0xd8>)
 800ace4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d002      	beq.n	800acf2 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800acec:	4b32      	ldr	r3, [pc, #200]	; (800adb8 <HandleRadioRxErrorTimeout+0xdc>)
 800acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf0:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800acf2:	f002 fa3e 	bl	800d172 <LoRaMacClassBIsBeaconExpected>
 800acf6:	4606      	mov	r6, r0
 800acf8:	bb50      	cbnz	r0, 800ad50 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800acfa:	4b2e      	ldr	r3, [pc, #184]	; (800adb4 <HandleRadioRxErrorTimeout+0xd8>)
 800acfc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d02c      	beq.n	800ad5e <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800ad04:	2e00      	cmp	r6, #0
 800ad06:	d152      	bne.n	800adae <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ad08:	4b2c      	ldr	r3, [pc, #176]	; (800adbc <HandleRadioRxErrorTimeout+0xe0>)
 800ad0a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d13c      	bne.n	800ad8c <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800ad12:	4b2a      	ldr	r3, [pc, #168]	; (800adbc <HandleRadioRxErrorTimeout+0xe0>)
 800ad14:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800ad18:	b113      	cbz	r3, 800ad20 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ad1a:	4b28      	ldr	r3, [pc, #160]	; (800adbc <HandleRadioRxErrorTimeout+0xe0>)
 800ad1c:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ad20:	4628      	mov	r0, r5
 800ad22:	f002 fc7f 	bl	800d624 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ad26:	4b23      	ldr	r3, [pc, #140]	; (800adb4 <HandleRadioRxErrorTimeout+0xd8>)
 800ad28:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ad2a:	f008 fcdf 	bl	80136ec <UTIL_TIMER_GetElapsedTime>
 800ad2e:	4b23      	ldr	r3, [pc, #140]	; (800adbc <HandleRadioRxErrorTimeout+0xe0>)
 800ad30:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800ad34:	4298      	cmp	r0, r3
 800ad36:	d33a      	bcc.n	800adae <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ad38:	4c20      	ldr	r4, [pc, #128]	; (800adbc <HandleRadioRxErrorTimeout+0xe0>)
 800ad3a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800ad3e:	f008 fd0b 	bl	8013758 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ad42:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800ad46:	f043 0310 	orr.w	r3, r3, #16
 800ad4a:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 800ad4e:	e02e      	b.n	800adae <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ad50:	2002      	movs	r0, #2
 800ad52:	f002 fa04 	bl	800d15e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ad56:	2000      	movs	r0, #0
 800ad58:	f002 fa06 	bl	800d168 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ad5c:	e7cd      	b.n	800acfa <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ad5e:	f002 fa0a 	bl	800d176 <LoRaMacClassBIsPingExpected>
 800ad62:	4607      	mov	r7, r0
 800ad64:	b950      	cbnz	r0, 800ad7c <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ad66:	f002 fa08 	bl	800d17a <LoRaMacClassBIsMulticastExpected>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d0ca      	beq.n	800ad04 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ad6e:	2000      	movs	r0, #0
 800ad70:	f002 f9f7 	bl	800d162 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ad74:	2000      	movs	r0, #0
 800ad76:	f002 f9f9 	bl	800d16c <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800ad7a:	e018      	b.n	800adae <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	f002 f9ef 	bl	800d160 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ad82:	2000      	movs	r0, #0
 800ad84:	f002 f9f1 	bl	800d16a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ad88:	463e      	mov	r6, r7
 800ad8a:	e7ec      	b.n	800ad66 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <HandleRadioRxErrorTimeout+0xe0>)
 800ad8e:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800ad92:	b113      	cbz	r3, 800ad9a <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ad94:	4b09      	ldr	r3, [pc, #36]	; (800adbc <HandleRadioRxErrorTimeout+0xe0>)
 800ad96:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f002 fc42 	bl	800d624 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800ada0:	4a06      	ldr	r2, [pc, #24]	; (800adbc <HandleRadioRxErrorTimeout+0xe0>)
 800ada2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ada6:	f043 0310 	orr.w	r3, r3, #16
 800adaa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800adae:	f7fe fe6b 	bl	8009a88 <UpdateRxSlotIdleState>
}
 800adb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb4:	20008000 	.word	0x20008000
 800adb8:	080173cc 	.word	0x080173cc
 800adbc:	200008c4 	.word	0x200008c4

0800adc0 <ProcessRadioRxError>:
{
 800adc0:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800adc2:	2106      	movs	r1, #6
 800adc4:	2005      	movs	r0, #5
 800adc6:	f7ff ff89 	bl	800acdc <HandleRadioRxErrorTimeout>
}
 800adca:	bd08      	pop	{r3, pc}

0800adcc <ProcessRadioRxTimeout>:
{
 800adcc:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800adce:	2104      	movs	r1, #4
 800add0:	2003      	movs	r0, #3
 800add2:	f7ff ff83 	bl	800acdc <HandleRadioRxErrorTimeout>
}
 800add6:	bd08      	pop	{r3, pc}

0800add8 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800add8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800addc:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800adde:	4a14      	ldr	r2, [pc, #80]	; (800ae30 <LoRaMacHandleIrqEvents+0x58>)
 800ade0:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800ade2:	2000      	movs	r0, #0
 800ade4:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ade6:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800adea:	b303      	cbz	r3, 800ae2e <LoRaMacHandleIrqEvents+0x56>
{
 800adec:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800adee:	b2dc      	uxtb	r4, r3
 800adf0:	f013 0f20 	tst.w	r3, #32
 800adf4:	d10c      	bne.n	800ae10 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800adf6:	f014 0f10 	tst.w	r4, #16
 800adfa:	d10c      	bne.n	800ae16 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800adfc:	f014 0f08 	tst.w	r4, #8
 800ae00:	d10c      	bne.n	800ae1c <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800ae02:	f014 0f04 	tst.w	r4, #4
 800ae06:	d10c      	bne.n	800ae22 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800ae08:	f014 0f02 	tst.w	r4, #2
 800ae0c:	d10c      	bne.n	800ae28 <LoRaMacHandleIrqEvents+0x50>
}
 800ae0e:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800ae10:	f7fe ffbc 	bl	8009d8c <ProcessRadioTxDone>
 800ae14:	e7ef      	b.n	800adf6 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800ae16:	f7ff fbbb 	bl	800a590 <ProcessRadioRxDone>
 800ae1a:	e7ef      	b.n	800adfc <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800ae1c:	f7ff ff1e 	bl	800ac5c <ProcessRadioTxTimeout>
 800ae20:	e7ef      	b.n	800ae02 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800ae22:	f7ff ffcd 	bl	800adc0 <ProcessRadioRxError>
 800ae26:	e7ef      	b.n	800ae08 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800ae28:	f7ff ffd0 	bl	800adcc <ProcessRadioRxTimeout>
}
 800ae2c:	e7ef      	b.n	800ae0e <LoRaMacHandleIrqEvents+0x36>
 800ae2e:	4770      	bx	lr
 800ae30:	200008c0 	.word	0x200008c0

0800ae34 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800ae34:	b909      	cbnz	r1, 800ae3a <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800ae36:	2000      	movs	r0, #0
}
 800ae38:	4770      	bx	lr
{
 800ae3a:	b510      	push	{r4, lr}
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800ae40:	f008 fc54 	bl	80136ec <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800ae44:	42a0      	cmp	r0, r4
 800ae46:	d801      	bhi.n	800ae4c <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800ae48:	2000      	movs	r0, #0
}
 800ae4a:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800ae4c:	4b02      	ldr	r3, [pc, #8]	; (800ae58 <LoRaMacHandleResponseTimeout+0x24>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800ae54:	2001      	movs	r0, #1
 800ae56:	e7f8      	b.n	800ae4a <LoRaMacHandleResponseTimeout+0x16>
 800ae58:	20008000 	.word	0x20008000

0800ae5c <LoRaMacHandleMlmeRequest>:
{
 800ae5c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <LoRaMacHandleMlmeRequest+0x54>)
 800ae60:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ae64:	f013 0f04 	tst.w	r3, #4
 800ae68:	d100      	bne.n	800ae6c <LoRaMacHandleMlmeRequest+0x10>
}
 800ae6a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ae6c:	2001      	movs	r0, #1
 800ae6e:	f002 fbf7 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 800ae72:	b178      	cbz	r0, 800ae94 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ae74:	2001      	movs	r0, #1
 800ae76:	f002 fbbd 	bl	800d5f4 <LoRaMacConfirmQueueGetStatus>
 800ae7a:	b918      	cbnz	r0, 800ae84 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800ae7c:	4b0c      	ldr	r3, [pc, #48]	; (800aeb0 <LoRaMacHandleMlmeRequest+0x54>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ae84:	4a0a      	ldr	r2, [pc, #40]	; (800aeb0 <LoRaMacHandleMlmeRequest+0x54>)
 800ae86:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800ae8a:	f023 0302 	bic.w	r3, r3, #2
 800ae8e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800ae92:	e7ea      	b.n	800ae6a <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800ae94:	2006      	movs	r0, #6
 800ae96:	f002 fbe3 	bl	800d660 <LoRaMacConfirmQueueIsCmdActive>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d0e5      	beq.n	800ae6a <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ae9e:	4a04      	ldr	r2, [pc, #16]	; (800aeb0 <LoRaMacHandleMlmeRequest+0x54>)
 800aea0:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800aea4:	f023 0302 	bic.w	r3, r3, #2
 800aea8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800aeac:	e7dd      	b.n	800ae6a <LoRaMacHandleMlmeRequest+0xe>
 800aeae:	bf00      	nop
 800aeb0:	200008c4 	.word	0x200008c4

0800aeb4 <SerializeTxFrame>:
{
 800aeb4:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	; (800aef4 <SerializeTxFrame+0x40>)
 800aeb8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800aebc:	b11b      	cbz	r3, 800aec6 <SerializeTxFrame+0x12>
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d00a      	beq.n	800aed8 <SerializeTxFrame+0x24>
 800aec2:	2003      	movs	r0, #3
}
 800aec4:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800aec6:	480c      	ldr	r0, [pc, #48]	; (800aef8 <SerializeTxFrame+0x44>)
 800aec8:	f003 f873 	bl	800dfb2 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800aecc:	b968      	cbnz	r0, 800aeea <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <SerializeTxFrame+0x40>)
 800aed0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800aed4:	801a      	strh	r2, [r3, #0]
            break;
 800aed6:	e7f5      	b.n	800aec4 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800aed8:	4807      	ldr	r0, [pc, #28]	; (800aef8 <SerializeTxFrame+0x44>)
 800aeda:	f003 f8a0 	bl	800e01e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800aede:	b930      	cbnz	r0, 800aeee <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800aee0:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <SerializeTxFrame+0x40>)
 800aee2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800aee6:	801a      	strh	r2, [r3, #0]
            break;
 800aee8:	e7ec      	b.n	800aec4 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800aeea:	2011      	movs	r0, #17
 800aeec:	e7ea      	b.n	800aec4 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800aeee:	2011      	movs	r0, #17
 800aef0:	e7e8      	b.n	800aec4 <SerializeTxFrame+0x10>
 800aef2:	bf00      	nop
 800aef4:	200008c4 	.word	0x200008c4
 800aef8:	200009cc 	.word	0x200009cc

0800aefc <ComputeRxWindowParameters>:
{
 800aefc:	b570      	push	{r4, r5, r6, lr}
 800aefe:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800af00:	4c1e      	ldr	r4, [pc, #120]	; (800af7c <ComputeRxWindowParameters+0x80>)
 800af02:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800af06:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800af0a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800af0e:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800af12:	4630      	mov	r0, r6
 800af14:	f003 fa33 	bl	800e37e <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800af18:	4d19      	ldr	r5, [pc, #100]	; (800af80 <ComputeRxWindowParameters+0x84>)
 800af1a:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800af22:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800af26:	b241      	sxtb	r1, r0
 800af28:	4630      	mov	r0, r6
 800af2a:	f003 f974 	bl	800e216 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800af2e:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800af36:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800af3a:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800af3e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800af42:	f003 f968 	bl	800e216 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800af46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af48:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800af4c:	440b      	add	r3, r1
 800af4e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800af52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800af54:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800af58:	4413      	add	r3, r2
 800af5a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800af5e:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800af62:	2b04      	cmp	r3, #4
 800af64:	d007      	beq.n	800af76 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800af66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800af68:	4419      	add	r1, r3
 800af6a:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800af6e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800af70:	440a      	add	r2, r1
 800af72:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800af76:	b002      	add	sp, #8
 800af78:	bd70      	pop	{r4, r5, r6, pc}
 800af7a:	bf00      	nop
 800af7c:	20008000 	.word	0x20008000
 800af80:	200008c4 	.word	0x200008c4

0800af84 <VerifyTxFrame>:
{
 800af84:	b510      	push	{r4, lr}
 800af86:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800af8c:	4b0d      	ldr	r3, [pc, #52]	; (800afc4 <VerifyTxFrame+0x40>)
 800af8e:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800af92:	b914      	cbnz	r4, 800af9a <VerifyTxFrame+0x16>
}
 800af94:	4620      	mov	r0, r4
 800af96:	b002      	add	sp, #8
 800af98:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800af9a:	a801      	add	r0, sp, #4
 800af9c:	f002 fa26 	bl	800d3ec <LoRaMacCommandsGetSizeSerializedCmds>
 800afa0:	4604      	mov	r4, r0
 800afa2:	b968      	cbnz	r0, 800afc0 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800afa4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800afa8:	4b06      	ldr	r3, [pc, #24]	; (800afc4 <VerifyTxFrame+0x40>)
 800afaa:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800afae:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <VerifyTxFrame+0x44>)
 800afb0:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800afb4:	f7fe fed8 	bl	8009d68 <ValidatePayloadLength>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d1eb      	bne.n	800af94 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800afbc:	2408      	movs	r4, #8
 800afbe:	e7e9      	b.n	800af94 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800afc0:	2413      	movs	r4, #19
 800afc2:	e7e7      	b.n	800af94 <VerifyTxFrame+0x10>
 800afc4:	20008000 	.word	0x20008000
 800afc8:	200008c4 	.word	0x200008c4

0800afcc <SecureFrame>:
{
 800afcc:	b530      	push	{r4, r5, lr}
 800afce:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800afd4:	4b18      	ldr	r3, [pc, #96]	; (800b038 <SecureFrame+0x6c>)
 800afd6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800afda:	b133      	cbz	r3, 800afea <SecureFrame+0x1e>
 800afdc:	4605      	mov	r5, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d00b      	beq.n	800affc <SecureFrame+0x30>
 800afe4:	2003      	movs	r0, #3
}
 800afe6:	b003      	add	sp, #12
 800afe8:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800afea:	4814      	ldr	r0, [pc, #80]	; (800b03c <SecureFrame+0x70>)
 800afec:	f002 fda2 	bl	800db34 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800aff0:	b9d8      	cbnz	r0, 800b02a <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800aff2:	4b11      	ldr	r3, [pc, #68]	; (800b038 <SecureFrame+0x6c>)
 800aff4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800aff8:	801a      	strh	r2, [r3, #0]
            break;
 800affa:	e7f4      	b.n	800afe6 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800affc:	a801      	add	r0, sp, #4
 800affe:	f002 fd4d 	bl	800da9c <LoRaMacCryptoGetFCntUp>
 800b002:	b9a0      	cbnz	r0, 800b02e <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800b004:	4b0c      	ldr	r3, [pc, #48]	; (800b038 <SecureFrame+0x6c>)
 800b006:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b00a:	b113      	cbz	r3, 800b012 <SecureFrame+0x46>
                fCntUp -= 1;
 800b00c:	9b01      	ldr	r3, [sp, #4]
 800b00e:	3b01      	subs	r3, #1
 800b010:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800b012:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <SecureFrame+0x70>)
 800b014:	4622      	mov	r2, r4
 800b016:	4629      	mov	r1, r5
 800b018:	9801      	ldr	r0, [sp, #4]
 800b01a:	f002 fdb1 	bl	800db80 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b01e:	b940      	cbnz	r0, 800b032 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <SecureFrame+0x6c>)
 800b022:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800b026:	801a      	strh	r2, [r3, #0]
            break;
 800b028:	e7dd      	b.n	800afe6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b02a:	2011      	movs	r0, #17
 800b02c:	e7db      	b.n	800afe6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b02e:	2012      	movs	r0, #18
 800b030:	e7d9      	b.n	800afe6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b032:	2011      	movs	r0, #17
 800b034:	e7d7      	b.n	800afe6 <SecureFrame+0x1a>
 800b036:	bf00      	nop
 800b038:	200008c4 	.word	0x200008c4
 800b03c:	200009cc 	.word	0x200009cc

0800b040 <SendFrameOnChannel>:
{
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800b04c:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b050:	4d36      	ldr	r5, [pc, #216]	; (800b12c <SendFrameOnChannel+0xec>)
 800b052:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800b056:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b05a:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800b05e:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800b062:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800b066:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b068:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800b06c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800b06e:	4c30      	ldr	r4, [pc, #192]	; (800b130 <SendFrameOnChannel+0xf0>)
 800b070:	8823      	ldrh	r3, [r4, #0]
 800b072:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b076:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800b07a:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800b07e:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800b082:	f10d 0207 	add.w	r2, sp, #7
 800b086:	a902      	add	r1, sp, #8
 800b088:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800b08c:	f003 f8e7 	bl	800e25e <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b096:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800b09a:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800b09e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0a2:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800b0a6:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b0aa:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800b0ae:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b0b2:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800b0b6:	f002 f862 	bl	800d17e <LoRaMacClassBIsBeaconModeActive>
 800b0ba:	bb60      	cbnz	r0, 800b116 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b0bc:	4b1b      	ldr	r3, [pc, #108]	; (800b12c <SendFrameOnChannel+0xec>)
 800b0be:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d02f      	beq.n	800b126 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800b0c6:	f002 f85d 	bl	800d184 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800b0ca:	4b18      	ldr	r3, [pc, #96]	; (800b12c <SendFrameOnChannel+0xec>)
 800b0cc:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b0d0:	4b17      	ldr	r3, [pc, #92]	; (800b130 <SendFrameOnChannel+0xf0>)
 800b0d2:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800b0d6:	b2c0      	uxtb	r0, r0
 800b0d8:	f7ff ff78 	bl	800afcc <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800b0dc:	4604      	mov	r4, r0
 800b0de:	b9b8      	cbnz	r0, 800b110 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b0e0:	4813      	ldr	r0, [pc, #76]	; (800b130 <SendFrameOnChannel+0xf0>)
 800b0e2:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800b0e6:	f043 0302 	orr.w	r3, r3, #2
 800b0ea:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800b0ee:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800b0fa:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800b104:	4b0b      	ldr	r3, [pc, #44]	; (800b134 <SendFrameOnChannel+0xf4>)
 800b106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b108:	f830 1b02 	ldrh.w	r1, [r0], #2
 800b10c:	b2c9      	uxtb	r1, r1
 800b10e:	4798      	blx	r3
}
 800b110:	4620      	mov	r0, r4
 800b112:	b006      	add	sp, #24
 800b114:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800b116:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800b11a:	f002 f842 	bl	800d1a2 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800b11e:	2800      	cmp	r0, #0
 800b120:	d0cc      	beq.n	800b0bc <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800b122:	2410      	movs	r4, #16
 800b124:	e7f4      	b.n	800b110 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800b126:	f002 f83e 	bl	800d1a6 <LoRaMacClassBStopRxSlots>
 800b12a:	e7cc      	b.n	800b0c6 <SendFrameOnChannel+0x86>
 800b12c:	20008000 	.word	0x20008000
 800b130:	200008c4 	.word	0x200008c4
 800b134:	080173cc 	.word	0x080173cc

0800b138 <ScheduleTx>:
{
 800b138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13c:	b08c      	sub	sp, #48	; 0x30
 800b13e:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800b140:	f7ff fdb2 	bl	800aca8 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800b144:	4604      	mov	r4, r0
 800b146:	b118      	cbz	r0, 800b150 <ScheduleTx+0x18>
}
 800b148:	4620      	mov	r0, r4
 800b14a:	b00c      	add	sp, #48	; 0x30
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800b150:	f7fe fcfe 	bl	8009b50 <CalculateBackOff>
    status = SerializeTxFrame( );
 800b154:	f7ff feae 	bl	800aeb4 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800b158:	4604      	mov	r4, r0
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d1f4      	bne.n	800b148 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800b15e:	4e36      	ldr	r6, [pc, #216]	; (800b238 <ScheduleTx+0x100>)
 800b160:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b162:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b164:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800b168:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800b16c:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800b170:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b174:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b178:	4640      	mov	r0, r8
 800b17a:	f008 fa21 	bl	80135c0 <SysTimeGetMcuTime>
 800b17e:	af02      	add	r7, sp, #8
 800b180:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800b18a:	e898 0006 	ldmia.w	r8, {r1, r2}
 800b18e:	4638      	mov	r0, r7
 800b190:	f008 f9b3 	bl	80134fa <SysTimeSub>
 800b194:	ab07      	add	r3, sp, #28
 800b196:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b19a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800b19e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b1a0:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800b1ae:	4b23      	ldr	r3, [pc, #140]	; (800b23c <ScheduleTx+0x104>)
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b1b6:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800b1ba:	b92b      	cbnz	r3, 800b1c8 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800b1c8:	4a1c      	ldr	r2, [pc, #112]	; (800b23c <ScheduleTx+0x104>)
 800b1ca:	481b      	ldr	r0, [pc, #108]	; (800b238 <ScheduleTx+0x100>)
 800b1cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800b1d6:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800b1da:	a904      	add	r1, sp, #16
 800b1dc:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800b1e0:	f003 f8b8 	bl	800e354 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800b1e4:	b1c0      	cbz	r0, 800b218 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800b1e6:	280b      	cmp	r0, #11
 800b1e8:	d124      	bne.n	800b234 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800b1ea:	4a14      	ldr	r2, [pc, #80]	; (800b23c <ScheduleTx+0x104>)
 800b1ec:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800b1f0:	b191      	cbz	r1, 800b218 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800b1f2:	b90d      	cbnz	r5, 800b1f8 <ScheduleTx+0xc0>
                return status;
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	e7a7      	b.n	800b148 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800b1fe:	f042 0220 	orr.w	r2, r2, #32
 800b202:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800b206:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800b20a:	4628      	mov	r0, r5
 800b20c:	f008 fb44 	bl	8013898 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800b210:	4628      	mov	r0, r5
 800b212:	f008 fafb 	bl	801380c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800b216:	e797      	b.n	800b148 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800b218:	f7ff fe70 	bl	800aefc <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800b21c:	f7ff feb2 	bl	800af84 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800b220:	4604      	mov	r4, r0
 800b222:	2800      	cmp	r0, #0
 800b224:	d190      	bne.n	800b148 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800b226:	4b05      	ldr	r3, [pc, #20]	; (800b23c <ScheduleTx+0x104>)
 800b228:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800b22c:	f7ff ff08 	bl	800b040 <SendFrameOnChannel>
 800b230:	4604      	mov	r4, r0
 800b232:	e789      	b.n	800b148 <ScheduleTx+0x10>
            return status;
 800b234:	4604      	mov	r4, r0
 800b236:	e787      	b.n	800b148 <ScheduleTx+0x10>
 800b238:	20008000 	.word	0x20008000
 800b23c:	200008c4 	.word	0x200008c4

0800b240 <OnTxDelayedTimerEvent>:
{
 800b240:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800b242:	4c16      	ldr	r4, [pc, #88]	; (800b29c <OnTxDelayedTimerEvent+0x5c>)
 800b244:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800b248:	f008 fa86 	bl	8013758 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b24c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800b250:	f023 0320 	bic.w	r3, r3, #32
 800b254:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b258:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800b25c:	4b10      	ldr	r3, [pc, #64]	; (800b2a0 <OnTxDelayedTimerEvent+0x60>)
 800b25e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800b262:	f7ff fde7 	bl	800ae34 <LoRaMacHandleResponseTimeout>
 800b266:	b100      	cbz	r0, 800b26a <OnTxDelayedTimerEvent+0x2a>
}
 800b268:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800b26a:	2001      	movs	r0, #1
 800b26c:	f7ff ff64 	bl	800b138 <ScheduleTx>
 800b270:	2800      	cmp	r0, #0
 800b272:	d0f9      	beq.n	800b268 <OnTxDelayedTimerEvent+0x28>
 800b274:	280b      	cmp	r0, #11
 800b276:	d0f7      	beq.n	800b268 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b278:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <OnTxDelayedTimerEvent+0x60>)
 800b27a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800b27e:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800b282:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800b286:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800b28a:	2009      	movs	r0, #9
 800b28c:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800b290:	f002 f9c8 	bl	800d624 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800b294:	f7fe fcee 	bl	8009c74 <StopRetransmission>
            break;
 800b298:	e7e6      	b.n	800b268 <OnTxDelayedTimerEvent+0x28>
 800b29a:	bf00      	nop
 800b29c:	200008c4 	.word	0x200008c4
 800b2a0:	20008000 	.word	0x20008000

0800b2a4 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b2a4:	4b1c      	ldr	r3, [pc, #112]	; (800b318 <LoRaMacHandleMcpsRequest+0x74>)
 800b2a6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b2aa:	f013 0f01 	tst.w	r3, #1
 800b2ae:	d032      	beq.n	800b316 <LoRaMacHandleMcpsRequest+0x72>
{
 800b2b0:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b2b2:	4b19      	ldr	r3, [pc, #100]	; (800b318 <LoRaMacHandleMcpsRequest+0x74>)
 800b2b4:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800b2b8:	b12b      	cbz	r3, 800b2c6 <LoRaMacHandleMcpsRequest+0x22>
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d003      	beq.n	800b2c6 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d006      	beq.n	800b2d0 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	e002      	b.n	800b2cc <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b2c6:	f7fe fc9b 	bl	8009c00 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800b2ca:	b940      	cbnz	r0, 800b2de <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800b2cc:	b1b8      	cbz	r0, 800b2fe <LoRaMacHandleMcpsRequest+0x5a>
}
 800b2ce:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800b2d0:	4b11      	ldr	r3, [pc, #68]	; (800b318 <LoRaMacHandleMcpsRequest+0x74>)
 800b2d2:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800b2d6:	b183      	cbz	r3, 800b2fa <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b2d8:	f7fe fcae 	bl	8009c38 <CheckRetransConfirmedUplink>
 800b2dc:	e7f5      	b.n	800b2ca <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800b2de:	4c0e      	ldr	r4, [pc, #56]	; (800b318 <LoRaMacHandleMcpsRequest+0x74>)
 800b2e0:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800b2e4:	f008 fa38 	bl	8013758 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b2e8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800b2ec:	f023 0320 	bic.w	r3, r3, #32
 800b2f0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800b2f4:	f7fe fcbe 	bl	8009c74 <StopRetransmission>
 800b2f8:	e7e9      	b.n	800b2ce <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	e7e6      	b.n	800b2cc <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b2fe:	4b06      	ldr	r3, [pc, #24]	; (800b318 <LoRaMacHandleMcpsRequest+0x74>)
 800b300:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b304:	f36f 1204 	bfc	r2, #4, #1
 800b308:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800b30c:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800b310:	f7ff ff96 	bl	800b240 <OnTxDelayedTimerEvent>
}
 800b314:	e7db      	b.n	800b2ce <LoRaMacHandleMcpsRequest+0x2a>
 800b316:	4770      	bx	lr
 800b318:	200008c4 	.word	0x200008c4

0800b31c <LoRaMacHandleRequestEvents>:
{
 800b31c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800b31e:	4b22      	ldr	r3, [pc, #136]	; (800b3a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b320:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b324:	bb7b      	cbnz	r3, 800b386 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b326:	4b20      	ldr	r3, [pc, #128]	; (800b3a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b328:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800b32c:	f014 0501 	ands.w	r5, r4, #1
 800b330:	d005      	beq.n	800b33e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b332:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b336:	f36f 0200 	bfc	r2, #0, #1
 800b33a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b33e:	4b1a      	ldr	r3, [pc, #104]	; (800b3a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b340:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b344:	f013 0f04 	tst.w	r3, #4
 800b348:	d006      	beq.n	800b358 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b34a:	4b17      	ldr	r3, [pc, #92]	; (800b3a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b34c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b350:	f36f 0282 	bfc	r2, #2, #1
 800b354:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b358:	2001      	movs	r0, #1
 800b35a:	f7fe fba9 	bl	8009ab0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800b35e:	b135      	cbz	r5, 800b36e <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b360:	4811      	ldr	r0, [pc, #68]	; (800b3a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b362:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800b36c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800b36e:	f014 0f04 	tst.w	r4, #4
 800b372:	d109      	bne.n	800b388 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800b374:	f001 ff07 	bl	800d186 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b378:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b37a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b37e:	f36f 1204 	bfc	r2, #4, #1
 800b382:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800b386:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b388:	4808      	ldr	r0, [pc, #32]	; (800b3ac <LoRaMacHandleRequestEvents+0x90>)
 800b38a:	f002 f975 	bl	800d678 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b38e:	f002 f9ab 	bl	800d6e8 <LoRaMacConfirmQueueGetCnt>
 800b392:	2800      	cmp	r0, #0
 800b394:	d0ee      	beq.n	800b374 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b396:	4a04      	ldr	r2, [pc, #16]	; (800b3a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b398:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800b39c:	f043 0304 	orr.w	r3, r3, #4
 800b3a0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800b3a4:	e7e6      	b.n	800b374 <LoRaMacHandleRequestEvents+0x58>
 800b3a6:	bf00      	nop
 800b3a8:	200008c4 	.word	0x200008c4
 800b3ac:	20000d18 	.word	0x20000d18

0800b3b0 <OpenContinuousRxCWindow>:
{
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800b3b4:	4c16      	ldr	r4, [pc, #88]	; (800b410 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b3b6:	4d17      	ldr	r5, [pc, #92]	; (800b414 <OpenContinuousRxCWindow+0x64>)
 800b3b8:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800b3bc:	9600      	str	r6, [sp, #0]
 800b3be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b3c0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800b3c4:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800b3c8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b3cc:	f002 ff23 	bl	800e216 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b3d6:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800b3da:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b3e4:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b3ee:	f002 ff26 	bl	800e23e <RegionRxConfig>
 800b3f2:	b158      	cbz	r0, 800b40c <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b3f4:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800b3f8:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <OpenContinuousRxCWindow+0x68>)
 800b3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b400:	2000      	movs	r0, #0
 800b402:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800b404:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800b408:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800b40c:	b002      	add	sp, #8
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	20008000 	.word	0x20008000
 800b414:	200008c4 	.word	0x200008c4
 800b418:	080173cc 	.word	0x080173cc

0800b41c <RxWindowSetup>:
{
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800b420:	f008 f99a 	bl	8013758 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800b424:	4b0c      	ldr	r3, [pc, #48]	; (800b458 <RxWindowSetup+0x3c>)
 800b426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b428:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b42a:	4a0c      	ldr	r2, [pc, #48]	; (800b45c <RxWindowSetup+0x40>)
 800b42c:	4621      	mov	r1, r4
 800b42e:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <RxWindowSetup+0x44>)
 800b430:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b434:	f002 ff03 	bl	800e23e <RegionRxConfig>
 800b438:	b160      	cbz	r0, 800b454 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b43a:	4d0a      	ldr	r5, [pc, #40]	; (800b464 <RxWindowSetup+0x48>)
 800b43c:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800b440:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800b444:	4b04      	ldr	r3, [pc, #16]	; (800b458 <RxWindowSetup+0x3c>)
 800b446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b448:	4a05      	ldr	r2, [pc, #20]	; (800b460 <RxWindowSetup+0x44>)
 800b44a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800b44c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800b44e:	7ce3      	ldrb	r3, [r4, #19]
 800b450:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800b454:	bd38      	pop	{r3, r4, r5, pc}
 800b456:	bf00      	nop
 800b458:	080173cc 	.word	0x080173cc
 800b45c:	20000ce8 	.word	0x20000ce8
 800b460:	20008000 	.word	0x20008000
 800b464:	200008c4 	.word	0x200008c4

0800b468 <OnRxWindow2TimerEvent>:
{
 800b468:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b46a:	4b13      	ldr	r3, [pc, #76]	; (800b4b8 <OnRxWindow2TimerEvent+0x50>)
 800b46c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800b470:	b903      	cbnz	r3, 800b474 <OnRxWindow2TimerEvent+0xc>
}
 800b472:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b474:	4810      	ldr	r0, [pc, #64]	; (800b4b8 <OnRxWindow2TimerEvent+0x50>)
 800b476:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800b47a:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b47e:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <OnRxWindow2TimerEvent+0x54>)
 800b480:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b482:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b486:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800b48a:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b48e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800b492:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b496:	2200      	movs	r2, #0
 800b498:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b49c:	2201      	movs	r2, #1
 800b49e:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b4a2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b4a6:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800b4aa:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800b4ae:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800b4b2:	f7ff ffb3 	bl	800b41c <RxWindowSetup>
 800b4b6:	e7dc      	b.n	800b472 <OnRxWindow2TimerEvent+0xa>
 800b4b8:	200008c4 	.word	0x200008c4
 800b4bc:	20008000 	.word	0x20008000

0800b4c0 <OnRxWindow1TimerEvent>:
{
 800b4c0:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800b4c2:	4811      	ldr	r0, [pc, #68]	; (800b508 <OnRxWindow1TimerEvent+0x48>)
 800b4c4:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800b4c8:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800b4cc:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <OnRxWindow1TimerEvent+0x4c>)
 800b4ce:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800b4d2:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b4d6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800b4da:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b4de:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800b4e2:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800b4ec:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b4f0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b4f4:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800b4f8:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800b4fc:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800b500:	f7ff ff8c 	bl	800b41c <RxWindowSetup>
}
 800b504:	bd08      	pop	{r3, pc}
 800b506:	bf00      	nop
 800b508:	200008c4 	.word	0x200008c4
 800b50c:	20008000 	.word	0x20008000

0800b510 <LoRaMacHandleNvm>:
{
 800b510:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800b512:	4b31      	ldr	r3, [pc, #196]	; (800b5d8 <LoRaMacHandleNvm+0xc8>)
 800b514:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b518:	b103      	cbz	r3, 800b51c <LoRaMacHandleNvm+0xc>
}
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800b51e:	2124      	movs	r1, #36	; 0x24
 800b520:	f005 ff0c 	bl	801133c <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800b524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b526:	4283      	cmp	r3, r0
 800b528:	d053      	beq.n	800b5d2 <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800b52a:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800b52c:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800b52e:	211c      	movs	r1, #28
 800b530:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b534:	f005 ff02 	bl	801133c <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800b538:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b53a:	4283      	cmp	r3, r0
 800b53c:	d002      	beq.n	800b544 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800b53e:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800b540:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800b544:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b548:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800b54c:	f005 fef6 	bl	801133c <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800b550:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800b554:	4283      	cmp	r3, r0
 800b556:	d003      	beq.n	800b560 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800b558:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800b55c:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800b560:	21d4      	movs	r1, #212	; 0xd4
 800b562:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800b566:	f005 fee9 	bl	801133c <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800b56a:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800b56e:	4283      	cmp	r3, r0
 800b570:	d003      	beq.n	800b57a <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800b572:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800b576:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800b57a:	2110      	movs	r1, #16
 800b57c:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800b580:	f005 fedc 	bl	801133c <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800b584:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800b588:	4283      	cmp	r3, r0
 800b58a:	d003      	beq.n	800b594 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800b58c:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800b590:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800b594:	f44f 715e 	mov.w	r1, #888	; 0x378
 800b598:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800b59c:	f005 fece 	bl	801133c <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800b5a0:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800b5a4:	4283      	cmp	r3, r0
 800b5a6:	d003      	beq.n	800b5b0 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800b5a8:	f8c4 05b0 	str.w	r0, [r4, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800b5ac:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800b5b0:	2114      	movs	r1, #20
 800b5b2:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800b5b6:	f005 fec1 	bl	801133c <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800b5ba:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800b5be:	4283      	cmp	r3, r0
 800b5c0:	d003      	beq.n	800b5ca <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800b5c2:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800b5c6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f7fe fb94 	bl	8009cf8 <CallNvmDataChangeCallback>
 800b5d0:	e7a3      	b.n	800b51a <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800b5d2:	2500      	movs	r5, #0
 800b5d4:	e7ab      	b.n	800b52e <LoRaMacHandleNvm+0x1e>
 800b5d6:	bf00      	nop
 800b5d8:	200008c4 	.word	0x200008c4

0800b5dc <RestoreNvmData>:
{
 800b5dc:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b5de:	4b3d      	ldr	r3, [pc, #244]	; (800b6d4 <RestoreNvmData+0xf8>)
 800b5e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d001      	beq.n	800b5ec <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800b5e8:	2001      	movs	r0, #1
}
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800b5ec:	4c3a      	ldr	r4, [pc, #232]	; (800b6d8 <RestoreNvmData+0xfc>)
 800b5ee:	2124      	movs	r1, #36	; 0x24
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f005 fea3 	bl	801133c <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800b5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5f8:	4283      	cmp	r3, r0
 800b5fa:	d001      	beq.n	800b600 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b5fc:	2017      	movs	r0, #23
 800b5fe:	e7f4      	b.n	800b5ea <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800b600:	211c      	movs	r1, #28
 800b602:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b606:	f005 fe99 	bl	801133c <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800b60a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b60c:	4283      	cmp	r3, r0
 800b60e:	d001      	beq.n	800b614 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b610:	2017      	movs	r0, #23
 800b612:	e7ea      	b.n	800b5ea <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800b614:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b618:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800b61c:	f005 fe8e 	bl	801133c <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800b620:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800b624:	4283      	cmp	r3, r0
 800b626:	d001      	beq.n	800b62c <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b628:	2017      	movs	r0, #23
 800b62a:	e7de      	b.n	800b5ea <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800b62c:	21d4      	movs	r1, #212	; 0xd4
 800b62e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800b632:	f005 fe83 	bl	801133c <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800b636:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800b63a:	4283      	cmp	r3, r0
 800b63c:	d001      	beq.n	800b642 <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b63e:	2017      	movs	r0, #23
 800b640:	e7d3      	b.n	800b5ea <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800b642:	2110      	movs	r1, #16
 800b644:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800b648:	f005 fe78 	bl	801133c <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800b64c:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800b650:	4283      	cmp	r3, r0
 800b652:	d001      	beq.n	800b658 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b654:	2017      	movs	r0, #23
 800b656:	e7c8      	b.n	800b5ea <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800b658:	f44f 715e 	mov.w	r1, #888	; 0x378
 800b65c:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800b660:	f005 fe6c 	bl	801133c <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800b664:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800b668:	4283      	cmp	r3, r0
 800b66a:	d001      	beq.n	800b670 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b66c:	2017      	movs	r0, #23
 800b66e:	e7bc      	b.n	800b5ea <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800b670:	2114      	movs	r1, #20
 800b672:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800b676:	f005 fe61 	bl	801133c <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800b67a:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800b67e:	4283      	cmp	r3, r0
 800b680:	d001      	beq.n	800b686 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b682:	2017      	movs	r0, #23
 800b684:	e7b1      	b.n	800b5ea <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800b686:	4625      	mov	r5, r4
 800b688:	4c14      	ldr	r4, [pc, #80]	; (800b6dc <RestoreNvmData+0x100>)
 800b68a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b68e:	4629      	mov	r1, r5
 800b690:	4620      	mov	r0, r4
 800b692:	f005 fe32 	bl	80112fa <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800b696:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b69a:	2100      	movs	r1, #0
 800b69c:	4628      	mov	r0, r5
 800b69e:	f005 fe44 	bl	801132a <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b6a2:	4b0c      	ldr	r3, [pc, #48]	; (800b6d4 <RestoreNvmData+0xf8>)
 800b6a4:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800b6a8:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b6ac:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b6ae:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b6b2:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800b6b6:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b6c6:	4b06      	ldr	r3, [pc, #24]	; (800b6e0 <RestoreNvmData+0x104>)
 800b6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ca:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800b6ce:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e78a      	b.n	800b5ea <RestoreNvmData+0xe>
 800b6d4:	200008c4 	.word	0x200008c4
 800b6d8:	200085cc 	.word	0x200085cc
 800b6dc:	20008000 	.word	0x20008000
 800b6e0:	080173cc 	.word	0x080173cc

0800b6e4 <OnRadioRxTimeout>:
{
 800b6e4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b6e6:	4a07      	ldr	r2, [pc, #28]	; (800b704 <OnRadioRxTimeout+0x20>)
 800b6e8:	7813      	ldrb	r3, [r2, #0]
 800b6ea:	f043 0302 	orr.w	r3, r3, #2
 800b6ee:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b6f0:	f7fe faea 	bl	8009cc8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b6f4:	4b04      	ldr	r3, [pc, #16]	; (800b708 <OnRadioRxTimeout+0x24>)
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	2002      	movs	r0, #2
 800b6fc:	f007 fcda 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b700:	bd08      	pop	{r3, pc}
 800b702:	bf00      	nop
 800b704:	200008c0 	.word	0x200008c0
 800b708:	08016cb4 	.word	0x08016cb4

0800b70c <OnRadioTxTimeout>:
{
 800b70c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b70e:	4a07      	ldr	r2, [pc, #28]	; (800b72c <OnRadioTxTimeout+0x20>)
 800b710:	7813      	ldrb	r3, [r2, #0]
 800b712:	f043 0308 	orr.w	r3, r3, #8
 800b716:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b718:	f7fe fad6 	bl	8009cc8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b71c:	4b04      	ldr	r3, [pc, #16]	; (800b730 <OnRadioTxTimeout+0x24>)
 800b71e:	2201      	movs	r2, #1
 800b720:	2100      	movs	r1, #0
 800b722:	2002      	movs	r0, #2
 800b724:	f007 fcc6 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b728:	bd08      	pop	{r3, pc}
 800b72a:	bf00      	nop
 800b72c:	200008c0 	.word	0x200008c0
 800b730:	08016cc4 	.word	0x08016cc4

0800b734 <OnRadioRxDone>:
{
 800b734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b738:	4680      	mov	r8, r0
 800b73a:	460f      	mov	r7, r1
 800b73c:	4616      	mov	r6, r2
 800b73e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b740:	f007 ffca 	bl	80136d8 <UTIL_TIMER_GetCurrentTime>
 800b744:	4c0c      	ldr	r4, [pc, #48]	; (800b778 <OnRadioRxDone+0x44>)
 800b746:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800b748:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800b74c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800b74e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800b750:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800b752:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <OnRadioRxDone+0x48>)
 800b754:	781a      	ldrb	r2, [r3, #0]
 800b756:	f042 0210 	orr.w	r2, r2, #16
 800b75a:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800b75c:	b2d2      	uxtb	r2, r2
 800b75e:	f042 0201 	orr.w	r2, r2, #1
 800b762:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800b764:	f7fe fab0 	bl	8009cc8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b768:	4b05      	ldr	r3, [pc, #20]	; (800b780 <OnRadioRxDone+0x4c>)
 800b76a:	2201      	movs	r2, #1
 800b76c:	2100      	movs	r1, #0
 800b76e:	2002      	movs	r0, #2
 800b770:	f007 fca0 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b778:	20000e70 	.word	0x20000e70
 800b77c:	200008c0 	.word	0x200008c0
 800b780:	08016cd4 	.word	0x08016cd4

0800b784 <OnRadioTxDone>:
{
 800b784:	b510      	push	{r4, lr}
 800b786:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b788:	f007 ffa6 	bl	80136d8 <UTIL_TIMER_GetCurrentTime>
 800b78c:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <OnRadioTxDone+0x3c>)
 800b78e:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b790:	466c      	mov	r4, sp
 800b792:	4620      	mov	r0, r4
 800b794:	f007 fef2 	bl	801357c <SysTimeGet>
 800b798:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <OnRadioTxDone+0x40>)
 800b79a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b79e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b7a2:	4a09      	ldr	r2, [pc, #36]	; (800b7c8 <OnRadioTxDone+0x44>)
 800b7a4:	7813      	ldrb	r3, [r2, #0]
 800b7a6:	f043 0320 	orr.w	r3, r3, #32
 800b7aa:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b7ac:	f7fe fa8c 	bl	8009cc8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b7b0:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <OnRadioTxDone+0x48>)
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	2002      	movs	r0, #2
 800b7b8:	f007 fc7c 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b7bc:	b002      	add	sp, #8
 800b7be:	bd10      	pop	{r4, pc}
 800b7c0:	20000e80 	.word	0x20000e80
 800b7c4:	20000bfc 	.word	0x20000bfc
 800b7c8:	200008c0 	.word	0x200008c0
 800b7cc:	08016ce4 	.word	0x08016ce4

0800b7d0 <ResetMacParameters>:
{
 800b7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7d2:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800b7d4:	b918      	cbnz	r0, 800b7de <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b7d6:	4b61      	ldr	r3, [pc, #388]	; (800b95c <ResetMacParameters+0x18c>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b7de:	4c5f      	ldr	r4, [pc, #380]	; (800b95c <ResetMacParameters+0x18c>)
 800b7e0:	2500      	movs	r5, #0
 800b7e2:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800b7e4:	4e5e      	ldr	r6, [pc, #376]	; (800b960 <ResetMacParameters+0x190>)
 800b7e6:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800b7ea:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800b7ee:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800b7f2:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b7f6:	2701      	movs	r7, #1
 800b7f8:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b7fc:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800b800:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b804:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800b808:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b80c:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800b810:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b814:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800b818:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800b81c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b820:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b824:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800b828:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800b82c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b830:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b834:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800b838:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b83c:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800b840:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b844:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800b848:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b84c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800b850:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800b854:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800b858:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800b85c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800b860:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800b864:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800b868:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b86c:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800b870:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800b874:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800b878:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800b87c:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800b880:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800b884:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800b888:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800b88c:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800b890:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b894:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b898:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800b89c:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b89e:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800b8a2:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800b8a4:	4b2f      	ldr	r3, [pc, #188]	; (800b964 <ResetMacParameters+0x194>)
 800b8a6:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b8a8:	a901      	add	r1, sp, #4
 800b8aa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b8ae:	f002 fc77 	bl	800e1a0 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800b8b2:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b8b6:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b8ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b8bc:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b8c0:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800b8c4:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b8c8:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800b8cc:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b8d0:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b8d4:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b8d8:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800b8dc:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b8e0:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800b8e4:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800b8e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b8ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8ee:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b8f2:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b8f6:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800b900:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800b902:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800b904:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800b908:	b11b      	cbz	r3, 800b912 <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b90e:	695b      	ldr	r3, [r3, #20]
 800b910:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b912:	4b13      	ldr	r3, [pc, #76]	; (800b960 <ResetMacParameters+0x190>)
 800b914:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800b918:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b91a:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800b91e:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b920:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800b924:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b926:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800b92a:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b92c:	4a0b      	ldr	r2, [pc, #44]	; (800b95c <ResetMacParameters+0x18c>)
 800b92e:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800b932:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b934:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800b938:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b93a:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800b93e:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b940:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800b944:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800b946:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800b94a:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b94c:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800b950:	a90e      	add	r1, sp, #56	; 0x38
 800b952:	a805      	add	r0, sp, #20
 800b954:	f001 fc02 	bl	800d15c <LoRaMacClassBInit>
}
 800b958:	b011      	add	sp, #68	; 0x44
 800b95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b95c:	20008000 	.word	0x20008000
 800b960:	200008c4 	.word	0x200008c4
 800b964:	20000de0 	.word	0x20000de0

0800b968 <SwitchClass>:
{
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800b96c:	4b45      	ldr	r3, [pc, #276]	; (800ba84 <SwitchClass+0x11c>)
 800b96e:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800b972:	2d01      	cmp	r5, #1
 800b974:	d06e      	beq.n	800ba54 <SwitchClass+0xec>
 800b976:	2d02      	cmp	r5, #2
 800b978:	d074      	beq.n	800ba64 <SwitchClass+0xfc>
 800b97a:	b10d      	cbz	r5, 800b980 <SwitchClass+0x18>
 800b97c:	2003      	movs	r0, #3
}
 800b97e:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800b980:	bb58      	cbnz	r0, 800b9da <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b982:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800b986:	336c      	adds	r3, #108	; 0x6c
 800b988:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b98c:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800b990:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800b992:	2c01      	cmp	r4, #1
 800b994:	d023      	beq.n	800b9de <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800b996:	2c02      	cmp	r4, #2
 800b998:	d1f1      	bne.n	800b97e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b99a:	4b3a      	ldr	r3, [pc, #232]	; (800ba84 <SwitchClass+0x11c>)
 800b99c:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b9a0:	4e39      	ldr	r6, [pc, #228]	; (800ba88 <SwitchClass+0x120>)
 800b9a2:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800b9a6:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800b9aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9b0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b9b4:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dd15      	ble.n	800b9f0 <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800b9c4:	4b30      	ldr	r3, [pc, #192]	; (800ba88 <SwitchClass+0x120>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800b9cc:	4b2f      	ldr	r3, [pc, #188]	; (800ba8c <SwitchClass+0x124>)
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800b9d2:	f7ff fced 	bl	800b3b0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	e7d1      	b.n	800b97e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b9da:	2003      	movs	r0, #3
 800b9dc:	e7d9      	b.n	800b992 <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f001 fbd2 	bl	800d188 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d1d6      	bne.n	800b996 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b9e8:	4b26      	ldr	r3, [pc, #152]	; (800ba84 <SwitchClass+0x11c>)
 800b9ea:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800b9ee:	e7d2      	b.n	800b996 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800b9f0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800b9f4:	4a23      	ldr	r2, [pc, #140]	; (800ba84 <SwitchClass+0x11c>)
 800b9f6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800b9fa:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800b9fe:	b132      	cbz	r2, 800ba0e <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800ba00:	4a20      	ldr	r2, [pc, #128]	; (800ba84 <SwitchClass+0x11c>)
 800ba02:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ba06:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800ba0a:	2a02      	cmp	r2, #2
 800ba0c:	d002      	beq.n	800ba14 <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ba0e:	3301      	adds	r3, #1
 800ba10:	b25b      	sxtb	r3, r3
 800ba12:	e7d5      	b.n	800b9c0 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800ba14:	4a1b      	ldr	r2, [pc, #108]	; (800ba84 <SwitchClass+0x11c>)
 800ba16:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800ba1a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800ba1e:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800ba20:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800ba24:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ba28:	4b17      	ldr	r3, [pc, #92]	; (800ba88 <SwitchClass+0x120>)
 800ba2a:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800ba2e:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ba32:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ba36:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800ba3a:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ba3e:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800ba42:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ba46:	2203      	movs	r2, #3
 800ba48:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800ba52:	e7b7      	b.n	800b9c4 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ba54:	f001 fb98 	bl	800d188 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	d190      	bne.n	800b97e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ba5c:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <SwitchClass+0x11c>)
 800ba5e:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800ba62:	e78c      	b.n	800b97e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800ba64:	b958      	cbnz	r0, 800ba7e <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800ba66:	4b08      	ldr	r3, [pc, #32]	; (800ba88 <SwitchClass+0x120>)
 800ba68:	2206      	movs	r2, #6
 800ba6a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ba6e:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <SwitchClass+0x11c>)
 800ba70:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800ba74:	4b05      	ldr	r3, [pc, #20]	; (800ba8c <SwitchClass+0x124>)
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	e77f      	b.n	800b97e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ba7e:	2003      	movs	r0, #3
 800ba80:	e77d      	b.n	800b97e <SwitchClass+0x16>
 800ba82:	bf00      	nop
 800ba84:	20008000 	.word	0x20008000
 800ba88:	200008c4 	.word	0x200008c4
 800ba8c:	080173cc 	.word	0x080173cc

0800ba90 <SendReJoinReq>:
{
 800ba90:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800ba92:	28ff      	cmp	r0, #255	; 0xff
 800ba94:	d003      	beq.n	800ba9e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800ba96:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800ba98:	f7ff fb4e 	bl	800b138 <ScheduleTx>
}
 800ba9c:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800ba9e:	2000      	movs	r0, #0
 800baa0:	f7ff ff62 	bl	800b968 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800baa4:	4d0a      	ldr	r5, [pc, #40]	; (800bad0 <SendReJoinReq+0x40>)
 800baa6:	2400      	movs	r4, #0
 800baa8:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800baac:	1cab      	adds	r3, r5, #2
 800baae:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800bab2:	23ff      	movs	r3, #255	; 0xff
 800bab4:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800bab8:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800babc:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800bac0:	f005 fafe 	bl	80110c0 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800bac4:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800bac8:	f005 fadc 	bl	8011084 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800bacc:	4620      	mov	r0, r4
            break;
 800bace:	e7e3      	b.n	800ba98 <SendReJoinReq+0x8>
 800bad0:	200008c4 	.word	0x200008c4

0800bad4 <PrepareFrame>:
{
 800bad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bad8:	b083      	sub	sp, #12
 800bada:	4605      	mov	r5, r0
 800badc:	460e      	mov	r6, r1
 800bade:	4617      	mov	r7, r2
 800bae0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800bae4:	4959      	ldr	r1, [pc, #356]	; (800bc4c <PrepareFrame+0x178>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800baea:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800baee:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800baf0:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800baf2:	4698      	mov	r8, r3
 800baf4:	b1cb      	cbz	r3, 800bb2a <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800baf6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800bc4c <PrepareFrame+0x178>
 800bafa:	4622      	mov	r2, r4
 800bafc:	4641      	mov	r1, r8
 800bafe:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800bb02:	f005 fbfa 	bl	80112fa <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800bb06:	b2e0      	uxtb	r0, r4
 800bb08:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800bb0c:	782b      	ldrb	r3, [r5, #0]
 800bb0e:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800bb12:	782b      	ldrb	r3, [r5, #0]
 800bb14:	095b      	lsrs	r3, r3, #5
 800bb16:	2b04      	cmp	r3, #4
 800bb18:	d009      	beq.n	800bb2e <PrepareFrame+0x5a>
 800bb1a:	2b07      	cmp	r3, #7
 800bb1c:	d079      	beq.n	800bc12 <PrepareFrame+0x13e>
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d009      	beq.n	800bb36 <PrepareFrame+0x62>
 800bb22:	2002      	movs	r0, #2
}
 800bb24:	b003      	add	sp, #12
 800bb26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800bb2a:	4614      	mov	r4, r2
 800bb2c:	e7e3      	b.n	800baf6 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800bb2e:	4b47      	ldr	r3, [pc, #284]	; (800bc4c <PrepareFrame+0x178>)
 800bb30:	2201      	movs	r2, #1
 800bb32:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800bb36:	4b45      	ldr	r3, [pc, #276]	; (800bc4c <PrepareFrame+0x178>)
 800bb38:	2204      	movs	r2, #4
 800bb3a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800bb3e:	1c9a      	adds	r2, r3, #2
 800bb40:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800bb44:	22ff      	movs	r2, #255	; 0xff
 800bb46:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800bb4a:	782a      	ldrb	r2, [r5, #0]
 800bb4c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800bb50:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800bb54:	4a3e      	ldr	r2, [pc, #248]	; (800bc50 <PrepareFrame+0x17c>)
 800bb56:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800bb5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800bb5e:	7832      	ldrb	r2, [r6, #0]
 800bb60:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800bb64:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800bb68:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800bb6c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800bb70:	a801      	add	r0, sp, #4
 800bb72:	f001 ff93 	bl	800da9c <LoRaMacCryptoGetFCntUp>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d15c      	bne.n	800bc34 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800bb7a:	9a01      	ldr	r2, [sp, #4]
 800bb7c:	4b33      	ldr	r3, [pc, #204]	; (800bc4c <PrepareFrame+0x178>)
 800bb7e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800bb82:	2100      	movs	r1, #0
 800bb84:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800bb88:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800bb8c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800bb90:	4668      	mov	r0, sp
 800bb92:	f001 fc2b 	bl	800d3ec <LoRaMacCommandsGetSizeSerializedCmds>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d14e      	bne.n	800bc38 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d0c1      	beq.n	800bb24 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800bba0:	4b2b      	ldr	r3, [pc, #172]	; (800bc50 <PrepareFrame+0x17c>)
 800bba2:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800bba6:	f7fe f8bf 	bl	8009d28 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800bbaa:	4b28      	ldr	r3, [pc, #160]	; (800bc4c <PrepareFrame+0x178>)
 800bbac:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800bbb0:	b113      	cbz	r3, 800bbb8 <PrepareFrame+0xe4>
 800bbb2:	9a00      	ldr	r2, [sp, #0]
 800bbb4:	2a0f      	cmp	r2, #15
 800bbb6:	d915      	bls.n	800bbe4 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800bbb8:	b113      	cbz	r3, 800bbc0 <PrepareFrame+0xec>
 800bbba:	9b00      	ldr	r3, [sp, #0]
 800bbbc:	2b0f      	cmp	r3, #15
 800bbbe:	d821      	bhi.n	800bc04 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800bbc0:	4a24      	ldr	r2, [pc, #144]	; (800bc54 <PrepareFrame+0x180>)
 800bbc2:	4669      	mov	r1, sp
 800bbc4:	f001 fc1e 	bl	800d404 <LoRaMacCommandsSerializeCmds>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d13b      	bne.n	800bc44 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800bbcc:	4b1f      	ldr	r3, [pc, #124]	; (800bc4c <PrepareFrame+0x178>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800bbd4:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800bbd8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800bbdc:	9a00      	ldr	r2, [sp, #0]
 800bbde:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800bbe2:	e79f      	b.n	800bb24 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800bbe4:	4a1c      	ldr	r2, [pc, #112]	; (800bc58 <PrepareFrame+0x184>)
 800bbe6:	4669      	mov	r1, sp
 800bbe8:	200f      	movs	r0, #15
 800bbea:	f001 fc0b 	bl	800d404 <LoRaMacCommandsSerializeCmds>
 800bbee:	bb28      	cbnz	r0, 800bc3c <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800bbf0:	7833      	ldrb	r3, [r6, #0]
 800bbf2:	9a00      	ldr	r2, [sp, #0]
 800bbf4:	f362 0303 	bfi	r3, r2, #0, #4
 800bbf8:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	4b13      	ldr	r3, [pc, #76]	; (800bc4c <PrepareFrame+0x178>)
 800bbfe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800bc02:	e78f      	b.n	800bb24 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800bc04:	4a13      	ldr	r2, [pc, #76]	; (800bc54 <PrepareFrame+0x180>)
 800bc06:	4669      	mov	r1, sp
 800bc08:	f001 fbfc 	bl	800d404 <LoRaMacCommandsSerializeCmds>
 800bc0c:	b1c0      	cbz	r0, 800bc40 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc0e:	2013      	movs	r0, #19
 800bc10:	e788      	b.n	800bb24 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800bc12:	f1b8 0f00 	cmp.w	r8, #0
 800bc16:	d017      	beq.n	800bc48 <PrepareFrame+0x174>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d083      	beq.n	800bb24 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800bc1c:	4c0b      	ldr	r4, [pc, #44]	; (800bc4c <PrepareFrame+0x178>)
 800bc1e:	b282      	uxth	r2, r0
 800bc20:	4641      	mov	r1, r8
 800bc22:	1ce0      	adds	r0, r4, #3
 800bc24:	f005 fb69 	bl	80112fa <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800bc28:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800bc30:	2000      	movs	r0, #0
 800bc32:	e777      	b.n	800bb24 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800bc34:	2012      	movs	r0, #18
 800bc36:	e775      	b.n	800bb24 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc38:	2013      	movs	r0, #19
 800bc3a:	e773      	b.n	800bb24 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc3c:	2013      	movs	r0, #19
 800bc3e:	e771      	b.n	800bb24 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800bc40:	200a      	movs	r0, #10
 800bc42:	e76f      	b.n	800bb24 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc44:	2013      	movs	r0, #19
 800bc46:	e76d      	b.n	800bb24 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800bc48:	2000      	movs	r0, #0
 800bc4a:	e76b      	b.n	800bb24 <PrepareFrame+0x50>
 800bc4c:	200008c4 	.word	0x200008c4
 800bc50:	20008000 	.word	0x20008000
 800bc54:	20000d60 	.word	0x20000d60
 800bc58:	200009dc 	.word	0x200009dc

0800bc5c <Send>:
{
 800bc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc60:	b08a      	sub	sp, #40	; 0x28
 800bc62:	4617      	mov	r7, r2
 800bc64:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bc66:	4c44      	ldr	r4, [pc, #272]	; (800bd78 <Send+0x11c>)
 800bc68:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800bc6c:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bc70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bc72:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bc74:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d07a      	beq.n	800bd72 <Send+0x116>
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800bc80:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800bc84:	b90b      	cbnz	r3, 800bc8a <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800bc86:	2100      	movs	r1, #0
 800bc88:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800bc90:	4839      	ldr	r0, [pc, #228]	; (800bd78 <Send+0x11c>)
 800bc92:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800bc96:	f361 13c7 	bfi	r3, r1, #7, #1
 800bc9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bc9e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d052      	beq.n	800bd4c <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800bca6:	4b34      	ldr	r3, [pc, #208]	; (800bd78 <Send+0x11c>)
 800bca8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bcac:	b12b      	cbz	r3, 800bcba <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800bcae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bcb2:	f043 0320 	orr.w	r3, r3, #32
 800bcb6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800bcc0:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bcc4:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800bcc6:	492c      	ldr	r1, [pc, #176]	; (800bd78 <Send+0x11c>)
 800bcc8:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800bccc:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800bcd0:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800bcd4:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bcd8:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bcdc:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bce0:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800bce4:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800bce8:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800bcec:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800bcf6:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800bcfa:	aa08      	add	r2, sp, #32
 800bcfc:	9200      	str	r2, [sp, #0]
 800bcfe:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800bd02:	3139      	adds	r1, #57	; 0x39
 800bd04:	a803      	add	r0, sp, #12
 800bd06:	f001 f9af 	bl	800d068 <LoRaMacAdrCalcNext>
 800bd0a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bd0e:	f360 1386 	bfi	r3, r0, #6, #1
 800bd12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800bd16:	f8cd 8000 	str.w	r8, [sp]
 800bd1a:	463b      	mov	r3, r7
 800bd1c:	4632      	mov	r2, r6
 800bd1e:	a909      	add	r1, sp, #36	; 0x24
 800bd20:	4628      	mov	r0, r5
 800bd22:	f7ff fed7 	bl	800bad4 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800bd26:	4604      	mov	r4, r0
 800bd28:	b108      	cbz	r0, 800bd2e <Send+0xd2>
 800bd2a:	280a      	cmp	r0, #10
 800bd2c:	d104      	bne.n	800bd38 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800bd2e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800bd32:	f7ff fa01 	bl	800b138 <ScheduleTx>
 800bd36:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800bd38:	b17c      	cbz	r4, 800bd5a <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800bd3a:	4b0f      	ldr	r3, [pc, #60]	; (800bd78 <Send+0x11c>)
 800bd3c:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800bd40:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800bd44:	4620      	mov	r0, r4
 800bd46:	b00a      	add	sp, #40	; 0x28
 800bd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800bd4c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bd50:	f043 0310 	orr.w	r3, r3, #16
 800bd54:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800bd58:	e7a5      	b.n	800bca6 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800bd5a:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <Send+0x11c>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800bd62:	9a08      	ldr	r2, [sp, #32]
 800bd64:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800bd66:	f001 fb0f 	bl	800d388 <LoRaMacCommandsRemoveNoneStickyCmds>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d0ea      	beq.n	800bd44 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bd6e:	2413      	movs	r4, #19
 800bd70:	e7e8      	b.n	800bd44 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800bd72:	2407      	movs	r4, #7
 800bd74:	e7e6      	b.n	800bd44 <Send+0xe8>
 800bd76:	bf00      	nop
 800bd78:	20008000 	.word	0x20008000

0800bd7c <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800bd7c:	4b0c      	ldr	r3, [pc, #48]	; (800bdb0 <LoRaMacIsBusy+0x34>)
 800bd7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d00c      	beq.n	800bda0 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800bd86:	4a0b      	ldr	r2, [pc, #44]	; (800bdb4 <LoRaMacIsBusy+0x38>)
 800bd88:	7812      	ldrb	r2, [r2, #0]
 800bd8a:	f012 0f01 	tst.w	r2, #1
 800bd8e:	d109      	bne.n	800bda4 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800bd90:	b953      	cbnz	r3, 800bda8 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800bd92:	4b07      	ldr	r3, [pc, #28]	; (800bdb0 <LoRaMacIsBusy+0x34>)
 800bd94:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d007      	beq.n	800bdac <LoRaMacIsBusy+0x30>
    return true;
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	4770      	bx	lr
        return false;
 800bda0:	2000      	movs	r0, #0
 800bda2:	4770      	bx	lr
        return true;
 800bda4:	2001      	movs	r0, #1
 800bda6:	4770      	bx	lr
    return true;
 800bda8:	2001      	movs	r0, #1
 800bdaa:	4770      	bx	lr
        return false;
 800bdac:	2000      	movs	r0, #0
}
 800bdae:	4770      	bx	lr
 800bdb0:	200008c4 	.word	0x200008c4
 800bdb4:	200008c0 	.word	0x200008c0

0800bdb8 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800bdb8:	4b04      	ldr	r3, [pc, #16]	; (800bdcc <LoRaMacIsStopped+0x14>)
 800bdba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d001      	beq.n	800bdc6 <LoRaMacIsStopped+0xe>
    return false;
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	4770      	bx	lr
        return true;
 800bdc6:	2001      	movs	r0, #1
}
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	200008c4 	.word	0x200008c4

0800bdd0 <LoRaMacProcess>:
{
 800bdd0:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800bdd2:	f7ff f801 	bl	800add8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800bdd6:	f001 f9e8 	bl	800d1aa <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800bdda:	4b1f      	ldr	r3, [pc, #124]	; (800be58 <LoRaMacProcess+0x88>)
 800bddc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800bde0:	f013 0f10 	tst.w	r3, #16
 800bde4:	d10d      	bne.n	800be02 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800bde6:	f7fd fe69 	bl	8009abc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800bdea:	4b1b      	ldr	r3, [pc, #108]	; (800be58 <LoRaMacProcess+0x88>)
 800bdec:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d022      	beq.n	800be3a <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800bdf4:	4b18      	ldr	r3, [pc, #96]	; (800be58 <LoRaMacProcess+0x88>)
 800bdf6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800bdfa:	f013 0f20 	tst.w	r3, #32
 800bdfe:	d11f      	bne.n	800be40 <LoRaMacProcess+0x70>
}
 800be00:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800be02:	2000      	movs	r0, #0
 800be04:	f7fd fe54 	bl	8009ab0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800be08:	f7fd fe90 	bl	8009b2c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800be0c:	f7fd ff80 	bl	8009d10 <IsRequestPending>
 800be10:	b110      	cbz	r0, 800be18 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800be12:	f7fe f86f 	bl	8009ef4 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800be16:	b918      	cbnz	r0, 800be20 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800be18:	f7ff f820 	bl	800ae5c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800be1c:	f7ff fa42 	bl	800b2a4 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800be20:	f7ff fa7c 	bl	800b31c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800be24:	2001      	movs	r0, #1
 800be26:	f7fd fe43 	bl	8009ab0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800be2a:	4a0b      	ldr	r2, [pc, #44]	; (800be58 <LoRaMacProcess+0x88>)
 800be2c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800be30:	f043 0320 	orr.w	r3, r3, #32
 800be34:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800be38:	e7d5      	b.n	800bde6 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800be3a:	f7ff fab9 	bl	800b3b0 <OpenContinuousRxCWindow>
 800be3e:	e7d9      	b.n	800bdf4 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800be40:	4b05      	ldr	r3, [pc, #20]	; (800be58 <LoRaMacProcess+0x88>)
 800be42:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800be46:	f36f 1245 	bfc	r2, #5, #1
 800be4a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800be4e:	4803      	ldr	r0, [pc, #12]	; (800be5c <LoRaMacProcess+0x8c>)
 800be50:	f7ff fb5e 	bl	800b510 <LoRaMacHandleNvm>
}
 800be54:	e7d4      	b.n	800be00 <LoRaMacProcess+0x30>
 800be56:	bf00      	nop
 800be58:	200008c4 	.word	0x200008c4
 800be5c:	20008000 	.word	0x20008000

0800be60 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800be66:	2800      	cmp	r0, #0
 800be68:	f000 81a3 	beq.w	800c1b2 <LoRaMacInitialization+0x352>
 800be6c:	4688      	mov	r8, r1
 800be6e:	4691      	mov	r9, r2
 800be70:	4607      	mov	r7, r0
 800be72:	2900      	cmp	r1, #0
 800be74:	f000 819f 	beq.w	800c1b6 <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800be78:	6803      	ldr	r3, [r0, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 819d 	beq.w	800c1ba <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800be80:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800be82:	2b00      	cmp	r3, #0
 800be84:	f000 819b 	beq.w	800c1be <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800be88:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 8199 	beq.w	800c1c2 <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800be90:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 8197 	beq.w	800c1c6 <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800be98:	4610      	mov	r0, r2
 800be9a:	f002 f951 	bl	800e140 <RegionIsActive>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	f000 8193 	beq.w	800c1ca <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800bea4:	4638      	mov	r0, r7
 800bea6:	f001 fb41 	bl	800d52c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800beaa:	4ccb      	ldr	r4, [pc, #812]	; (800c1d8 <LoRaMacInitialization+0x378>)
 800beac:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800beb0:	2100      	movs	r1, #0
 800beb2:	4620      	mov	r0, r4
 800beb4:	f005 fa39 	bl	801132a <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800beb8:	4ec8      	ldr	r6, [pc, #800]	; (800c1dc <LoRaMacInitialization+0x37c>)
 800beba:	f240 521c 	movw	r2, #1308	; 0x51c
 800bebe:	2100      	movs	r1, #0
 800bec0:	4630      	mov	r0, r6
 800bec2:	f005 fa32 	bl	801132a <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800bec6:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800beca:	2500      	movs	r5, #0
 800becc:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800bed0:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800bed4:	4bc2      	ldr	r3, [pc, #776]	; (800c1e0 <LoRaMacInitialization+0x380>)
 800bed6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800beda:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800bede:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800bee2:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800bee4:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800bee8:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800beea:	4bbe      	ldr	r3, [pc, #760]	; (800c1e4 <LoRaMacInitialization+0x384>)
 800beec:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800beee:	a905      	add	r1, sp, #20
 800bef0:	4648      	mov	r0, r9
 800bef2:	f002 f955 	bl	800e1a0 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bef6:	230f      	movs	r3, #15
 800bef8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800befc:	a90a      	add	r1, sp, #40	; 0x28
 800befe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bf02:	f002 f927 	bl	800e154 <RegionGetPhyParam>
 800bf06:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800bf08:	1b40      	subs	r0, r0, r5
 800bf0a:	bf18      	it	ne
 800bf0c:	2001      	movne	r0, #1
 800bf0e:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800bf12:	f04f 0a0a 	mov.w	sl, #10
 800bf16:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf1a:	a90a      	add	r1, sp, #40	; 0x28
 800bf1c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bf20:	f002 f918 	bl	800e154 <RegionGetPhyParam>
 800bf24:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800bf26:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800bf2a:	f04f 0906 	mov.w	r9, #6
 800bf2e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf32:	a90a      	add	r1, sp, #40	; 0x28
 800bf34:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bf38:	f002 f90c 	bl	800e154 <RegionGetPhyParam>
 800bf3c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800bf3e:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800bf42:	2310      	movs	r3, #16
 800bf44:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf48:	a90a      	add	r1, sp, #40	; 0x28
 800bf4a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bf4e:	f002 f901 	bl	800e154 <RegionGetPhyParam>
 800bf52:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800bf54:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800bf58:	2311      	movs	r3, #17
 800bf5a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf5e:	a90a      	add	r1, sp, #40	; 0x28
 800bf60:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bf64:	f002 f8f6 	bl	800e154 <RegionGetPhyParam>
 800bf68:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800bf6a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800bf6e:	2312      	movs	r3, #18
 800bf70:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf74:	a90a      	add	r1, sp, #40	; 0x28
 800bf76:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bf7a:	f002 f8eb 	bl	800e154 <RegionGetPhyParam>
 800bf7e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800bf80:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800bf84:	2313      	movs	r3, #19
 800bf86:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf8a:	a90a      	add	r1, sp, #40	; 0x28
 800bf8c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bf90:	f002 f8e0 	bl	800e154 <RegionGetPhyParam>
 800bf94:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800bf96:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800bf9a:	2314      	movs	r3, #20
 800bf9c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfa0:	a90a      	add	r1, sp, #40	; 0x28
 800bfa2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bfa6:	f002 f8d5 	bl	800e154 <RegionGetPhyParam>
 800bfaa:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800bfac:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800bfb0:	2316      	movs	r3, #22
 800bfb2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfb6:	a90a      	add	r1, sp, #40	; 0x28
 800bfb8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bfbc:	f002 f8ca 	bl	800e154 <RegionGetPhyParam>
 800bfc0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800bfc2:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800bfc6:	2317      	movs	r3, #23
 800bfc8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfcc:	a90a      	add	r1, sp, #40	; 0x28
 800bfce:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bfd2:	f002 f8bf 	bl	800e154 <RegionGetPhyParam>
 800bfd6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800bfd8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800bfdc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800bfe0:	2318      	movs	r3, #24
 800bfe2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfe6:	a90a      	add	r1, sp, #40	; 0x28
 800bfe8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bfec:	f002 f8b2 	bl	800e154 <RegionGetPhyParam>
 800bff0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800bff2:	b2c0      	uxtb	r0, r0
 800bff4:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800bff8:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800bffc:	231d      	movs	r3, #29
 800bffe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c002:	a90a      	add	r1, sp, #40	; 0x28
 800c004:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c008:	f002 f8a4 	bl	800e154 <RegionGetPhyParam>
 800c00c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800c00e:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800c012:	231e      	movs	r3, #30
 800c014:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c018:	a90a      	add	r1, sp, #40	; 0x28
 800c01a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c01e:	f002 f899 	bl	800e154 <RegionGetPhyParam>
 800c022:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800c024:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800c028:	231f      	movs	r3, #31
 800c02a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c02e:	a90a      	add	r1, sp, #40	; 0x28
 800c030:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c034:	f002 f88e 	bl	800e154 <RegionGetPhyParam>
 800c038:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800c03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800c040:	2320      	movs	r3, #32
 800c042:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c046:	a90a      	add	r1, sp, #40	; 0x28
 800c048:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c04c:	f002 f882 	bl	800e154 <RegionGetPhyParam>
 800c050:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800c052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c054:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800c058:	230b      	movs	r3, #11
 800c05a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c05e:	a90a      	add	r1, sp, #40	; 0x28
 800c060:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c064:	f002 f876 	bl	800e154 <RegionGetPhyParam>
 800c068:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800c06a:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800c06e:	230c      	movs	r3, #12
 800c070:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c074:	a90a      	add	r1, sp, #40	; 0x28
 800c076:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c07a:	f002 f86b 	bl	800e154 <RegionGetPhyParam>
 800c07e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800c080:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800c084:	f04f 0b01 	mov.w	fp, #1
 800c088:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800c08c:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800c090:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800c094:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800c098:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800c09c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800c0a0:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800c0a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800c0a6:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800c0a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c0ac:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800c0ae:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800c0b2:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800c0b4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800c0b8:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800c0ba:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800c0be:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800c0c2:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f7ff fb82 	bl	800b7d0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800c0cc:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800c0d0:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800c0d4:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800c0d8:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800c0dc:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800c0de:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800c0e0:	9500      	str	r5, [sp, #0]
 800c0e2:	4b41      	ldr	r3, [pc, #260]	; (800c1e8 <LoRaMacInitialization+0x388>)
 800c0e4:	462a      	mov	r2, r5
 800c0e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c0ea:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800c0ee:	f007 fad5 	bl	801369c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800c0f2:	9500      	str	r5, [sp, #0]
 800c0f4:	4b3d      	ldr	r3, [pc, #244]	; (800c1ec <LoRaMacInitialization+0x38c>)
 800c0f6:	462a      	mov	r2, r5
 800c0f8:	f04f 31ff 	mov.w	r1, #4294967295
 800c0fc:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800c100:	f007 facc 	bl	801369c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800c104:	9500      	str	r5, [sp, #0]
 800c106:	4b3a      	ldr	r3, [pc, #232]	; (800c1f0 <LoRaMacInitialization+0x390>)
 800c108:	462a      	mov	r2, r5
 800c10a:	f04f 31ff 	mov.w	r1, #4294967295
 800c10e:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800c112:	f007 fac3 	bl	801369c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800c116:	9500      	str	r5, [sp, #0]
 800c118:	4b36      	ldr	r3, [pc, #216]	; (800c1f4 <LoRaMacInitialization+0x394>)
 800c11a:	462a      	mov	r2, r5
 800c11c:	f04f 31ff 	mov.w	r1, #4294967295
 800c120:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800c124:	f007 faba 	bl	801369c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800c128:	af02      	add	r7, sp, #8
 800c12a:	4638      	mov	r0, r7
 800c12c:	f007 fa48 	bl	80135c0 <SysTimeGetMcuTime>
 800c130:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800c134:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c138:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800c13c:	4b2e      	ldr	r3, [pc, #184]	; (800c1f8 <LoRaMacInitialization+0x398>)
 800c13e:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800c140:	4b2e      	ldr	r3, [pc, #184]	; (800c1fc <LoRaMacInitialization+0x39c>)
 800c142:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800c146:	4b2e      	ldr	r3, [pc, #184]	; (800c200 <LoRaMacInitialization+0x3a0>)
 800c148:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800c14c:	4b2d      	ldr	r3, [pc, #180]	; (800c204 <LoRaMacInitialization+0x3a4>)
 800c14e:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800c152:	4b2d      	ldr	r3, [pc, #180]	; (800c208 <LoRaMacInitialization+0x3a8>)
 800c154:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800c158:	4b2c      	ldr	r3, [pc, #176]	; (800c20c <LoRaMacInitialization+0x3ac>)
 800c15a:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800c15e:	4b2c      	ldr	r3, [pc, #176]	; (800c210 <LoRaMacInitialization+0x3b0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800c166:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800c168:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800c16c:	f004 fdf2 	bl	8010d54 <SecureElementInit>
 800c170:	bb80      	cbnz	r0, 800c1d4 <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800c172:	4620      	mov	r0, r4
 800c174:	f001 fc72 	bl	800da5c <LoRaMacCryptoInit>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d14b      	bne.n	800c214 <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800c17c:	f001 f898 	bl	800d2b0 <LoRaMacCommandsInit>
 800c180:	2800      	cmp	r0, #0
 800c182:	d149      	bne.n	800c218 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800c184:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800c188:	f001 fcba 	bl	800db00 <LoRaMacCryptoSetMulticastReference>
 800c18c:	4604      	mov	r4, r0
 800c18e:	2800      	cmp	r0, #0
 800c190:	d144      	bne.n	800c21c <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800c192:	4d1f      	ldr	r5, [pc, #124]	; (800c210 <LoRaMacInitialization+0x3b0>)
 800c194:	696b      	ldr	r3, [r5, #20]
 800c196:	4798      	blx	r3
 800c198:	f005 f89c 	bl	80112d4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c19c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c19e:	4a0e      	ldr	r2, [pc, #56]	; (800c1d8 <LoRaMacInitialization+0x378>)
 800c1a0:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800c1a4:	4798      	blx	r3
    Radio.Sleep( );
 800c1a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c1a8:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c1aa:	4658      	mov	r0, fp
 800c1ac:	f7fd fc80 	bl	8009ab0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800c1b0:	e00c      	b.n	800c1cc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c1b2:	2403      	movs	r4, #3
 800c1b4:	e00a      	b.n	800c1cc <LoRaMacInitialization+0x36c>
 800c1b6:	2403      	movs	r4, #3
 800c1b8:	e008      	b.n	800c1cc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c1ba:	2403      	movs	r4, #3
 800c1bc:	e006      	b.n	800c1cc <LoRaMacInitialization+0x36c>
 800c1be:	2403      	movs	r4, #3
 800c1c0:	e004      	b.n	800c1cc <LoRaMacInitialization+0x36c>
 800c1c2:	2403      	movs	r4, #3
 800c1c4:	e002      	b.n	800c1cc <LoRaMacInitialization+0x36c>
 800c1c6:	2403      	movs	r4, #3
 800c1c8:	e000      	b.n	800c1cc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c1ca:	2409      	movs	r4, #9
}
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	b00d      	add	sp, #52	; 0x34
 800c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c1d4:	2411      	movs	r4, #17
 800c1d6:	e7f9      	b.n	800c1cc <LoRaMacInitialization+0x36c>
 800c1d8:	20008000 	.word	0x20008000
 800c1dc:	200008c4 	.word	0x200008c4
 800c1e0:	01000400 	.word	0x01000400
 800c1e4:	20000de0 	.word	0x20000de0
 800c1e8:	0800b241 	.word	0x0800b241
 800c1ec:	0800b4c1 	.word	0x0800b4c1
 800c1f0:	0800b469 	.word	0x0800b469
 800c1f4:	08009e91 	.word	0x08009e91
 800c1f8:	200008c0 	.word	0x200008c0
 800c1fc:	0800b785 	.word	0x0800b785
 800c200:	0800b735 	.word	0x0800b735
 800c204:	08009ce1 	.word	0x08009ce1
 800c208:	0800b70d 	.word	0x0800b70d
 800c20c:	0800b6e5 	.word	0x0800b6e5
 800c210:	080173cc 	.word	0x080173cc
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c214:	2411      	movs	r4, #17
 800c216:	e7d9      	b.n	800c1cc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c218:	2413      	movs	r4, #19
 800c21a:	e7d7      	b.n	800c1cc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c21c:	2411      	movs	r4, #17
 800c21e:	e7d5      	b.n	800c1cc <LoRaMacInitialization+0x36c>

0800c220 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800c220:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800c222:	2400      	movs	r4, #0
 800c224:	4b03      	ldr	r3, [pc, #12]	; (800c234 <LoRaMacStart+0x14>)
 800c226:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800c22a:	f7fd fc2d 	bl	8009a88 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800c22e:	4620      	mov	r0, r4
 800c230:	bd10      	pop	{r4, pc}
 800c232:	bf00      	nop
 800c234:	200008c4 	.word	0x200008c4

0800c238 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800c238:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800c23a:	f7ff fd9f 	bl	800bd7c <LoRaMacIsBusy>
 800c23e:	b130      	cbz	r0, 800c24e <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800c240:	4b0b      	ldr	r3, [pc, #44]	; (800c270 <LoRaMacStop+0x38>)
 800c242:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c246:	2b01      	cmp	r3, #1
 800c248:	d010      	beq.n	800c26c <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800c24a:	2001      	movs	r0, #1
}
 800c24c:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c24e:	4b09      	ldr	r3, [pc, #36]	; (800c274 <LoRaMacStop+0x3c>)
 800c250:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c254:	2b02      	cmp	r3, #2
 800c256:	d005      	beq.n	800c264 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800c258:	4b05      	ldr	r3, [pc, #20]	; (800c270 <LoRaMacStop+0x38>)
 800c25a:	2201      	movs	r2, #1
 800c25c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800c260:	2000      	movs	r0, #0
 800c262:	e7f3      	b.n	800c24c <LoRaMacStop+0x14>
            Radio.Sleep( );
 800c264:	4b04      	ldr	r3, [pc, #16]	; (800c278 <LoRaMacStop+0x40>)
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	4798      	blx	r3
 800c26a:	e7f5      	b.n	800c258 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800c26c:	2000      	movs	r0, #0
 800c26e:	e7ed      	b.n	800c24c <LoRaMacStop+0x14>
 800c270:	200008c4 	.word	0x200008c4
 800c274:	20008000 	.word	0x20008000
 800c278:	080173cc 	.word	0x080173cc

0800c27c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800c27c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800c27e:	4c14      	ldr	r4, [pc, #80]	; (800c2d0 <LoRaMacHalt+0x54>)
 800c280:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800c284:	f007 fa68 	bl	8013758 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800c288:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800c28c:	f007 fa64 	bl	8013758 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800c290:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c294:	f007 fa60 	bl	8013758 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800c298:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800c29c:	f007 fa5c 	bl	8013758 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800c2a0:	f000 ff70 	bl	800d184 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800c2a4:	4b0b      	ldr	r3, [pc, #44]	; (800c2d4 <LoRaMacHalt+0x58>)
 800c2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800c2aa:	2500      	movs	r5, #0
 800c2ac:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800c2b0:	4e09      	ldr	r6, [pc, #36]	; (800c2d8 <LoRaMacHalt+0x5c>)
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7ff f92c 	bl	800b510 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800c2b8:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800c2bc:	4631      	mov	r1, r6
 800c2be:	4807      	ldr	r0, [pc, #28]	; (800c2dc <LoRaMacHalt+0x60>)
 800c2c0:	f005 f81b 	bl	80112fa <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	bd70      	pop	{r4, r5, r6, pc}
 800c2ce:	bf00      	nop
 800c2d0:	200008c4 	.word	0x200008c4
 800c2d4:	080173cc 	.word	0x080173cc
 800c2d8:	20008000 	.word	0x20008000
 800c2dc:	200085cc 	.word	0x200085cc

0800c2e0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800c2e0:	b530      	push	{r4, r5, lr}
 800c2e2:	b08b      	sub	sp, #44	; 0x2c
 800c2e4:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c2e6:	4b31      	ldr	r3, [pc, #196]	; (800c3ac <LoRaMacQueryTxPossible+0xcc>)
 800c2e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c2ea:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c2ec:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800c2f0:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c2f4:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800c2f8:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800c2fc:	4b2c      	ldr	r3, [pc, #176]	; (800c3b0 <LoRaMacQueryTxPossible+0xd0>)
 800c2fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c302:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800c30a:	2900      	cmp	r1, #0
 800c30c:	d048      	beq.n	800c3a0 <LoRaMacQueryTxPossible+0xc0>
 800c30e:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800c310:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c314:	4b25      	ldr	r3, [pc, #148]	; (800c3ac <LoRaMacQueryTxPossible+0xcc>)
 800c316:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800c31a:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c31e:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800c320:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800c324:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800c328:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800c32c:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c330:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800c334:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c338:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800c33c:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800c340:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c344:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c348:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800c34c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c350:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800c354:	ab04      	add	r3, sp, #16
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	f10d 030d 	add.w	r3, sp, #13
 800c35c:	f10d 020e 	add.w	r2, sp, #14
 800c360:	f10d 010f 	add.w	r1, sp, #15
 800c364:	a805      	add	r0, sp, #20
 800c366:	f000 fe7f 	bl	800d068 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c36a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800c36e:	f7fd fcdb 	bl	8009d28 <GetMaxAppPayloadWithoutFOptsLength>
 800c372:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c374:	a802      	add	r0, sp, #8
 800c376:	f001 f839 	bl	800d3ec <LoRaMacCommandsGetSizeSerializedCmds>
 800c37a:	b998      	cbnz	r0, 800c3a4 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800c37c:	9b02      	ldr	r3, [sp, #8]
 800c37e:	2b0f      	cmp	r3, #15
 800c380:	d80a      	bhi.n	800c398 <LoRaMacQueryTxPossible+0xb8>
 800c382:	786a      	ldrb	r2, [r5, #1]
 800c384:	4293      	cmp	r3, r2
 800c386:	d807      	bhi.n	800c398 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800c38c:	9b02      	ldr	r3, [sp, #8]
 800c38e:	441c      	add	r4, r3
 800c390:	42a2      	cmp	r2, r4
 800c392:	d309      	bcc.n	800c3a8 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800c394:	b00b      	add	sp, #44	; 0x2c
 800c396:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800c39c:	2008      	movs	r0, #8
 800c39e:	e7f9      	b.n	800c394 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c3a0:	2003      	movs	r0, #3
 800c3a2:	e7f7      	b.n	800c394 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c3a4:	2013      	movs	r0, #19
 800c3a6:	e7f5      	b.n	800c394 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800c3a8:	2008      	movs	r0, #8
 800c3aa:	e7f3      	b.n	800c394 <LoRaMacQueryTxPossible+0xb4>
 800c3ac:	20008000 	.word	0x20008000
 800c3b0:	200008c4 	.word	0x200008c4

0800c3b4 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	f000 815f 	beq.w	800c678 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800c3c0:	7800      	ldrb	r0, [r0, #0]
 800c3c2:	2841      	cmp	r0, #65	; 0x41
 800c3c4:	f200 8154 	bhi.w	800c670 <LoRaMacMibGetRequestConfirm+0x2bc>
 800c3c8:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c3cc:	00470042 	.word	0x00470042
 800c3d0:	0052004d 	.word	0x0052004d
 800c3d4:	005d0057 	.word	0x005d0057
 800c3d8:	01520063 	.word	0x01520063
 800c3dc:	01520152 	.word	0x01520152
 800c3e0:	01520152 	.word	0x01520152
 800c3e4:	01520152 	.word	0x01520152
 800c3e8:	006b0152 	.word	0x006b0152
 800c3ec:	00770071 	.word	0x00770071
 800c3f0:	008c0084 	.word	0x008c0084
 800c3f4:	009c0094 	.word	0x009c0094
 800c3f8:	00a400b1 	.word	0x00a400b1
 800c3fc:	00c400be 	.word	0x00c400be
 800c400:	00ce00c9 	.word	0x00ce00c9
 800c404:	00d800d3 	.word	0x00d800d3
 800c408:	00ee00dd 	.word	0x00ee00dd
 800c40c:	010000f4 	.word	0x010000f4
 800c410:	010600fa 	.word	0x010600fa
 800c414:	0111010b 	.word	0x0111010b
 800c418:	0117011f 	.word	0x0117011f
 800c41c:	0152011b 	.word	0x0152011b
 800c420:	01520125 	.word	0x01520125
 800c424:	01520152 	.word	0x01520152
 800c428:	01520152 	.word	0x01520152
 800c42c:	01520152 	.word	0x01520152
 800c430:	01520152 	.word	0x01520152
 800c434:	01520152 	.word	0x01520152
 800c438:	01520152 	.word	0x01520152
 800c43c:	01520152 	.word	0x01520152
 800c440:	0134012e 	.word	0x0134012e
 800c444:	0140013a 	.word	0x0140013a
 800c448:	014c0146 	.word	0x014c0146
 800c44c:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800c450:	4b8c      	ldr	r3, [pc, #560]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c452:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c456:	7123      	strb	r3, [r4, #4]
            break;
 800c458:	e111      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c45a:	4b8a      	ldr	r3, [pc, #552]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c45c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c460:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c462:	2000      	movs	r0, #0
            break;
 800c464:	e10b      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800c466:	6860      	ldr	r0, [r4, #4]
 800c468:	f004 fe0c 	bl	8011084 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c46c:	2000      	movs	r0, #0
            break;
 800c46e:	e106      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800c470:	6860      	ldr	r0, [r4, #4]
 800c472:	f004 fe25 	bl	80110c0 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c476:	2000      	movs	r0, #0
            break;
 800c478:	e101      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800c47a:	4b82      	ldr	r3, [pc, #520]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c47c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800c480:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c482:	2000      	movs	r0, #0
            break;
 800c484:	e0fb      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800c486:	4b7f      	ldr	r3, [pc, #508]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c48c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c48e:	2000      	movs	r0, #0
            break;
 800c490:	e0f5      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800c492:	1d21      	adds	r1, r4, #4
 800c494:	4b7b      	ldr	r3, [pc, #492]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c496:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800c49a:	f004 fe2d 	bl	80110f8 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c49e:	2000      	movs	r0, #0
            break;
 800c4a0:	e0ed      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800c4a2:	4b78      	ldr	r3, [pc, #480]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4a4:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800c4a8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4aa:	2000      	movs	r0, #0
            break;
 800c4ac:	e0e7      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c4ae:	4b75      	ldr	r3, [pc, #468]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4b0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c4b4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4b6:	2000      	movs	r0, #0
            break;
 800c4b8:	e0e1      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800c4ba:	231c      	movs	r3, #28
 800c4bc:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c4c0:	a902      	add	r1, sp, #8
 800c4c2:	4b70      	ldr	r3, [pc, #448]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4c4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c4c8:	f001 fe44 	bl	800e154 <RegionGetPhyParam>
 800c4cc:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800c4ce:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4d0:	2000      	movs	r0, #0
            break;
 800c4d2:	e0d4      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800c4d4:	3404      	adds	r4, #4
 800c4d6:	4b6c      	ldr	r3, [pc, #432]	; (800c688 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800c4d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4dc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4e0:	2000      	movs	r0, #0
            break;
 800c4e2:	e0cc      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800c4e4:	3404      	adds	r4, #4
 800c4e6:	4b69      	ldr	r3, [pc, #420]	; (800c68c <LoRaMacMibGetRequestConfirm+0x2d8>)
 800c4e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4ec:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4f0:	2000      	movs	r0, #0
            break;
 800c4f2:	e0c4      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800c4f4:	3404      	adds	r4, #4
 800c4f6:	4b66      	ldr	r3, [pc, #408]	; (800c690 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800c4f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4fc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c500:	2000      	movs	r0, #0
            break;
 800c502:	e0bc      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800c504:	3404      	adds	r4, #4
 800c506:	4b63      	ldr	r3, [pc, #396]	; (800c694 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800c508:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c50c:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c510:	2000      	movs	r0, #0
            break;
 800c512:	e0b4      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800c514:	231a      	movs	r3, #26
 800c516:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c51a:	a902      	add	r1, sp, #8
 800c51c:	4b59      	ldr	r3, [pc, #356]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c51e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c522:	f001 fe17 	bl	800e154 <RegionGetPhyParam>
 800c526:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800c528:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c52a:	2000      	movs	r0, #0
            break;
 800c52c:	e0a7      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800c52e:	2319      	movs	r3, #25
 800c530:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c534:	a902      	add	r1, sp, #8
 800c536:	4b53      	ldr	r3, [pc, #332]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c538:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c53c:	f001 fe0a 	bl	800e154 <RegionGetPhyParam>
 800c540:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800c542:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c544:	2000      	movs	r0, #0
            break;
 800c546:	e09a      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c548:	4b4e      	ldr	r3, [pc, #312]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c54a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c54e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c550:	2000      	movs	r0, #0
            break;
 800c552:	e094      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800c554:	4b4b      	ldr	r3, [pc, #300]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c558:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c55a:	2000      	movs	r0, #0
            break;
 800c55c:	e08f      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800c55e:	4b49      	ldr	r3, [pc, #292]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c562:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c564:	2000      	movs	r0, #0
            break;
 800c566:	e08a      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800c568:	4b46      	ldr	r3, [pc, #280]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c56a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c56c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c56e:	2000      	movs	r0, #0
            break;
 800c570:	e085      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800c572:	4b44      	ldr	r3, [pc, #272]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c576:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c578:	2000      	movs	r0, #0
            break;
 800c57a:	e080      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800c57c:	4b41      	ldr	r3, [pc, #260]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c57e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c580:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c582:	2000      	movs	r0, #0
            break;
 800c584:	e07b      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800c586:	2302      	movs	r3, #2
 800c588:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c58c:	4b3d      	ldr	r3, [pc, #244]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c58e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c592:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c596:	a902      	add	r1, sp, #8
 800c598:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c59c:	f001 fdda 	bl	800e154 <RegionGetPhyParam>
 800c5a0:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800c5a2:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5a4:	2000      	movs	r0, #0
            break;
 800c5a6:	e06a      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c5a8:	4b36      	ldr	r3, [pc, #216]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c5aa:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800c5ae:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5b0:	2000      	movs	r0, #0
            break;
 800c5b2:	e064      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c5b4:	4b33      	ldr	r3, [pc, #204]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c5b6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800c5ba:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5bc:	2000      	movs	r0, #0
            break;
 800c5be:	e05e      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c5c0:	4b30      	ldr	r3, [pc, #192]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c5c2:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800c5c6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5c8:	2000      	movs	r0, #0
            break;
 800c5ca:	e058      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c5cc:	4b2d      	ldr	r3, [pc, #180]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c5ce:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800c5d2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5d4:	2000      	movs	r0, #0
            break;
 800c5d6:	e052      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800c5d8:	4b2a      	ldr	r3, [pc, #168]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c5da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5dc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5de:	2000      	movs	r0, #0
            break;
 800c5e0:	e04d      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800c5e2:	4b28      	ldr	r3, [pc, #160]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c5e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c5e8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5ea:	2000      	movs	r0, #0
            break;
 800c5ec:	e047      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c5ee:	4b25      	ldr	r3, [pc, #148]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c5f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5f4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5f6:	2000      	movs	r0, #0
            break;
 800c5f8:	e041      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800c5fa:	4b22      	ldr	r3, [pc, #136]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c5fc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5fe:	2000      	movs	r0, #0
            break;
 800c600:	e03d      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800c602:	4b25      	ldr	r3, [pc, #148]	; (800c698 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800c604:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c606:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800c608:	e039      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800c60a:	4b1e      	ldr	r3, [pc, #120]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c60c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c610:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c612:	2000      	movs	r0, #0
            break;
 800c614:	e033      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800c616:	4b1b      	ldr	r3, [pc, #108]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c618:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c61c:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800c61e:	f001 fec1 	bl	800e3a4 <RegionGetVersion>
 800c622:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c624:	2000      	movs	r0, #0
            break;
 800c626:	e02a      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800c628:	4b16      	ldr	r3, [pc, #88]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c62e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c630:	2000      	movs	r0, #0
            break;
 800c632:	e024      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800c634:	4b13      	ldr	r3, [pc, #76]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c636:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800c63a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c63c:	2000      	movs	r0, #0
            break;
 800c63e:	e01e      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800c640:	4b10      	ldr	r3, [pc, #64]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c642:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800c646:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c648:	2000      	movs	r0, #0
            break;
 800c64a:	e018      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800c64c:	4b0d      	ldr	r3, [pc, #52]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c64e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800c652:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c654:	2000      	movs	r0, #0
            break;
 800c656:	e012      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800c658:	4b0a      	ldr	r3, [pc, #40]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c65a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800c65e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c660:	2000      	movs	r0, #0
            break;
 800c662:	e00c      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800c664:	4b07      	ldr	r3, [pc, #28]	; (800c684 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c666:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800c66a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c66c:	2000      	movs	r0, #0
            break;
 800c66e:	e006      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800c670:	4620      	mov	r0, r4
 800c672:	f000 fd8b 	bl	800d18c <LoRaMacClassBMibGetRequestConfirm>
            break;
 800c676:	e002      	b.n	800c67e <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c678:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800c67a:	4770      	bx	lr
    switch( mibGet->Type )
 800c67c:	2018      	movs	r0, #24
}
 800c67e:	b004      	add	sp, #16
 800c680:	bd10      	pop	{r4, pc}
 800c682:	bf00      	nop
 800c684:	20008000 	.word	0x20008000
 800c688:	2000806c 	.word	0x2000806c
 800c68c:	200080b4 	.word	0x200080b4
 800c690:	20008074 	.word	0x20008074
 800c694:	200080bc 	.word	0x200080bc
 800c698:	200085cc 	.word	0x200085cc

0800c69c <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800c69c:	2800      	cmp	r0, #0
 800c69e:	f000 827f 	beq.w	800cba0 <LoRaMacMibSetRequestConfirm+0x504>
{
 800c6a2:	b530      	push	{r4, r5, lr}
 800c6a4:	b085      	sub	sp, #20
 800c6a6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800c6a8:	4b9b      	ldr	r3, [pc, #620]	; (800c918 <LoRaMacMibSetRequestConfirm+0x27c>)
 800c6aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c6ae:	f013 0f02 	tst.w	r3, #2
 800c6b2:	f040 8277 	bne.w	800cba4 <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800c6b6:	7805      	ldrb	r5, [r0, #0]
 800c6b8:	2d41      	cmp	r5, #65	; 0x41
 800c6ba:	f200 826e 	bhi.w	800cb9a <LoRaMacMibSetRequestConfirm+0x4fe>
 800c6be:	e8df f015 	tbh	[pc, r5, lsl #1]
 800c6c2:	0042      	.short	0x0042
 800c6c4:	0058004f 	.word	0x0058004f
 800c6c8:	0066005f 	.word	0x0066005f
 800c6cc:	0072006c 	.word	0x0072006c
 800c6d0:	008b0080 	.word	0x008b0080
 800c6d4:	00a10096 	.word	0x00a10096
 800c6d8:	00b700ac 	.word	0x00b700ac
 800c6dc:	00ce00c2 	.word	0x00ce00c2
 800c6e0:	00e500da 	.word	0x00e500da
 800c6e4:	00eb026c 	.word	0x00eb026c
 800c6e8:	01350111 	.word	0x01350111
 800c6ec:	018d0163 	.word	0x018d0163
 800c6f0:	019d017d 	.word	0x019d017d
 800c6f4:	01ad01a8 	.word	0x01ad01a8
 800c6f8:	01b701b2 	.word	0x01b701b2
 800c6fc:	026c01bc 	.word	0x026c01bc
 800c700:	01d601c1 	.word	0x01d601c1
 800c704:	01ef0204 	.word	0x01ef0204
 800c708:	02200219 	.word	0x02200219
 800c70c:	022e0228 	.word	0x022e0228
 800c710:	026c0234 	.word	0x026c0234
 800c714:	026c0237 	.word	0x026c0237
 800c718:	026c026c 	.word	0x026c026c
 800c71c:	026c026c 	.word	0x026c026c
 800c720:	026c026c 	.word	0x026c026c
 800c724:	026c026c 	.word	0x026c026c
 800c728:	026c026c 	.word	0x026c026c
 800c72c:	026c026c 	.word	0x026c026c
 800c730:	026c026c 	.word	0x026c026c
 800c734:	0248026c 	.word	0x0248026c
 800c738:	0254024e 	.word	0x0254024e
 800c73c:	0260025a 	.word	0x0260025a
 800c740:	02730266 	.word	0x02730266
 800c744:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800c746:	7900      	ldrb	r0, [r0, #4]
 800c748:	f7ff f90e 	bl	800b968 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800c74c:	b930      	cbnz	r0, 800c75c <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c74e:	4a72      	ldr	r2, [pc, #456]	; (800c918 <LoRaMacMibSetRequestConfirm+0x27c>)
 800c750:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c754:	f043 0320 	orr.w	r3, r3, #32
 800c758:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800c75c:	b005      	add	sp, #20
 800c75e:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800c760:	7903      	ldrb	r3, [r0, #4]
 800c762:	2b02      	cmp	r3, #2
 800c764:	f000 8222 	beq.w	800cbac <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800c768:	4a6c      	ldr	r2, [pc, #432]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c76a:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c76e:	2000      	movs	r0, #0
 800c770:	e7ed      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800c772:	6840      	ldr	r0, [r0, #4]
 800c774:	f004 fc78 	bl	8011068 <SecureElementSetDevEui>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d0e8      	beq.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c77c:	2003      	movs	r0, #3
 800c77e:	e7ed      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800c780:	6840      	ldr	r0, [r0, #4]
 800c782:	f004 fc8d 	bl	80110a0 <SecureElementSetJoinEui>
 800c786:	2800      	cmp	r0, #0
 800c788:	d0e1      	beq.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c78a:	4628      	mov	r0, r5
 800c78c:	e7e6      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800c78e:	7902      	ldrb	r2, [r0, #4]
 800c790:	4b62      	ldr	r3, [pc, #392]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c792:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c796:	2000      	movs	r0, #0
 800c798:	e7d9      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800c79a:	6842      	ldr	r2, [r0, #4]
 800c79c:	4b5f      	ldr	r3, [pc, #380]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c79e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e7d3      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800c7a6:	6841      	ldr	r1, [r0, #4]
 800c7a8:	4b5c      	ldr	r3, [pc, #368]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c7aa:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800c7ae:	f004 fc95 	bl	80110dc <SecureElementSetDevAddr>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	f040 81fc 	bne.w	800cbb0 <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800c7b8:	6862      	ldr	r2, [r4, #4]
 800c7ba:	4b58      	ldr	r3, [pc, #352]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c7bc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800c7c0:	e7c5      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800c7c2:	6841      	ldr	r1, [r0, #4]
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	f000 81f5 	beq.w	800cbb4 <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	f001 faa2 	bl	800dd14 <LoRaMacCryptoSetKey>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d0bc      	beq.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c7d4:	2011      	movs	r0, #17
 800c7d6:	e7c1      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800c7d8:	6841      	ldr	r1, [r0, #4]
 800c7da:	2900      	cmp	r1, #0
 800c7dc:	f000 81ec 	beq.w	800cbb8 <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800c7e0:	2001      	movs	r0, #1
 800c7e2:	f001 fa97 	bl	800dd14 <LoRaMacCryptoSetKey>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0b0      	beq.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c7ea:	2011      	movs	r0, #17
 800c7ec:	e7b6      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800c7ee:	6841      	ldr	r1, [r0, #4]
 800c7f0:	2900      	cmp	r1, #0
 800c7f2:	f000 81e3 	beq.w	800cbbc <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800c7f6:	2008      	movs	r0, #8
 800c7f8:	f001 fa8c 	bl	800dd14 <LoRaMacCryptoSetKey>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d0a5      	beq.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c800:	2011      	movs	r0, #17
 800c802:	e7ab      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800c804:	6841      	ldr	r1, [r0, #4]
 800c806:	2900      	cmp	r1, #0
 800c808:	f000 81da 	beq.w	800cbc0 <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800c80c:	2009      	movs	r0, #9
 800c80e:	f001 fa81 	bl	800dd14 <LoRaMacCryptoSetKey>
 800c812:	2800      	cmp	r0, #0
 800c814:	d09a      	beq.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c816:	2011      	movs	r0, #17
 800c818:	e7a0      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800c81a:	6841      	ldr	r1, [r0, #4]
 800c81c:	2900      	cmp	r1, #0
 800c81e:	f000 81d1 	beq.w	800cbc4 <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800c822:	200c      	movs	r0, #12
 800c824:	f001 fa76 	bl	800dd14 <LoRaMacCryptoSetKey>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d08f      	beq.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c82c:	2011      	movs	r0, #17
 800c82e:	e795      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800c830:	6841      	ldr	r1, [r0, #4]
 800c832:	2900      	cmp	r1, #0
 800c834:	f000 81c8 	beq.w	800cbc8 <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800c838:	200d      	movs	r0, #13
 800c83a:	f001 fa6b 	bl	800dd14 <LoRaMacCryptoSetKey>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d084      	beq.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c842:	2011      	movs	r0, #17
 800c844:	e78a      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800c846:	6841      	ldr	r1, [r0, #4]
 800c848:	2900      	cmp	r1, #0
 800c84a:	f000 81bf 	beq.w	800cbcc <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800c84e:	200e      	movs	r0, #14
 800c850:	f001 fa60 	bl	800dd14 <LoRaMacCryptoSetKey>
 800c854:	2800      	cmp	r0, #0
 800c856:	f43f af79 	beq.w	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c85a:	2011      	movs	r0, #17
 800c85c:	e77e      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800c85e:	6841      	ldr	r1, [r0, #4]
 800c860:	2900      	cmp	r1, #0
 800c862:	f000 81b5 	beq.w	800cbd0 <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800c866:	200f      	movs	r0, #15
 800c868:	f001 fa54 	bl	800dd14 <LoRaMacCryptoSetKey>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	f43f af6d 	beq.w	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c872:	2011      	movs	r0, #17
 800c874:	e772      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800c876:	7900      	ldrb	r0, [r0, #4]
 800c878:	4b28      	ldr	r3, [pc, #160]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c87a:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c87e:	4c28      	ldr	r4, [pc, #160]	; (800c920 <LoRaMacMibSetRequestConfirm+0x284>)
 800c880:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c882:	4798      	blx	r3
            Radio.Sleep( );
 800c884:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c886:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c888:	2000      	movs	r0, #0
 800c88a:	e760      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800c88c:	7902      	ldrb	r2, [r0, #4]
 800c88e:	4b23      	ldr	r3, [pc, #140]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c890:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c894:	2000      	movs	r0, #0
 800c896:	e75a      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c898:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c89c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c8a0:	4b1e      	ldr	r3, [pc, #120]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c8a2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c8a6:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800c8aa:	2207      	movs	r2, #7
 800c8ac:	a901      	add	r1, sp, #4
 800c8ae:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c8b2:	f001 fc83 	bl	800e1bc <RegionVerify>
 800c8b6:	b908      	cbnz	r0, 800c8bc <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c8b8:	2003      	movs	r0, #3
 800c8ba:	e747      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800c8bc:	6863      	ldr	r3, [r4, #4]
 800c8be:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	a901      	add	r1, sp, #4
 800c8c4:	4b15      	ldr	r3, [pc, #84]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c8c6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c8ca:	f001 fc77 	bl	800e1bc <RegionVerify>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f000 8180 	beq.w	800cbd4 <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800c8d4:	4b13      	ldr	r3, [pc, #76]	; (800c924 <LoRaMacMibSetRequestConfirm+0x288>)
 800c8d6:	3404      	adds	r4, #4
 800c8d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c8dc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	e733      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c8e4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c8e8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c8ec:	4b0b      	ldr	r3, [pc, #44]	; (800c91c <LoRaMacMibSetRequestConfirm+0x280>)
 800c8ee:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c8f2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c8f6:	2207      	movs	r2, #7
 800c8f8:	a901      	add	r1, sp, #4
 800c8fa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c8fe:	f001 fc5d 	bl	800e1bc <RegionVerify>
 800c902:	2800      	cmp	r0, #0
 800c904:	f000 8168 	beq.w	800cbd8 <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800c908:	4b07      	ldr	r3, [pc, #28]	; (800c928 <LoRaMacMibSetRequestConfirm+0x28c>)
 800c90a:	3404      	adds	r4, #4
 800c90c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c910:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c914:	2000      	movs	r0, #0
 800c916:	e719      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
 800c918:	200008c4 	.word	0x200008c4
 800c91c:	20008000 	.word	0x20008000
 800c920:	080173cc 	.word	0x080173cc
 800c924:	2000806c 	.word	0x2000806c
 800c928:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c92c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c930:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c934:	4bb0      	ldr	r3, [pc, #704]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c936:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c93a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c93e:	2207      	movs	r2, #7
 800c940:	a901      	add	r1, sp, #4
 800c942:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c946:	f001 fc39 	bl	800e1bc <RegionVerify>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f000 8146 	beq.w	800cbdc <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800c950:	4ba9      	ldr	r3, [pc, #676]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c952:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800c956:	3404      	adds	r4, #4
 800c958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c95c:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c960:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c964:	2b02      	cmp	r3, #2
 800c966:	d001      	beq.n	800c96c <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c968:	2000      	movs	r0, #0
 800c96a:	e6ef      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c96c:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800c970:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800c974:	2800      	cmp	r0, #0
 800c976:	f43f aee9 	beq.w	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800c97a:	4ba0      	ldr	r3, [pc, #640]	; (800cbfc <LoRaMacMibSetRequestConfirm+0x560>)
 800c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800c980:	f7fe fd16 	bl	800b3b0 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c984:	2000      	movs	r0, #0
 800c986:	e6e1      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c988:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c98c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c990:	4b99      	ldr	r3, [pc, #612]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c992:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c996:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c99a:	2207      	movs	r2, #7
 800c99c:	a901      	add	r1, sp, #4
 800c99e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c9a2:	f001 fc0b 	bl	800e1bc <RegionVerify>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f000 811a 	beq.w	800cbe0 <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800c9ac:	4b94      	ldr	r3, [pc, #592]	; (800cc00 <LoRaMacMibSetRequestConfirm+0x564>)
 800c9ae:	3404      	adds	r4, #4
 800c9b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c9b4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	e6c7      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800c9bc:	6843      	ldr	r3, [r0, #4]
 800c9be:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c9c6:	a902      	add	r1, sp, #8
 800c9c8:	4b8b      	ldr	r3, [pc, #556]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c9ca:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c9ce:	f001 fc13 	bl	800e1f8 <RegionChanMaskSet>
 800c9d2:	b108      	cbz	r0, 800c9d8 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	e6b9      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9d8:	2003      	movs	r0, #3
 800c9da:	e6bf      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800c9dc:	6843      	ldr	r3, [r0, #4]
 800c9de:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c9e6:	a902      	add	r1, sp, #8
 800c9e8:	4b83      	ldr	r3, [pc, #524]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c9ea:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c9ee:	f001 fc03 	bl	800e1f8 <RegionChanMaskSet>
 800c9f2:	b108      	cbz	r0, 800c9f8 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	e6a9      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9f8:	2003      	movs	r0, #3
 800c9fa:	e6af      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800c9fc:	7902      	ldrb	r2, [r0, #4]
 800c9fe:	1e53      	subs	r3, r2, #1
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b0e      	cmp	r3, #14
 800ca04:	f200 80ee 	bhi.w	800cbe4 <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ca08:	4b7b      	ldr	r3, [pc, #492]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca0a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca0e:	2000      	movs	r0, #0
 800ca10:	e69c      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ca12:	6842      	ldr	r2, [r0, #4]
 800ca14:	4b78      	ldr	r3, [pc, #480]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca16:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e698      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ca1c:	6842      	ldr	r2, [r0, #4]
 800ca1e:	4b76      	ldr	r3, [pc, #472]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca20:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca22:	2000      	movs	r0, #0
 800ca24:	e693      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ca26:	6842      	ldr	r2, [r0, #4]
 800ca28:	4b73      	ldr	r3, [pc, #460]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca2a:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	e68e      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ca30:	6842      	ldr	r2, [r0, #4]
 800ca32:	4b71      	ldr	r3, [pc, #452]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca34:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca36:	2000      	movs	r0, #0
 800ca38:	e689      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ca3a:	6842      	ldr	r2, [r0, #4]
 800ca3c:	4b6e      	ldr	r3, [pc, #440]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca3e:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca40:	2000      	movs	r0, #0
 800ca42:	e684      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ca44:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ca48:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ca4c:	2206      	movs	r2, #6
 800ca4e:	a901      	add	r1, sp, #4
 800ca50:	4b69      	ldr	r3, [pc, #420]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca52:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ca56:	f001 fbb1 	bl	800e1bc <RegionVerify>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	f000 80c4 	beq.w	800cbe8 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ca60:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ca64:	4b64      	ldr	r3, [pc, #400]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca66:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	e66e      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ca6e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ca72:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ca76:	4b60      	ldr	r3, [pc, #384]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca78:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ca7c:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ca80:	2205      	movs	r2, #5
 800ca82:	a901      	add	r1, sp, #4
 800ca84:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ca88:	f001 fb98 	bl	800e1bc <RegionVerify>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	f000 80ad 	beq.w	800cbec <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ca92:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ca96:	4b58      	ldr	r3, [pc, #352]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ca98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e655      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800caa0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800caa4:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800caa8:	220a      	movs	r2, #10
 800caaa:	a901      	add	r1, sp, #4
 800caac:	4b52      	ldr	r3, [pc, #328]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800caae:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cab2:	f001 fb83 	bl	800e1bc <RegionVerify>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f000 809a 	beq.w	800cbf0 <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800cabc:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800cac0:	4b4d      	ldr	r3, [pc, #308]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cac2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cac6:	2000      	movs	r0, #0
 800cac8:	e640      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800caca:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800cace:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800cad2:	2209      	movs	r2, #9
 800cad4:	a901      	add	r1, sp, #4
 800cad6:	4b48      	ldr	r3, [pc, #288]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cad8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cadc:	f001 fb6e 	bl	800e1bc <RegionVerify>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	f000 8087 	beq.w	800cbf4 <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800cae6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800caea:	4b43      	ldr	r3, [pc, #268]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800caec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800caf0:	2000      	movs	r0, #0
 800caf2:	e62b      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800caf4:	6842      	ldr	r2, [r0, #4]
 800caf6:	4b40      	ldr	r3, [pc, #256]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800caf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800cafc:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cafe:	2000      	movs	r0, #0
 800cb00:	e625      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800cb02:	7902      	ldrb	r2, [r0, #4]
 800cb04:	4b3c      	ldr	r3, [pc, #240]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800cb0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb0e:	2000      	movs	r0, #0
 800cb10:	e61d      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800cb12:	6842      	ldr	r2, [r0, #4]
 800cb14:	4b38      	ldr	r3, [pc, #224]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	e617      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800cb1e:	6842      	ldr	r2, [r0, #4]
 800cb20:	4b35      	ldr	r3, [pc, #212]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb22:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb26:	2000      	movs	r0, #0
 800cb28:	e611      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800cb2a:	f7fe fd57 	bl	800b5dc <RestoreNvmData>
            break;
 800cb2e:	e60d      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800cb30:	7983      	ldrb	r3, [r0, #6]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d901      	bls.n	800cb3a <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb36:	2003      	movs	r0, #3
 800cb38:	e610      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800cb3a:	6842      	ldr	r2, [r0, #4]
 800cb3c:	4b2e      	ldr	r3, [pc, #184]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb3e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800cb42:	6840      	ldr	r0, [r0, #4]
 800cb44:	f000 ffa2 	bl	800da8c <LoRaMacCryptoSetLrWanVersion>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	f43f ae00 	beq.w	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800cb4e:	2011      	movs	r0, #17
 800cb50:	e604      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800cb52:	6842      	ldr	r2, [r0, #4]
 800cb54:	4b28      	ldr	r3, [pc, #160]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	e5f7      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800cb5e:	7902      	ldrb	r2, [r0, #4]
 800cb60:	4b25      	ldr	r3, [pc, #148]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb62:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb66:	2000      	movs	r0, #0
 800cb68:	e5f1      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800cb6a:	8882      	ldrh	r2, [r0, #4]
 800cb6c:	4b22      	ldr	r3, [pc, #136]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb6e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb72:	2000      	movs	r0, #0
 800cb74:	e5eb      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800cb76:	8882      	ldrh	r2, [r0, #4]
 800cb78:	4b1f      	ldr	r3, [pc, #124]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb7a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e5e5      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800cb82:	8882      	ldrh	r2, [r0, #4]
 800cb84:	4b1c      	ldr	r3, [pc, #112]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb86:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	e5df      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800cb8e:	8882      	ldrh	r2, [r0, #4]
 800cb90:	4b19      	ldr	r3, [pc, #100]	; (800cbf8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800cb92:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb96:	2000      	movs	r0, #0
 800cb98:	e5d9      	b.n	800c74e <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800cb9a:	f000 faf9 	bl	800d190 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800cb9e:	e5d5      	b.n	800c74c <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cba0:	2003      	movs	r0, #3
}
 800cba2:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800cba4:	2001      	movs	r0, #1
 800cba6:	e5d9      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800cba8:	2018      	movs	r0, #24
 800cbaa:	e5d7      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbac:	2003      	movs	r0, #3
 800cbae:	e5d5      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbb0:	2003      	movs	r0, #3
 800cbb2:	e5d3      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbb4:	2003      	movs	r0, #3
 800cbb6:	e5d1      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbb8:	2003      	movs	r0, #3
 800cbba:	e5cf      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbbc:	2003      	movs	r0, #3
 800cbbe:	e5cd      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbc0:	2003      	movs	r0, #3
 800cbc2:	e5cb      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbc4:	2003      	movs	r0, #3
 800cbc6:	e5c9      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbc8:	2003      	movs	r0, #3
 800cbca:	e5c7      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbcc:	2003      	movs	r0, #3
 800cbce:	e5c5      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbd0:	2003      	movs	r0, #3
 800cbd2:	e5c3      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbd4:	2003      	movs	r0, #3
 800cbd6:	e5c1      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbd8:	2003      	movs	r0, #3
 800cbda:	e5bf      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbdc:	2003      	movs	r0, #3
 800cbde:	e5bd      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbe0:	2003      	movs	r0, #3
 800cbe2:	e5bb      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbe4:	2003      	movs	r0, #3
 800cbe6:	e5b9      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbe8:	2003      	movs	r0, #3
 800cbea:	e5b7      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbec:	2003      	movs	r0, #3
 800cbee:	e5b5      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbf0:	2003      	movs	r0, #3
 800cbf2:	e5b3      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbf4:	2003      	movs	r0, #3
 800cbf6:	e5b1      	b.n	800c75c <LoRaMacMibSetRequestConfirm+0xc0>
 800cbf8:	20008000 	.word	0x20008000
 800cbfc:	080173cc 	.word	0x080173cc
 800cc00:	200080bc 	.word	0x200080bc

0800cc04 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800cc08:	2300      	movs	r3, #0
 800cc0a:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	f000 80f3 	beq.w	800cdfa <LoRaMacMlmeRequest+0x1f6>
 800cc14:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800cc16:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800cc18:	f7ff f8b0 	bl	800bd7c <LoRaMacIsBusy>
 800cc1c:	b118      	cbz	r0, 800cc26 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800cc1e:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800cc20:	4620      	mov	r0, r4
 800cc22:	b006      	add	sp, #24
 800cc24:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800cc26:	f000 fd65 	bl	800d6f4 <LoRaMacConfirmQueueIsFull>
 800cc2a:	b108      	cbz	r0, 800cc30 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800cc2c:	2401      	movs	r4, #1
 800cc2e:	e7f7      	b.n	800cc20 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800cc30:	f000 fd5a 	bl	800d6e8 <LoRaMacConfirmQueueGetCnt>
 800cc34:	b308      	cbz	r0, 800cc7a <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cc36:	4b72      	ldr	r3, [pc, #456]	; (800ce00 <LoRaMacMlmeRequest+0x1fc>)
 800cc38:	2101      	movs	r1, #1
 800cc3a:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800cc3e:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800cc42:	f042 0204 	orr.w	r2, r2, #4
 800cc46:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800cc4a:	782b      	ldrb	r3, [r5, #0]
 800cc4c:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cc50:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800cc54:	2200      	movs	r2, #0
 800cc56:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800cc5a:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800cc5e:	461c      	mov	r4, r3
 800cc60:	3b01      	subs	r3, #1
 800cc62:	2b0c      	cmp	r3, #12
 800cc64:	f200 80af 	bhi.w	800cdc6 <LoRaMacMlmeRequest+0x1c2>
 800cc68:	e8df f003 	tbb	[pc, r3]
 800cc6c:	adadad0d 	.word	0xadadad0d
 800cc70:	adad675d 	.word	0xadad675d
 800cc74:	7f9ead70 	.word	0x7f9ead70
 800cc78:	95          	.byte	0x95
 800cc79:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800cc7a:	2214      	movs	r2, #20
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4861      	ldr	r0, [pc, #388]	; (800ce04 <LoRaMacMlmeRequest+0x200>)
 800cc80:	f004 fb53 	bl	801132a <memset1>
 800cc84:	e7d7      	b.n	800cc36 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800cc86:	4b5e      	ldr	r3, [pc, #376]	; (800ce00 <LoRaMacMlmeRequest+0x1fc>)
 800cc88:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cc8c:	f013 0f20 	tst.w	r3, #32
 800cc90:	d1c6      	bne.n	800cc20 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800cc92:	792b      	ldrb	r3, [r5, #4]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d003      	beq.n	800cca0 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d026      	beq.n	800ccea <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cc9c:	2402      	movs	r4, #2
 800cc9e:	e093      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800cca0:	2000      	movs	r0, #0
 800cca2:	f7fe fd95 	bl	800b7d0 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800cca6:	4c58      	ldr	r4, [pc, #352]	; (800ce08 <LoRaMacMlmeRequest+0x204>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ccae:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ccb2:	f001 fb3f 	bl	800e334 <RegionAlternateDr>
 800ccb6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800ccba:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800ccbe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ccc2:	2307      	movs	r3, #7
 800ccc4:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800ccc8:	20ff      	movs	r0, #255	; 0xff
 800ccca:	f7fe fee1 	bl	800ba90 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800ccce:	4604      	mov	r4, r0
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d079      	beq.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ccd4:	4e4c      	ldr	r6, [pc, #304]	; (800ce08 <LoRaMacMlmeRequest+0x204>)
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ccdc:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800cce0:	f001 fb28 	bl	800e334 <RegionAlternateDr>
 800cce4:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800cce8:	e06e      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ccea:	4e47      	ldr	r6, [pc, #284]	; (800ce08 <LoRaMacMlmeRequest+0x204>)
 800ccec:	2400      	movs	r4, #0
 800ccee:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ccf8:	4669      	mov	r1, sp
 800ccfa:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800ccfe:	f001 fa4f 	bl	800e1a0 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800cd02:	792b      	ldrb	r3, [r5, #4]
 800cd04:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cd08:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800cd12:	f7fc ffd9 	bl	8009cc8 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800cd16:	4a3a      	ldr	r2, [pc, #232]	; (800ce00 <LoRaMacMlmeRequest+0x1fc>)
 800cd18:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800cd1c:	f043 0310 	orr.w	r3, r3, #16
 800cd20:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800cd24:	e050      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cd26:	2200      	movs	r2, #0
 800cd28:	a904      	add	r1, sp, #16
 800cd2a:	2002      	movs	r0, #2
 800cd2c:	f000 fad0 	bl	800d2d0 <LoRaMacCommandsAddCmd>
 800cd30:	4604      	mov	r4, r0
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d048      	beq.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cd36:	2413      	movs	r4, #19
 800cd38:	e046      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800cd3a:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800cd3e:	b2d2      	uxtb	r2, r2
 800cd40:	68a9      	ldr	r1, [r5, #8]
 800cd42:	88a8      	ldrh	r0, [r5, #4]
 800cd44:	f7fc ff16 	bl	8009b74 <SetTxContinuousWave>
 800cd48:	4604      	mov	r4, r0
            break;
 800cd4a:	e03d      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800cd4c:	4669      	mov	r1, sp
 800cd4e:	200d      	movs	r0, #13
 800cd50:	f000 fb0a 	bl	800d368 <LoRaMacCommandsGetCmd>
 800cd54:	4604      	mov	r4, r0
 800cd56:	b3b8      	cbz	r0, 800cdc8 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cd58:	2200      	movs	r2, #0
 800cd5a:	a904      	add	r1, sp, #16
 800cd5c:	200d      	movs	r0, #13
 800cd5e:	f000 fab7 	bl	800d2d0 <LoRaMacCommandsAddCmd>
 800cd62:	4604      	mov	r4, r0
 800cd64:	b380      	cbz	r0, 800cdc8 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cd66:	2413      	movs	r4, #19
            break;
 800cd68:	e02e      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800cd6a:	4b27      	ldr	r3, [pc, #156]	; (800ce08 <LoRaMacMlmeRequest+0x204>)
 800cd6c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cd70:	b10b      	cbz	r3, 800cd76 <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cd72:	2402      	movs	r4, #2
 800cd74:	e028      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800cd76:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800cd78:	f004 0007 	and.w	r0, r4, #7
 800cd7c:	f000 fa01 	bl	800d182 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800cd80:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800cd84:	2201      	movs	r2, #1
 800cd86:	a904      	add	r1, sp, #16
 800cd88:	2010      	movs	r0, #16
 800cd8a:	f000 faa1 	bl	800d2d0 <LoRaMacCommandsAddCmd>
 800cd8e:	4604      	mov	r4, r0
 800cd90:	b1d0      	cbz	r0, 800cdc8 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cd92:	2413      	movs	r4, #19
 800cd94:	e018      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cd96:	2200      	movs	r2, #0
 800cd98:	a904      	add	r1, sp, #16
 800cd9a:	2012      	movs	r0, #18
 800cd9c:	f000 fa98 	bl	800d2d0 <LoRaMacCommandsAddCmd>
 800cda0:	4604      	mov	r4, r0
 800cda2:	b188      	cbz	r0, 800cdc8 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cda4:	2413      	movs	r4, #19
 800cda6:	e00f      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800cdae:	f000 f9d9 	bl	800d164 <LoRaMacClassBIsAcquisitionInProgress>
 800cdb2:	b108      	cbz	r0, 800cdb8 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800cdb4:	2401      	movs	r4, #1
 800cdb6:	e007      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800cdb8:	f000 f9d1 	bl	800d15e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	f000 f9d3 	bl	800d168 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800cdc2:	2400      	movs	r4, #0
 800cdc4:	e000      	b.n	800cdc8 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800cdc6:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800cdc8:	4b0d      	ldr	r3, [pc, #52]	; (800ce00 <LoRaMacMlmeRequest+0x1fc>)
 800cdca:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800cdce:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800cdd0:	b17c      	cbz	r4, 800cdf2 <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800cdd2:	f000 fc89 	bl	800d6e8 <LoRaMacConfirmQueueGetCnt>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	f47f af22 	bne.w	800cc20 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800cddc:	4b08      	ldr	r3, [pc, #32]	; (800ce00 <LoRaMacMlmeRequest+0x1fc>)
 800cdde:	2100      	movs	r1, #0
 800cde0:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800cde4:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800cde8:	f361 0282 	bfi	r2, r1, #2, #1
 800cdec:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800cdf0:	e716      	b.n	800cc20 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800cdf2:	a805      	add	r0, sp, #20
 800cdf4:	f000 fbae 	bl	800d554 <LoRaMacConfirmQueueAdd>
 800cdf8:	e712      	b.n	800cc20 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cdfa:	2403      	movs	r4, #3
 800cdfc:	e710      	b.n	800cc20 <LoRaMacMlmeRequest+0x1c>
 800cdfe:	bf00      	nop
 800ce00:	200008c4 	.word	0x200008c4
 800ce04:	20000d18 	.word	0x20000d18
 800ce08:	20008000 	.word	0x20008000

0800ce0c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800ce0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce10:	b091      	sub	sp, #68	; 0x44
 800ce12:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800ce14:	2800      	cmp	r0, #0
 800ce16:	f000 80de 	beq.w	800cfd6 <LoRaMacMcpsRequest+0x1ca>
 800ce1a:	f04f 0a00 	mov.w	sl, #0
 800ce1e:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800ce20:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800ce24:	f7fe ffaa 	bl	800bd7c <LoRaMacIsBusy>
 800ce28:	4680      	mov	r8, r0
 800ce2a:	b118      	cbz	r0, 800ce34 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800ce2c:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800ce2e:	b011      	add	sp, #68	; 0x44
 800ce30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800ce34:	ac06      	add	r4, sp, #24
 800ce36:	462e      	mov	r6, r5
 800ce38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce3c:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800ce40:	4651      	mov	r1, sl
 800ce42:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800ce46:	4c66      	ldr	r4, [pc, #408]	; (800cfe0 <LoRaMacMcpsRequest+0x1d4>)
 800ce48:	2214      	movs	r2, #20
 800ce4a:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800ce4e:	f004 fa6c 	bl	801132a <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ce58:	4b62      	ldr	r3, [pc, #392]	; (800cfe4 <LoRaMacMcpsRequest+0x1d8>)
 800ce5a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d065      	beq.n	800cf2e <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800ce62:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800ce66:	2f01      	cmp	r7, #1
 800ce68:	f000 8086 	beq.w	800cf78 <LoRaMacMcpsRequest+0x16c>
 800ce6c:	2f03      	cmp	r7, #3
 800ce6e:	f000 8096 	beq.w	800cf9e <LoRaMacMcpsRequest+0x192>
 800ce72:	2f00      	cmp	r7, #0
 800ce74:	d06d      	beq.n	800cf52 <LoRaMacMcpsRequest+0x146>
 800ce76:	f04f 0b00 	mov.w	fp, #0
 800ce7a:	f8cd b014 	str.w	fp, [sp, #20]
 800ce7e:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ce82:	2302      	movs	r3, #2
 800ce84:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ce88:	4e56      	ldr	r6, [pc, #344]	; (800cfe4 <LoRaMacMcpsRequest+0x1d8>)
 800ce8a:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800ce8e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ce92:	a90e      	add	r1, sp, #56	; 0x38
 800ce94:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800ce98:	f001 f95c 	bl	800e154 <RegionGetPhyParam>
 800ce9c:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ce9e:	b244      	sxtb	r4, r0
 800cea0:	45a3      	cmp	fp, r4
 800cea2:	bfb8      	it	lt
 800cea4:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800cea6:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800ceaa:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800ceae:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800ceb2:	4648      	mov	r0, r9
 800ceb4:	f7fc fe30 	bl	8009b18 <CheckForMinimumAbpDatarate>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	b900      	cbnz	r0, 800cebe <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800cebc:	465c      	mov	r4, fp
    if( readyToSend == true )
 800cebe:	f1b8 0f00 	cmp.w	r8, #0
 800cec2:	f000 8082 	beq.w	800cfca <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800cec6:	f1b9 0f00 	cmp.w	r9, #0
 800ceca:	d000      	beq.n	800cece <LoRaMacMcpsRequest+0xc2>
 800cecc:	b19b      	cbz	r3, 800cef6 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800cece:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ced2:	4b44      	ldr	r3, [pc, #272]	; (800cfe4 <LoRaMacMcpsRequest+0x1d8>)
 800ced4:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ced8:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800cedc:	2205      	movs	r2, #5
 800cede:	a90b      	add	r1, sp, #44	; 0x2c
 800cee0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cee4:	f001 f96a 	bl	800e1bc <RegionVerify>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d076      	beq.n	800cfda <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ceec:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800cef0:	4b3c      	ldr	r3, [pc, #240]	; (800cfe4 <LoRaMacMcpsRequest+0x1d8>)
 800cef2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800cef6:	4b3a      	ldr	r3, [pc, #232]	; (800cfe0 <LoRaMacMcpsRequest+0x1d4>)
 800cef8:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800cefc:	4b39      	ldr	r3, [pc, #228]	; (800cfe4 <LoRaMacMcpsRequest+0x1d8>)
 800cefe:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800cf02:	f7fd ff97 	bl	800ae34 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800cf06:	9b03      	ldr	r3, [sp, #12]
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	4653      	mov	r3, sl
 800cf0c:	9a05      	ldr	r2, [sp, #20]
 800cf0e:	9904      	ldr	r1, [sp, #16]
 800cf10:	a80c      	add	r0, sp, #48	; 0x30
 800cf12:	f7fe fea3 	bl	800bc5c <Send>
        if( status == LORAMAC_STATUS_OK )
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d152      	bne.n	800cfc0 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800cf1a:	4b31      	ldr	r3, [pc, #196]	; (800cfe0 <LoRaMacMcpsRequest+0x1d4>)
 800cf1c:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800cf20:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800cf24:	f042 0201 	orr.w	r2, r2, #1
 800cf28:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800cf2c:	e04e      	b.n	800cfcc <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800cf2e:	4b2d      	ldr	r3, [pc, #180]	; (800cfe4 <LoRaMacMcpsRequest+0x1d8>)
 800cf30:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d194      	bne.n	800ce62 <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800cf38:	4b2a      	ldr	r3, [pc, #168]	; (800cfe4 <LoRaMacMcpsRequest+0x1d8>)
 800cf3a:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d18f      	bne.n	800ce62 <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800cf42:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d18b      	bne.n	800ce62 <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	f88d 3018 	strb.w	r3, [sp, #24]
 800cf50:	e787      	b.n	800ce62 <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800cf52:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cf56:	2202      	movs	r2, #2
 800cf58:	f362 1347 	bfi	r3, r2, #5, #3
 800cf5c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800cf60:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800cf64:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800cf66:	9b08      	ldr	r3, [sp, #32]
 800cf68:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800cf6a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800cf6e:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800cf72:	f04f 0801 	mov.w	r8, #1
            break;
 800cf76:	e784      	b.n	800ce82 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800cf78:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cf7c:	2204      	movs	r2, #4
 800cf7e:	f362 1347 	bfi	r3, r2, #5, #3
 800cf82:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800cf86:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800cf8a:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800cf8c:	9b08      	ldr	r3, [sp, #32]
 800cf8e:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800cf90:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800cf94:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800cf98:	f04f 0801 	mov.w	r8, #1
            break;
 800cf9c:	e771      	b.n	800ce82 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800cf9e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cfa2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800cfa6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800cfaa:	9b07      	ldr	r3, [sp, #28]
 800cfac:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800cfae:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800cfb2:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800cfb6:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	9304      	str	r3, [sp, #16]
            break;
 800cfbe:	e760      	b.n	800ce82 <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800cfc0:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <LoRaMacMcpsRequest+0x1d4>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800cfc8:	e000      	b.n	800cfcc <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cfca:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <LoRaMacMcpsRequest+0x1d4>)
 800cfce:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800cfd2:	612b      	str	r3, [r5, #16]
    return status;
 800cfd4:	e72b      	b.n	800ce2e <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cfd6:	2003      	movs	r0, #3
 800cfd8:	e729      	b.n	800ce2e <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800cfda:	2003      	movs	r0, #3
 800cfdc:	e727      	b.n	800ce2e <LoRaMacMcpsRequest+0x22>
 800cfde:	bf00      	nop
 800cfe0:	200008c4 	.word	0x200008c4
 800cfe4:	20008000 	.word	0x20008000

0800cfe8 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800cfee:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800cff2:	220f      	movs	r2, #15
 800cff4:	a901      	add	r1, sp, #4
 800cff6:	4b09      	ldr	r3, [pc, #36]	; (800d01c <LoRaMacTestSetDutyCycleOn+0x34>)
 800cff8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cffc:	f001 f8de 	bl	800e1bc <RegionVerify>
 800d000:	b148      	cbz	r0, 800d016 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800d002:	4b06      	ldr	r3, [pc, #24]	; (800d01c <LoRaMacTestSetDutyCycleOn+0x34>)
 800d004:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800d008:	4a05      	ldr	r2, [pc, #20]	; (800d020 <LoRaMacTestSetDutyCycleOn+0x38>)
 800d00a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d00e:	f043 0320 	orr.w	r3, r3, #32
 800d012:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800d016:	b002      	add	sp, #8
 800d018:	bd10      	pop	{r4, pc}
 800d01a:	bf00      	nop
 800d01c:	20008000 	.word	0x20008000
 800d020:	200008c4 	.word	0x200008c4

0800d024 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800d024:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800d026:	f7ff f907 	bl	800c238 <LoRaMacStop>
 800d02a:	b110      	cbz	r0, 800d032 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800d02c:	2401      	movs	r4, #1
    }
}
 800d02e:	4620      	mov	r0, r4
 800d030:	bd38      	pop	{r3, r4, r5, pc}
 800d032:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800d034:	4d0a      	ldr	r5, [pc, #40]	; (800d060 <LoRaMacDeInitialization+0x3c>)
 800d036:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800d03a:	f006 fb8d 	bl	8013758 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800d03e:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800d042:	f006 fb89 	bl	8013758 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800d046:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800d04a:	f006 fb85 	bl	8013758 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800d04e:	f000 f899 	bl	800d184 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800d052:	2000      	movs	r0, #0
 800d054:	f7fe fbbc 	bl	800b7d0 <ResetMacParameters>
        Radio.Sleep( );
 800d058:	4b02      	ldr	r3, [pc, #8]	; (800d064 <LoRaMacDeInitialization+0x40>)
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800d05e:	e7e6      	b.n	800d02e <LoRaMacDeInitialization+0xa>
 800d060:	200008c4 	.word	0x200008c4
 800d064:	080173cc 	.word	0x080173cc

0800d068 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	b08b      	sub	sp, #44	; 0x2c
 800d06e:	460f      	mov	r7, r1
 800d070:	4616      	mov	r6, r2
 800d072:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800d074:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800d078:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800d07c:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800d080:	6842      	ldr	r2, [r0, #4]
 800d082:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d084:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800d086:	f890 8001 	ldrb.w	r8, [r0, #1]
 800d08a:	f1b8 0f00 	cmp.w	r8, #0
 800d08e:	d109      	bne.n	800d0a4 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800d090:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800d094:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800d098:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800d09c:	4640      	mov	r0, r8
 800d09e:	b00b      	add	sp, #44	; 0x2c
 800d0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a4:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800d0ac:	7bc3      	ldrb	r3, [r0, #15]
 800d0ae:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d0b2:	a908      	add	r1, sp, #32
 800d0b4:	7c00      	ldrb	r0, [r0, #16]
 800d0b6:	f001 f84d 	bl	800e154 <RegionGetPhyParam>
 800d0ba:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800d0bc:	b243      	sxtb	r3, r0
 800d0be:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800d0c0:	454b      	cmp	r3, r9
 800d0c2:	bfb8      	it	lt
 800d0c4:	464b      	movlt	r3, r9
 800d0c6:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800d0c8:	6862      	ldr	r2, [r4, #4]
 800d0ca:	8923      	ldrh	r3, [r4, #8]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d201      	bcs.n	800d0d4 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800d0d0:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800d0d4:	8961      	ldrh	r1, [r4, #10]
 800d0d6:	440b      	add	r3, r1
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d224      	bcs.n	800d126 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800d0dc:	6863      	ldr	r3, [r4, #4]
 800d0de:	8921      	ldrh	r1, [r4, #8]
 800d0e0:	8962      	ldrh	r2, [r4, #10]
 800d0e2:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800d0e6:	4283      	cmp	r3, r0
 800d0e8:	d332      	bcc.n	800d150 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800d0ea:	1a5b      	subs	r3, r3, r1
 800d0ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0f0:	fb02 3311 	mls	r3, r2, r1, r3
 800d0f4:	bb7b      	cbnz	r3, 800d156 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800d0f6:	9b01      	ldr	r3, [sp, #4]
 800d0f8:	4599      	cmp	r9, r3
 800d0fa:	dc03      	bgt.n	800d104 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800d0fc:	7823      	ldrb	r3, [r4, #0]
 800d0fe:	b9eb      	cbnz	r3, 800d13c <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800d100:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800d104:	2321      	movs	r3, #33	; 0x21
 800d106:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800d10a:	9b00      	ldr	r3, [sp, #0]
 800d10c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800d110:	7be3      	ldrb	r3, [r4, #15]
 800d112:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d116:	a908      	add	r1, sp, #32
 800d118:	7c20      	ldrb	r0, [r4, #16]
 800d11a:	f001 f81b 	bl	800e154 <RegionGetPhyParam>
 800d11e:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800d120:	fa4f f980 	sxtb.w	r9, r0
 800d124:	e7b4      	b.n	800d090 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800d126:	230a      	movs	r3, #10
 800d128:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d12c:	a908      	add	r1, sp, #32
 800d12e:	7c20      	ldrb	r0, [r4, #16]
 800d130:	f001 f810 	bl	800e154 <RegionGetPhyParam>
 800d134:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800d136:	fa4f fa80 	sxtb.w	sl, r0
 800d13a:	e7cf      	b.n	800d0dc <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800d13c:	2302      	movs	r3, #2
 800d13e:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800d142:	a903      	add	r1, sp, #12
 800d144:	7c20      	ldrb	r0, [r4, #16]
 800d146:	f001 f82b 	bl	800e1a0 <RegionInitDefaults>
                    nbTrans = 1;
 800d14a:	f04f 0b01 	mov.w	fp, #1
 800d14e:	e7d9      	b.n	800d104 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800d150:	f8dd 9000 	ldr.w	r9, [sp]
 800d154:	e79c      	b.n	800d090 <LoRaMacAdrCalcNext+0x28>
 800d156:	f8dd 9000 	ldr.w	r9, [sp]
 800d15a:	e799      	b.n	800d090 <LoRaMacAdrCalcNext+0x28>

0800d15c <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d15c:	4770      	bx	lr

0800d15e <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d15e:	4770      	bx	lr

0800d160 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d160:	4770      	bx	lr

0800d162 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d162:	4770      	bx	lr

0800d164 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d164:	2000      	movs	r0, #0
 800d166:	4770      	bx	lr

0800d168 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d168:	4770      	bx	lr

0800d16a <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d16a:	4770      	bx	lr

0800d16c <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d16c:	4770      	bx	lr

0800d16e <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d16e:	2000      	movs	r0, #0
 800d170:	4770      	bx	lr

0800d172 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d172:	2000      	movs	r0, #0
 800d174:	4770      	bx	lr

0800d176 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d176:	2000      	movs	r0, #0
 800d178:	4770      	bx	lr

0800d17a <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d17a:	2000      	movs	r0, #0
 800d17c:	4770      	bx	lr

0800d17e <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d17e:	2000      	movs	r0, #0
 800d180:	4770      	bx	lr

0800d182 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d182:	4770      	bx	lr

0800d184 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d184:	4770      	bx	lr

0800d186 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d186:	4770      	bx	lr

0800d188 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d188:	2002      	movs	r0, #2
 800d18a:	4770      	bx	lr

0800d18c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d18c:	2002      	movs	r0, #2
 800d18e:	4770      	bx	lr

0800d190 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d190:	2002      	movs	r0, #2
 800d192:	4770      	bx	lr

0800d194 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d194:	4770      	bx	lr

0800d196 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d196:	2000      	movs	r0, #0
 800d198:	4770      	bx	lr

0800d19a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d19a:	4770      	bx	lr

0800d19c <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d19c:	4770      	bx	lr

0800d19e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d19e:	2000      	movs	r0, #0
 800d1a0:	4770      	bx	lr

0800d1a2 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	4770      	bx	lr

0800d1a6 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d1a6:	4770      	bx	lr

0800d1a8 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d1a8:	4770      	bx	lr

0800d1aa <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d1aa:	4770      	bx	lr

0800d1ac <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2b0f      	cmp	r3, #15
 800d1b0:	d804      	bhi.n	800d1bc <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800d1b2:	5cc2      	ldrb	r2, [r0, r3]
 800d1b4:	b922      	cbnz	r2, 800d1c0 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	e7f8      	b.n	800d1ae <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800d1bc:	2001      	movs	r0, #1
 800d1be:	4770      	bx	lr
            return false;
 800d1c0:	2000      	movs	r0, #0
}
 800d1c2:	4770      	bx	lr

0800d1c4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800d1c4:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800d1c6:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800d1c8:	0123      	lsls	r3, r4, #4
 800d1ca:	3308      	adds	r3, #8
 800d1cc:	4d06      	ldr	r5, [pc, #24]	; (800d1e8 <MallocNewMacCommandSlot+0x24>)
 800d1ce:	441d      	add	r5, r3
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f7ff ffeb 	bl	800d1ac <IsSlotFree>
 800d1d6:	b920      	cbnz	r0, 800d1e2 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800d1d8:	3401      	adds	r4, #1
 800d1da:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800d1dc:	2c20      	cmp	r4, #32
 800d1de:	d1f3      	bne.n	800d1c8 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800d1e0:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	bd38      	pop	{r3, r4, r5, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20000e84 	.word	0x20000e84

0800d1ec <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800d1ec:	b120      	cbz	r0, 800d1f8 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800d1f2:	6042      	str	r2, [r0, #4]

    return true;
 800d1f4:	2001      	movs	r0, #1
 800d1f6:	4770      	bx	lr
        return false;
 800d1f8:	2000      	movs	r0, #0
}
 800d1fa:	4770      	bx	lr

0800d1fc <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	b160      	cbz	r0, 800d21a <LinkedListAdd+0x1e>
 800d200:	b169      	cbz	r1, 800d21e <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800d202:	6802      	ldr	r2, [r0, #0]
 800d204:	b13a      	cbz	r2, 800d216 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	b102      	cbz	r2, 800d20c <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800d20a:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800d20c:	2200      	movs	r2, #0
 800d20e:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800d210:	6059      	str	r1, [r3, #4]

    return true;
 800d212:	2001      	movs	r0, #1
 800d214:	4770      	bx	lr
        list->First = element;
 800d216:	6001      	str	r1, [r0, #0]
 800d218:	e7f5      	b.n	800d206 <LinkedListAdd+0xa>
        return false;
 800d21a:	2000      	movs	r0, #0
 800d21c:	4770      	bx	lr
 800d21e:	2000      	movs	r0, #0
}
 800d220:	4770      	bx	lr

0800d222 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800d222:	b160      	cbz	r0, 800d23e <LinkedListGetPrevious+0x1c>
 800d224:	b161      	cbz	r1, 800d240 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800d226:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800d228:	4281      	cmp	r1, r0
 800d22a:	d102      	bne.n	800d232 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800d22c:	2000      	movs	r0, #0
    }

    return curElement;
}
 800d22e:	4770      	bx	lr
            curElement = curElement->Next;
 800d230:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800d232:	2800      	cmp	r0, #0
 800d234:	d0fb      	beq.n	800d22e <LinkedListGetPrevious+0xc>
 800d236:	6803      	ldr	r3, [r0, #0]
 800d238:	428b      	cmp	r3, r1
 800d23a:	d1f9      	bne.n	800d230 <LinkedListGetPrevious+0xe>
 800d23c:	4770      	bx	lr
 800d23e:	4770      	bx	lr
        return NULL;
 800d240:	4608      	mov	r0, r1
 800d242:	4770      	bx	lr

0800d244 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800d244:	b1b8      	cbz	r0, 800d276 <LinkedListRemove+0x32>
{
 800d246:	b538      	push	{r3, r4, r5, lr}
 800d248:	460c      	mov	r4, r1
 800d24a:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800d24c:	b1a9      	cbz	r1, 800d27a <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800d24e:	f7ff ffe8 	bl	800d222 <LinkedListGetPrevious>

    if( list->First == element )
 800d252:	682b      	ldr	r3, [r5, #0]
 800d254:	42a3      	cmp	r3, r4
 800d256:	d009      	beq.n	800d26c <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800d258:	686b      	ldr	r3, [r5, #4]
 800d25a:	42a3      	cmp	r3, r4
 800d25c:	d009      	beq.n	800d272 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800d25e:	b108      	cbz	r0, 800d264 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800d264:	2300      	movs	r3, #0
 800d266:	6023      	str	r3, [r4, #0]

    return true;
 800d268:	2001      	movs	r0, #1
}
 800d26a:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	602b      	str	r3, [r5, #0]
 800d270:	e7f2      	b.n	800d258 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800d272:	6068      	str	r0, [r5, #4]
 800d274:	e7f3      	b.n	800d25e <LinkedListRemove+0x1a>
        return false;
 800d276:	2000      	movs	r0, #0
}
 800d278:	4770      	bx	lr
        return false;
 800d27a:	2000      	movs	r0, #0
 800d27c:	e7f5      	b.n	800d26a <LinkedListRemove+0x26>
	...

0800d280 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800d280:	2811      	cmp	r0, #17
 800d282:	d805      	bhi.n	800d290 <IsSticky+0x10>
 800d284:	4b03      	ldr	r3, [pc, #12]	; (800d294 <IsSticky+0x14>)
 800d286:	fa23 f000 	lsr.w	r0, r3, r0
 800d28a:	f000 0001 	and.w	r0, r0, #1
 800d28e:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800d290:	2000      	movs	r0, #0
    }
}
 800d292:	4770      	bx	lr
 800d294:	00020720 	.word	0x00020720

0800d298 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800d298:	2000      	movs	r0, #0
 800d29a:	4770      	bx	lr

0800d29c <FreeMacCommandSlot>:
    if( slot == NULL )
 800d29c:	b130      	cbz	r0, 800d2ac <FreeMacCommandSlot+0x10>
{
 800d29e:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800d2a0:	2210      	movs	r2, #16
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	f004 f841 	bl	801132a <memset1>
    return true;
 800d2a8:	2001      	movs	r0, #1
}
 800d2aa:	bd08      	pop	{r3, pc}
        return false;
 800d2ac:	2000      	movs	r0, #0
}
 800d2ae:	4770      	bx	lr

0800d2b0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800d2b0:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800d2b2:	4c06      	ldr	r4, [pc, #24]	; (800d2cc <LoRaMacCommandsInit+0x1c>)
 800d2b4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f004 f835 	bl	801132a <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f7ff ff93 	bl	800d1ec <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	bd10      	pop	{r4, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20000e84 	.word	0x20000e84

0800d2d0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800d2d0:	b321      	cbz	r1, 800d31c <LoRaMacCommandsAddCmd+0x4c>
{
 800d2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d4:	4605      	mov	r5, r0
 800d2d6:	4614      	mov	r4, r2
 800d2d8:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800d2da:	f7ff ff73 	bl	800d1c4 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800d2de:	4606      	mov	r6, r0
 800d2e0:	b1f0      	cbz	r0, 800d320 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800d2e2:	4601      	mov	r1, r0
 800d2e4:	4810      	ldr	r0, [pc, #64]	; (800d328 <LoRaMacCommandsAddCmd+0x58>)
 800d2e6:	f7ff ff89 	bl	800d1fc <LinkedListAdd>
 800d2ea:	b1d8      	cbz	r0, 800d324 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800d2ec:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800d2ee:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800d2f0:	b2a2      	uxth	r2, r4
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	1d70      	adds	r0, r6, #5
 800d2f6:	f004 f800 	bl	80112fa <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	f7ff ffc0 	bl	800d280 <IsSticky>
 800d300:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800d302:	4628      	mov	r0, r5
 800d304:	f7ff ffc8 	bl	800d298 <IsConfirmationRequired>
 800d308:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800d30a:	4b07      	ldr	r3, [pc, #28]	; (800d328 <LoRaMacCommandsAddCmd+0x58>)
 800d30c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d310:	4414      	add	r4, r2
 800d312:	3401      	adds	r4, #1
 800d314:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800d318:	2000      	movs	r0, #0
}
 800d31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d31c:	2001      	movs	r0, #1
}
 800d31e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800d320:	2002      	movs	r0, #2
 800d322:	e7fa      	b.n	800d31a <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800d324:	2005      	movs	r0, #5
 800d326:	e7f8      	b.n	800d31a <LoRaMacCommandsAddCmd+0x4a>
 800d328:	20000e84 	.word	0x20000e84

0800d32c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800d32c:	b1a0      	cbz	r0, 800d358 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800d32e:	b510      	push	{r4, lr}
 800d330:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800d332:	4601      	mov	r1, r0
 800d334:	480b      	ldr	r0, [pc, #44]	; (800d364 <LoRaMacCommandsRemoveCmd+0x38>)
 800d336:	f7ff ff85 	bl	800d244 <LinkedListRemove>
 800d33a:	b178      	cbz	r0, 800d35c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800d33c:	68a1      	ldr	r1, [r4, #8]
 800d33e:	4a09      	ldr	r2, [pc, #36]	; (800d364 <LoRaMacCommandsRemoveCmd+0x38>)
 800d340:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800d344:	1a5b      	subs	r3, r3, r1
 800d346:	3b01      	subs	r3, #1
 800d348:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800d34c:	4620      	mov	r0, r4
 800d34e:	f7ff ffa5 	bl	800d29c <FreeMacCommandSlot>
 800d352:	b128      	cbz	r0, 800d360 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d354:	2000      	movs	r0, #0
}
 800d356:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d358:	2001      	movs	r0, #1
}
 800d35a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800d35c:	2003      	movs	r0, #3
 800d35e:	e7fa      	b.n	800d356 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800d360:	2005      	movs	r0, #5
 800d362:	e7f8      	b.n	800d356 <LoRaMacCommandsRemoveCmd+0x2a>
 800d364:	20000e84 	.word	0x20000e84

0800d368 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d368:	4b06      	ldr	r3, [pc, #24]	; (800d384 <LoRaMacCommandsGetCmd+0x1c>)
 800d36a:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800d36c:	e000      	b.n	800d370 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800d36e:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800d370:	b113      	cbz	r3, 800d378 <LoRaMacCommandsGetCmd+0x10>
 800d372:	791a      	ldrb	r2, [r3, #4]
 800d374:	4282      	cmp	r2, r0
 800d376:	d1fa      	bne.n	800d36e <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800d378:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800d37a:	b10b      	cbz	r3, 800d380 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800d37c:	2000      	movs	r0, #0
 800d37e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800d380:	2003      	movs	r0, #3
}
 800d382:	4770      	bx	lr
 800d384:	20000e84 	.word	0x20000e84

0800d388 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d388:	4b0a      	ldr	r3, [pc, #40]	; (800d3b4 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800d38a:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d38c:	b120      	cbz	r0, 800d398 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800d38e:	7b03      	ldrb	r3, [r0, #12]
 800d390:	b11b      	cbz	r3, 800d39a <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800d392:	6800      	ldr	r0, [r0, #0]
 800d394:	e7fa      	b.n	800d38c <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d396:	bd10      	pop	{r4, pc}
 800d398:	4770      	bx	lr
{
 800d39a:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800d39c:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800d39e:	f7ff ffc5 	bl	800d32c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800d3a2:	4620      	mov	r0, r4
    while( curElement != NULL )
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d0f6      	beq.n	800d396 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800d3a8:	7b03      	ldrb	r3, [r0, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d0f6      	beq.n	800d39c <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800d3ae:	6800      	ldr	r0, [r0, #0]
 800d3b0:	e7f8      	b.n	800d3a4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800d3b2:	bf00      	nop
 800d3b4:	20000e84 	.word	0x20000e84

0800d3b8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800d3b8:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d3ba:	4b0b      	ldr	r3, [pc, #44]	; (800d3e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800d3bc:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d3be:	e000      	b.n	800d3c2 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800d3c0:	4634      	mov	r4, r6
    while( curElement != NULL )
 800d3c2:	b17c      	cbz	r4, 800d3e4 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800d3c4:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800d3c6:	7925      	ldrb	r5, [r4, #4]
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	f7ff ff59 	bl	800d280 <IsSticky>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d0f6      	beq.n	800d3c0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	f7ff ff60 	bl	800d298 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d1f1      	bne.n	800d3c0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f7ff ffa5 	bl	800d32c <LoRaMacCommandsRemoveCmd>
 800d3e2:	e7ed      	b.n	800d3c0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	20000e84 	.word	0x20000e84

0800d3ec <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800d3ec:	b128      	cbz	r0, 800d3fa <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800d3ee:	4a04      	ldr	r2, [pc, #16]	; (800d400 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800d3f0:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800d3f4:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d3fa:	2001      	movs	r0, #1
}
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	20000e84 	.word	0x20000e84

0800d404 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800d404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800d408:	4b16      	ldr	r3, [pc, #88]	; (800d464 <LoRaMacCommandsSerializeCmds+0x60>)
 800d40a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800d40c:	b32a      	cbz	r2, 800d45a <LoRaMacCommandsSerializeCmds+0x56>
 800d40e:	4607      	mov	r7, r0
 800d410:	4688      	mov	r8, r1
 800d412:	4616      	mov	r6, r2
 800d414:	b319      	cbz	r1, 800d45e <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800d416:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800d418:	b194      	cbz	r4, 800d440 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800d41a:	1a7a      	subs	r2, r7, r1
 800d41c:	68a3      	ldr	r3, [r4, #8]
 800d41e:	3301      	adds	r3, #1
 800d420:	429a      	cmp	r2, r3
 800d422:	d30d      	bcc.n	800d440 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800d424:	1c4d      	adds	r5, r1, #1
 800d426:	b2ed      	uxtb	r5, r5
 800d428:	7923      	ldrb	r3, [r4, #4]
 800d42a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800d42c:	8922      	ldrh	r2, [r4, #8]
 800d42e:	1d61      	adds	r1, r4, #5
 800d430:	1970      	adds	r0, r6, r5
 800d432:	f003 ff62 	bl	80112fa <memcpy1>
            itr += curElement->PayloadSize;
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	441d      	add	r5, r3
 800d43a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800d43c:	6824      	ldr	r4, [r4, #0]
 800d43e:	e7eb      	b.n	800d418 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800d440:	b12c      	cbz	r4, 800d44e <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800d442:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800d444:	4620      	mov	r0, r4
 800d446:	f7ff ff71 	bl	800d32c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800d44a:	462c      	mov	r4, r5
 800d44c:	e7f8      	b.n	800d440 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800d44e:	4640      	mov	r0, r8
 800d450:	f7ff ffcc 	bl	800d3ec <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800d454:	2000      	movs	r0, #0
}
 800d456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d45a:	2001      	movs	r0, #1
 800d45c:	e7fb      	b.n	800d456 <LoRaMacCommandsSerializeCmds+0x52>
 800d45e:	2001      	movs	r0, #1
 800d460:	e7f9      	b.n	800d456 <LoRaMacCommandsSerializeCmds+0x52>
 800d462:	bf00      	nop
 800d464:	20000e84 	.word	0x20000e84

0800d468 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800d468:	1e83      	subs	r3, r0, #2
 800d46a:	2b11      	cmp	r3, #17
 800d46c:	d80a      	bhi.n	800d484 <LoRaMacCommandsGetCmdSize+0x1c>
 800d46e:	e8df f003 	tbb	[pc, r3]
 800d472:	0b23      	.short	0x0b23
 800d474:	110f240d 	.word	0x110f240d
 800d478:	09171513 	.word	0x09171513
 800d47c:	09091909 	.word	0x09091909
 800d480:	211f1d1b 	.word	0x211f1d1b
 800d484:	2000      	movs	r0, #0
 800d486:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800d488:	2005      	movs	r0, #5
            break;
 800d48a:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800d48c:	2002      	movs	r0, #2
            break;
 800d48e:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800d490:	2001      	movs	r0, #1
            break;
 800d492:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800d494:	2006      	movs	r0, #6
            break;
 800d496:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800d498:	2002      	movs	r0, #2
            break;
 800d49a:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800d49c:	2002      	movs	r0, #2
            break;
 800d49e:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800d4a0:	2005      	movs	r0, #5
            break;
 800d4a2:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800d4a4:	2006      	movs	r0, #6
            break;
 800d4a6:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800d4a8:	2001      	movs	r0, #1
            break;
 800d4aa:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800d4ac:	2005      	movs	r0, #5
            break;
 800d4ae:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800d4b0:	2004      	movs	r0, #4
            break;
 800d4b2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800d4b4:	2004      	movs	r0, #4
            break;
 800d4b6:	4770      	bx	lr
            cidSize = 3;
 800d4b8:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800d4ba:	4770      	bx	lr

0800d4bc <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d4bc:	4b03      	ldr	r3, [pc, #12]	; (800d4cc <IncreaseBufferPointer+0x10>)
 800d4be:	4298      	cmp	r0, r3
 800d4c0:	d001      	beq.n	800d4c6 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800d4c2:	3004      	adds	r0, #4
 800d4c4:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d4c6:	4802      	ldr	r0, [pc, #8]	; (800d4d0 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	200010ac 	.word	0x200010ac
 800d4d0:	2000109c 	.word	0x2000109c

0800d4d4 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800d4d4:	b108      	cbz	r0, 800d4da <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	4770      	bx	lr
        return true;
 800d4da:	2001      	movs	r0, #1
}
 800d4dc:	4770      	bx	lr

0800d4de <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800d4de:	2804      	cmp	r0, #4
 800d4e0:	d801      	bhi.n	800d4e6 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	4770      	bx	lr
        return true;
 800d4e6:	2001      	movs	r0, #1
}
 800d4e8:	4770      	bx	lr
	...

0800d4ec <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d4f2:	4b0d      	ldr	r3, [pc, #52]	; (800d528 <GetElement+0x3c>)
 800d4f4:	f893 7020 	ldrb.w	r7, [r3, #32]
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7ff ffeb 	bl	800d4d4 <IsListEmpty>
 800d4fe:	b970      	cbnz	r0, 800d51e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d500:	2500      	movs	r5, #0
 800d502:	42af      	cmp	r7, r5
 800d504:	d909      	bls.n	800d51a <GetElement+0x2e>
    {
        if( element->Request == request )
 800d506:	7823      	ldrb	r3, [r4, #0]
 800d508:	42b3      	cmp	r3, r6
 800d50a:	d00a      	beq.n	800d522 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800d50c:	4620      	mov	r0, r4
 800d50e:	f7ff ffd5 	bl	800d4bc <IncreaseBufferPointer>
 800d512:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d514:	3501      	adds	r5, #1
 800d516:	b2ed      	uxtb	r5, r5
 800d518:	e7f3      	b.n	800d502 <GetElement+0x16>
    }

    return NULL;
 800d51a:	2000      	movs	r0, #0
}
 800d51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800d51e:	2000      	movs	r0, #0
 800d520:	e7fc      	b.n	800d51c <GetElement+0x30>
            return element;
 800d522:	4620      	mov	r0, r4
 800d524:	e7fa      	b.n	800d51c <GetElement+0x30>
 800d526:	bf00      	nop
 800d528:	20001090 	.word	0x20001090

0800d52c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800d52c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800d52e:	4c08      	ldr	r4, [pc, #32]	; (800d550 <LoRaMacConfirmQueueInit+0x24>)
 800d530:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800d532:	2300      	movs	r3, #0
 800d534:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d538:	f104 000c 	add.w	r0, r4, #12
 800d53c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d53e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800d540:	2214      	movs	r2, #20
 800d542:	21ff      	movs	r1, #255	; 0xff
 800d544:	f003 fef1 	bl	801132a <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800d54e:	bd10      	pop	{r4, pc}
 800d550:	20001090 	.word	0x20001090

0800d554 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d558:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <LoRaMacConfirmQueueAdd+0x44>)
 800d55a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d55e:	f7ff ffbe 	bl	800d4de <IsListFull>
 800d562:	b9b8      	cbnz	r0, 800d594 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800d564:	4c0c      	ldr	r4, [pc, #48]	; (800d598 <LoRaMacConfirmQueueAdd+0x44>)
 800d566:	68a3      	ldr	r3, [r4, #8]
 800d568:	782a      	ldrb	r2, [r5, #0]
 800d56a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800d56c:	68a3      	ldr	r3, [r4, #8]
 800d56e:	786a      	ldrb	r2, [r5, #1]
 800d570:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800d572:	68a3      	ldr	r3, [r4, #8]
 800d574:	78ea      	ldrb	r2, [r5, #3]
 800d576:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800d578:	68a3      	ldr	r3, [r4, #8]
 800d57a:	78aa      	ldrb	r2, [r5, #2]
 800d57c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800d57e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d582:	3301      	adds	r3, #1
 800d584:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800d588:	68a0      	ldr	r0, [r4, #8]
 800d58a:	f7ff ff97 	bl	800d4bc <IncreaseBufferPointer>
 800d58e:	60a0      	str	r0, [r4, #8]

    return true;
 800d590:	2001      	movs	r0, #1
}
 800d592:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d594:	2000      	movs	r0, #0
 800d596:	e7fc      	b.n	800d592 <LoRaMacConfirmQueueAdd+0x3e>
 800d598:	20001090 	.word	0x20001090

0800d59c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800d59c:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d59e:	4b09      	ldr	r3, [pc, #36]	; (800d5c4 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d5a0:	f893 4020 	ldrb.w	r4, [r3, #32]
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f7ff ff95 	bl	800d4d4 <IsListEmpty>
 800d5aa:	b948      	cbnz	r0, 800d5c0 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800d5ac:	4d05      	ldr	r5, [pc, #20]	; (800d5c4 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d5ae:	3c01      	subs	r4, #1
 800d5b0:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800d5b4:	6868      	ldr	r0, [r5, #4]
 800d5b6:	f7ff ff81 	bl	800d4bc <IncreaseBufferPointer>
 800d5ba:	6068      	str	r0, [r5, #4]

    return true;
 800d5bc:	2001      	movs	r0, #1
}
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	e7fc      	b.n	800d5be <LoRaMacConfirmQueueRemoveFirst+0x22>
 800d5c4:	20001090 	.word	0x20001090

0800d5c8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d5ce:	4b08      	ldr	r3, [pc, #32]	; (800d5f0 <LoRaMacConfirmQueueSetStatus+0x28>)
 800d5d0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d5d4:	f7ff ff7e 	bl	800d4d4 <IsListEmpty>
 800d5d8:	b948      	cbnz	r0, 800d5ee <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d5da:	4b05      	ldr	r3, [pc, #20]	; (800d5f0 <LoRaMacConfirmQueueSetStatus+0x28>)
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	6859      	ldr	r1, [r3, #4]
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f7ff ff83 	bl	800d4ec <GetElement>
        if( element != NULL )
 800d5e6:	b110      	cbz	r0, 800d5ee <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800d5e8:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800d5ee:	bd38      	pop	{r3, r4, r5, pc}
 800d5f0:	20001090 	.word	0x20001090

0800d5f4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d5f8:	4b09      	ldr	r3, [pc, #36]	; (800d620 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d5fa:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d5fe:	f7ff ff69 	bl	800d4d4 <IsListEmpty>
 800d602:	b940      	cbnz	r0, 800d616 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d604:	4b06      	ldr	r3, [pc, #24]	; (800d620 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d606:	689a      	ldr	r2, [r3, #8]
 800d608:	6859      	ldr	r1, [r3, #4]
 800d60a:	4620      	mov	r0, r4
 800d60c:	f7ff ff6e 	bl	800d4ec <GetElement>
        if( element != NULL )
 800d610:	b118      	cbz	r0, 800d61a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800d612:	7840      	ldrb	r0, [r0, #1]
 800d614:	e000      	b.n	800d618 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d616:	2001      	movs	r0, #1
}
 800d618:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d61a:	2001      	movs	r0, #1
 800d61c:	e7fc      	b.n	800d618 <LoRaMacConfirmQueueGetStatus+0x24>
 800d61e:	bf00      	nop
 800d620:	20001090 	.word	0x20001090

0800d624 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800d624:	b538      	push	{r3, r4, r5, lr}
 800d626:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d628:	4b0c      	ldr	r3, [pc, #48]	; (800d65c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d62a:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800d62c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d630:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d634:	f7ff ff4e 	bl	800d4d4 <IsListEmpty>
 800d638:	b150      	cbz	r0, 800d650 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800d63a:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800d63c:	2301      	movs	r3, #1
 800d63e:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800d640:	4620      	mov	r0, r4
 800d642:	f7ff ff3b 	bl	800d4bc <IncreaseBufferPointer>
 800d646:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d648:	4b04      	ldr	r3, [pc, #16]	; (800d65c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	4283      	cmp	r3, r0
 800d64e:	d0f4      	beq.n	800d63a <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800d650:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d652:	78e3      	ldrb	r3, [r4, #3]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1f3      	bne.n	800d640 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800d658:	e7f0      	b.n	800d63c <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800d65a:	bf00      	nop
 800d65c:	20001090 	.word	0x20001090

0800d660 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800d660:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d662:	4b04      	ldr	r3, [pc, #16]	; (800d674 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800d664:	689a      	ldr	r2, [r3, #8]
 800d666:	6859      	ldr	r1, [r3, #4]
 800d668:	f7ff ff40 	bl	800d4ec <GetElement>
 800d66c:	b100      	cbz	r0, 800d670 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800d66e:	2001      	movs	r0, #1
    }
    return false;
}
 800d670:	bd08      	pop	{r3, pc}
 800d672:	bf00      	nop
 800d674:	20001090 	.word	0x20001090

0800d678 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d67a:	b083      	sub	sp, #12
 800d67c:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800d67e:	4b19      	ldr	r3, [pc, #100]	; (800d6e4 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d680:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800d684:	2204      	movs	r2, #4
 800d686:	2100      	movs	r1, #0
 800d688:	eb0d 0002 	add.w	r0, sp, r2
 800d68c:	f003 fe4d 	bl	801132a <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800d690:	2400      	movs	r4, #0
 800d692:	e00d      	b.n	800d6b0 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d694:	781a      	ldrb	r2, [r3, #0]
 800d696:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d69a:	785a      	ldrb	r2, [r3, #1]
 800d69c:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d6a0:	78db      	ldrb	r3, [r3, #3]
 800d6a2:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800d6a6:	f7ff ff79 	bl	800d59c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800d6aa:	b1a5      	cbz	r5, 800d6d6 <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d6ac:	3401      	adds	r4, #1
 800d6ae:	b2e4      	uxtb	r4, r4
 800d6b0:	42bc      	cmp	r4, r7
 800d6b2:	d214      	bcs.n	800d6de <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d6b4:	4b0b      	ldr	r3, [pc, #44]	; (800d6e4 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d6b6:	685a      	ldr	r2, [r3, #4]
 800d6b8:	7812      	ldrb	r2, [r2, #0]
 800d6ba:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	7852      	ldrb	r2, [r2, #1]
 800d6c0:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800d6c6:	2d00      	cmp	r5, #0
 800d6c8:	d0e4      	beq.n	800d694 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d6ca:	4b06      	ldr	r3, [pc, #24]	; (800d6e4 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	4798      	blx	r3
 800d6d4:	e7e7      	b.n	800d6a6 <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d6d6:	a801      	add	r0, sp, #4
 800d6d8:	f7ff ff3c 	bl	800d554 <LoRaMacConfirmQueueAdd>
 800d6dc:	e7e6      	b.n	800d6ac <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800d6de:	b003      	add	sp, #12
 800d6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	20001090 	.word	0x20001090

0800d6e8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800d6e8:	4b01      	ldr	r3, [pc, #4]	; (800d6f0 <LoRaMacConfirmQueueGetCnt+0x8>)
 800d6ea:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d6ee:	4770      	bx	lr
 800d6f0:	20001090 	.word	0x20001090

0800d6f4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800d6f4:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d6f6:	4b03      	ldr	r3, [pc, #12]	; (800d704 <LoRaMacConfirmQueueIsFull+0x10>)
 800d6f8:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d6fc:	f7ff feef 	bl	800d4de <IsListFull>
    }
    else
    {
        return false;
    }
}
 800d700:	bd08      	pop	{r3, pc}
 800d702:	bf00      	nop
 800d704:	20001090 	.word	0x20001090

0800d708 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800d708:	b410      	push	{r4}
 800d70a:	9c01      	ldr	r4, [sp, #4]
 800d70c:	9902      	ldr	r1, [sp, #8]
 800d70e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800d710:	b1da      	cbz	r2, 800d74a <PrepareB0+0x42>
 800d712:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800d714:	2049      	movs	r0, #73	; 0x49
 800d716:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800d718:	2000      	movs	r0, #0
 800d71a:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800d71c:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800d71e:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800d720:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800d722:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800d724:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800d726:	0a23      	lsrs	r3, r4, #8
 800d728:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d72a:	0c23      	lsrs	r3, r4, #16
 800d72c:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d72e:	0e24      	lsrs	r4, r4, #24
 800d730:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800d732:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800d734:	0a0b      	lsrs	r3, r1, #8
 800d736:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d738:	0c0b      	lsrs	r3, r1, #16
 800d73a:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d73c:	0e09      	lsrs	r1, r1, #24
 800d73e:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800d740:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800d742:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d746:	bc10      	pop	{r4}
 800d748:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d74a:	2009      	movs	r0, #9
 800d74c:	e7fb      	b.n	800d746 <PrepareB0+0x3e>
	...

0800d750 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d750:	2300      	movs	r3, #0
 800d752:	2b01      	cmp	r3, #1
 800d754:	d80e      	bhi.n	800d774 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d756:	469c      	mov	ip, r3
 800d758:	4a07      	ldr	r2, [pc, #28]	; (800d778 <GetKeyAddrItem+0x28>)
 800d75a:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800d75e:	4282      	cmp	r2, r0
 800d760:	d002      	beq.n	800d768 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d762:	3301      	adds	r3, #1
 800d764:	b2db      	uxtb	r3, r3
 800d766:	e7f4      	b.n	800d752 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800d768:	4b03      	ldr	r3, [pc, #12]	; (800d778 <GetKeyAddrItem+0x28>)
 800d76a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800d76e:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d770:	2000      	movs	r0, #0
 800d772:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d774:	200b      	movs	r0, #11
}
 800d776:	4770      	bx	lr
 800d778:	200000f0 	.word	0x200000f0

0800d77c <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800d77c:	b1f1      	cbz	r1, 800d7bc <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800d77e:	3801      	subs	r0, #1
 800d780:	2803      	cmp	r0, #3
 800d782:	d81d      	bhi.n	800d7c0 <GetLastFcntDown+0x44>
 800d784:	e8df f000 	tbb	[pc, r0]
 800d788:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800d78c:	4a0d      	ldr	r2, [pc, #52]	; (800d7c4 <GetLastFcntDown+0x48>)
 800d78e:	6812      	ldr	r2, [r2, #0]
 800d790:	6912      	ldr	r2, [r2, #16]
 800d792:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800d794:	2000      	movs	r0, #0
            break;
 800d796:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800d798:	4a0a      	ldr	r2, [pc, #40]	; (800d7c4 <GetLastFcntDown+0x48>)
 800d79a:	6812      	ldr	r2, [r2, #0]
 800d79c:	6952      	ldr	r2, [r2, #20]
 800d79e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d7a0:	2000      	movs	r0, #0
            break;
 800d7a2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800d7a4:	4a07      	ldr	r2, [pc, #28]	; (800d7c4 <GetLastFcntDown+0x48>)
 800d7a6:	6812      	ldr	r2, [r2, #0]
 800d7a8:	6992      	ldr	r2, [r2, #24]
 800d7aa:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d7ac:	2000      	movs	r0, #0
            break;
 800d7ae:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800d7b0:	4a04      	ldr	r2, [pc, #16]	; (800d7c4 <GetLastFcntDown+0x48>)
 800d7b2:	6812      	ldr	r2, [r2, #0]
 800d7b4:	69d2      	ldr	r2, [r2, #28]
 800d7b6:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d7b8:	2000      	movs	r0, #0
            break;
 800d7ba:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7bc:	2009      	movs	r0, #9
 800d7be:	4770      	bx	lr
    switch( fCntID )
 800d7c0:	2005      	movs	r0, #5
}
 800d7c2:	4770      	bx	lr
 800d7c4:	200010b4 	.word	0x200010b4

0800d7c8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d7d2:	a901      	add	r1, sp, #4
 800d7d4:	f7ff ffd2 	bl	800d77c <GetLastFcntDown>
 800d7d8:	b948      	cbnz	r0, 800d7ee <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800d7da:	9b01      	ldr	r3, [sp, #4]
 800d7dc:	42a3      	cmp	r3, r4
 800d7de:	d309      	bcc.n	800d7f4 <CheckFCntDown+0x2c>
 800d7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e4:	d001      	beq.n	800d7ea <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	e002      	b.n	800d7f0 <CheckFCntDown+0x28>
        return true;
 800d7ea:	2001      	movs	r0, #1
 800d7ec:	e000      	b.n	800d7f0 <CheckFCntDown+0x28>
        return false;
 800d7ee:	2000      	movs	r0, #0
    }
}
 800d7f0:	b002      	add	sp, #8
 800d7f2:	bd10      	pop	{r4, pc}
        return true;
 800d7f4:	2001      	movs	r0, #1
 800d7f6:	e7fb      	b.n	800d7f0 <CheckFCntDown+0x28>

0800d7f8 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800d7f8:	3801      	subs	r0, #1
 800d7fa:	2803      	cmp	r0, #3
 800d7fc:	d815      	bhi.n	800d82a <UpdateFCntDown+0x32>
 800d7fe:	e8df f000 	tbb	[pc, r0]
 800d802:	0702      	.short	0x0702
 800d804:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800d806:	4b09      	ldr	r3, [pc, #36]	; (800d82c <UpdateFCntDown+0x34>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800d80c:	6219      	str	r1, [r3, #32]
            break;
 800d80e:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800d810:	4b06      	ldr	r3, [pc, #24]	; (800d82c <UpdateFCntDown+0x34>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800d816:	6219      	str	r1, [r3, #32]
            break;
 800d818:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800d81a:	4b04      	ldr	r3, [pc, #16]	; (800d82c <UpdateFCntDown+0x34>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800d820:	6219      	str	r1, [r3, #32]
            break;
 800d822:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800d824:	4b01      	ldr	r3, [pc, #4]	; (800d82c <UpdateFCntDown+0x34>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800d82a:	4770      	bx	lr
 800d82c:	200010b4 	.word	0x200010b4

0800d830 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800d830:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <ResetFCnts+0x2c>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	2300      	movs	r3, #0
 800d836:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d838:	f04f 31ff 	mov.w	r1, #4294967295
 800d83c:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d83e:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d840:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d842:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d844:	2b00      	cmp	r3, #0
 800d846:	dd00      	ble.n	800d84a <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800d848:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800d84a:	1d99      	adds	r1, r3, #6
 800d84c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d850:	f04f 30ff 	mov.w	r0, #4294967295
 800d854:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d856:	3301      	adds	r3, #1
 800d858:	e7f4      	b.n	800d844 <ResetFCnts+0x14>
 800d85a:	bf00      	nop
 800d85c:	200010b4 	.word	0x200010b4

0800d860 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800d860:	4b03      	ldr	r3, [pc, #12]	; (800d870 <IsJoinNonce10xOk+0x10>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800d866:	4283      	cmp	r3, r0
 800d868:	bf2c      	ite	cs
 800d86a:	2000      	movcs	r0, #0
 800d86c:	2001      	movcc	r0, #1
 800d86e:	4770      	bx	lr
 800d870:	200010b4 	.word	0x200010b4

0800d874 <ComputeCmacB0>:
{
 800d874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d878:	b088      	sub	sp, #32
 800d87a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d87c:	b1f0      	cbz	r0, 800d8bc <ComputeCmacB0+0x48>
 800d87e:	460c      	mov	r4, r1
 800d880:	4615      	mov	r5, r2
 800d882:	461a      	mov	r2, r3
 800d884:	4680      	mov	r8, r0
 800d886:	b1de      	cbz	r6, 800d8c0 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d888:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d88c:	d81a      	bhi.n	800d8c4 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d88e:	af04      	add	r7, sp, #16
 800d890:	9702      	str	r7, [sp, #8]
 800d892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d89e:	4629      	mov	r1, r5
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f7ff ff31 	bl	800d708 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d8a6:	9600      	str	r6, [sp, #0]
 800d8a8:	462b      	mov	r3, r5
 800d8aa:	4622      	mov	r2, r4
 800d8ac:	4641      	mov	r1, r8
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	f003 fade 	bl	8010e70 <SecureElementComputeAesCmac>
 800d8b4:	b940      	cbnz	r0, 800d8c8 <ComputeCmacB0+0x54>
}
 800d8b6:	b008      	add	sp, #32
 800d8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d8bc:	2009      	movs	r0, #9
 800d8be:	e7fa      	b.n	800d8b6 <ComputeCmacB0+0x42>
 800d8c0:	2009      	movs	r0, #9
 800d8c2:	e7f8      	b.n	800d8b6 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d8c4:	200d      	movs	r0, #13
 800d8c6:	e7f6      	b.n	800d8b6 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d8c8:	200e      	movs	r0, #14
 800d8ca:	e7f4      	b.n	800d8b6 <ComputeCmacB0+0x42>

0800d8cc <DeriveSessionKey10x>:
{
 800d8cc:	b510      	push	{r4, lr}
 800d8ce:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d8d0:	2400      	movs	r4, #0
 800d8d2:	9400      	str	r4, [sp, #0]
 800d8d4:	9401      	str	r4, [sp, #4]
 800d8d6:	9402      	str	r4, [sp, #8]
 800d8d8:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d8da:	2808      	cmp	r0, #8
 800d8dc:	d003      	beq.n	800d8e6 <DeriveSessionKey10x+0x1a>
 800d8de:	2809      	cmp	r0, #9
 800d8e0:	d025      	beq.n	800d92e <DeriveSessionKey10x+0x62>
 800d8e2:	200a      	movs	r0, #10
 800d8e4:	e021      	b.n	800d92a <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d8e6:	2401      	movs	r4, #1
 800d8e8:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d8ec:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d8f0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d8f4:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d8f8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d8fc:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d900:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d904:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d908:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d90c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d910:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d914:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d918:	0a1b      	lsrs	r3, r3, #8
 800d91a:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d91e:	4602      	mov	r2, r0
 800d920:	2101      	movs	r1, #1
 800d922:	4668      	mov	r0, sp
 800d924:	f003 fb42 	bl	8010fac <SecureElementDeriveAndStoreKey>
 800d928:	b928      	cbnz	r0, 800d936 <DeriveSessionKey10x+0x6a>
}
 800d92a:	b004      	add	sp, #16
 800d92c:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d92e:	2402      	movs	r4, #2
 800d930:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d934:	e7da      	b.n	800d8ec <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d936:	200e      	movs	r0, #14
 800d938:	e7f7      	b.n	800d92a <DeriveSessionKey10x+0x5e>

0800d93a <PayloadEncrypt>:
{
 800d93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	4690      	mov	r8, r2
 800d942:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800d944:	2800      	cmp	r0, #0
 800d946:	d052      	beq.n	800d9ee <PayloadEncrypt+0xb4>
 800d948:	460d      	mov	r5, r1
 800d94a:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d94c:	2600      	movs	r6, #0
 800d94e:	9604      	str	r6, [sp, #16]
 800d950:	9605      	str	r6, [sp, #20]
 800d952:	9606      	str	r6, [sp, #24]
 800d954:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d956:	9600      	str	r6, [sp, #0]
 800d958:	9601      	str	r6, [sp, #4]
 800d95a:	9602      	str	r6, [sp, #8]
 800d95c:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d95e:	2701      	movs	r7, #1
 800d960:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d964:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d968:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d96c:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d970:	0a19      	lsrs	r1, r3, #8
 800d972:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d976:	0c19      	lsrs	r1, r3, #16
 800d978:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d97c:	0e1b      	lsrs	r3, r3, #24
 800d97e:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d982:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d986:	0a13      	lsrs	r3, r2, #8
 800d988:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d98c:	0c13      	lsrs	r3, r2, #16
 800d98e:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d992:	0e12      	lsrs	r2, r2, #24
 800d994:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d998:	e014      	b.n	800d9c4 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d99a:	18f2      	adds	r2, r6, r3
 800d99c:	5ca0      	ldrb	r0, [r4, r2]
 800d99e:	f103 0120 	add.w	r1, r3, #32
 800d9a2:	4469      	add	r1, sp
 800d9a4:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d9a8:	4048      	eors	r0, r1
 800d9aa:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	2d10      	cmp	r5, #16
 800d9b4:	bfa8      	it	ge
 800d9b6:	2210      	movge	r2, #16
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	dbee      	blt.n	800d99a <PayloadEncrypt+0x60>
        size -= 16;
 800d9bc:	3d10      	subs	r5, #16
 800d9be:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d9c0:	3610      	adds	r6, #16
 800d9c2:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d9c4:	2d00      	cmp	r5, #0
 800d9c6:	dd0e      	ble.n	800d9e6 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d9c8:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d9cc:	3701      	adds	r7, #1
 800d9ce:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d9d0:	ab04      	add	r3, sp, #16
 800d9d2:	4642      	mov	r2, r8
 800d9d4:	2110      	movs	r1, #16
 800d9d6:	4668      	mov	r0, sp
 800d9d8:	f003 fa6f 	bl	8010eba <SecureElementAesEncrypt>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d0e6      	beq.n	800d9b0 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d9e2:	200e      	movs	r0, #14
 800d9e4:	e000      	b.n	800d9e8 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d9e6:	2000      	movs	r0, #0
}
 800d9e8:	b008      	add	sp, #32
 800d9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d9ee:	2009      	movs	r0, #9
 800d9f0:	e7fa      	b.n	800d9e8 <PayloadEncrypt+0xae>

0800d9f2 <VerifyCmacB0>:
    if( msg == 0 )
 800d9f2:	b368      	cbz	r0, 800da50 <VerifyCmacB0+0x5e>
{
 800d9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f8:	b0c8      	sub	sp, #288	; 0x120
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	4615      	mov	r5, r2
 800d9fe:	461e      	mov	r6, r3
 800da00:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800da02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800da06:	d825      	bhi.n	800da54 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800da08:	af04      	add	r7, sp, #16
 800da0a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800da0e:	2100      	movs	r1, #0
 800da10:	4638      	mov	r0, r7
 800da12:	f003 fc8a 	bl	801132a <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800da16:	9702      	str	r7, [sp, #8]
 800da18:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800da24:	4632      	mov	r2, r6
 800da26:	4629      	mov	r1, r5
 800da28:	4620      	mov	r0, r4
 800da2a:	f7ff fe6d 	bl	800d708 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800da2e:	4622      	mov	r2, r4
 800da30:	4641      	mov	r1, r8
 800da32:	a808      	add	r0, sp, #32
 800da34:	f003 fc61 	bl	80112fa <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800da38:	462b      	mov	r3, r5
 800da3a:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800da3c:	f104 0110 	add.w	r1, r4, #16
 800da40:	4638      	mov	r0, r7
 800da42:	f003 fa24 	bl	8010e8e <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800da46:	b130      	cbz	r0, 800da56 <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800da48:	2801      	cmp	r0, #1
 800da4a:	d004      	beq.n	800da56 <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800da4c:	200e      	movs	r0, #14
 800da4e:	e002      	b.n	800da56 <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800da50:	2009      	movs	r0, #9
}
 800da52:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800da54:	200d      	movs	r0, #13
}
 800da56:	b048      	add	sp, #288	; 0x120
 800da58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da5c <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800da5c:	b188      	cbz	r0, 800da82 <LoRaMacCryptoInit+0x26>
{
 800da5e:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800da60:	4c09      	ldr	r4, [pc, #36]	; (800da88 <LoRaMacCryptoInit+0x2c>)
 800da62:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800da64:	2228      	movs	r2, #40	; 0x28
 800da66:	2100      	movs	r1, #0
 800da68:	f003 fc5f 	bl	801132a <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	2201      	movs	r2, #1
 800da70:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800da72:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800da74:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800da76:	2400      	movs	r4, #0
 800da78:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800da7a:	f7ff fed9 	bl	800d830 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800da7e:	4620      	mov	r0, r4
}
 800da80:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800da82:	2008      	movs	r0, #8
}
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	200010b4 	.word	0x200010b4

0800da8c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800da8c:	4b02      	ldr	r3, [pc, #8]	; (800da98 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800da92:	2000      	movs	r0, #0
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	200010b4 	.word	0x200010b4

0800da9c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800da9c:	b130      	cbz	r0, 800daac <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800da9e:	4b04      	ldr	r3, [pc, #16]	; (800dab0 <LoRaMacCryptoGetFCntUp+0x14>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	3301      	adds	r3, #1
 800daa6:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800daa8:	2000      	movs	r0, #0
 800daaa:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800daac:	2009      	movs	r0, #9
}
 800daae:	4770      	bx	lr
 800dab0:	200010b4 	.word	0x200010b4

0800dab4 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800dab4:	b530      	push	{r4, r5, lr}
 800dab6:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800dab8:	2300      	movs	r3, #0
 800daba:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800dabc:	b1f2      	cbz	r2, 800dafc <LoRaMacCryptoGetFCntDown+0x48>
 800dabe:	460c      	mov	r4, r1
 800dac0:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800dac2:	a901      	add	r1, sp, #4
 800dac4:	f7ff fe5a 	bl	800d77c <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dac8:	b948      	cbnz	r0, 800dade <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800daca:	9b01      	ldr	r3, [sp, #4]
 800dacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad0:	d007      	beq.n	800dae2 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800dad6:	2a00      	cmp	r2, #0
 800dad8:	dd05      	ble.n	800dae6 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800dada:	4413      	add	r3, r2
 800dadc:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800dade:	b003      	add	sp, #12
 800dae0:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800dae2:	602c      	str	r4, [r5, #0]
 800dae4:	e7fb      	b.n	800dade <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800dae6:	b132      	cbz	r2, 800daf6 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800dae8:	0c1b      	lsrs	r3, r3, #16
 800daea:	041b      	lsls	r3, r3, #16
 800daec:	4423      	add	r3, r4
 800daee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	e7f3      	b.n	800dade <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800daf6:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800daf8:	2007      	movs	r0, #7
 800dafa:	e7f0      	b.n	800dade <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dafc:	2009      	movs	r0, #9
 800dafe:	e7ee      	b.n	800dade <LoRaMacCryptoGetFCntDown+0x2a>

0800db00 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800db00:	4601      	mov	r1, r0
 800db02:	b908      	cbnz	r0, 800db08 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800db04:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800db06:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800db08:	2300      	movs	r3, #0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	dd01      	ble.n	800db12 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800db0e:	2000      	movs	r0, #0
 800db10:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800db12:	4a07      	ldr	r2, [pc, #28]	; (800db30 <LoRaMacCryptoSetMulticastReference+0x30>)
 800db14:	6812      	ldr	r2, [r2, #0]
 800db16:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800db1a:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800db1e:	f103 0c06 	add.w	ip, r3, #6
 800db22:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800db26:	3204      	adds	r2, #4
 800db28:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800db2a:	3301      	adds	r3, #1
 800db2c:	e7ed      	b.n	800db0a <LoRaMacCryptoSetMulticastReference+0xa>
 800db2e:	bf00      	nop
 800db30:	200010b4 	.word	0x200010b4

0800db34 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800db34:	b1d8      	cbz	r0, 800db6e <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800db36:	b510      	push	{r4, lr}
 800db38:	b082      	sub	sp, #8
 800db3a:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800db3c:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	8893      	ldrh	r3, [r2, #4]
 800db42:	3301      	adds	r3, #1
 800db44:	b29b      	uxth	r3, r3
 800db46:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800db48:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800db4a:	f000 fa32 	bl	800dfb2 <LoRaMacSerializerJoinRequest>
 800db4e:	b980      	cbnz	r0, 800db72 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800db50:	4623      	mov	r3, r4
 800db52:	f853 1b18 	ldr.w	r1, [r3], #24
 800db56:	9300      	str	r3, [sp, #0]
 800db58:	2301      	movs	r3, #1
 800db5a:	2213      	movs	r2, #19
 800db5c:	f003 f988 	bl	8010e70 <SecureElementComputeAesCmac>
 800db60:	b950      	cbnz	r0, 800db78 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800db62:	4620      	mov	r0, r4
 800db64:	f000 fa25 	bl	800dfb2 <LoRaMacSerializerJoinRequest>
 800db68:	b120      	cbz	r0, 800db74 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800db6a:	2010      	movs	r0, #16
 800db6c:	e002      	b.n	800db74 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800db6e:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800db70:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800db72:	2010      	movs	r0, #16
}
 800db74:	b002      	add	sp, #8
 800db76:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800db78:	200e      	movs	r0, #14
 800db7a:	e7fb      	b.n	800db74 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800db7c:	200010b4 	.word	0x200010b4

0800db80 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800db80:	2b00      	cmp	r3, #0
 800db82:	d036      	beq.n	800dbf2 <LoRaMacCryptoSecureMessage+0x72>
{
 800db84:	b530      	push	{r4, r5, lr}
 800db86:	b085      	sub	sp, #20
 800db88:	4604      	mov	r4, r0
 800db8a:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800db8c:	4b1d      	ldr	r3, [pc, #116]	; (800dc04 <LoRaMacCryptoSecureMessage+0x84>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	4283      	cmp	r3, r0
 800db94:	d82f      	bhi.n	800dbf6 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800db96:	f895 2020 	ldrb.w	r2, [r5, #32]
 800db9a:	b342      	cbz	r2, 800dbee <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800db9c:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800db9e:	42a3      	cmp	r3, r4
 800dba0:	d209      	bcs.n	800dbb6 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800dba2:	9401      	str	r4, [sp, #4]
 800dba4:	2300      	movs	r3, #0
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	68ab      	ldr	r3, [r5, #8]
 800dbaa:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800dbae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800dbb0:	f7ff fec3 	bl	800d93a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dbb4:	bb10      	cbnz	r0, 800dbfc <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	f000 fa31 	bl	800e01e <LoRaMacSerializerData>
 800dbbc:	b9e8      	cbnz	r0, 800dbfa <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800dbbe:	7929      	ldrb	r1, [r5, #4]
 800dbc0:	3904      	subs	r1, #4
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	f853 0b2c 	ldr.w	r0, [r3], #44
 800dbc8:	9303      	str	r3, [sp, #12]
 800dbca:	9402      	str	r4, [sp, #8]
 800dbcc:	68ab      	ldr	r3, [r5, #8]
 800dbce:	9301      	str	r3, [sp, #4]
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	2208      	movs	r2, #8
 800dbd6:	b289      	uxth	r1, r1
 800dbd8:	f7ff fe4c 	bl	800d874 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dbdc:	b970      	cbnz	r0, 800dbfc <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f000 fa1d 	bl	800e01e <LoRaMacSerializerData>
 800dbe4:	b960      	cbnz	r0, 800dc00 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800dbe6:	4b07      	ldr	r3, [pc, #28]	; (800dc04 <LoRaMacCryptoSecureMessage+0x84>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800dbec:	e006      	b.n	800dbfc <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800dbee:	2208      	movs	r2, #8
 800dbf0:	e7d5      	b.n	800db9e <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dbf2:	2009      	movs	r0, #9
}
 800dbf4:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800dbf6:	2006      	movs	r0, #6
 800dbf8:	e000      	b.n	800dbfc <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800dbfa:	2010      	movs	r0, #16
}
 800dbfc:	b005      	add	sp, #20
 800dbfe:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800dc00:	2010      	movs	r0, #16
 800dc02:	e7fb      	b.n	800dbfc <LoRaMacCryptoSecureMessage+0x7c>
 800dc04:	200010b4 	.word	0x200010b4

0800dc08 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800dc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc0c:	b087      	sub	sp, #28
 800dc0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800dc10:	2e00      	cmp	r6, #0
 800dc12:	d049      	beq.n	800dca8 <LoRaMacCryptoUnsecureMessage+0xa0>
 800dc14:	4605      	mov	r5, r0
 800dc16:	4688      	mov	r8, r1
 800dc18:	4617      	mov	r7, r2
 800dc1a:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	4610      	mov	r0, r2
 800dc20:	f7ff fdd2 	bl	800d7c8 <CheckFCntDown>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d041      	beq.n	800dcac <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800dc28:	4630      	mov	r0, r6
 800dc2a:	f000 f963 	bl	800def4 <LoRaMacParserData>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d141      	bne.n	800dcb6 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800dc32:	a905      	add	r1, sp, #20
 800dc34:	4628      	mov	r0, r5
 800dc36:	f7ff fd8b 	bl	800d750 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d136      	bne.n	800dcae <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800dc40:	9b05      	ldr	r3, [sp, #20]
 800dc42:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800dc46:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800dc48:	68b3      	ldr	r3, [r6, #8]
 800dc4a:	4543      	cmp	r3, r8
 800dc4c:	d135      	bne.n	800dcba <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800dc4e:	7b33      	ldrb	r3, [r6, #12]
 800dc50:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800dc54:	491a      	ldr	r1, [pc, #104]	; (800dcc0 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800dc56:	6809      	ldr	r1, [r1, #0]
 800dc58:	7889      	ldrb	r1, [r1, #2]
 800dc5a:	b901      	cbnz	r1, 800dc5e <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800dc5c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800dc5e:	7931      	ldrb	r1, [r6, #4]
 800dc60:	3904      	subs	r1, #4
 800dc62:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800dc64:	9003      	str	r0, [sp, #12]
 800dc66:	9402      	str	r4, [sp, #8]
 800dc68:	f8cd 8004 	str.w	r8, [sp, #4]
 800dc6c:	2001      	movs	r0, #1
 800dc6e:	9000      	str	r0, [sp, #0]
 800dc70:	b289      	uxth	r1, r1
 800dc72:	6830      	ldr	r0, [r6, #0]
 800dc74:	f7ff febd 	bl	800d9f2 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dc78:	4605      	mov	r5, r0
 800dc7a:	b9c0      	cbnz	r0, 800dcae <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800dc7c:	f896 3020 	ldrb.w	r3, [r6, #32]
 800dc80:	b90b      	cbnz	r3, 800dc86 <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800dc82:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800dc86:	9401      	str	r4, [sp, #4]
 800dc88:	2301      	movs	r3, #1
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	4643      	mov	r3, r8
 800dc8e:	464a      	mov	r2, r9
 800dc90:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800dc94:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800dc96:	f7ff fe50 	bl	800d93a <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	b938      	cbnz	r0, 800dcae <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800dc9e:	4621      	mov	r1, r4
 800dca0:	4638      	mov	r0, r7
 800dca2:	f7ff fda9 	bl	800d7f8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800dca6:	e002      	b.n	800dcae <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dca8:	2509      	movs	r5, #9
 800dcaa:	e000      	b.n	800dcae <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800dcac:	2506      	movs	r5, #6
}
 800dcae:	4628      	mov	r0, r5
 800dcb0:	b007      	add	sp, #28
 800dcb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800dcb6:	250f      	movs	r5, #15
 800dcb8:	e7f9      	b.n	800dcae <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800dcba:	2502      	movs	r5, #2
 800dcbc:	e7f7      	b.n	800dcae <LoRaMacCryptoUnsecureMessage+0xa6>
 800dcbe:	bf00      	nop
 800dcc0:	200010b4 	.word	0x200010b4

0800dcc4 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800dcc4:	b500      	push	{lr}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800dcca:	2300      	movs	r3, #0
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	9302      	str	r3, [sp, #8]
 800dcd2:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800dcd4:	290b      	cmp	r1, #11
 800dcd6:	d007      	beq.n	800dce8 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800dcd8:	290c      	cmp	r1, #12
 800dcda:	d013      	beq.n	800dd04 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800dcdc:	290a      	cmp	r1, #10
 800dcde:	d00c      	beq.n	800dcfa <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800dce0:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800dce2:	b005      	add	sp, #20
 800dce4:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800dce8:	2801      	cmp	r0, #1
 800dcea:	d001      	beq.n	800dcf0 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800dcec:	2100      	movs	r1, #0
 800dcee:	e00a      	b.n	800dd06 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800dcf0:	2320      	movs	r3, #32
 800dcf2:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	e005      	b.n	800dd06 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800dcfa:	2330      	movs	r3, #48	; 0x30
 800dcfc:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800dd00:	2100      	movs	r1, #0
            break;
 800dd02:	e000      	b.n	800dd06 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800dd04:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800dd06:	4668      	mov	r0, sp
 800dd08:	f003 f950 	bl	8010fac <SecureElementDeriveAndStoreKey>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d0e8      	beq.n	800dce2 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dd10:	200e      	movs	r0, #14
 800dd12:	e7e6      	b.n	800dce2 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800dd14 <LoRaMacCryptoSetKey>:
{
 800dd14:	b510      	push	{r4, lr}
 800dd16:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800dd18:	f003 f906 	bl	8010f28 <SecureElementSetKey>
 800dd1c:	b998      	cbnz	r0, 800dd46 <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800dd1e:	b104      	cbz	r4, 800dd22 <LoRaMacCryptoSetKey+0xe>
}
 800dd20:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800dd22:	4b0c      	ldr	r3, [pc, #48]	; (800dd54 <LoRaMacCryptoSetKey+0x40>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	210b      	movs	r1, #11
 800dd28:	7898      	ldrb	r0, [r3, #2]
 800dd2a:	f7ff ffcb 	bl	800dcc4 <LoRaMacCryptoDeriveLifeTimeKey>
 800dd2e:	b960      	cbnz	r0, 800dd4a <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800dd30:	210c      	movs	r1, #12
 800dd32:	f7ff ffc7 	bl	800dcc4 <LoRaMacCryptoDeriveLifeTimeKey>
 800dd36:	b950      	cbnz	r0, 800dd4e <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800dd38:	210a      	movs	r1, #10
 800dd3a:	f7ff ffc3 	bl	800dcc4 <LoRaMacCryptoDeriveLifeTimeKey>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d0ee      	beq.n	800dd20 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dd42:	200e      	movs	r0, #14
 800dd44:	e7ec      	b.n	800dd20 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dd46:	200e      	movs	r0, #14
 800dd48:	e7ea      	b.n	800dd20 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dd4a:	200e      	movs	r0, #14
 800dd4c:	e7e8      	b.n	800dd20 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dd4e:	200e      	movs	r0, #14
 800dd50:	e7e6      	b.n	800dd20 <LoRaMacCryptoSetKey+0xc>
 800dd52:	bf00      	nop
 800dd54:	200010b4 	.word	0x200010b4

0800dd58 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800dd58:	2a00      	cmp	r2, #0
 800dd5a:	d06c      	beq.n	800de36 <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800dd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd5e:	b08f      	sub	sp, #60	; 0x3c
 800dd60:	4607      	mov	r7, r0
 800dd62:	460d      	mov	r5, r1
 800dd64:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800dd66:	2900      	cmp	r1, #0
 800dd68:	d067      	beq.n	800de3a <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800dd6a:	2600      	movs	r6, #0
 800dd6c:	9605      	str	r6, [sp, #20]
 800dd6e:	221d      	movs	r2, #29
 800dd70:	4631      	mov	r1, r6
 800dd72:	a806      	add	r0, sp, #24
 800dd74:	f006 fcb1 	bl	80146da <memset>
    uint8_t versionMinor         = 0;
 800dd78:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800dd7c:	4b33      	ldr	r3, [pc, #204]	; (800de4c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800dd82:	f10d 0313 	add.w	r3, sp, #19
 800dd86:	9302      	str	r3, [sp, #8]
 800dd88:	ab05      	add	r3, sp, #20
 800dd8a:	9301      	str	r3, [sp, #4]
 800dd8c:	7923      	ldrb	r3, [r4, #4]
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	6823      	ldr	r3, [r4, #0]
 800dd92:	4632      	mov	r2, r6
 800dd94:	4629      	mov	r1, r5
 800dd96:	4638      	mov	r0, r7
 800dd98:	f003 f928 	bl	8010fec <SecureElementProcessJoinAccept>
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d14e      	bne.n	800de3e <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800dda0:	7922      	ldrb	r2, [r4, #4]
 800dda2:	a905      	add	r1, sp, #20
 800dda4:	6820      	ldr	r0, [r4, #0]
 800dda6:	f003 faa8 	bl	80112fa <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f000 f850 	bl	800de50 <LoRaMacParserJoinAccept>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d147      	bne.n	800de44 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ddb4:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ddb6:	79e3      	ldrb	r3, [r4, #7]
 800ddb8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ddbc:	7a23      	ldrb	r3, [r4, #8]
 800ddbe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f7ff fd4c 	bl	800d860 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d03d      	beq.n	800de48 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ddcc:	4b1f      	ldr	r3, [pc, #124]	; (800de4c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800ddd2:	210b      	movs	r1, #11
 800ddd4:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800ddd8:	f7ff ff74 	bl	800dcc4 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dddc:	bb80      	cbnz	r0, 800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800ddde:	210c      	movs	r1, #12
 800dde0:	2000      	movs	r0, #0
 800dde2:	f7ff ff6f 	bl	800dcc4 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dde6:	bb58      	cbnz	r0, 800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800dde8:	210a      	movs	r1, #10
 800ddea:	2000      	movs	r0, #0
 800ddec:	f7ff ff6a 	bl	800dcc4 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ddf0:	bb30      	cbnz	r0, 800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800ddf2:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ddf4:	7aa2      	ldrb	r2, [r4, #10]
 800ddf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ddfa:	7ae2      	ldrb	r2, [r4, #11]
 800ddfc:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800de00:	4633      	mov	r3, r6
 800de02:	4622      	mov	r2, r4
 800de04:	4629      	mov	r1, r5
 800de06:	2009      	movs	r0, #9
 800de08:	f7ff fd60 	bl	800d8cc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800de0c:	b9c0      	cbnz	r0, 800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800de0e:	4633      	mov	r3, r6
 800de10:	4622      	mov	r2, r4
 800de12:	4629      	mov	r1, r5
 800de14:	2008      	movs	r0, #8
 800de16:	f7ff fd59 	bl	800d8cc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800de1a:	b988      	cbnz	r0, 800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800de24:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800de26:	2200      	movs	r2, #0
 800de28:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800de2a:	f04f 32ff 	mov.w	r2, #4294967295
 800de2e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800de30:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800de32:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800de34:	e004      	b.n	800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800de36:	2009      	movs	r0, #9
}
 800de38:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800de3a:	2009      	movs	r0, #9
 800de3c:	e000      	b.n	800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800de3e:	200e      	movs	r0, #14
}
 800de40:	b00f      	add	sp, #60	; 0x3c
 800de42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800de44:	200f      	movs	r0, #15
 800de46:	e7fb      	b.n	800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800de48:	2003      	movs	r0, #3
 800de4a:	e7f9      	b.n	800de40 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800de4c:	200010b4 	.word	0x200010b4

0800de50 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800de50:	2800      	cmp	r0, #0
 800de52:	d049      	beq.n	800dee8 <LoRaMacParserJoinAccept+0x98>
{
 800de54:	b510      	push	{r4, lr}
 800de56:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800de58:	6801      	ldr	r1, [r0, #0]
 800de5a:	2900      	cmp	r1, #0
 800de5c:	d046      	beq.n	800deec <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800de5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de62:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800de64:	2203      	movs	r2, #3
 800de66:	3006      	adds	r0, #6
 800de68:	f003 fa47 	bl	80112fa <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800de6c:	4620      	mov	r0, r4
 800de6e:	f850 1b09 	ldr.w	r1, [r0], #9
 800de72:	2203      	movs	r2, #3
 800de74:	3104      	adds	r1, #4
 800de76:	f003 fa40 	bl	80112fa <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800de7a:	6821      	ldr	r1, [r4, #0]
 800de7c:	79cb      	ldrb	r3, [r1, #7]
 800de7e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800de80:	7a0a      	ldrb	r2, [r1, #8]
 800de82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800de86:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800de88:	7a4a      	ldrb	r2, [r1, #9]
 800de8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de8e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800de90:	7a8a      	ldrb	r2, [r1, #10]
 800de92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800de96:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800de98:	7acb      	ldrb	r3, [r1, #11]
 800de9a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800de9c:	7b0b      	ldrb	r3, [r1, #12]
 800de9e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800dea0:	7923      	ldrb	r3, [r4, #4]
 800dea2:	2b21      	cmp	r3, #33	; 0x21
 800dea4:	d018      	beq.n	800ded8 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800dea6:	2b11      	cmp	r3, #17
 800dea8:	dc22      	bgt.n	800def0 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800deaa:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800deac:	6821      	ldr	r1, [r4, #0]
 800deae:	f102 0c01 	add.w	ip, r2, #1
 800deb2:	5c8b      	ldrb	r3, [r1, r2]
 800deb4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800deb6:	1c90      	adds	r0, r2, #2
 800deb8:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800debc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800dec0:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800dec2:	3203      	adds	r2, #3
 800dec4:	5c08      	ldrb	r0, [r1, r0]
 800dec6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800deca:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800decc:	5c8a      	ldrb	r2, [r1, r2]
 800dece:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ded2:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800ded4:	2000      	movs	r0, #0
}
 800ded6:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800ded8:	2210      	movs	r2, #16
 800deda:	310d      	adds	r1, #13
 800dedc:	f104 0012 	add.w	r0, r4, #18
 800dee0:	f003 fa0b 	bl	80112fa <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800dee4:	221d      	movs	r2, #29
 800dee6:	e7e1      	b.n	800deac <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800dee8:	2002      	movs	r0, #2
}
 800deea:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800deec:	2002      	movs	r0, #2
 800deee:	e7f2      	b.n	800ded6 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800def0:	2001      	movs	r0, #1
 800def2:	e7f0      	b.n	800ded6 <LoRaMacParserJoinAccept+0x86>

0800def4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800def4:	2800      	cmp	r0, #0
 800def6:	d058      	beq.n	800dfaa <LoRaMacParserData+0xb6>
{
 800def8:	b510      	push	{r4, lr}
 800defa:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800defc:	6801      	ldr	r1, [r0, #0]
 800defe:	2900      	cmp	r1, #0
 800df00:	d055      	beq.n	800dfae <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800df02:	780b      	ldrb	r3, [r1, #0]
 800df04:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800df06:	784b      	ldrb	r3, [r1, #1]
 800df08:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800df0a:	788a      	ldrb	r2, [r1, #2]
 800df0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800df10:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800df12:	78ca      	ldrb	r2, [r1, #3]
 800df14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df18:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800df1a:	790a      	ldrb	r2, [r1, #4]
 800df1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800df20:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800df22:	794b      	ldrb	r3, [r1, #5]
 800df24:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800df26:	798b      	ldrb	r3, [r1, #6]
 800df28:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800df2a:	79ca      	ldrb	r2, [r1, #7]
 800df2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800df30:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800df32:	7b02      	ldrb	r2, [r0, #12]
 800df34:	f002 020f 	and.w	r2, r2, #15
 800df38:	3108      	adds	r1, #8
 800df3a:	3010      	adds	r0, #16
 800df3c:	f003 f9dd 	bl	80112fa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800df40:	7b23      	ldrb	r3, [r4, #12]
 800df42:	f003 030f 	and.w	r3, r3, #15
 800df46:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800df4a:	2200      	movs	r2, #0
 800df4c:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800df50:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800df54:	7922      	ldrb	r2, [r4, #4]
 800df56:	1a11      	subs	r1, r2, r0
 800df58:	2904      	cmp	r1, #4
 800df5a:	dc16      	bgt.n	800df8a <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800df5c:	6822      	ldr	r2, [r4, #0]
 800df5e:	7923      	ldrb	r3, [r4, #4]
 800df60:	441a      	add	r2, r3
 800df62:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800df66:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800df68:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800df6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800df70:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800df72:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800df76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800df7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800df7c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800df80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800df84:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800df86:	2000      	movs	r0, #0
}
 800df88:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800df8a:	6821      	ldr	r1, [r4, #0]
 800df8c:	3309      	adds	r3, #9
 800df8e:	5c08      	ldrb	r0, [r1, r0]
 800df90:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800df94:	1ad2      	subs	r2, r2, r3
 800df96:	b2d2      	uxtb	r2, r2
 800df98:	3a04      	subs	r2, #4
 800df9a:	b2d2      	uxtb	r2, r2
 800df9c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800dfa0:	4419      	add	r1, r3
 800dfa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dfa4:	f003 f9a9 	bl	80112fa <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800dfa8:	e7d8      	b.n	800df5c <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800dfaa:	2002      	movs	r0, #2
}
 800dfac:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800dfae:	2002      	movs	r0, #2
 800dfb0:	e7ea      	b.n	800df88 <LoRaMacParserData+0x94>

0800dfb2 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dfb2:	b370      	cbz	r0, 800e012 <LoRaMacSerializerJoinRequest+0x60>
{
 800dfb4:	b510      	push	{r4, lr}
 800dfb6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dfb8:	6803      	ldr	r3, [r0, #0]
 800dfba:	b363      	cbz	r3, 800e016 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800dfbc:	7902      	ldrb	r2, [r0, #4]
 800dfbe:	2a16      	cmp	r2, #22
 800dfc0:	d92b      	bls.n	800e01a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800dfc2:	7942      	ldrb	r2, [r0, #5]
 800dfc4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800dfc6:	4601      	mov	r1, r0
 800dfc8:	f851 0b06 	ldr.w	r0, [r1], #6
 800dfcc:	2208      	movs	r2, #8
 800dfce:	3001      	adds	r0, #1
 800dfd0:	f003 f99e 	bl	8011310 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	f851 0b0e 	ldr.w	r0, [r1], #14
 800dfda:	2208      	movs	r2, #8
 800dfdc:	3009      	adds	r0, #9
 800dfde:	f003 f997 	bl	8011310 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800dfe2:	8ae2      	ldrh	r2, [r4, #22]
 800dfe4:	6823      	ldr	r3, [r4, #0]
 800dfe6:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800dfe8:	8ae3      	ldrh	r3, [r4, #22]
 800dfea:	6822      	ldr	r2, [r4, #0]
 800dfec:	0a1b      	lsrs	r3, r3, #8
 800dfee:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dff0:	69a2      	ldr	r2, [r4, #24]
 800dff2:	6823      	ldr	r3, [r4, #0]
 800dff4:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800dff6:	69a3      	ldr	r3, [r4, #24]
 800dff8:	0a1b      	lsrs	r3, r3, #8
 800dffa:	6822      	ldr	r2, [r4, #0]
 800dffc:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800dffe:	8b62      	ldrh	r2, [r4, #26]
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e004:	7ee2      	ldrb	r2, [r4, #27]
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800e00a:	2317      	movs	r3, #23
 800e00c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e00e:	2000      	movs	r0, #0
}
 800e010:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e012:	2001      	movs	r0, #1
}
 800e014:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e016:	2001      	movs	r0, #1
 800e018:	e7fa      	b.n	800e010 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e01a:	2002      	movs	r0, #2
 800e01c:	e7f8      	b.n	800e010 <LoRaMacSerializerJoinRequest+0x5e>

0800e01e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e01e:	2800      	cmp	r0, #0
 800e020:	d066      	beq.n	800e0f0 <LoRaMacSerializerData+0xd2>
{
 800e022:	b538      	push	{r3, r4, r5, lr}
 800e024:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e026:	6801      	ldr	r1, [r0, #0]
 800e028:	2900      	cmp	r1, #0
 800e02a:	d063      	beq.n	800e0f4 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e02c:	7b02      	ldrb	r2, [r0, #12]
 800e02e:	f002 020f 	and.w	r2, r2, #15
 800e032:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800e036:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e03a:	b10b      	cbz	r3, 800e040 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800e03c:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800e040:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800e042:	3304      	adds	r3, #4
 800e044:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800e046:	7922      	ldrb	r2, [r4, #4]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d355      	bcc.n	800e0f8 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e04c:	7963      	ldrb	r3, [r4, #5]
 800e04e:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800e050:	68a2      	ldr	r2, [r4, #8]
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800e056:	68a3      	ldr	r3, [r4, #8]
 800e058:	0a1b      	lsrs	r3, r3, #8
 800e05a:	6822      	ldr	r2, [r4, #0]
 800e05c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800e05e:	8962      	ldrh	r2, [r4, #10]
 800e060:	6823      	ldr	r3, [r4, #0]
 800e062:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800e064:	7ae2      	ldrb	r2, [r4, #11]
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	7b22      	ldrb	r2, [r4, #12]
 800e06e:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800e070:	89e2      	ldrh	r2, [r4, #14]
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800e076:	89e3      	ldrh	r3, [r4, #14]
 800e078:	6822      	ldr	r2, [r4, #0]
 800e07a:	0a1b      	lsrs	r3, r3, #8
 800e07c:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e07e:	4621      	mov	r1, r4
 800e080:	f851 0b10 	ldr.w	r0, [r1], #16
 800e084:	7b22      	ldrb	r2, [r4, #12]
 800e086:	f002 020f 	and.w	r2, r2, #15
 800e08a:	3008      	adds	r0, #8
 800e08c:	f003 f935 	bl	80112fa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e090:	7b23      	ldrb	r3, [r4, #12]
 800e092:	f003 030f 	and.w	r3, r3, #15
 800e096:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800e09a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800e09e:	b12a      	cbz	r2, 800e0ac <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800e0a0:	6822      	ldr	r2, [r4, #0]
 800e0a2:	f894 1020 	ldrb.w	r1, [r4, #32]
 800e0a6:	5551      	strb	r1, [r2, r5]
 800e0a8:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800e0ac:	6820      	ldr	r0, [r4, #0]
 800e0ae:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800e0b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e0b4:	4428      	add	r0, r5
 800e0b6:	f003 f920 	bl	80112fa <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800e0ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e0be:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e0c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e0c2:	6821      	ldr	r1, [r4, #0]
 800e0c4:	1c5a      	adds	r2, r3, #1
 800e0c6:	b292      	uxth	r2, r2
 800e0c8:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e0ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e0cc:	0a08      	lsrs	r0, r1, #8
 800e0ce:	6825      	ldr	r5, [r4, #0]
 800e0d0:	1c99      	adds	r1, r3, #2
 800e0d2:	b289      	uxth	r1, r1
 800e0d4:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e0d6:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800e0d8:	6820      	ldr	r0, [r4, #0]
 800e0da:	1cda      	adds	r2, r3, #3
 800e0dc:	b292      	uxth	r2, r2
 800e0de:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e0e0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800e0e4:	6821      	ldr	r1, [r4, #0]
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800e0ea:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e0ec:	2000      	movs	r0, #0
}
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e0f0:	2001      	movs	r0, #1
}
 800e0f2:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e0f4:	2001      	movs	r0, #1
 800e0f6:	e7fa      	b.n	800e0ee <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e0f8:	2002      	movs	r0, #2
 800e0fa:	e7f8      	b.n	800e0ee <LoRaMacSerializerData+0xd0>

0800e0fc <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800e0fc:	4b02      	ldr	r3, [pc, #8]	; (800e108 <NvmDataMgmtEvent+0xc>)
 800e0fe:	881a      	ldrh	r2, [r3, #0]
 800e100:	4310      	orrs	r0, r2
 800e102:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop
 800e108:	200010b8 	.word	0x200010b8

0800e10c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e10c:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800e10e:	4b06      	ldr	r3, [pc, #24]	; (800e128 <NvmDataMgmtStoreBegin+0x1c>)
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	b11b      	cbz	r3, 800e11c <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800e114:	f7fe f890 	bl	800c238 <LoRaMacStop>
 800e118:	b918      	cbnz	r0, 800e122 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e11a:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800e11c:	f06f 0001 	mvn.w	r0, #1
 800e120:	e7fb      	b.n	800e11a <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800e122:	f06f 0002 	mvn.w	r0, #2
 800e126:	e7f8      	b.n	800e11a <NvmDataMgmtStoreBegin+0xe>
 800e128:	200010b8 	.word	0x200010b8

0800e12c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e12c:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e12e:	2400      	movs	r4, #0
 800e130:	4b02      	ldr	r3, [pc, #8]	; (800e13c <NvmDataMgmtStoreEnd+0x10>)
 800e132:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800e134:	f7fe f874 	bl	800c220 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e138:	4620      	mov	r0, r4
 800e13a:	bd10      	pop	{r4, pc}
 800e13c:	200010b8 	.word	0x200010b8

0800e140 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800e140:	2805      	cmp	r0, #5
 800e142:	d005      	beq.n	800e150 <RegionIsActive+0x10>
 800e144:	2808      	cmp	r0, #8
 800e146:	d001      	beq.n	800e14c <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800e148:	2000      	movs	r0, #0
        }
    }
}
 800e14a:	4770      	bx	lr
    switch( region )
 800e14c:	2001      	movs	r0, #1
 800e14e:	4770      	bx	lr
 800e150:	2001      	movs	r0, #1
 800e152:	4770      	bx	lr

0800e154 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800e154:	b500      	push	{lr}
 800e156:	b083      	sub	sp, #12
 800e158:	4603      	mov	r3, r0
 800e15a:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800e15c:	2200      	movs	r2, #0
 800e15e:	9200      	str	r2, [sp, #0]
    switch( region )
 800e160:	2b05      	cmp	r3, #5
 800e162:	d004      	beq.n	800e16e <RegionGetPhyParam+0x1a>
 800e164:	2b08      	cmp	r3, #8
 800e166:	d009      	beq.n	800e17c <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800e168:	9b00      	ldr	r3, [sp, #0]
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	e002      	b.n	800e174 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800e16e:	f000 fded 	bl	800ed4c <RegionEU868GetPhyParam>
 800e172:	9001      	str	r0, [sp, #4]
        }
    }
}
 800e174:	9801      	ldr	r0, [sp, #4]
 800e176:	b003      	add	sp, #12
 800e178:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800e17c:	f001 fbdc 	bl	800f938 <RegionUS915GetPhyParam>
 800e180:	9001      	str	r0, [sp, #4]
 800e182:	e7f7      	b.n	800e174 <RegionGetPhyParam+0x20>

0800e184 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800e184:	b508      	push	{r3, lr}
 800e186:	4603      	mov	r3, r0
 800e188:	4608      	mov	r0, r1
    switch( region )
 800e18a:	2b05      	cmp	r3, #5
 800e18c:	d002      	beq.n	800e194 <RegionSetBandTxDone+0x10>
 800e18e:	2b08      	cmp	r3, #8
 800e190:	d003      	beq.n	800e19a <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800e192:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800e194:	f000 fe96 	bl	800eec4 <RegionEU868SetBandTxDone>
 800e198:	e7fb      	b.n	800e192 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800e19a:	f001 fca3 	bl	800fae4 <RegionUS915SetBandTxDone>
 800e19e:	e7f8      	b.n	800e192 <RegionSetBandTxDone+0xe>

0800e1a0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800e1a0:	b508      	push	{r3, lr}
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	4608      	mov	r0, r1
    switch( region )
 800e1a6:	2b05      	cmp	r3, #5
 800e1a8:	d002      	beq.n	800e1b0 <RegionInitDefaults+0x10>
 800e1aa:	2b08      	cmp	r3, #8
 800e1ac:	d003      	beq.n	800e1b6 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800e1ae:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800e1b0:	f000 fea6 	bl	800ef00 <RegionEU868InitDefaults>
 800e1b4:	e7fb      	b.n	800e1ae <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800e1b6:	f001 fcb3 	bl	800fb20 <RegionUS915InitDefaults>
}
 800e1ba:	e7f8      	b.n	800e1ae <RegionInitDefaults+0xe>

0800e1bc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e1bc:	b508      	push	{r3, lr}
 800e1be:	4603      	mov	r3, r0
 800e1c0:	4608      	mov	r0, r1
 800e1c2:	4611      	mov	r1, r2
    switch( region )
 800e1c4:	2b05      	cmp	r3, #5
 800e1c6:	d003      	beq.n	800e1d0 <RegionVerify+0x14>
 800e1c8:	2b08      	cmp	r3, #8
 800e1ca:	d004      	beq.n	800e1d6 <RegionVerify+0x1a>
 800e1cc:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800e1ce:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800e1d0:	f000 ff02 	bl	800efd8 <RegionEU868Verify>
 800e1d4:	e7fb      	b.n	800e1ce <RegionVerify+0x12>
        US915_VERIFY( );
 800e1d6:	f001 fd47 	bl	800fc68 <RegionUS915Verify>
 800e1da:	e7f8      	b.n	800e1ce <RegionVerify+0x12>

0800e1dc <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800e1dc:	b508      	push	{r3, lr}
 800e1de:	4603      	mov	r3, r0
 800e1e0:	4608      	mov	r0, r1
    switch( region )
 800e1e2:	2b05      	cmp	r3, #5
 800e1e4:	d002      	beq.n	800e1ec <RegionApplyCFList+0x10>
 800e1e6:	2b08      	cmp	r3, #8
 800e1e8:	d003      	beq.n	800e1f2 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800e1ea:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800e1ec:	f001 fac6 	bl	800f77c <RegionEU868ApplyCFList>
 800e1f0:	e7fb      	b.n	800e1ea <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800e1f2:	f001 fd73 	bl	800fcdc <RegionUS915ApplyCFList>
}
 800e1f6:	e7f8      	b.n	800e1ea <RegionApplyCFList+0xe>

0800e1f8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800e1f8:	b508      	push	{r3, lr}
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	4608      	mov	r0, r1
    switch( region )
 800e1fe:	2b05      	cmp	r3, #5
 800e200:	d003      	beq.n	800e20a <RegionChanMaskSet+0x12>
 800e202:	2b08      	cmp	r3, #8
 800e204:	d004      	beq.n	800e210 <RegionChanMaskSet+0x18>
 800e206:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800e208:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800e20a:	f000 ff2b 	bl	800f064 <RegionEU868ChanMaskSet>
 800e20e:	e7fb      	b.n	800e208 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800e210:	f001 fda2 	bl	800fd58 <RegionUS915ChanMaskSet>
 800e214:	e7f8      	b.n	800e208 <RegionChanMaskSet+0x10>

0800e216 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e216:	b508      	push	{r3, lr}
 800e218:	4684      	mov	ip, r0
 800e21a:	4608      	mov	r0, r1
 800e21c:	4611      	mov	r1, r2
 800e21e:	461a      	mov	r2, r3
    switch( region )
 800e220:	f1bc 0f05 	cmp.w	ip, #5
 800e224:	d003      	beq.n	800e22e <RegionComputeRxWindowParameters+0x18>
 800e226:	f1bc 0f08 	cmp.w	ip, #8
 800e22a:	d004      	beq.n	800e236 <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800e22c:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800e22e:	9b02      	ldr	r3, [sp, #8]
 800e230:	f000 ff36 	bl	800f0a0 <RegionEU868ComputeRxWindowParameters>
 800e234:	e7fa      	b.n	800e22c <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	f001 fdd0 	bl	800fddc <RegionUS915ComputeRxWindowParameters>
}
 800e23c:	e7f6      	b.n	800e22c <RegionComputeRxWindowParameters+0x16>

0800e23e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e23e:	b508      	push	{r3, lr}
 800e240:	4603      	mov	r3, r0
 800e242:	4608      	mov	r0, r1
 800e244:	4611      	mov	r1, r2
    switch( region )
 800e246:	2b05      	cmp	r3, #5
 800e248:	d003      	beq.n	800e252 <RegionRxConfig+0x14>
 800e24a:	2b08      	cmp	r3, #8
 800e24c:	d004      	beq.n	800e258 <RegionRxConfig+0x1a>
 800e24e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800e250:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800e252:	f000 ff5b 	bl	800f10c <RegionEU868RxConfig>
 800e256:	e7fb      	b.n	800e250 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800e258:	f001 fdee 	bl	800fe38 <RegionUS915RxConfig>
 800e25c:	e7f8      	b.n	800e250 <RegionRxConfig+0x12>

0800e25e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e25e:	b508      	push	{r3, lr}
 800e260:	4684      	mov	ip, r0
 800e262:	4608      	mov	r0, r1
 800e264:	4611      	mov	r1, r2
 800e266:	461a      	mov	r2, r3
    switch( region )
 800e268:	f1bc 0f05 	cmp.w	ip, #5
 800e26c:	d004      	beq.n	800e278 <RegionTxConfig+0x1a>
 800e26e:	f1bc 0f08 	cmp.w	ip, #8
 800e272:	d004      	beq.n	800e27e <RegionTxConfig+0x20>
 800e274:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800e276:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800e278:	f000 ffcc 	bl	800f214 <RegionEU868TxConfig>
 800e27c:	e7fb      	b.n	800e276 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800e27e:	f001 fe35 	bl	800feec <RegionUS915TxConfig>
 800e282:	e7f8      	b.n	800e276 <RegionTxConfig+0x18>

0800e284 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e284:	b500      	push	{lr}
 800e286:	b083      	sub	sp, #12
 800e288:	4684      	mov	ip, r0
 800e28a:	4608      	mov	r0, r1
 800e28c:	4611      	mov	r1, r2
 800e28e:	461a      	mov	r2, r3
    switch( region )
 800e290:	f1bc 0f05 	cmp.w	ip, #5
 800e294:	d006      	beq.n	800e2a4 <RegionLinkAdrReq+0x20>
 800e296:	f1bc 0f08 	cmp.w	ip, #8
 800e29a:	d009      	beq.n	800e2b0 <RegionLinkAdrReq+0x2c>
 800e29c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e29e:	b003      	add	sp, #12
 800e2a0:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800e2a4:	9b05      	ldr	r3, [sp, #20]
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	9b04      	ldr	r3, [sp, #16]
 800e2aa:	f001 f84b 	bl	800f344 <RegionEU868LinkAdrReq>
 800e2ae:	e7f6      	b.n	800e29e <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800e2b0:	9b05      	ldr	r3, [sp, #20]
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	9b04      	ldr	r3, [sp, #16]
 800e2b6:	f001 fe93 	bl	800ffe0 <RegionUS915LinkAdrReq>
 800e2ba:	e7f0      	b.n	800e29e <RegionLinkAdrReq+0x1a>

0800e2bc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e2bc:	b508      	push	{r3, lr}
 800e2be:	4603      	mov	r3, r0
 800e2c0:	4608      	mov	r0, r1
    switch( region )
 800e2c2:	2b05      	cmp	r3, #5
 800e2c4:	d003      	beq.n	800e2ce <RegionRxParamSetupReq+0x12>
 800e2c6:	2b08      	cmp	r3, #8
 800e2c8:	d004      	beq.n	800e2d4 <RegionRxParamSetupReq+0x18>
 800e2ca:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e2cc:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800e2ce:	f001 f8ff 	bl	800f4d0 <RegionEU868RxParamSetupReq>
 800e2d2:	e7fb      	b.n	800e2cc <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800e2d4:	f001 ffd0 	bl	8010278 <RegionUS915RxParamSetupReq>
 800e2d8:	e7f8      	b.n	800e2cc <RegionRxParamSetupReq+0x10>

0800e2da <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800e2da:	b508      	push	{r3, lr}
 800e2dc:	4603      	mov	r3, r0
 800e2de:	4608      	mov	r0, r1
    switch( region )
 800e2e0:	2b05      	cmp	r3, #5
 800e2e2:	d003      	beq.n	800e2ec <RegionNewChannelReq+0x12>
 800e2e4:	2b08      	cmp	r3, #8
 800e2e6:	d004      	beq.n	800e2f2 <RegionNewChannelReq+0x18>
 800e2e8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e2ea:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800e2ec:	f001 fa87 	bl	800f7fe <RegionEU868NewChannelReq>
 800e2f0:	e7fb      	b.n	800e2ea <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800e2f2:	f001 ffec 	bl	80102ce <RegionUS915NewChannelReq>
 800e2f6:	e7f8      	b.n	800e2ea <RegionNewChannelReq+0x10>

0800e2f8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800e2f8:	b508      	push	{r3, lr}
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	4608      	mov	r0, r1
    switch( region )
 800e2fe:	2b05      	cmp	r3, #5
 800e300:	d003      	beq.n	800e30a <RegionTxParamSetupReq+0x12>
 800e302:	2b08      	cmp	r3, #8
 800e304:	d004      	beq.n	800e310 <RegionTxParamSetupReq+0x18>
 800e306:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e308:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800e30a:	f001 f905 	bl	800f518 <RegionEU868TxParamSetupReq>
 800e30e:	e7fb      	b.n	800e308 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800e310:	f001 ffe0 	bl	80102d4 <RegionUS915TxParamSetupReq>
 800e314:	e7f8      	b.n	800e308 <RegionTxParamSetupReq+0x10>

0800e316 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800e316:	b508      	push	{r3, lr}
 800e318:	4603      	mov	r3, r0
 800e31a:	4608      	mov	r0, r1
    switch( region )
 800e31c:	2b05      	cmp	r3, #5
 800e31e:	d003      	beq.n	800e328 <RegionDlChannelReq+0x12>
 800e320:	2b08      	cmp	r3, #8
 800e322:	d004      	beq.n	800e32e <RegionDlChannelReq+0x18>
 800e324:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e326:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800e328:	f001 f8fa 	bl	800f520 <RegionEU868DlChannelReq>
 800e32c:	e7fb      	b.n	800e326 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800e32e:	f001 ffd4 	bl	80102da <RegionUS915DlChannelReq>
 800e332:	e7f8      	b.n	800e326 <RegionDlChannelReq+0x10>

0800e334 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800e334:	b508      	push	{r3, lr}
 800e336:	4603      	mov	r3, r0
 800e338:	4608      	mov	r0, r1
 800e33a:	4611      	mov	r1, r2
    switch( region )
 800e33c:	2b05      	cmp	r3, #5
 800e33e:	d003      	beq.n	800e348 <RegionAlternateDr+0x14>
 800e340:	2b08      	cmp	r3, #8
 800e342:	d004      	beq.n	800e34e <RegionAlternateDr+0x1a>
 800e344:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e346:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800e348:	f001 f916 	bl	800f578 <RegionEU868AlternateDr>
 800e34c:	e7fb      	b.n	800e346 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800e34e:	f001 ffc7 	bl	80102e0 <RegionUS915AlternateDr>
 800e352:	e7f8      	b.n	800e346 <RegionAlternateDr+0x12>

0800e354 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e354:	b508      	push	{r3, lr}
 800e356:	4684      	mov	ip, r0
 800e358:	4608      	mov	r0, r1
 800e35a:	4611      	mov	r1, r2
 800e35c:	461a      	mov	r2, r3
    switch( region )
 800e35e:	f1bc 0f05 	cmp.w	ip, #5
 800e362:	d004      	beq.n	800e36e <RegionNextChannel+0x1a>
 800e364:	f1bc 0f08 	cmp.w	ip, #8
 800e368:	d005      	beq.n	800e376 <RegionNextChannel+0x22>
 800e36a:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800e36c:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800e36e:	9b02      	ldr	r3, [sp, #8]
 800e370:	f001 f904 	bl	800f57c <RegionEU868NextChannel>
 800e374:	e7fa      	b.n	800e36c <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800e376:	9b02      	ldr	r3, [sp, #8]
 800e378:	f001 ffd4 	bl	8010324 <RegionUS915NextChannel>
 800e37c:	e7f6      	b.n	800e36c <RegionNextChannel+0x18>

0800e37e <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800e37e:	b508      	push	{r3, lr}
 800e380:	4684      	mov	ip, r0
 800e382:	4608      	mov	r0, r1
 800e384:	4611      	mov	r1, r2
 800e386:	461a      	mov	r2, r3
    switch( region )
 800e388:	f1bc 0f05 	cmp.w	ip, #5
 800e38c:	d004      	beq.n	800e398 <RegionApplyDrOffset+0x1a>
 800e38e:	f1bc 0f08 	cmp.w	ip, #8
 800e392:	d004      	beq.n	800e39e <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800e394:	b2c8      	uxtb	r0, r1
 800e396:	e001      	b.n	800e39c <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800e398:	f001 fa5c 	bl	800f854 <RegionEU868ApplyDrOffset>
        }
    }
}
 800e39c:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800e39e:	f002 f86f 	bl	8010480 <RegionUS915ApplyDrOffset>
 800e3a2:	e7fb      	b.n	800e39c <RegionApplyDrOffset+0x1e>

0800e3a4 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800e3a4:	4800      	ldr	r0, [pc, #0]	; (800e3a8 <RegionGetVersion+0x4>)
 800e3a6:	4770      	bx	lr
 800e3a8:	02010001 	.word	0x02010001

0800e3ac <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800e3ac:	468c      	mov	ip, r1
 800e3ae:	b1a9      	cbz	r1, 800e3dc <FindAvailable125kHzChannels+0x30>
 800e3b0:	b1b2      	cbz	r2, 800e3e0 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800e3b6:	e001      	b.n	800e3bc <FindAvailable125kHzChannels+0x10>
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	2b07      	cmp	r3, #7
 800e3be:	d80b      	bhi.n	800e3d8 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800e3c0:	fa40 f103 	asr.w	r1, r0, r3
 800e3c4:	f011 0f01 	tst.w	r1, #1
 800e3c8:	d0f6      	beq.n	800e3b8 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800e3ca:	7811      	ldrb	r1, [r2, #0]
 800e3cc:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800e3d0:	7811      	ldrb	r1, [r2, #0]
 800e3d2:	3101      	adds	r1, #1
 800e3d4:	7011      	strb	r1, [r2, #0]
 800e3d6:	e7ef      	b.n	800e3b8 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800e3d8:	2000      	movs	r0, #0
 800e3da:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e3dc:	2003      	movs	r0, #3
 800e3de:	4770      	bx	lr
 800e3e0:	2003      	movs	r0, #3
}
 800e3e2:	4770      	bx	lr

0800e3e4 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800e3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e6:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	9302      	str	r3, [sp, #8]
 800e3ec:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800e3ee:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	d03e      	beq.n	800e474 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800e3f6:	460d      	mov	r5, r1
 800e3f8:	4617      	mov	r7, r2
 800e3fa:	4606      	mov	r6, r0
 800e3fc:	2900      	cmp	r1, #0
 800e3fe:	d03b      	beq.n	800e478 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800e400:	2a00      	cmp	r2, #0
 800e402:	d03b      	beq.n	800e47c <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800e404:	780c      	ldrb	r4, [r1, #0]
 800e406:	e017      	b.n	800e438 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800e408:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800e40c:	0a00      	lsrs	r0, r0, #8
 800e40e:	e019      	b.n	800e444 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800e410:	3901      	subs	r1, #1
 800e412:	2000      	movs	r0, #0
 800e414:	f002 ff64 	bl	80112e0 <randr>
 800e418:	f100 0310 	add.w	r3, r0, #16
 800e41c:	eb0d 0003 	add.w	r0, sp, r3
 800e420:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800e424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e428:	703b      	strb	r3, [r7, #0]
 800e42a:	e016      	b.n	800e45a <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800e42c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e430:	b9cb      	cbnz	r3, 800e466 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800e432:	782a      	ldrb	r2, [r5, #0]
 800e434:	42a2      	cmp	r2, r4
 800e436:	d016      	beq.n	800e466 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800e438:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800e43a:	f014 0f01 	tst.w	r4, #1
 800e43e:	d1e3      	bne.n	800e408 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800e440:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800e444:	f10d 0207 	add.w	r2, sp, #7
 800e448:	a902      	add	r1, sp, #8
 800e44a:	f7ff ffaf 	bl	800e3ac <FindAvailable125kHzChannels>
 800e44e:	2803      	cmp	r0, #3
 800e450:	d00b      	beq.n	800e46a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800e452:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e456:	2900      	cmp	r1, #0
 800e458:	d1da      	bne.n	800e410 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800e45a:	3401      	adds	r4, #1
 800e45c:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800e45e:	2c07      	cmp	r4, #7
 800e460:	d9e4      	bls.n	800e42c <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800e462:	2400      	movs	r4, #0
 800e464:	e7e2      	b.n	800e42c <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800e466:	b913      	cbnz	r3, 800e46e <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800e468:	2003      	movs	r0, #3
}
 800e46a:	b005      	add	sp, #20
 800e46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800e46e:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800e470:	2000      	movs	r0, #0
 800e472:	e7fa      	b.n	800e46a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e474:	2003      	movs	r0, #3
 800e476:	e7f8      	b.n	800e46a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800e478:	2003      	movs	r0, #3
 800e47a:	e7f6      	b.n	800e46a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800e47c:	2003      	movs	r0, #3
 800e47e:	e7f4      	b.n	800e46a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800e480 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800e480:	fb02 1000 	mla	r0, r2, r0, r1
 800e484:	4770      	bx	lr

0800e486 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e486:	b082      	sub	sp, #8
 800e488:	f10d 0c08 	add.w	ip, sp, #8
 800e48c:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800e490:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800e492:	b971      	cbnz	r1, 800e4b2 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800e494:	4613      	mov	r3, r2
 800e496:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800e49a:	d306      	bcc.n	800e4aa <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800e49c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d80a      	bhi.n	800e4ba <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800e4a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e4a8:	e000      	b.n	800e4ac <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800e4aa:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800e4ac:	4298      	cmp	r0, r3
 800e4ae:	bf38      	it	cc
 800e4b0:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800e4b2:	b900      	cbnz	r0, 800e4b6 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800e4b4:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800e4b6:	b002      	add	sp, #8
 800e4b8:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800e4ba:	f242 7310 	movw	r3, #10000	; 0x2710
 800e4be:	e7f5      	b.n	800e4ac <GetDutyCycle+0x26>

0800e4c0 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800e4c0:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800e4c2:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800e4c4:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800e4c6:	e001      	b.n	800e4cc <CountChannels+0xc>
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	428b      	cmp	r3, r1
 800e4ce:	d207      	bcs.n	800e4e0 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	409a      	lsls	r2, r3
 800e4d4:	ea32 020c 	bics.w	r2, r2, ip
 800e4d8:	d1f6      	bne.n	800e4c8 <CountChannels+0x8>
        {
            nbActiveBits++;
 800e4da:	3001      	adds	r0, #1
 800e4dc:	b2c0      	uxtb	r0, r0
 800e4de:	e7f3      	b.n	800e4c8 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800e4e0:	4770      	bx	lr
	...

0800e4e4 <SetMaxTimeCredits>:
{
 800e4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4e8:	b089      	sub	sp, #36	; 0x24
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	460e      	mov	r6, r1
 800e4ee:	ad02      	add	r5, sp, #8
 800e4f0:	e885 000c 	stmia.w	r5, {r2, r3}
 800e4f4:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800e4f8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800e4fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e500:	f005 f874 	bl	80135ec <SysTimeToMs>
 800e504:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800e506:	2300      	movs	r3, #0
 800e508:	9304      	str	r3, [sp, #16]
 800e50a:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e50c:	e895 000c 	ldmia.w	r5, {r2, r3}
 800e510:	4631      	mov	r1, r6
 800e512:	4620      	mov	r0, r4
 800e514:	f7ff ffb7 	bl	800e486 <GetDutyCycle>
 800e518:	4605      	mov	r5, r0
    if( joined == false )
 800e51a:	2e00      	cmp	r6, #0
 800e51c:	d14c      	bne.n	800e5b8 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e51e:	2864      	cmp	r0, #100	; 0x64
 800e520:	d025      	beq.n	800e56e <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e522:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e526:	d025      	beq.n	800e574 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800e528:	4e27      	ldr	r6, [pc, #156]	; (800e5c8 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800e52a:	68a1      	ldr	r1, [r4, #8]
 800e52c:	a806      	add	r0, sp, #24
 800e52e:	f005 f87d 	bl	801362c <SysTimeFromMs>
 800e532:	9b07      	ldr	r3, [sp, #28]
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	9b06      	ldr	r3, [sp, #24]
 800e538:	aa02      	add	r2, sp, #8
 800e53a:	ca06      	ldmia	r2, {r1, r2}
 800e53c:	a804      	add	r0, sp, #16
 800e53e:	f004 ffdc 	bl	80134fa <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e542:	f1b8 0f00 	cmp.w	r8, #0
 800e546:	d102      	bne.n	800e54e <SetMaxTimeCredits+0x6a>
 800e548:	f1b9 0f00 	cmp.w	r9, #0
 800e54c:	d002      	beq.n	800e554 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e54e:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e550:	42b3      	cmp	r3, r6
 800e552:	d012      	beq.n	800e57a <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800e554:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e556:	9b02      	ldr	r3, [sp, #8]
 800e558:	4a1c      	ldr	r2, [pc, #112]	; (800e5cc <SetMaxTimeCredits+0xe8>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d812      	bhi.n	800e584 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800e55e:	6863      	ldr	r3, [r4, #4]
 800e560:	b903      	cbnz	r3, 800e564 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800e562:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800e564:	6126      	str	r6, [r4, #16]
}
 800e566:	4628      	mov	r0, r5
 800e568:	b009      	add	sp, #36	; 0x24
 800e56a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800e56e:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e570:	4e17      	ldr	r6, [pc, #92]	; (800e5d0 <SetMaxTimeCredits+0xec>)
 800e572:	e7da      	b.n	800e52a <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800e574:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800e576:	4e17      	ldr	r6, [pc, #92]	; (800e5d4 <SetMaxTimeCredits+0xf0>)
 800e578:	e7d7      	b.n	800e52a <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e57a:	9a04      	ldr	r2, [sp, #16]
 800e57c:	4b16      	ldr	r3, [pc, #88]	; (800e5d8 <SetMaxTimeCredits+0xf4>)
 800e57e:	429a      	cmp	r2, r3
 800e580:	d9ed      	bls.n	800e55e <SetMaxTimeCredits+0x7a>
 800e582:	e7e7      	b.n	800e554 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800e584:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e588:	3b30      	subs	r3, #48	; 0x30
 800e58a:	4a14      	ldr	r2, [pc, #80]	; (800e5dc <SetMaxTimeCredits+0xf8>)
 800e58c:	fba2 2303 	umull	r2, r3, r2, r3
 800e590:	0c1b      	lsrs	r3, r3, #16
 800e592:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800e594:	4a12      	ldr	r2, [pc, #72]	; (800e5e0 <SetMaxTimeCredits+0xfc>)
 800e596:	fb02 f303 	mul.w	r3, r2, r3
 800e59a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e59c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800e5a0:	3330      	adds	r3, #48	; 0x30
 800e5a2:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800e5aa:	ab04      	add	r3, sp, #16
 800e5ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e5b0:	f005 f81c 	bl	80135ec <SysTimeToMs>
 800e5b4:	60a0      	str	r0, [r4, #8]
 800e5b6:	e7d2      	b.n	800e55e <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800e5b8:	f1b8 0f00 	cmp.w	r8, #0
 800e5bc:	d102      	bne.n	800e5c4 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800e5be:	4e04      	ldr	r6, [pc, #16]	; (800e5d0 <SetMaxTimeCredits+0xec>)
 800e5c0:	60e6      	str	r6, [r4, #12]
 800e5c2:	e7cc      	b.n	800e55e <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e5c4:	4e02      	ldr	r6, [pc, #8]	; (800e5d0 <SetMaxTimeCredits+0xec>)
 800e5c6:	e7ca      	b.n	800e55e <SetMaxTimeCredits+0x7a>
 800e5c8:	02932e00 	.word	0x02932e00
 800e5cc:	0001ec2f 	.word	0x0001ec2f
 800e5d0:	001b7740 	.word	0x001b7740
 800e5d4:	0112a880 	.word	0x0112a880
 800e5d8:	0001517f 	.word	0x0001517f
 800e5dc:	c22e4507 	.word	0xc22e4507
 800e5e0:	00015180 	.word	0x00015180

0800e5e4 <UpdateTimeCredits>:
{
 800e5e4:	b570      	push	{r4, r5, r6, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800e5ec:	9301      	str	r3, [sp, #4]
 800e5ee:	9200      	str	r2, [sp, #0]
 800e5f0:	ab06      	add	r3, sp, #24
 800e5f2:	cb0c      	ldmia	r3, {r2, r3}
 800e5f4:	f7ff ff76 	bl	800e4e4 <SetMaxTimeCredits>
 800e5f8:	4605      	mov	r5, r0
    if( joined == true )
 800e5fa:	b94e      	cbnz	r6, 800e610 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800e5fc:	68e2      	ldr	r2, [r4, #12]
 800e5fe:	6923      	ldr	r3, [r4, #16]
 800e600:	429a      	cmp	r2, r3
 800e602:	d900      	bls.n	800e606 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800e604:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800e606:	9b08      	ldr	r3, [sp, #32]
 800e608:	6063      	str	r3, [r4, #4]
}
 800e60a:	4628      	mov	r0, r5
 800e60c:	b002      	add	sp, #8
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800e610:	6860      	ldr	r0, [r4, #4]
 800e612:	f005 f86b 	bl	80136ec <UTIL_TIMER_GetElapsedTime>
 800e616:	68e3      	ldr	r3, [r4, #12]
 800e618:	4403      	add	r3, r0
 800e61a:	60e3      	str	r3, [r4, #12]
 800e61c:	e7ee      	b.n	800e5fc <UpdateTimeCredits+0x18>

0800e61e <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800e61e:	4288      	cmp	r0, r1
 800e620:	db03      	blt.n	800e62a <RegionCommonValueInRange+0xc>
 800e622:	4290      	cmp	r0, r2
 800e624:	dd03      	ble.n	800e62e <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800e626:	2000      	movs	r0, #0
 800e628:	4770      	bx	lr
 800e62a:	2000      	movs	r0, #0
 800e62c:	4770      	bx	lr
        return 1;
 800e62e:	2001      	movs	r0, #1
}
 800e630:	4770      	bx	lr

0800e632 <RegionCommonChanVerifyDr>:
{
 800e632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e636:	4682      	mov	sl, r0
 800e638:	460e      	mov	r6, r1
 800e63a:	4690      	mov	r8, r2
 800e63c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800e640:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800e644:	4619      	mov	r1, r3
 800e646:	4640      	mov	r0, r8
 800e648:	f7ff ffe9 	bl	800e61e <RegionCommonValueInRange>
 800e64c:	b338      	cbz	r0, 800e69e <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e64e:	2500      	movs	r5, #0
 800e650:	462f      	mov	r7, r5
 800e652:	e01e      	b.n	800e692 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800e654:	3401      	adds	r4, #1
 800e656:	b2e4      	uxtb	r4, r4
 800e658:	2c0f      	cmp	r4, #15
 800e65a:	d816      	bhi.n	800e68a <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800e65c:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800e660:	4123      	asrs	r3, r4
 800e662:	f013 0f01 	tst.w	r3, #1
 800e666:	d0f5      	beq.n	800e654 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800e668:	193b      	adds	r3, r7, r4
 800e66a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e66e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e672:	7a19      	ldrb	r1, [r3, #8]
 800e674:	090a      	lsrs	r2, r1, #4
 800e676:	f001 010f 	and.w	r1, r1, #15
 800e67a:	4640      	mov	r0, r8
 800e67c:	f7ff ffcf 	bl	800e61e <RegionCommonValueInRange>
 800e680:	2801      	cmp	r0, #1
 800e682:	d1e7      	bne.n	800e654 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800e684:	2001      	movs	r0, #1
}
 800e686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e68a:	3710      	adds	r7, #16
 800e68c:	b2ff      	uxtb	r7, r7
 800e68e:	3501      	adds	r5, #1
 800e690:	b2ed      	uxtb	r5, r5
 800e692:	4557      	cmp	r7, sl
 800e694:	d201      	bcs.n	800e69a <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800e696:	2400      	movs	r4, #0
 800e698:	e7de      	b.n	800e658 <RegionCommonChanVerifyDr+0x26>
    return false;
 800e69a:	2000      	movs	r0, #0
 800e69c:	e7f3      	b.n	800e686 <RegionCommonChanVerifyDr+0x54>
        return false;
 800e69e:	2000      	movs	r0, #0
 800e6a0:	e7f1      	b.n	800e686 <RegionCommonChanVerifyDr+0x54>

0800e6a2 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e6a2:	0913      	lsrs	r3, r2, #4
 800e6a4:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800e6a8:	d313      	bcc.n	800e6d2 <RegionCommonChanDisable+0x30>
{
 800e6aa:	b500      	push	{lr}
 800e6ac:	4684      	mov	ip, r0
 800e6ae:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e6b2:	4291      	cmp	r1, r2
 800e6b4:	d20f      	bcs.n	800e6d6 <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800e6b6:	f001 030f 	and.w	r3, r1, #15
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	fa00 f303 	lsl.w	r3, r0, r3
 800e6c0:	43db      	mvns	r3, r3
 800e6c2:	b21b      	sxth	r3, r3
 800e6c4:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 800e6c8:	4013      	ands	r3, r2
 800e6ca:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800e6ce:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800e6d2:	2000      	movs	r0, #0
}
 800e6d4:	4770      	bx	lr
        return false;
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	e7f9      	b.n	800e6ce <RegionCommonChanDisable+0x2c>

0800e6da <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800e6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800e6dc:	b188      	cbz	r0, 800e702 <RegionCommonCountChannels+0x28>
 800e6de:	460c      	mov	r4, r1
 800e6e0:	4616      	mov	r6, r2
 800e6e2:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800e6e4:	2500      	movs	r5, #0
 800e6e6:	e008      	b.n	800e6fa <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800e6e8:	2110      	movs	r1, #16
 800e6ea:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e6ee:	f7ff fee7 	bl	800e4c0 <CountChannels>
 800e6f2:	4405      	add	r5, r0
 800e6f4:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800e6f6:	3401      	adds	r4, #1
 800e6f8:	b2e4      	uxtb	r4, r4
 800e6fa:	42b4      	cmp	r4, r6
 800e6fc:	d3f4      	bcc.n	800e6e8 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800e6fe:	4628      	mov	r0, r5
 800e700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800e702:	2500      	movs	r5, #0
 800e704:	e7fb      	b.n	800e6fe <RegionCommonCountChannels+0x24>

0800e706 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800e706:	4684      	mov	ip, r0
 800e708:	b158      	cbz	r0, 800e722 <RegionCommonChanMaskCopy+0x1c>
 800e70a:	b109      	cbz	r1, 800e710 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800e70c:	2300      	movs	r3, #0
 800e70e:	e006      	b.n	800e71e <RegionCommonChanMaskCopy+0x18>
 800e710:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800e712:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e716:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800e71a:	3301      	adds	r3, #1
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	4293      	cmp	r3, r2
 800e720:	d3f7      	bcc.n	800e712 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800e722:	4770      	bx	lr

0800e724 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e724:	b082      	sub	sp, #8
 800e726:	b538      	push	{r3, r4, r5, lr}
 800e728:	4604      	mov	r4, r0
 800e72a:	460d      	mov	r5, r1
 800e72c:	4611      	mov	r1, r2
 800e72e:	aa04      	add	r2, sp, #16
 800e730:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e734:	ca0c      	ldmia	r2, {r2, r3}
 800e736:	f7ff fea6 	bl	800e486 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800e73a:	68e3      	ldr	r3, [r4, #12]
 800e73c:	fb05 f100 	mul.w	r1, r5, r0
 800e740:	428b      	cmp	r3, r1
 800e742:	d905      	bls.n	800e750 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800e744:	1a5b      	subs	r3, r3, r1
 800e746:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800e748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e74c:	b002      	add	sp, #8
 800e74e:	4770      	bx	lr
        band->TimeCredits = 0;
 800e750:	2300      	movs	r3, #0
 800e752:	60e3      	str	r3, [r4, #12]
}
 800e754:	e7f8      	b.n	800e748 <RegionCommonSetBandTxDone+0x24>
	...

0800e758 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800e758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75c:	b089      	sub	sp, #36	; 0x24
 800e75e:	4607      	mov	r7, r0
 800e760:	468b      	mov	fp, r1
 800e762:	4691      	mov	r9, r2
 800e764:	4698      	mov	r8, r3
 800e766:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800e76a:	f004 ffb5 	bl	80136d8 <UTIL_TIMER_GetCurrentTime>
 800e76e:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800e770:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800e772:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800e774:	f04f 33ff 	mov.w	r3, #4294967295
 800e778:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800e77a:	e005      	b.n	800e788 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800e77c:	2301      	movs	r3, #1
 800e77e:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800e780:	441e      	add	r6, r3
 800e782:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800e784:	3401      	adds	r4, #1
 800e786:	b2e4      	uxtb	r4, r4
 800e788:	454c      	cmp	r4, r9
 800e78a:	d25d      	bcs.n	800e848 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800e78c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e790:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800e794:	9b04      	ldr	r3, [sp, #16]
 800e796:	9302      	str	r3, [sp, #8]
 800e798:	ab13      	add	r3, sp, #76	; 0x4c
 800e79a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e79e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e7a2:	4653      	mov	r3, sl
 800e7a4:	4642      	mov	r2, r8
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f7ff ff1b 	bl	800e5e4 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800e7ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7b0:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800e7b4:	68ea      	ldr	r2, [r5, #12]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d2e0      	bcs.n	800e77c <RegionCommonUpdateBandTimeOff+0x24>
 800e7ba:	f1b8 0f00 	cmp.w	r8, #0
 800e7be:	d101      	bne.n	800e7c4 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800e7c0:	2f00      	cmp	r7, #0
 800e7c2:	d1db      	bne.n	800e77c <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800e7c8:	6929      	ldr	r1, [r5, #16]
 800e7ca:	4299      	cmp	r1, r3
 800e7cc:	d307      	bcc.n	800e7de <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800e7ce:	1a9b      	subs	r3, r3, r2
 800e7d0:	9a05      	ldr	r2, [sp, #20]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	bf28      	it	cs
 800e7d6:	461a      	movcs	r2, r3
 800e7d8:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800e7da:	3601      	adds	r6, #1
 800e7dc:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800e7de:	2f00      	cmp	r7, #0
 800e7e0:	d1d0      	bne.n	800e784 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	9306      	str	r3, [sp, #24]
 800e7e6:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e7ea:	2864      	cmp	r0, #100	; 0x64
 800e7ec:	d024      	beq.n	800e838 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e7ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e7f2:	d025      	beq.n	800e840 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e7f4:	4b19      	ldr	r3, [pc, #100]	; (800e85c <RegionCommonUpdateBandTimeOff+0x104>)
 800e7f6:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e7f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e7fa:	4a18      	ldr	r2, [pc, #96]	; (800e85c <RegionCommonUpdateBandTimeOff+0x104>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d90c      	bls.n	800e81a <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800e800:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e804:	3b30      	subs	r3, #48	; 0x30
 800e806:	4a16      	ldr	r2, [pc, #88]	; (800e860 <RegionCommonUpdateBandTimeOff+0x108>)
 800e808:	fba2 2303 	umull	r2, r3, r2, r3
 800e80c:	0c1b      	lsrs	r3, r3, #16
 800e80e:	4a15      	ldr	r2, [pc, #84]	; (800e864 <RegionCommonUpdateBandTimeOff+0x10c>)
 800e810:	fb03 2202 	mla	r2, r3, r2, r2
 800e814:	9b06      	ldr	r3, [sp, #24]
 800e816:	4413      	add	r3, r2
 800e818:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800e81a:	ad06      	add	r5, sp, #24
 800e81c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e822:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e826:	4628      	mov	r0, r5
 800e828:	f004 fe67 	bl	80134fa <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800e82c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e830:	f004 fedc 	bl	80135ec <SysTimeToMs>
 800e834:	9005      	str	r0, [sp, #20]
 800e836:	e7a5      	b.n	800e784 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800e838:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e83c:	9306      	str	r3, [sp, #24]
 800e83e:	e7db      	b.n	800e7f8 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800e840:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800e844:	9306      	str	r3, [sp, #24]
 800e846:	e7d7      	b.n	800e7f8 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800e848:	b11e      	cbz	r6, 800e852 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800e84a:	9805      	ldr	r0, [sp, #20]
 800e84c:	b009      	add	sp, #36	; 0x24
 800e84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800e852:	f04f 33ff 	mov.w	r3, #4294967295
 800e856:	9305      	str	r3, [sp, #20]
 800e858:	e7f7      	b.n	800e84a <RegionCommonUpdateBandTimeOff+0xf2>
 800e85a:	bf00      	nop
 800e85c:	0001ec30 	.word	0x0001ec30
 800e860:	c22e4507 	.word	0xc22e4507
 800e864:	00015180 	.word	0x00015180

0800e868 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800e868:	7803      	ldrb	r3, [r0, #0]
 800e86a:	2b03      	cmp	r3, #3
 800e86c:	d001      	beq.n	800e872 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800e86e:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800e870:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800e872:	7842      	ldrb	r2, [r0, #1]
 800e874:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e878:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800e87a:	f003 030f 	and.w	r3, r3, #15
 800e87e:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800e880:	0913      	lsrs	r3, r2, #4
 800e882:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800e884:	7883      	ldrb	r3, [r0, #2]
 800e886:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800e888:	78c2      	ldrb	r2, [r0, #3]
 800e88a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e88e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800e890:	7903      	ldrb	r3, [r0, #4]
 800e892:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800e894:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800e898:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800e89a:	f003 030f 	and.w	r3, r3, #15
 800e89e:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800e8a0:	2005      	movs	r0, #5
 800e8a2:	4770      	bx	lr

0800e8a4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800e8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a8:	b085      	sub	sp, #20
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	4688      	mov	r8, r1
 800e8ae:	4617      	mov	r7, r2
 800e8b0:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800e8b2:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800e8b4:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800e8b8:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800e8bc:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800e8c0:	7943      	ldrb	r3, [r0, #5]
 800e8c2:	b92b      	cbnz	r3, 800e8d0 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800e8c4:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800e8c8:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800e8cc:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800e8d0:	b355      	cbz	r5, 800e928 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800e8d2:	f1ba 0f0f 	cmp.w	sl, #15
 800e8d6:	d114      	bne.n	800e902 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800e8d8:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800e8dc:	f1b9 0f0f 	cmp.w	r9, #15
 800e8e0:	d020      	beq.n	800e924 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800e8e2:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800e8e6:	9303      	str	r3, [sp, #12]
 800e8e8:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800e8ec:	461c      	mov	r4, r3
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4648      	mov	r0, r9
 800e8f2:	f7ff fe94 	bl	800e61e <RegionCommonValueInRange>
 800e8f6:	b9b8      	cbnz	r0, 800e928 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800e8f8:	454c      	cmp	r4, r9
 800e8fa:	dc21      	bgt.n	800e940 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800e8fc:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800e900:	e012      	b.n	800e928 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800e902:	69a3      	ldr	r3, [r4, #24]
 800e904:	9301      	str	r3, [sp, #4]
 800e906:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800e910:	4652      	mov	r2, sl
 800e912:	6921      	ldr	r1, [r4, #16]
 800e914:	7b20      	ldrb	r0, [r4, #12]
 800e916:	f7ff fe8c 	bl	800e632 <RegionCommonChanVerifyDr>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d1de      	bne.n	800e8dc <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800e91e:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800e922:	e7db      	b.n	800e8dc <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800e924:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800e928:	2d07      	cmp	r5, #7
 800e92a:	d00c      	beq.n	800e946 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800e92c:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800e930:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800e934:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800e938:	4628      	mov	r0, r5
 800e93a:	b005      	add	sp, #20
 800e93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800e940:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e944:	e7f0      	b.n	800e928 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800e946:	f1bb 0f00 	cmp.w	fp, #0
 800e94a:	d1ef      	bne.n	800e92c <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800e94c:	f04f 0b01 	mov.w	fp, #1
 800e950:	e7ec      	b.n	800e92c <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800e954 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e954:	4b02      	ldr	r3, [pc, #8]	; (800e960 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e956:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e95a:	fbb0 f0f1 	udiv	r0, r0, r1
 800e95e:	4770      	bx	lr
 800e960:	000f4240 	.word	0x000f4240

0800e964 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e964:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e968:	fbb3 f0f0 	udiv	r0, r3, r0
 800e96c:	4770      	bx	lr
	...

0800e970 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e970:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e972:	f1a1 0c04 	sub.w	ip, r1, #4
 800e976:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800e97a:	fb0e f202 	mul.w	r2, lr, r2
 800e97e:	fb00 220c 	mla	r2, r0, ip, r2
 800e982:	0052      	lsls	r2, r2, #1
 800e984:	d021      	beq.n	800e9ca <RegionCommonComputeRxWindowParameters+0x5a>
 800e986:	4402      	add	r2, r0
 800e988:	3a01      	subs	r2, #1
 800e98a:	fbb2 f2f0 	udiv	r2, r2, r0
 800e98e:	4291      	cmp	r1, r2
 800e990:	bf38      	it	cc
 800e992:	4611      	movcc	r1, r2
 800e994:	9a01      	ldr	r2, [sp, #4]
 800e996:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e998:	0082      	lsls	r2, r0, #2
 800e99a:	fb01 f000 	mul.w	r0, r1, r0
 800e99e:	b1b8      	cbz	r0, 800e9d0 <RegionCommonComputeRxWindowParameters+0x60>
 800e9a0:	3001      	adds	r0, #1
 800e9a2:	0840      	lsrs	r0, r0, #1
 800e9a4:	1a12      	subs	r2, r2, r0
 800e9a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e9aa:	fb01 2313 	mls	r3, r1, r3, r2
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	dd10      	ble.n	800e9d4 <RegionCommonComputeRxWindowParameters+0x64>
 800e9b2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e9b6:	4a0b      	ldr	r2, [pc, #44]	; (800e9e4 <RegionCommonComputeRxWindowParameters+0x74>)
 800e9b8:	fb82 1203 	smull	r1, r2, r2, r3
 800e9bc:	17db      	asrs	r3, r3, #31
 800e9be:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e9c2:	9a02      	ldr	r2, [sp, #8]
 800e9c4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e9c6:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e9ca:	fbb2 f2f0 	udiv	r2, r2, r0
 800e9ce:	e7de      	b.n	800e98e <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e9d0:	0840      	lsrs	r0, r0, #1
 800e9d2:	e7e7      	b.n	800e9a4 <RegionCommonComputeRxWindowParameters+0x34>
 800e9d4:	4a03      	ldr	r2, [pc, #12]	; (800e9e4 <RegionCommonComputeRxWindowParameters+0x74>)
 800e9d6:	fb82 1203 	smull	r1, r2, r2, r3
 800e9da:	17db      	asrs	r3, r3, #31
 800e9dc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e9e0:	e7ef      	b.n	800e9c2 <RegionCommonComputeRxWindowParameters+0x52>
 800e9e2:	bf00      	nop
 800e9e4:	10624dd3 	.word	0x10624dd3

0800e9e8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	460d      	mov	r5, r1
 800e9ec:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e9ee:	0040      	lsls	r0, r0, #1
 800e9f0:	f7f2 f968 	bl	8000cc4 <__aeabi_ui2f>
 800e9f4:	4601      	mov	r1, r0
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f7f2 f8b2 	bl	8000b60 <__aeabi_fsub>
 800e9fc:	4621      	mov	r1, r4
 800e9fe:	f7f2 f8af 	bl	8000b60 <__aeabi_fsub>
 800ea02:	f7f1 fd79 	bl	80004f8 <__aeabi_f2d>
 800ea06:	f007 fd97 	bl	8016538 <floor>
 800ea0a:	f7f2 f87d 	bl	8000b08 <__aeabi_d2iz>

    return phyTxPower;
}
 800ea0e:	b240      	sxtb	r0, r0
 800ea10:	bd38      	pop	{r3, r4, r5, pc}

0800ea12 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800ea12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea16:	b083      	sub	sp, #12
 800ea18:	4605      	mov	r5, r0
 800ea1a:	468b      	mov	fp, r1
 800ea1c:	9200      	str	r2, [sp, #0]
 800ea1e:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ea20:	2600      	movs	r6, #0
 800ea22:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800ea24:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800ea26:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ea28:	e049      	b.n	800eabe <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800ea2a:	7a3a      	ldrb	r2, [r7, #8]
 800ea2c:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800ea30:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ea34:	b252      	sxtb	r2, r2
 800ea36:	b249      	sxtb	r1, r1
 800ea38:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800ea3c:	f7ff fdef 	bl	800e61e <RegionCommonValueInRange>
 800ea40:	b178      	cbz	r0, 800ea62 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800ea42:	68ea      	ldr	r2, [r5, #12]
 800ea44:	7a7b      	ldrb	r3, [r7, #9]
 800ea46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea4a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ea4e:	7d13      	ldrb	r3, [r2, #20]
 800ea50:	b353      	cbz	r3, 800eaa8 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800ea52:	f109 0301 	add.w	r3, r9, #1
 800ea56:	eb08 0204 	add.w	r2, r8, r4
 800ea5a:	f80b 2009 	strb.w	r2, [fp, r9]
 800ea5e:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800ea62:	3401      	adds	r4, #1
 800ea64:	b2e4      	uxtb	r4, r4
 800ea66:	2c0f      	cmp	r4, #15
 800ea68:	d823      	bhi.n	800eab2 <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800ea6a:	686b      	ldr	r3, [r5, #4]
 800ea6c:	0072      	lsls	r2, r6, #1
 800ea6e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800ea72:	4123      	asrs	r3, r4
 800ea74:	f013 0f01 	tst.w	r3, #1
 800ea78:	d0f3      	beq.n	800ea62 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800ea7a:	68a8      	ldr	r0, [r5, #8]
 800ea7c:	eb08 0304 	add.w	r3, r8, r4
 800ea80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea84:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800ea88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d0e8      	beq.n	800ea62 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ea90:	782b      	ldrb	r3, [r5, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1c9      	bne.n	800ea2a <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800ea96:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d0c6      	beq.n	800ea2a <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800ea9c:	5a9b      	ldrh	r3, [r3, r2]
 800ea9e:	4123      	asrs	r3, r4
 800eaa0:	f013 0f01 	tst.w	r3, #1
 800eaa4:	d1c1      	bne.n	800ea2a <RegionCommonCountNbOfEnabledChannels+0x18>
 800eaa6:	e7dc      	b.n	800ea62 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800eaa8:	f10a 0a01 	add.w	sl, sl, #1
 800eaac:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800eab0:	e7d7      	b.n	800ea62 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800eab2:	f108 0810 	add.w	r8, r8, #16
 800eab6:	fa5f f888 	uxtb.w	r8, r8
 800eaba:	3601      	adds	r6, #1
 800eabc:	b2f6      	uxtb	r6, r6
 800eabe:	8a2b      	ldrh	r3, [r5, #16]
 800eac0:	fa1f f288 	uxth.w	r2, r8
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d201      	bcs.n	800eacc <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 800eac8:	2400      	movs	r4, #0
 800eaca:	e7cc      	b.n	800ea66 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800eacc:	9b00      	ldr	r3, [sp, #0]
 800eace:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800ead2:	9b01      	ldr	r3, [sp, #4]
 800ead4:	f883 a000 	strb.w	sl, [r3]
}
 800ead8:	b003      	add	sp, #12
 800eada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eade <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800eade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eae2:	b085      	sub	sp, #20
 800eae4:	4604      	mov	r4, r0
 800eae6:	460f      	mov	r7, r1
 800eae8:	4616      	mov	r6, r2
 800eaea:	461d      	mov	r5, r3
 800eaec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800eaf0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800eaf4:	6840      	ldr	r0, [r0, #4]
 800eaf6:	f004 fdf9 	bl	80136ec <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800eafa:	6823      	ldr	r3, [r4, #0]
 800eafc:	1a1b      	subs	r3, r3, r0
 800eafe:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800eb02:	2301      	movs	r3, #1
 800eb04:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800eb0c:	6863      	ldr	r3, [r4, #4]
 800eb0e:	b113      	cbz	r3, 800eb16 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800eb10:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800eb12:	4283      	cmp	r3, r0
 800eb14:	d81e      	bhi.n	800eb54 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800eb1a:	69e3      	ldr	r3, [r4, #28]
 800eb1c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800eb20:	781f      	ldrb	r7, [r3, #0]
 800eb22:	69a3      	ldr	r3, [r4, #24]
 800eb24:	9303      	str	r3, [sp, #12]
 800eb26:	ab01      	add	r3, sp, #4
 800eb28:	f104 020c 	add.w	r2, r4, #12
 800eb2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb30:	e883 0003 	stmia.w	r3, {r0, r1}
 800eb34:	7d23      	ldrb	r3, [r4, #20]
 800eb36:	9300      	str	r3, [sp, #0]
 800eb38:	7a23      	ldrb	r3, [r4, #8]
 800eb3a:	7a62      	ldrb	r2, [r4, #9]
 800eb3c:	4661      	mov	r1, ip
 800eb3e:	4638      	mov	r0, r7
 800eb40:	f7ff fe0a 	bl	800e758 <RegionCommonUpdateBandTimeOff>
 800eb44:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800eb48:	4643      	mov	r3, r8
 800eb4a:	462a      	mov	r2, r5
 800eb4c:	4631      	mov	r1, r6
 800eb4e:	69e0      	ldr	r0, [r4, #28]
 800eb50:	f7ff ff5f 	bl	800ea12 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800eb54:	782b      	ldrb	r3, [r5, #0]
 800eb56:	b923      	cbnz	r3, 800eb62 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800eb58:	f898 3000 	ldrb.w	r3, [r8]
 800eb5c:	b13b      	cbz	r3, 800eb6e <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800eb5e:	200b      	movs	r0, #11
 800eb60:	e002      	b.n	800eb68 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800eb62:	2000      	movs	r0, #0
 800eb64:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800eb68:	b005      	add	sp, #20
 800eb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800eb6e:	200c      	movs	r0, #12
 800eb70:	e7fa      	b.n	800eb68 <RegionCommonIdentifyChannels+0x8a>

0800eb72 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800eb72:	b570      	push	{r4, r5, r6, lr}
 800eb74:	b082      	sub	sp, #8
 800eb76:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800eb78:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800eb7c:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800eb80:	42a6      	cmp	r6, r4
 800eb82:	d011      	beq.n	800eba8 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800eb84:	3c01      	subs	r4, #1
 800eb86:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800eb88:	42a6      	cmp	r6, r4
 800eb8a:	d00e      	beq.n	800ebaa <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800eb8c:	68ab      	ldr	r3, [r5, #8]
 800eb8e:	9301      	str	r3, [sp, #4]
 800eb90:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	4633      	mov	r3, r6
 800eb98:	4622      	mov	r2, r4
 800eb9a:	6869      	ldr	r1, [r5, #4]
 800eb9c:	78e8      	ldrb	r0, [r5, #3]
 800eb9e:	f7ff fd48 	bl	800e632 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d0ee      	beq.n	800eb84 <RegionCommonGetNextLowerTxDr+0x12>
 800eba6:	e000      	b.n	800ebaa <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800eba8:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800ebaa:	4620      	mov	r0, r4
 800ebac:	b002      	add	sp, #8
 800ebae:	bd70      	pop	{r4, r5, r6, pc}

0800ebb0 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800ebb0:	4288      	cmp	r0, r1
 800ebb2:	bfb8      	it	lt
 800ebb4:	4608      	movlt	r0, r1
 800ebb6:	4770      	bx	lr

0800ebb8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800ebb8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800ebbc:	4a05      	ldr	r2, [pc, #20]	; (800ebd4 <RegionCommonGetBandwidth+0x1c>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d004      	beq.n	800ebcc <RegionCommonGetBandwidth+0x14>
 800ebc2:	4a05      	ldr	r2, [pc, #20]	; (800ebd8 <RegionCommonGetBandwidth+0x20>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d103      	bne.n	800ebd0 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800ebc8:	2002      	movs	r0, #2
 800ebca:	4770      	bx	lr
            return 1;
 800ebcc:	2001      	movs	r0, #1
 800ebce:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800ebd0:	2000      	movs	r0, #0
    }
}
 800ebd2:	4770      	bx	lr
 800ebd4:	0003d090 	.word	0x0003d090
 800ebd8:	0007a120 	.word	0x0007a120

0800ebdc <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800ebdc:	b500      	push	{lr}
 800ebde:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800ebe0:	2805      	cmp	r0, #5
 800ebe2:	d80e      	bhi.n	800ec02 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800ebe4:	9202      	str	r2, [sp, #8]
 800ebe6:	9101      	str	r1, [sp, #4]
 800ebe8:	4b0a      	ldr	r3, [pc, #40]	; (800ec14 <RegionCommonRxConfigPrint+0x38>)
 800ebea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <RegionCommonRxConfigPrint+0x3c>)
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	2100      	movs	r1, #0
 800ebf6:	2002      	movs	r0, #2
 800ebf8:	f004 fa5c 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800ebfc:	b005      	add	sp, #20
 800ebfe:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800ec02:	9201      	str	r2, [sp, #4]
 800ec04:	9100      	str	r1, [sp, #0]
 800ec06:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <RegionCommonRxConfigPrint+0x40>)
 800ec08:	2201      	movs	r2, #1
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	2002      	movs	r0, #2
 800ec0e:	f004 fa51 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800ec12:	e7f3      	b.n	800ebfc <RegionCommonRxConfigPrint+0x20>
 800ec14:	08016d6c 	.word	0x08016d6c
 800ec18:	08016d04 	.word	0x08016d04
 800ec1c:	08016d24 	.word	0x08016d24

0800ec20 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800ec20:	b500      	push	{lr}
 800ec22:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800ec24:	9101      	str	r1, [sp, #4]
 800ec26:	9000      	str	r0, [sp, #0]
 800ec28:	4b04      	ldr	r3, [pc, #16]	; (800ec3c <RegionCommonTxConfigPrint+0x1c>)
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	2002      	movs	r0, #2
 800ec30:	f004 fa40 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800ec34:	b003      	add	sp, #12
 800ec36:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec3a:	bf00      	nop
 800ec3c:	08016d40 	.word	0x08016d40

0800ec40 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800ec40:	b538      	push	{r3, r4, r5, lr}
 800ec42:	4604      	mov	r4, r0
 800ec44:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800ec46:	4b1b      	ldr	r3, [pc, #108]	; (800ecb4 <VerifyRfFreq+0x74>)
 800ec48:	6a1b      	ldr	r3, [r3, #32]
 800ec4a:	4798      	blx	r3
 800ec4c:	b130      	cbz	r0, 800ec5c <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800ec4e:	4b1a      	ldr	r3, [pc, #104]	; (800ecb8 <VerifyRfFreq+0x78>)
 800ec50:	4423      	add	r3, r4
 800ec52:	4a1a      	ldr	r2, [pc, #104]	; (800ecbc <VerifyRfFreq+0x7c>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d802      	bhi.n	800ec5e <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800ec58:	2302      	movs	r3, #2
 800ec5a:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800ec5c:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800ec5e:	4b18      	ldr	r3, [pc, #96]	; (800ecc0 <VerifyRfFreq+0x80>)
 800ec60:	4423      	add	r3, r4
 800ec62:	4a18      	ldr	r2, [pc, #96]	; (800ecc4 <VerifyRfFreq+0x84>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d802      	bhi.n	800ec6e <VerifyRfFreq+0x2e>
        *band = 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	702b      	strb	r3, [r5, #0]
 800ec6c:	e7f6      	b.n	800ec5c <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800ec6e:	4b16      	ldr	r3, [pc, #88]	; (800ecc8 <VerifyRfFreq+0x88>)
 800ec70:	4423      	add	r3, r4
 800ec72:	4a16      	ldr	r2, [pc, #88]	; (800eccc <VerifyRfFreq+0x8c>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d802      	bhi.n	800ec7e <VerifyRfFreq+0x3e>
        *band = 1;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	702b      	strb	r3, [r5, #0]
 800ec7c:	e7ee      	b.n	800ec5c <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800ec7e:	4b14      	ldr	r3, [pc, #80]	; (800ecd0 <VerifyRfFreq+0x90>)
 800ec80:	4423      	add	r3, r4
 800ec82:	4a14      	ldr	r2, [pc, #80]	; (800ecd4 <VerifyRfFreq+0x94>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d802      	bhi.n	800ec8e <VerifyRfFreq+0x4e>
        *band = 5;
 800ec88:	2305      	movs	r3, #5
 800ec8a:	702b      	strb	r3, [r5, #0]
 800ec8c:	e7e6      	b.n	800ec5c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800ec8e:	4b12      	ldr	r3, [pc, #72]	; (800ecd8 <VerifyRfFreq+0x98>)
 800ec90:	4423      	add	r3, r4
 800ec92:	4a12      	ldr	r2, [pc, #72]	; (800ecdc <VerifyRfFreq+0x9c>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d802      	bhi.n	800ec9e <VerifyRfFreq+0x5e>
        *band = 3;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	702b      	strb	r3, [r5, #0]
 800ec9c:	e7de      	b.n	800ec5c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800ec9e:	4b10      	ldr	r3, [pc, #64]	; (800ece0 <VerifyRfFreq+0xa0>)
 800eca0:	4423      	add	r3, r4
 800eca2:	4a10      	ldr	r2, [pc, #64]	; (800ece4 <VerifyRfFreq+0xa4>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d802      	bhi.n	800ecae <VerifyRfFreq+0x6e>
        *band = 4;
 800eca8:	2304      	movs	r3, #4
 800ecaa:	702b      	strb	r3, [r5, #0]
 800ecac:	e7d6      	b.n	800ec5c <VerifyRfFreq+0x1c>
        return false;
 800ecae:	2000      	movs	r0, #0
 800ecb0:	e7d4      	b.n	800ec5c <VerifyRfFreq+0x1c>
 800ecb2:	bf00      	nop
 800ecb4:	080173cc 	.word	0x080173cc
 800ecb8:	cc8faa40 	.word	0xcc8faa40
 800ecbc:	001e847f 	.word	0x001e847f
 800ecc0:	cc7125c0 	.word	0xcc7125c0
 800ecc4:	002dc6c0 	.word	0x002dc6c0
 800ecc8:	cc435eff 	.word	0xcc435eff
 800eccc:	000927bf 	.word	0x000927bf
 800ecd0:	cc38b0a0 	.word	0xcc38b0a0
 800ecd4:	0007a120 	.word	0x0007a120
 800ecd8:	cc2e0240 	.word	0xcc2e0240
 800ecdc:	0003d090 	.word	0x0003d090
 800ece0:	cc296e60 	.word	0xcc296e60
 800ece4:	000493e0 	.word	0x000493e0

0800ece8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	4605      	mov	r5, r0
 800ecee:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800ecf0:	4b13      	ldr	r3, [pc, #76]	; (800ed40 <GetTimeOnAir+0x58>)
 800ecf2:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ecf4:	4913      	ldr	r1, [pc, #76]	; (800ed44 <GetTimeOnAir+0x5c>)
 800ecf6:	f7ff ff5f 	bl	800ebb8 <RegionCommonGetBandwidth>
 800ecfa:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800ecfc:	2d07      	cmp	r5, #7
 800ecfe:	d00e      	beq.n	800ed1e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ed00:	4b11      	ldr	r3, [pc, #68]	; (800ed48 <GetTimeOnAir+0x60>)
 800ed02:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800ed04:	2001      	movs	r0, #1
 800ed06:	9003      	str	r0, [sp, #12]
 800ed08:	b2e4      	uxtb	r4, r4
 800ed0a:	9402      	str	r4, [sp, #8]
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	9301      	str	r3, [sp, #4]
 800ed10:	2308      	movs	r3, #8
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	4603      	mov	r3, r0
 800ed16:	4632      	mov	r2, r6
 800ed18:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800ed1a:	b004      	add	sp, #16
 800ed1c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ed1e:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <GetTimeOnAir+0x60>)
 800ed20:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800ed22:	2301      	movs	r3, #1
 800ed24:	9303      	str	r3, [sp, #12]
 800ed26:	b2e4      	uxtb	r4, r4
 800ed28:	9402      	str	r4, [sp, #8]
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	9001      	str	r0, [sp, #4]
 800ed2e:	2305      	movs	r3, #5
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	4603      	mov	r3, r0
 800ed34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed38:	fb06 f202 	mul.w	r2, r6, r2
 800ed3c:	47a8      	blx	r5
 800ed3e:	e7ec      	b.n	800ed1a <GetTimeOnAir+0x32>
 800ed40:	08016da4 	.word	0x08016da4
 800ed44:	08016d84 	.word	0x08016d84
 800ed48:	080173cc 	.word	0x080173cc

0800ed4c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800ed4c:	b500      	push	{lr}
 800ed4e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800ed50:	2300      	movs	r3, #0
 800ed52:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800ed54:	7803      	ldrb	r3, [r0, #0]
 800ed56:	3b0b      	subs	r3, #11
 800ed58:	2b2d      	cmp	r3, #45	; 0x2d
 800ed5a:	d82f      	bhi.n	800edbc <RegionEU868GetPhyParam+0x70>
 800ed5c:	e8df f003 	tbb	[pc, r3]
 800ed60:	3f393633 	.word	0x3f393633
 800ed64:	504c4845 	.word	0x504c4845
 800ed68:	2e5c5854 	.word	0x2e5c5854
 800ed6c:	6e682e65 	.word	0x6e682e65
 800ed70:	2e2e7774 	.word	0x2e2e7774
 800ed74:	2e177f7b 	.word	0x2e177f7b
 800ed78:	2e2e2e2e 	.word	0x2e2e2e2e
 800ed7c:	2e2e2e2e 	.word	0x2e2e2e2e
 800ed80:	2e2e2e2e 	.word	0x2e2e2e2e
 800ed84:	2e8c8582 	.word	0x2e8c8582
 800ed88:	2e928f2e 	.word	0x2e928f2e
 800ed8c:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800ed8e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ed92:	f88d 3004 	strb.w	r3, [sp, #4]
 800ed96:	2307      	movs	r3, #7
 800ed98:	f88d 3005 	strb.w	r3, [sp, #5]
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	f88d 3006 	strb.w	r3, [sp, #6]
 800eda2:	2310      	movs	r3, #16
 800eda4:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800eda8:	4b3e      	ldr	r3, [pc, #248]	; (800eea4 <RegionEU868GetPhyParam+0x158>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800edb0:	9202      	str	r2, [sp, #8]
 800edb2:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800edb4:	a801      	add	r0, sp, #4
 800edb6:	f7ff fedc 	bl	800eb72 <RegionCommonGetNextLowerTxDr>
 800edba:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800edbc:	9804      	ldr	r0, [sp, #16]
 800edbe:	9005      	str	r0, [sp, #20]
}
 800edc0:	b007      	add	sp, #28
 800edc2:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800edc6:	2340      	movs	r3, #64	; 0x40
 800edc8:	9304      	str	r3, [sp, #16]
            break;
 800edca:	e7f7      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800edcc:	2320      	movs	r3, #32
 800edce:	9304      	str	r3, [sp, #16]
            break;
 800edd0:	e7f4      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800edd2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800edd6:	4a34      	ldr	r2, [pc, #208]	; (800eea8 <RegionEU868GetPhyParam+0x15c>)
 800edd8:	5cd3      	ldrb	r3, [r2, r3]
 800edda:	9304      	str	r3, [sp, #16]
            break;
 800eddc:	e7ee      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800edde:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ede2:	4a32      	ldr	r2, [pc, #200]	; (800eeac <RegionEU868GetPhyParam+0x160>)
 800ede4:	5cd3      	ldrb	r3, [r2, r3]
 800ede6:	9304      	str	r3, [sp, #16]
            break;
 800ede8:	e7e8      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800edea:	2301      	movs	r3, #1
 800edec:	9304      	str	r3, [sp, #16]
            break;
 800edee:	e7e5      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800edf0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800edf4:	9304      	str	r3, [sp, #16]
            break;
 800edf6:	e7e1      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800edf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800edfc:	9304      	str	r3, [sp, #16]
            break;
 800edfe:	e7dd      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800ee00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ee04:	9304      	str	r3, [sp, #16]
            break;
 800ee06:	e7d9      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ee08:	f241 3388 	movw	r3, #5000	; 0x1388
 800ee0c:	9304      	str	r3, [sp, #16]
            break;
 800ee0e:	e7d5      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ee10:	f241 7370 	movw	r3, #6000	; 0x1770
 800ee14:	9304      	str	r3, [sp, #16]
            break;
 800ee16:	e7d1      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800ee18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ee1c:	4824      	ldr	r0, [pc, #144]	; (800eeb0 <RegionEU868GetPhyParam+0x164>)
 800ee1e:	f002 fa5f 	bl	80112e0 <randr>
 800ee22:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800ee26:	9004      	str	r0, [sp, #16]
            break;
 800ee28:	e7c8      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800ee2a:	4b22      	ldr	r3, [pc, #136]	; (800eeb4 <RegionEU868GetPhyParam+0x168>)
 800ee2c:	9304      	str	r3, [sp, #16]
            break;
 800ee2e:	e7c5      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ee30:	4b1c      	ldr	r3, [pc, #112]	; (800eea4 <RegionEU868GetPhyParam+0x158>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ee38:	9304      	str	r3, [sp, #16]
            break;
 800ee3a:	e7bf      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ee3c:	4b19      	ldr	r3, [pc, #100]	; (800eea4 <RegionEU868GetPhyParam+0x158>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800ee44:	9304      	str	r3, [sp, #16]
            break;
 800ee46:	e7b9      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ee48:	2310      	movs	r3, #16
 800ee4a:	9304      	str	r3, [sp, #16]
            break;
 800ee4c:	e7b6      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ee4e:	4b15      	ldr	r3, [pc, #84]	; (800eea4 <RegionEU868GetPhyParam+0x158>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	9304      	str	r3, [sp, #16]
            break;
 800ee54:	e7b2      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800ee56:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800ee5a:	9304      	str	r3, [sp, #16]
            break;
 800ee5c:	e7ae      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ee5e:	4b16      	ldr	r3, [pc, #88]	; (800eeb8 <RegionEU868GetPhyParam+0x16c>)
 800ee60:	9304      	str	r3, [sp, #16]
            break;
 800ee62:	e7ab      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800ee64:	4b13      	ldr	r3, [pc, #76]	; (800eeb4 <RegionEU868GetPhyParam+0x168>)
 800ee66:	9304      	str	r3, [sp, #16]
            break;
 800ee68:	e7a8      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800ee6a:	2311      	movs	r3, #17
 800ee6c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800ee70:	2301      	movs	r3, #1
 800ee72:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800ee76:	e7a1      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800ee78:	2303      	movs	r3, #3
 800ee7a:	9304      	str	r3, [sp, #16]
            break;
 800ee7c:	e79e      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800ee7e:	4b0d      	ldr	r3, [pc, #52]	; (800eeb4 <RegionEU868GetPhyParam+0x168>)
 800ee80:	9304      	str	r3, [sp, #16]
            break;
 800ee82:	e79b      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800ee84:	2303      	movs	r3, #3
 800ee86:	9304      	str	r3, [sp, #16]
            break;
 800ee88:	e798      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ee8a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ee8e:	4a0b      	ldr	r2, [pc, #44]	; (800eebc <RegionEU868GetPhyParam+0x170>)
 800ee90:	5cd3      	ldrb	r3, [r2, r3]
 800ee92:	9304      	str	r3, [sp, #16]
            break;
 800ee94:	e792      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ee96:	490a      	ldr	r1, [pc, #40]	; (800eec0 <RegionEU868GetPhyParam+0x174>)
 800ee98:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ee9c:	f7ff fe8c 	bl	800ebb8 <RegionCommonGetBandwidth>
 800eea0:	9004      	str	r0, [sp, #16]
            break;
 800eea2:	e78b      	b.n	800edbc <RegionEU868GetPhyParam+0x70>
 800eea4:	200010c0 	.word	0x200010c0
 800eea8:	08016dac 	.word	0x08016dac
 800eeac:	08016db4 	.word	0x08016db4
 800eeb0:	fffffc18 	.word	0xfffffc18
 800eeb4:	33d3e608 	.word	0x33d3e608
 800eeb8:	4009999a 	.word	0x4009999a
 800eebc:	08016da4 	.word	0x08016da4
 800eec0:	08016d84 	.word	0x08016d84

0800eec4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800eec4:	b510      	push	{r4, lr}
 800eec6:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800eec8:	4b0b      	ldr	r3, [pc, #44]	; (800eef8 <RegionEU868SetBandTxDone+0x34>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	7803      	ldrb	r3, [r0, #0]
 800eece:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eed6:	7a5b      	ldrb	r3, [r3, #9]
 800eed8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800eedc:	4b07      	ldr	r3, [pc, #28]	; (800eefc <RegionEU868SetBandTxDone+0x38>)
 800eede:	681c      	ldr	r4, [r3, #0]
 800eee0:	6903      	ldr	r3, [r0, #16]
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	68c3      	ldr	r3, [r0, #12]
 800eee6:	7842      	ldrb	r2, [r0, #1]
 800eee8:	6881      	ldr	r1, [r0, #8]
 800eeea:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800eeee:	f7ff fc19 	bl	800e724 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800eef2:	b002      	add	sp, #8
 800eef4:	bd10      	pop	{r4, pc}
 800eef6:	bf00      	nop
 800eef8:	200010c0 	.word	0x200010c0
 800eefc:	200010bc 	.word	0x200010bc

0800ef00 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800ef00:	b530      	push	{r4, r5, lr}
 800ef02:	b0a5      	sub	sp, #148	; 0x94
 800ef04:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ef06:	2290      	movs	r2, #144	; 0x90
 800ef08:	2100      	movs	r1, #0
 800ef0a:	4668      	mov	r0, sp
 800ef0c:	f005 fbe5 	bl	80146da <memset>
 800ef10:	2364      	movs	r3, #100	; 0x64
 800ef12:	f8ad 3000 	strh.w	r3, [sp]
 800ef16:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ef1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef1e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800ef22:	210a      	movs	r1, #10
 800ef24:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800ef28:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800ef2c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800ef30:	7b23      	ldrb	r3, [r4, #12]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d032      	beq.n	800ef9c <RegionEU868InitDefaults+0x9c>
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d03e      	beq.n	800efb8 <RegionEU868InitDefaults+0xb8>
 800ef3a:	b10b      	cbz	r3, 800ef40 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800ef3c:	b025      	add	sp, #148	; 0x94
 800ef3e:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0fa      	beq.n	800ef3c <RegionEU868InitDefaults+0x3c>
 800ef46:	6863      	ldr	r3, [r4, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d0f7      	beq.n	800ef3c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ef4c:	4d1f      	ldr	r5, [pc, #124]	; (800efcc <RegionEU868InitDefaults+0xcc>)
 800ef4e:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800ef50:	68a0      	ldr	r0, [r4, #8]
 800ef52:	4b1f      	ldr	r3, [pc, #124]	; (800efd0 <RegionEU868InitDefaults+0xd0>)
 800ef54:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800ef56:	2290      	movs	r2, #144	; 0x90
 800ef58:	4669      	mov	r1, sp
 800ef5a:	f002 f9ce 	bl	80112fa <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800ef5e:	682c      	ldr	r4, [r5, #0]
 800ef60:	4b1c      	ldr	r3, [pc, #112]	; (800efd4 <RegionEU868InitDefaults+0xd4>)
 800ef62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ef66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800ef6a:	f104 0c0c 	add.w	ip, r4, #12
 800ef6e:	f103 020c 	add.w	r2, r3, #12
 800ef72:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef74:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800ef78:	f104 0c18 	add.w	ip, r4, #24
 800ef7c:	3318      	adds	r3, #24
 800ef7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ef82:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ef86:	2307      	movs	r3, #7
 800ef88:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800ef92:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800ef96:	f7ff fbb6 	bl	800e706 <RegionCommonChanMaskCopy>
            break;
 800ef9a:	e7cf      	b.n	800ef3c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800ef9c:	4b0b      	ldr	r3, [pc, #44]	; (800efcc <RegionEU868InitDefaults+0xcc>)
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	2300      	movs	r3, #0
 800efa2:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800efa4:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800efa6:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800efa8:	2201      	movs	r2, #1
 800efaa:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800efae:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800efb2:	f7ff fba8 	bl	800e706 <RegionCommonChanMaskCopy>
            break;
 800efb6:	e7c1      	b.n	800ef3c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800efb8:	4b04      	ldr	r3, [pc, #16]	; (800efcc <RegionEU868InitDefaults+0xcc>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800efc0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800efc4:	430a      	orrs	r2, r1
 800efc6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800efca:	e7b7      	b.n	800ef3c <RegionEU868InitDefaults+0x3c>
 800efcc:	200010c0 	.word	0x200010c0
 800efd0:	200010bc 	.word	0x200010bc
 800efd4:	08016698 	.word	0x08016698

0800efd8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800efd8:	b500      	push	{lr}
 800efda:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800efdc:	290f      	cmp	r1, #15
 800efde:	d83c      	bhi.n	800f05a <RegionEU868Verify+0x82>
 800efe0:	e8df f001 	tbb	[pc, r1]
 800efe4:	3b3b3b0a 	.word	0x3b3b3b0a
 800efe8:	271d133b 	.word	0x271d133b
 800efec:	3b31313b 	.word	0x3b31313b
 800eff0:	083b3b3b 	.word	0x083b3b3b
 800eff4:	2001      	movs	r0, #1
 800eff6:	e031      	b.n	800f05c <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800eff8:	2300      	movs	r3, #0
 800effa:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800effe:	f10d 0107 	add.w	r1, sp, #7
 800f002:	6800      	ldr	r0, [r0, #0]
 800f004:	f7ff fe1c 	bl	800ec40 <VerifyRfFreq>
 800f008:	e028      	b.n	800f05c <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800f00a:	2207      	movs	r2, #7
 800f00c:	2100      	movs	r1, #0
 800f00e:	f990 0000 	ldrsb.w	r0, [r0]
 800f012:	f7ff fb04 	bl	800e61e <RegionCommonValueInRange>
 800f016:	3800      	subs	r0, #0
 800f018:	bf18      	it	ne
 800f01a:	2001      	movne	r0, #1
 800f01c:	e01e      	b.n	800f05c <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800f01e:	2205      	movs	r2, #5
 800f020:	2100      	movs	r1, #0
 800f022:	f990 0000 	ldrsb.w	r0, [r0]
 800f026:	f7ff fafa 	bl	800e61e <RegionCommonValueInRange>
 800f02a:	3800      	subs	r0, #0
 800f02c:	bf18      	it	ne
 800f02e:	2001      	movne	r0, #1
 800f030:	e014      	b.n	800f05c <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800f032:	2207      	movs	r2, #7
 800f034:	2100      	movs	r1, #0
 800f036:	f990 0000 	ldrsb.w	r0, [r0]
 800f03a:	f7ff faf0 	bl	800e61e <RegionCommonValueInRange>
 800f03e:	3800      	subs	r0, #0
 800f040:	bf18      	it	ne
 800f042:	2001      	movne	r0, #1
 800f044:	e00a      	b.n	800f05c <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800f046:	2207      	movs	r2, #7
 800f048:	2100      	movs	r1, #0
 800f04a:	f990 0000 	ldrsb.w	r0, [r0]
 800f04e:	f7ff fae6 	bl	800e61e <RegionCommonValueInRange>
 800f052:	3800      	subs	r0, #0
 800f054:	bf18      	it	ne
 800f056:	2001      	movne	r0, #1
 800f058:	e000      	b.n	800f05c <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800f05a:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800f05c:	b003      	add	sp, #12
 800f05e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f064 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800f064:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800f066:	7903      	ldrb	r3, [r0, #4]
 800f068:	b11b      	cbz	r3, 800f072 <RegionEU868ChanMaskSet+0xe>
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d00b      	beq.n	800f086 <RegionEU868ChanMaskSet+0x22>
 800f06e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800f070:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f072:	4b0a      	ldr	r3, [pc, #40]	; (800f09c <RegionEU868ChanMaskSet+0x38>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2201      	movs	r2, #1
 800f078:	6801      	ldr	r1, [r0, #0]
 800f07a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800f07e:	f7ff fb42 	bl	800e706 <RegionCommonChanMaskCopy>
    return true;
 800f082:	2001      	movs	r0, #1
            break;
 800f084:	e7f4      	b.n	800f070 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f086:	4b05      	ldr	r3, [pc, #20]	; (800f09c <RegionEU868ChanMaskSet+0x38>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2201      	movs	r2, #1
 800f08c:	6801      	ldr	r1, [r0, #0]
 800f08e:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800f092:	f7ff fb38 	bl	800e706 <RegionCommonChanMaskCopy>
    return true;
 800f096:	2001      	movs	r0, #1
            break;
 800f098:	e7ea      	b.n	800f070 <RegionEU868ChanMaskSet+0xc>
 800f09a:	bf00      	nop
 800f09c:	200010c0 	.word	0x200010c0

0800f0a0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	460e      	mov	r6, r1
 800f0a6:	4617      	mov	r7, r2
 800f0a8:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800f0aa:	2807      	cmp	r0, #7
 800f0ac:	bfa8      	it	ge
 800f0ae:	2007      	movge	r0, #7
 800f0b0:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800f0b2:	4913      	ldr	r1, [pc, #76]	; (800f100 <RegionEU868ComputeRxWindowParameters+0x60>)
 800f0b4:	f7ff fd80 	bl	800ebb8 <RegionCommonGetBandwidth>
 800f0b8:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800f0ba:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f0be:	2b07      	cmp	r3, #7
 800f0c0:	d017      	beq.n	800f0f2 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800f0c2:	4a0f      	ldr	r2, [pc, #60]	; (800f100 <RegionEU868ComputeRxWindowParameters+0x60>)
 800f0c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f0c8:	4a0e      	ldr	r2, [pc, #56]	; (800f104 <RegionEU868ComputeRxWindowParameters+0x64>)
 800f0ca:	5cd0      	ldrb	r0, [r2, r3]
 800f0cc:	f7ff fc42 	bl	800e954 <RegionCommonComputeSymbolTimeLoRa>
 800f0d0:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800f0d2:	4b0d      	ldr	r3, [pc, #52]	; (800f108 <RegionEU868ComputeRxWindowParameters+0x68>)
 800f0d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0d6:	4798      	blx	r3
 800f0d8:	4603      	mov	r3, r0
 800f0da:	f104 020c 	add.w	r2, r4, #12
 800f0de:	9201      	str	r2, [sp, #4]
 800f0e0:	3408      	adds	r4, #8
 800f0e2:	9400      	str	r4, [sp, #0]
 800f0e4:	463a      	mov	r2, r7
 800f0e6:	4631      	mov	r1, r6
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	f7ff fc41 	bl	800e970 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800f0ee:	b003      	add	sp, #12
 800f0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800f0f2:	4a04      	ldr	r2, [pc, #16]	; (800f104 <RegionEU868ComputeRxWindowParameters+0x64>)
 800f0f4:	5cd0      	ldrb	r0, [r2, r3]
 800f0f6:	f7ff fc35 	bl	800e964 <RegionCommonComputeSymbolTimeFsk>
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	e7e9      	b.n	800f0d2 <RegionEU868ComputeRxWindowParameters+0x32>
 800f0fe:	bf00      	nop
 800f100:	08016d84 	.word	0x08016d84
 800f104:	08016da4 	.word	0x08016da4
 800f108:	080173cc 	.word	0x080173cc

0800f10c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f110:	b08a      	sub	sp, #40	; 0x28
 800f112:	4604      	mov	r4, r0
 800f114:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800f116:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f11a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f11e:	4b37      	ldr	r3, [pc, #220]	; (800f1fc <RegionEU868RxConfig+0xf0>)
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	4798      	blx	r3
 800f124:	2800      	cmp	r0, #0
 800f126:	d167      	bne.n	800f1f8 <RegionEU868RxConfig+0xec>
 800f128:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f12a:	7ce3      	ldrb	r3, [r4, #19]
 800f12c:	b983      	cbnz	r3, 800f150 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800f12e:	4b34      	ldr	r3, [pc, #208]	; (800f200 <RegionEU868RxConfig+0xf4>)
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	7823      	ldrb	r3, [r4, #0]
 800f134:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f138:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800f13c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f140:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f144:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800f148:	f1b8 0f00 	cmp.w	r8, #0
 800f14c:	d100      	bne.n	800f150 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800f14e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800f150:	4b2c      	ldr	r3, [pc, #176]	; (800f204 <RegionEU868RxConfig+0xf8>)
 800f152:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800f156:	4b29      	ldr	r3, [pc, #164]	; (800f1fc <RegionEU868RxConfig+0xf0>)
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	4640      	mov	r0, r8
 800f15c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800f15e:	2d07      	cmp	r5, #7
 800f160:	d02b      	beq.n	800f1ba <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f162:	4b26      	ldr	r3, [pc, #152]	; (800f1fc <RegionEU868RxConfig+0xf0>)
 800f164:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800f168:	7ca3      	ldrb	r3, [r4, #18]
 800f16a:	9309      	str	r3, [sp, #36]	; 0x24
 800f16c:	2601      	movs	r6, #1
 800f16e:	9608      	str	r6, [sp, #32]
 800f170:	2300      	movs	r3, #0
 800f172:	9307      	str	r3, [sp, #28]
 800f174:	9306      	str	r3, [sp, #24]
 800f176:	9305      	str	r3, [sp, #20]
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	9303      	str	r3, [sp, #12]
 800f17c:	8922      	ldrh	r2, [r4, #8]
 800f17e:	9202      	str	r2, [sp, #8]
 800f180:	2208      	movs	r2, #8
 800f182:	9201      	str	r2, [sp, #4]
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	4633      	mov	r3, r6
 800f188:	464a      	mov	r2, r9
 800f18a:	78a1      	ldrb	r1, [r4, #2]
 800f18c:	4630      	mov	r0, r6
 800f18e:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800f190:	7c63      	ldrb	r3, [r4, #17]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d02d      	beq.n	800f1f2 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800f196:	4b1c      	ldr	r3, [pc, #112]	; (800f208 <RegionEU868RxConfig+0xfc>)
 800f198:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f19a:	4b18      	ldr	r3, [pc, #96]	; (800f1fc <RegionEU868RxConfig+0xf0>)
 800f19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f19e:	310d      	adds	r1, #13
 800f1a0:	b2c9      	uxtb	r1, r1
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f1a6:	462a      	mov	r2, r5
 800f1a8:	4641      	mov	r1, r8
 800f1aa:	7ce0      	ldrb	r0, [r4, #19]
 800f1ac:	f7ff fd16 	bl	800ebdc <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800f1b0:	703d      	strb	r5, [r7, #0]
    return true;
 800f1b2:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800f1b4:	b00a      	add	sp, #40	; 0x28
 800f1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800f1ba:	4b10      	ldr	r3, [pc, #64]	; (800f1fc <RegionEU868RxConfig+0xf0>)
 800f1bc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800f1c0:	7ca3      	ldrb	r3, [r4, #18]
 800f1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	9008      	str	r0, [sp, #32]
 800f1c8:	9007      	str	r0, [sp, #28]
 800f1ca:	9006      	str	r0, [sp, #24]
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	9305      	str	r3, [sp, #20]
 800f1d0:	9004      	str	r0, [sp, #16]
 800f1d2:	9003      	str	r0, [sp, #12]
 800f1d4:	8923      	ldrh	r3, [r4, #8]
 800f1d6:	9302      	str	r3, [sp, #8]
 800f1d8:	2305      	movs	r3, #5
 800f1da:	9301      	str	r3, [sp, #4]
 800f1dc:	4b0b      	ldr	r3, [pc, #44]	; (800f20c <RegionEU868RxConfig+0x100>)
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1e6:	fb02 f209 	mul.w	r2, r2, r9
 800f1ea:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f1ee:	47d0      	blx	sl
 800f1f0:	e7ce      	b.n	800f190 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800f1f2:	4b07      	ldr	r3, [pc, #28]	; (800f210 <RegionEU868RxConfig+0x104>)
 800f1f4:	5d59      	ldrb	r1, [r3, r5]
 800f1f6:	e7d0      	b.n	800f19a <RegionEU868RxConfig+0x8e>
        return false;
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	e7db      	b.n	800f1b4 <RegionEU868RxConfig+0xa8>
 800f1fc:	080173cc 	.word	0x080173cc
 800f200:	200010c0 	.word	0x200010c0
 800f204:	08016da4 	.word	0x08016da4
 800f208:	08016db4 	.word	0x08016db4
 800f20c:	00014585 	.word	0x00014585
 800f210:	08016dac 	.word	0x08016dac

0800f214 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f218:	b08d      	sub	sp, #52	; 0x34
 800f21a:	4604      	mov	r4, r0
 800f21c:	460f      	mov	r7, r1
 800f21e:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800f220:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f224:	4a42      	ldr	r2, [pc, #264]	; (800f330 <RegionEU868TxConfig+0x11c>)
 800f226:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800f22a:	4d42      	ldr	r5, [pc, #264]	; (800f334 <RegionEU868TxConfig+0x120>)
 800f22c:	682a      	ldr	r2, [r5, #0]
 800f22e:	7803      	ldrb	r3, [r0, #0]
 800f230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f234:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f238:	7a53      	ldrb	r3, [r2, #9]
 800f23a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f23e:	4a3e      	ldr	r2, [pc, #248]	; (800f338 <RegionEU868TxConfig+0x124>)
 800f240:	6812      	ldr	r2, [r2, #0]
 800f242:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f246:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800f24a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f24e:	f7ff fcaf 	bl	800ebb0 <RegionCommonLimitTxPower>
 800f252:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800f254:	4939      	ldr	r1, [pc, #228]	; (800f33c <RegionEU868TxConfig+0x128>)
 800f256:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f25a:	f7ff fcad 	bl	800ebb8 <RegionCommonGetBandwidth>
 800f25e:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800f260:	68a2      	ldr	r2, [r4, #8]
 800f262:	6861      	ldr	r1, [r4, #4]
 800f264:	4630      	mov	r0, r6
 800f266:	f7ff fbbf 	bl	800e9e8 <RegionCommonComputeTxPower>
 800f26a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800f26c:	4b34      	ldr	r3, [pc, #208]	; (800f340 <RegionEU868TxConfig+0x12c>)
 800f26e:	68da      	ldr	r2, [r3, #12]
 800f270:	6829      	ldr	r1, [r5, #0]
 800f272:	7823      	ldrb	r3, [r4, #0]
 800f274:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f278:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800f27c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800f27e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f282:	2b07      	cmp	r3, #7
 800f284:	d031      	beq.n	800f2ea <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800f286:	4b2e      	ldr	r3, [pc, #184]	; (800f340 <RegionEU868TxConfig+0x12c>)
 800f288:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800f28c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f290:	9308      	str	r3, [sp, #32]
 800f292:	2200      	movs	r2, #0
 800f294:	9207      	str	r2, [sp, #28]
 800f296:	9206      	str	r2, [sp, #24]
 800f298:	9205      	str	r2, [sp, #20]
 800f29a:	2501      	movs	r5, #1
 800f29c:	9504      	str	r5, [sp, #16]
 800f29e:	9203      	str	r2, [sp, #12]
 800f2a0:	2308      	movs	r3, #8
 800f2a2:	9302      	str	r3, [sp, #8]
 800f2a4:	9501      	str	r5, [sp, #4]
 800f2a6:	f8cd a000 	str.w	sl, [sp]
 800f2aa:	464b      	mov	r3, r9
 800f2ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800f2b2:	4b20      	ldr	r3, [pc, #128]	; (800f334 <RegionEU868TxConfig+0x120>)
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	7823      	ldrb	r3, [r4, #0]
 800f2b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f2bc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f2c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f2c4:	f7ff fcac 	bl	800ec20 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800f2c8:	89a1      	ldrh	r1, [r4, #12]
 800f2ca:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f2ce:	f7ff fd0b 	bl	800ece8 <GetTimeOnAir>
 800f2d2:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800f2d6:	4b1a      	ldr	r3, [pc, #104]	; (800f340 <RegionEU868TxConfig+0x12c>)
 800f2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2da:	7b21      	ldrb	r1, [r4, #12]
 800f2dc:	4628      	mov	r0, r5
 800f2de:	4798      	blx	r3

    *txPower = txPowerLimited;
 800f2e0:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800f2e2:	2001      	movs	r0, #1
 800f2e4:	b00d      	add	sp, #52	; 0x34
 800f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800f2ea:	4b15      	ldr	r3, [pc, #84]	; (800f340 <RegionEU868TxConfig+0x12c>)
 800f2ec:	69dd      	ldr	r5, [r3, #28]
 800f2ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f2f2:	fb03 f30a 	mul.w	r3, r3, sl
 800f2f6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800f2fa:	9208      	str	r2, [sp, #32]
 800f2fc:	f04f 0a00 	mov.w	sl, #0
 800f300:	f8cd a01c 	str.w	sl, [sp, #28]
 800f304:	f8cd a018 	str.w	sl, [sp, #24]
 800f308:	f8cd a014 	str.w	sl, [sp, #20]
 800f30c:	2201      	movs	r2, #1
 800f30e:	9204      	str	r2, [sp, #16]
 800f310:	f8cd a00c 	str.w	sl, [sp, #12]
 800f314:	2205      	movs	r2, #5
 800f316:	9202      	str	r2, [sp, #8]
 800f318:	f8cd a004 	str.w	sl, [sp, #4]
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	464b      	mov	r3, r9
 800f320:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800f324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f326:	4650      	mov	r0, sl
 800f328:	47a8      	blx	r5
        modem = MODEM_FSK;
 800f32a:	4655      	mov	r5, sl
 800f32c:	e7c1      	b.n	800f2b2 <RegionEU868TxConfig+0x9e>
 800f32e:	bf00      	nop
 800f330:	08016da4 	.word	0x08016da4
 800f334:	200010c0 	.word	0x200010c0
 800f338:	200010bc 	.word	0x200010bc
 800f33c:	08016d84 	.word	0x08016d84
 800f340:	080173cc 	.word	0x080173cc

0800f344 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f348:	b08f      	sub	sp, #60	; 0x3c
 800f34a:	4605      	mov	r5, r0
 800f34c:	4689      	mov	r9, r1
 800f34e:	4690      	mov	r8, r2
 800f350:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800f352:	2400      	movs	r4, #0
 800f354:	940c      	str	r4, [sp, #48]	; 0x30
 800f356:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800f35a:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800f35e:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f360:	e030      	b.n	800f3c4 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f362:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800f366:	2607      	movs	r6, #7
 800f368:	e012      	b.n	800f390 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800f36a:	4a58      	ldr	r2, [pc, #352]	; (800f4cc <RegionEU868LinkAdrReq+0x188>)
 800f36c:	6812      	ldr	r2, [r2, #0]
 800f36e:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800f372:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f376:	b13a      	cbz	r2, 800f388 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800f378:	2201      	movs	r2, #1
 800f37a:	fa02 f20c 	lsl.w	r2, r2, ip
 800f37e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800f382:	430a      	orrs	r2, r1
 800f384:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f388:	f10c 0c01 	add.w	ip, ip, #1
 800f38c:	fa5f fc8c 	uxtb.w	ip, ip
 800f390:	f1bc 0f0f 	cmp.w	ip, #15
 800f394:	d816      	bhi.n	800f3c4 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800f396:	2b06      	cmp	r3, #6
 800f398:	d0e7      	beq.n	800f36a <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f39a:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800f39e:	fa4e fe0c 	asr.w	lr, lr, ip
 800f3a2:	f01e 0f01 	tst.w	lr, #1
 800f3a6:	d0ef      	beq.n	800f388 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800f3a8:	4a48      	ldr	r2, [pc, #288]	; (800f4cc <RegionEU868LinkAdrReq+0x188>)
 800f3aa:	6812      	ldr	r2, [r2, #0]
 800f3ac:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800f3b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f3b4:	2a00      	cmp	r2, #0
 800f3b6:	d1e7      	bne.n	800f388 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800f3b8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800f3bc:	e7e4      	b.n	800f388 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800f3be:	2606      	movs	r6, #6
 800f3c0:	e000      	b.n	800f3c4 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800f3c2:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f3c4:	7a2b      	ldrb	r3, [r5, #8]
 800f3c6:	42a3      	cmp	r3, r4
 800f3c8:	d919      	bls.n	800f3fe <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800f3ca:	6868      	ldr	r0, [r5, #4]
 800f3cc:	a90c      	add	r1, sp, #48	; 0x30
 800f3ce:	4420      	add	r0, r4
 800f3d0:	f7ff fa4a 	bl	800e868 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	b190      	cbz	r0, 800f3fe <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800f3d8:	4423      	add	r3, r4
 800f3da:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800f3dc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f3e0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800f3e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f3e8:	b90b      	cbnz	r3, 800f3ee <RegionEU868LinkAdrReq+0xaa>
 800f3ea:	2a00      	cmp	r2, #0
 800f3ec:	d0e7      	beq.n	800f3be <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800f3ee:	1e5a      	subs	r2, r3, #1
 800f3f0:	b2d2      	uxtb	r2, r2
 800f3f2:	2a04      	cmp	r2, #4
 800f3f4:	d9e5      	bls.n	800f3c2 <RegionEU868LinkAdrReq+0x7e>
 800f3f6:	2b06      	cmp	r3, #6
 800f3f8:	d9b3      	bls.n	800f362 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800f3fa:	2606      	movs	r6, #6
 800f3fc:	e7e2      	b.n	800f3c4 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f3fe:	2302      	movs	r3, #2
 800f400:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800f404:	7a6b      	ldrb	r3, [r5, #9]
 800f406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800f40a:	a80a      	add	r0, sp, #40	; 0x28
 800f40c:	f7ff fc9e 	bl	800ed4c <RegionEU868GetPhyParam>
 800f410:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800f412:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800f416:	7aab      	ldrb	r3, [r5, #10]
 800f418:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800f41c:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800f420:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f424:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800f428:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f42c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f430:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f434:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800f438:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f43c:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800f440:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f444:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800f448:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800f44c:	2310      	movs	r3, #16
 800f44e:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800f452:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800f456:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f458:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800f45c:	2307      	movs	r3, #7
 800f45e:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f462:	4a1a      	ldr	r2, [pc, #104]	; (800f4cc <RegionEU868LinkAdrReq+0x188>)
 800f464:	6812      	ldr	r2, [r2, #0]
 800f466:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800f468:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800f46c:	2300      	movs	r3, #0
 800f46e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f472:	682b      	ldr	r3, [r5, #0]
 800f474:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800f476:	ab0c      	add	r3, sp, #48	; 0x30
 800f478:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800f47c:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800f480:	a801      	add	r0, sp, #4
 800f482:	f7ff fa0f 	bl	800e8a4 <RegionCommonLinkAdrReqVerifyParams>
 800f486:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800f488:	2807      	cmp	r0, #7
 800f48a:	d010      	beq.n	800f4ae <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800f48c:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800f490:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800f494:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800f498:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800f49c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f4a0:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800f4a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f4a4:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	b00f      	add	sp, #60	; 0x3c
 800f4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800f4ae:	4e07      	ldr	r6, [pc, #28]	; (800f4cc <RegionEU868LinkAdrReq+0x188>)
 800f4b0:	6830      	ldr	r0, [r6, #0]
 800f4b2:	220c      	movs	r2, #12
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f4ba:	f001 ff36 	bl	801132a <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800f4be:	6833      	ldr	r3, [r6, #0]
 800f4c0:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800f4c4:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800f4c8:	e7e0      	b.n	800f48c <RegionEU868LinkAdrReq+0x148>
 800f4ca:	bf00      	nop
 800f4cc:	200010c0 	.word	0x200010c0

0800f4d0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f4d0:	b530      	push	{r4, r5, lr}
 800f4d2:	b083      	sub	sp, #12
 800f4d4:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800f4dc:	f10d 0107 	add.w	r1, sp, #7
 800f4e0:	6840      	ldr	r0, [r0, #4]
 800f4e2:	f7ff fbad 	bl	800ec40 <VerifyRfFreq>
 800f4e6:	b1a8      	cbz	r0, 800f514 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800f4e8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800f4ea:	2207      	movs	r2, #7
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	f994 0000 	ldrsb.w	r0, [r4]
 800f4f2:	f7ff f894 	bl	800e61e <RegionCommonValueInRange>
 800f4f6:	b908      	cbnz	r0, 800f4fc <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800f4f8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800f4fc:	2205      	movs	r2, #5
 800f4fe:	2100      	movs	r1, #0
 800f500:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f504:	f7ff f88b 	bl	800e61e <RegionCommonValueInRange>
 800f508:	b908      	cbnz	r0, 800f50e <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f50a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800f50e:	4628      	mov	r0, r5
 800f510:	b003      	add	sp, #12
 800f512:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f514:	2506      	movs	r5, #6
 800f516:	e7e8      	b.n	800f4ea <RegionEU868RxParamSetupReq+0x1a>

0800f518 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f518:	f04f 30ff 	mov.w	r0, #4294967295
 800f51c:	4770      	bx	lr
	...

0800f520 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800f520:	b510      	push	{r4, lr}
 800f522:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f524:	2300      	movs	r3, #0
 800f526:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800f52a:	7803      	ldrb	r3, [r0, #0]
 800f52c:	2b0f      	cmp	r3, #15
 800f52e:	d902      	bls.n	800f536 <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800f530:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800f532:	b002      	add	sp, #8
 800f534:	bd10      	pop	{r4, pc}
 800f536:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800f538:	f10d 0107 	add.w	r1, sp, #7
 800f53c:	6840      	ldr	r0, [r0, #4]
 800f53e:	f7ff fb7f 	bl	800ec40 <VerifyRfFreq>
 800f542:	b170      	cbz	r0, 800f562 <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 800f544:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800f546:	4b0b      	ldr	r3, [pc, #44]	; (800f574 <RegionEU868DlChannelReq+0x54>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	7823      	ldrb	r3, [r4, #0]
 800f54c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f550:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f554:	b909      	cbnz	r1, 800f55a <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 800f556:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800f55a:	2803      	cmp	r0, #3
 800f55c:	d003      	beq.n	800f566 <RegionEU868DlChannelReq+0x46>
    return status;
 800f55e:	b240      	sxtb	r0, r0
 800f560:	e7e7      	b.n	800f532 <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800f562:	2002      	movs	r0, #2
 800f564:	e7ef      	b.n	800f546 <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800f566:	6861      	ldr	r1, [r4, #4]
 800f568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f56c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f570:	6051      	str	r1, [r2, #4]
 800f572:	e7f4      	b.n	800f55e <RegionEU868DlChannelReq+0x3e>
 800f574:	200010c0 	.word	0x200010c0

0800f578 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800f578:	4770      	bx	lr
	...

0800f57c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f57e:	b097      	sub	sp, #92	; 0x5c
 800f580:	4604      	mov	r4, r0
 800f582:	460f      	mov	r7, r1
 800f584:	4616      	mov	r6, r2
 800f586:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800f588:	2100      	movs	r1, #0
 800f58a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800f58e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800f592:	9111      	str	r1, [sp, #68]	; 0x44
 800f594:	9112      	str	r1, [sp, #72]	; 0x48
 800f596:	9113      	str	r1, [sp, #76]	; 0x4c
 800f598:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800f59a:	2307      	movs	r3, #7
 800f59c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f5a0:	4b34      	ldr	r3, [pc, #208]	; (800f674 <RegionEU868NextChannel+0xf8>)
 800f5a2:	6818      	ldr	r0, [r3, #0]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f5aa:	f7ff f896 	bl	800e6da <RegionCommonCountChannels>
 800f5ae:	b938      	cbnz	r0, 800f5c0 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f5b0:	4b30      	ldr	r3, [pc, #192]	; (800f674 <RegionEU868NextChannel+0xf8>)
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f5b8:	f043 0307 	orr.w	r3, r3, #7
 800f5bc:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f5c0:	7a63      	ldrb	r3, [r4, #9]
 800f5c2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f5c6:	7a23      	ldrb	r3, [r4, #8]
 800f5c8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f5cc:	4b29      	ldr	r3, [pc, #164]	; (800f674 <RegionEU868NextChannel+0xf8>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800f5d4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f5d6:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800f5d8:	4b27      	ldr	r3, [pc, #156]	; (800f678 <RegionEU868NextChannel+0xfc>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800f5de:	2310      	movs	r3, #16
 800f5e0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f5e4:	f10d 030a 	add.w	r3, sp, #10
 800f5e8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f5ee:	6863      	ldr	r3, [r4, #4]
 800f5f0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f5f2:	7aa3      	ldrb	r3, [r4, #10]
 800f5f4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800f5f8:	2306      	movs	r3, #6
 800f5fa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f5fe:	ab0c      	add	r3, sp, #48	; 0x30
 800f600:	f104 020c 	add.w	r2, r4, #12
 800f604:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f608:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f60c:	7d23      	ldrb	r3, [r4, #20]
 800f60e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f612:	8ae1      	ldrh	r1, [r4, #22]
 800f614:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f618:	f7ff fb66 	bl	800ece8 <GetTimeOnAir>
 800f61c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f61e:	ab03      	add	r3, sp, #12
 800f620:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f622:	9601      	str	r6, [sp, #4]
 800f624:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f62e:	aa11      	add	r2, sp, #68	; 0x44
 800f630:	4629      	mov	r1, r5
 800f632:	a809      	add	r0, sp, #36	; 0x24
 800f634:	f7ff fa53 	bl	800eade <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f638:	4604      	mov	r4, r0
 800f63a:	b120      	cbz	r0, 800f646 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f63c:	280c      	cmp	r0, #12
 800f63e:	d00f      	beq.n	800f660 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f640:	4620      	mov	r0, r4
 800f642:	b017      	add	sp, #92	; 0x5c
 800f644:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f646:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f64a:	3901      	subs	r1, #1
 800f64c:	f001 fe48 	bl	80112e0 <randr>
 800f650:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800f654:	eb0d 0003 	add.w	r0, sp, r3
 800f658:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f65c:	703b      	strb	r3, [r7, #0]
 800f65e:	e7ef      	b.n	800f640 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f660:	4b04      	ldr	r3, [pc, #16]	; (800f674 <RegionEU868NextChannel+0xf8>)
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f668:	f043 0307 	orr.w	r3, r3, #7
 800f66c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800f670:	e7e6      	b.n	800f640 <RegionEU868NextChannel+0xc4>
 800f672:	bf00      	nop
 800f674:	200010c0 	.word	0x200010c0
 800f678:	200010bc 	.word	0x200010bc

0800f67c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f67e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f680:	2300      	movs	r3, #0
 800f682:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f686:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f688:	2d02      	cmp	r5, #2
 800f68a:	d94e      	bls.n	800f72a <RegionEU868ChannelAdd+0xae>
 800f68c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800f68e:	2d0f      	cmp	r5, #15
 800f690:	d84d      	bhi.n	800f72e <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f692:	6803      	ldr	r3, [r0, #0]
 800f694:	7a18      	ldrb	r0, [r3, #8]
 800f696:	f340 0003 	sbfx	r0, r0, #0, #4
 800f69a:	2207      	movs	r2, #7
 800f69c:	2100      	movs	r1, #0
 800f69e:	b240      	sxtb	r0, r0
 800f6a0:	f7fe ffbd 	bl	800e61e <RegionCommonValueInRange>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d03c      	beq.n	800f722 <RegionEU868ChannelAdd+0xa6>
    bool drInvalid = false;
 800f6a8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	7a18      	ldrb	r0, [r3, #8]
 800f6ae:	f340 1003 	sbfx	r0, r0, #4, #4
 800f6b2:	2207      	movs	r2, #7
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	b240      	sxtb	r0, r0
 800f6b8:	f7fe ffb1 	bl	800e61e <RegionCommonValueInRange>
 800f6bc:	b900      	cbnz	r0, 800f6c0 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800f6be:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f6c0:	6820      	ldr	r0, [r4, #0]
 800f6c2:	7a03      	ldrb	r3, [r0, #8]
 800f6c4:	f343 0203 	sbfx	r2, r3, #0, #4
 800f6c8:	b252      	sxtb	r2, r2
 800f6ca:	f343 1303 	sbfx	r3, r3, #4, #4
 800f6ce:	b25b      	sxtb	r3, r3
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	dd00      	ble.n	800f6d6 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800f6d4:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800f6d6:	f10d 0107 	add.w	r1, sp, #7
 800f6da:	6800      	ldr	r0, [r0, #0]
 800f6dc:	f7ff fab0 	bl	800ec40 <VerifyRfFreq>
 800f6e0:	b308      	cbz	r0, 800f726 <RegionEU868ChannelAdd+0xaa>
    bool freqInvalid = false;
 800f6e2:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f6e4:	b106      	cbz	r6, 800f6e8 <RegionEU868ChannelAdd+0x6c>
 800f6e6:	bb2b      	cbnz	r3, 800f734 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f6e8:	bb36      	cbnz	r6, 800f738 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f6ea:	bb3b      	cbnz	r3, 800f73c <RegionEU868ChannelAdd+0xc0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f6ec:	4f14      	ldr	r7, [pc, #80]	; (800f740 <RegionEU868ChannelAdd+0xc4>)
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	006e      	lsls	r6, r5, #1
 800f6f2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f6f6:	220c      	movs	r2, #12
 800f6f8:	6821      	ldr	r1, [r4, #0]
 800f6fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f6fe:	f001 fdfc 	bl	80112fa <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800f702:	683a      	ldr	r2, [r7, #0]
 800f704:	442e      	add	r6, r5
 800f706:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f70a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f70e:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f710:	2301      	movs	r3, #1
 800f712:	40ab      	lsls	r3, r5
 800f714:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800f718:	430b      	orrs	r3, r1
 800f71a:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800f71e:	2000      	movs	r0, #0
 800f720:	e006      	b.n	800f730 <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 800f722:	2601      	movs	r6, #1
 800f724:	e7c1      	b.n	800f6aa <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800f726:	2301      	movs	r3, #1
 800f728:	e7dc      	b.n	800f6e4 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f72a:	2006      	movs	r0, #6
 800f72c:	e000      	b.n	800f730 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f72e:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f730:	b003      	add	sp, #12
 800f732:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f734:	2006      	movs	r0, #6
 800f736:	e7fb      	b.n	800f730 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f738:	2005      	movs	r0, #5
 800f73a:	e7f9      	b.n	800f730 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f73c:	2004      	movs	r0, #4
 800f73e:	e7f7      	b.n	800f730 <RegionEU868ChannelAdd+0xb4>
 800f740:	200010c0 	.word	0x200010c0

0800f744 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800f744:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f746:	2902      	cmp	r1, #2
 800f748:	d801      	bhi.n	800f74e <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800f74a:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800f74c:	4770      	bx	lr
{
 800f74e:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f750:	4b09      	ldr	r3, [pc, #36]	; (800f778 <RegionEU868ChannelsRemove+0x34>)
 800f752:	6818      	ldr	r0, [r3, #0]
 800f754:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f758:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f75c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f760:	2200      	movs	r2, #0
 800f762:	f840 200c 	str.w	r2, [r0, ip]
 800f766:	605a      	str	r2, [r3, #4]
 800f768:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800f76a:	2210      	movs	r2, #16
 800f76c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f770:	f7fe ff97 	bl	800e6a2 <RegionCommonChanDisable>
}
 800f774:	bd08      	pop	{r3, pc}
 800f776:	bf00      	nop
 800f778:	200010c0 	.word	0x200010c0

0800f77c <RegionEU868ApplyCFList>:
{
 800f77c:	b570      	push	{r4, r5, r6, lr}
 800f77e:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f780:	2350      	movs	r3, #80	; 0x50
 800f782:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f786:	7a03      	ldrb	r3, [r0, #8]
 800f788:	2b10      	cmp	r3, #16
 800f78a:	d136      	bne.n	800f7fa <RegionEU868ApplyCFList+0x7e>
 800f78c:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f78e:	6843      	ldr	r3, [r0, #4]
 800f790:	7bdd      	ldrb	r5, [r3, #15]
 800f792:	2d00      	cmp	r5, #0
 800f794:	d131      	bne.n	800f7fa <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f796:	2403      	movs	r4, #3
 800f798:	e01b      	b.n	800f7d2 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f79a:	6872      	ldr	r2, [r6, #4]
 800f79c:	5d53      	ldrb	r3, [r2, r5]
 800f79e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f7a0:	442a      	add	r2, r5
 800f7a2:	7851      	ldrb	r1, [r2, #1]
 800f7a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f7a8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f7aa:	7892      	ldrb	r2, [r2, #2]
 800f7ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7b0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800f7b2:	2264      	movs	r2, #100	; 0x64
 800f7b4:	fb02 f303 	mul.w	r3, r2, r3
 800f7b8:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	9304      	str	r3, [sp, #16]
 800f7be:	e011      	b.n	800f7e4 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800f7c0:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800f7c4:	4668      	mov	r0, sp
 800f7c6:	f7ff ffbd 	bl	800f744 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f7ca:	3503      	adds	r5, #3
 800f7cc:	b2ed      	uxtb	r5, r5
 800f7ce:	3401      	adds	r4, #1
 800f7d0:	b2e4      	uxtb	r4, r4
 800f7d2:	2c0f      	cmp	r4, #15
 800f7d4:	d811      	bhi.n	800f7fa <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800f7d6:	2c07      	cmp	r4, #7
 800f7d8:	d9df      	bls.n	800f79a <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f7de:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f7e2:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f7e4:	9b03      	ldr	r3, [sp, #12]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d0ea      	beq.n	800f7c0 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800f7ea:	ab03      	add	r3, sp, #12
 800f7ec:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f7ee:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800f7f2:	a801      	add	r0, sp, #4
 800f7f4:	f7ff ff42 	bl	800f67c <RegionEU868ChannelAdd>
 800f7f8:	e7e7      	b.n	800f7ca <RegionEU868ApplyCFList+0x4e>
}
 800f7fa:	b006      	add	sp, #24
 800f7fc:	bd70      	pop	{r4, r5, r6, pc}

0800f7fe <RegionEU868NewChannelReq>:
{
 800f7fe:	b500      	push	{lr}
 800f800:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f802:	6803      	ldr	r3, [r0, #0]
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	b952      	cbnz	r2, 800f81e <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f808:	7903      	ldrb	r3, [r0, #4]
 800f80a:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800f80e:	a801      	add	r0, sp, #4
 800f810:	f7ff ff98 	bl	800f744 <RegionEU868ChannelsRemove>
 800f814:	b1d0      	cbz	r0, 800f84c <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f816:	2003      	movs	r0, #3
}
 800f818:	b005      	add	sp, #20
 800f81a:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f81e:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f820:	7903      	ldrb	r3, [r0, #4]
 800f822:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800f826:	a802      	add	r0, sp, #8
 800f828:	f7ff ff28 	bl	800f67c <RegionEU868ChannelAdd>
 800f82c:	2806      	cmp	r0, #6
 800f82e:	d80b      	bhi.n	800f848 <RegionEU868NewChannelReq+0x4a>
 800f830:	e8df f000 	tbb	[pc, r0]
 800f834:	0a0a0a04 	.word	0x0a0a0a04
 800f838:	060e      	.short	0x060e
 800f83a:	08          	.byte	0x08
 800f83b:	00          	.byte	0x00
 800f83c:	2003      	movs	r0, #3
 800f83e:	e7eb      	b.n	800f818 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800f840:	2001      	movs	r0, #1
                break;
 800f842:	e7e9      	b.n	800f818 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f844:	2000      	movs	r0, #0
                break;
 800f846:	e7e7      	b.n	800f818 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f848:	2000      	movs	r0, #0
                break;
 800f84a:	e7e5      	b.n	800f818 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800f84c:	2000      	movs	r0, #0
 800f84e:	e7e3      	b.n	800f818 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800f850:	2002      	movs	r0, #2
 800f852:	e7e1      	b.n	800f818 <RegionEU868NewChannelReq+0x1a>

0800f854 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800f854:	1a88      	subs	r0, r1, r2
 800f856:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f858:	2800      	cmp	r0, #0
 800f85a:	db01      	blt.n	800f860 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800f85c:	b2c0      	uxtb	r0, r0
 800f85e:	4770      	bx	lr
        datarate = DR_0;
 800f860:	2000      	movs	r0, #0
 800f862:	e7fb      	b.n	800f85c <RegionEU868ApplyDrOffset+0x8>

0800f864 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800f864:	b510      	push	{r4, lr}
 800f866:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f868:	4b10      	ldr	r3, [pc, #64]	; (800f8ac <VerifyRfFreq+0x48>)
 800f86a:	6a1b      	ldr	r3, [r3, #32]
 800f86c:	4798      	blx	r3
 800f86e:	b1c8      	cbz	r0, 800f8a4 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800f870:	4b0f      	ldr	r3, [pc, #60]	; (800f8b0 <VerifyRfFreq+0x4c>)
 800f872:	4423      	add	r3, r4
 800f874:	4a0f      	ldr	r2, [pc, #60]	; (800f8b4 <VerifyRfFreq+0x50>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d813      	bhi.n	800f8a2 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800f87a:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800f87e:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800f882:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800f886:	fba2 1203 	umull	r1, r2, r2, r3
 800f88a:	0c92      	lsrs	r2, r2, #18
 800f88c:	490a      	ldr	r1, [pc, #40]	; (800f8b8 <VerifyRfFreq+0x54>)
 800f88e:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800f892:	b942      	cbnz	r2, 800f8a6 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800f894:	4b09      	ldr	r3, [pc, #36]	; (800f8bc <VerifyRfFreq+0x58>)
 800f896:	4423      	add	r3, r4
 800f898:	4a09      	ldr	r2, [pc, #36]	; (800f8c0 <VerifyRfFreq+0x5c>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d902      	bls.n	800f8a4 <VerifyRfFreq+0x40>
    {
        return false;
 800f89e:	2000      	movs	r0, #0
 800f8a0:	e000      	b.n	800f8a4 <VerifyRfFreq+0x40>
        return false;
 800f8a2:	2000      	movs	r0, #0
    }
    return true;
}
 800f8a4:	bd10      	pop	{r4, pc}
        return false;
 800f8a6:	2000      	movs	r0, #0
 800f8a8:	e7fc      	b.n	800f8a4 <VerifyRfFreq+0x40>
 800f8aa:	bf00      	nop
 800f8ac:	080173cc 	.word	0x080173cc
 800f8b0:	c8f78f60 	.word	0xc8f78f60
 800f8b4:	00401640 	.word	0x00401640
 800f8b8:	000927c0 	.word	0x000927c0
 800f8bc:	ca37fea0 	.word	0xca37fea0
 800f8c0:	01808580 	.word	0x01808580

0800f8c4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800f8ca:	4b0a      	ldr	r3, [pc, #40]	; (800f8f4 <GetTimeOnAir+0x30>)
 800f8cc:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800f8ce:	490a      	ldr	r1, [pc, #40]	; (800f8f8 <GetTimeOnAir+0x34>)
 800f8d0:	f7ff f972 	bl	800ebb8 <RegionCommonGetBandwidth>
 800f8d4:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f8d6:	4b09      	ldr	r3, [pc, #36]	; (800f8fc <GetTimeOnAir+0x38>)
 800f8d8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800f8da:	2001      	movs	r0, #1
 800f8dc:	9003      	str	r0, [sp, #12]
 800f8de:	b2e4      	uxtb	r4, r4
 800f8e0:	9402      	str	r4, [sp, #8]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	9201      	str	r2, [sp, #4]
 800f8e6:	2208      	movs	r2, #8
 800f8e8:	9200      	str	r2, [sp, #0]
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	4632      	mov	r2, r6
 800f8ee:	47a8      	blx	r5
}
 800f8f0:	b004      	add	sp, #16
 800f8f2:	bd70      	pop	{r4, r5, r6, pc}
 800f8f4:	08016e10 	.word	0x08016e10
 800f8f8:	08016dbc 	.word	0x08016dbc
 800f8fc:	080173cc 	.word	0x080173cc

0800f900 <LimitTxPower>:
{
 800f900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f902:	4606      	mov	r6, r0
 800f904:	4615      	mov	r5, r2
 800f906:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800f908:	f7ff f952 	bl	800ebb0 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800f90c:	2d04      	cmp	r5, #4
 800f90e:	d105      	bne.n	800f91c <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800f910:	4634      	mov	r4, r6
 800f912:	2e02      	cmp	r6, #2
 800f914:	bfb8      	it	lt
 800f916:	2402      	movlt	r4, #2
}
 800f918:	4620      	mov	r0, r4
 800f91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f91c:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800f91e:	2204      	movs	r2, #4
 800f920:	2100      	movs	r1, #0
 800f922:	4638      	mov	r0, r7
 800f924:	f7fe fed9 	bl	800e6da <RegionCommonCountChannels>
 800f928:	2831      	cmp	r0, #49	; 0x31
 800f92a:	d8f5      	bhi.n	800f918 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800f92c:	4634      	mov	r4, r6
 800f92e:	2e05      	cmp	r6, #5
 800f930:	bfb8      	it	lt
 800f932:	2405      	movlt	r4, #5
 800f934:	e7f0      	b.n	800f918 <LimitTxPower+0x18>
	...

0800f938 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800f938:	b500      	push	{lr}
 800f93a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f93c:	2300      	movs	r3, #0
 800f93e:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800f940:	7803      	ldrb	r3, [r0, #0]
 800f942:	3b01      	subs	r3, #1
 800f944:	2b37      	cmp	r3, #55	; 0x37
 800f946:	d81f      	bhi.n	800f988 <RegionUS915GetPhyParam+0x50>
 800f948:	e8df f003 	tbb	[pc, r3]
 800f94c:	1e1e1e1c 	.word	0x1e1e1e1c
 800f950:	1e1e1e1e 	.word	0x1e1e1e1e
 800f954:	3e3b1e1e 	.word	0x3e3b1e1e
 800f958:	4d1e4741 	.word	0x4d1e4741
 800f95c:	5d595551 	.word	0x5d595551
 800f960:	6d6a1e61 	.word	0x6d6a1e61
 800f964:	7f7c7670 	.word	0x7f7c7670
 800f968:	86831e1e 	.word	0x86831e1e
 800f96c:	1e1e1e23 	.word	0x1e1e1e23
 800f970:	1e1e1e1e 	.word	0x1e1e1e1e
 800f974:	1e1e1e1e 	.word	0x1e1e1e1e
 800f978:	90891e1e 	.word	0x90891e1e
 800f97c:	a01e9d9a 	.word	0xa01e9d9a
 800f980:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800f984:	2308      	movs	r3, #8
 800f986:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800f988:	9804      	ldr	r0, [sp, #16]
 800f98a:	9005      	str	r0, [sp, #20]
}
 800f98c:	b007      	add	sp, #28
 800f98e:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800f992:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f996:	f88d 3004 	strb.w	r3, [sp, #4]
 800f99a:	2304      	movs	r3, #4
 800f99c:	f88d 3005 	strb.w	r3, [sp, #5]
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	f88d 3006 	strb.w	r3, [sp, #6]
 800f9a6:	2348      	movs	r3, #72	; 0x48
 800f9a8:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f9ac:	4b44      	ldr	r3, [pc, #272]	; (800fac0 <RegionUS915GetPhyParam+0x188>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f9b4:	9202      	str	r2, [sp, #8]
 800f9b6:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f9b8:	a801      	add	r0, sp, #4
 800f9ba:	f7ff f8da 	bl	800eb72 <RegionCommonGetNextLowerTxDr>
 800f9be:	9004      	str	r0, [sp, #16]
            break;
 800f9c0:	e7e2      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f9c2:	2340      	movs	r3, #64	; 0x40
 800f9c4:	9304      	str	r3, [sp, #16]
            break;
 800f9c6:	e7df      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f9c8:	2320      	movs	r3, #32
 800f9ca:	9304      	str	r3, [sp, #16]
            break;
 800f9cc:	e7dc      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800f9ce:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f9d2:	4a3c      	ldr	r2, [pc, #240]	; (800fac4 <RegionUS915GetPhyParam+0x18c>)
 800f9d4:	5cd3      	ldrb	r3, [r2, r3]
 800f9d6:	9304      	str	r3, [sp, #16]
            break;
 800f9d8:	e7d6      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800f9da:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f9de:	4a3a      	ldr	r2, [pc, #232]	; (800fac8 <RegionUS915GetPhyParam+0x190>)
 800f9e0:	5cd3      	ldrb	r3, [r2, r3]
 800f9e2:	9304      	str	r3, [sp, #16]
            break;
 800f9e4:	e7d0      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800f9e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f9ea:	9304      	str	r3, [sp, #16]
            break;
 800f9ec:	e7cc      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f9ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9f2:	9304      	str	r3, [sp, #16]
            break;
 800f9f4:	e7c8      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f9f6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f9fa:	9304      	str	r3, [sp, #16]
            break;
 800f9fc:	e7c4      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f9fe:	f241 3388 	movw	r3, #5000	; 0x1388
 800fa02:	9304      	str	r3, [sp, #16]
            break;
 800fa04:	e7c0      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800fa06:	f241 7370 	movw	r3, #6000	; 0x1770
 800fa0a:	9304      	str	r3, [sp, #16]
            break;
 800fa0c:	e7bc      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800fa0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fa12:	482e      	ldr	r0, [pc, #184]	; (800facc <RegionUS915GetPhyParam+0x194>)
 800fa14:	f001 fc64 	bl	80112e0 <randr>
 800fa18:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800fa1c:	9004      	str	r0, [sp, #16]
            break;
 800fa1e:	e7b3      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800fa20:	4b2b      	ldr	r3, [pc, #172]	; (800fad0 <RegionUS915GetPhyParam+0x198>)
 800fa22:	9304      	str	r3, [sp, #16]
            break;
 800fa24:	e7b0      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800fa26:	2308      	movs	r3, #8
 800fa28:	9304      	str	r3, [sp, #16]
            break;
 800fa2a:	e7ad      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800fa2c:	4b24      	ldr	r3, [pc, #144]	; (800fac0 <RegionUS915GetPhyParam+0x188>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fa34:	9304      	str	r3, [sp, #16]
            break;
 800fa36:	e7a7      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800fa38:	4b21      	ldr	r3, [pc, #132]	; (800fac0 <RegionUS915GetPhyParam+0x188>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800fa40:	9304      	str	r3, [sp, #16]
            break;
 800fa42:	e7a1      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800fa44:	2348      	movs	r3, #72	; 0x48
 800fa46:	9304      	str	r3, [sp, #16]
            break;
 800fa48:	e79e      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800fa4a:	4b1d      	ldr	r3, [pc, #116]	; (800fac0 <RegionUS915GetPhyParam+0x188>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	9304      	str	r3, [sp, #16]
            break;
 800fa50:	e79a      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800fa52:	4b20      	ldr	r3, [pc, #128]	; (800fad4 <RegionUS915GetPhyParam+0x19c>)
 800fa54:	9304      	str	r3, [sp, #16]
            break;
 800fa56:	e797      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	9304      	str	r3, [sp, #16]
            break;
 800fa5c:	e794      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800fa5e:	4a1e      	ldr	r2, [pc, #120]	; (800fad8 <RegionUS915GetPhyParam+0x1a0>)
 800fa60:	491b      	ldr	r1, [pc, #108]	; (800fad0 <RegionUS915GetPhyParam+0x198>)
 800fa62:	7900      	ldrb	r0, [r0, #4]
 800fa64:	f7fe fd0c 	bl	800e480 <RegionBaseUSCalcDownlinkFrequency>
 800fa68:	9004      	str	r0, [sp, #16]
            break;
 800fa6a:	e78d      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800fa6c:	2317      	movs	r3, #23
 800fa6e:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800fa72:	2304      	movs	r3, #4
 800fa74:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800fa78:	2303      	movs	r3, #3
 800fa7a:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800fa7e:	e783      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800fa80:	2308      	movs	r3, #8
 800fa82:	9304      	str	r3, [sp, #16]
            break;
 800fa84:	e780      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800fa86:	2308      	movs	r3, #8
 800fa88:	9304      	str	r3, [sp, #16]
            break;
 800fa8a:	e77d      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800fa8c:	4a12      	ldr	r2, [pc, #72]	; (800fad8 <RegionUS915GetPhyParam+0x1a0>)
 800fa8e:	4910      	ldr	r1, [pc, #64]	; (800fad0 <RegionUS915GetPhyParam+0x198>)
 800fa90:	7900      	ldrb	r0, [r0, #4]
 800fa92:	f7fe fcf5 	bl	800e480 <RegionBaseUSCalcDownlinkFrequency>
 800fa96:	9004      	str	r0, [sp, #16]
            break;
 800fa98:	e776      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800fa9a:	2308      	movs	r3, #8
 800fa9c:	9304      	str	r3, [sp, #16]
            break;
 800fa9e:	e773      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800faa0:	2308      	movs	r3, #8
 800faa2:	9304      	str	r3, [sp, #16]
            break;
 800faa4:	e770      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800faa6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800faaa:	4a0c      	ldr	r2, [pc, #48]	; (800fadc <RegionUS915GetPhyParam+0x1a4>)
 800faac:	5cd3      	ldrb	r3, [r2, r3]
 800faae:	9304      	str	r3, [sp, #16]
            break;
 800fab0:	e76a      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800fab2:	490b      	ldr	r1, [pc, #44]	; (800fae0 <RegionUS915GetPhyParam+0x1a8>)
 800fab4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800fab8:	f7ff f87e 	bl	800ebb8 <RegionCommonGetBandwidth>
 800fabc:	9004      	str	r0, [sp, #16]
            break;
 800fabe:	e763      	b.n	800f988 <RegionUS915GetPhyParam+0x50>
 800fac0:	200010cc 	.word	0x200010cc
 800fac4:	08016e30 	.word	0x08016e30
 800fac8:	08016e20 	.word	0x08016e20
 800facc:	fffffc18 	.word	0xfffffc18
 800fad0:	370870a0 	.word	0x370870a0
 800fad4:	4200999a 	.word	0x4200999a
 800fad8:	000927c0 	.word	0x000927c0
 800fadc:	08016e10 	.word	0x08016e10
 800fae0:	08016dbc 	.word	0x08016dbc

0800fae4 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800fae4:	b510      	push	{r4, lr}
 800fae6:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800fae8:	4b0b      	ldr	r3, [pc, #44]	; (800fb18 <RegionUS915SetBandTxDone+0x34>)
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	7803      	ldrb	r3, [r0, #0]
 800faee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800faf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800faf6:	7a5b      	ldrb	r3, [r3, #9]
 800faf8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800fafc:	4b07      	ldr	r3, [pc, #28]	; (800fb1c <RegionUS915SetBandTxDone+0x38>)
 800fafe:	681c      	ldr	r4, [r3, #0]
 800fb00:	6903      	ldr	r3, [r0, #16]
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	68c3      	ldr	r3, [r0, #12]
 800fb06:	7842      	ldrb	r2, [r0, #1]
 800fb08:	6881      	ldr	r1, [r0, #8]
 800fb0a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800fb0e:	f7fe fe09 	bl	800e724 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800fb12:	b002      	add	sp, #8
 800fb14:	bd10      	pop	{r4, pc}
 800fb16:	bf00      	nop
 800fb18:	200010cc 	.word	0x200010cc
 800fb1c:	200010c4 	.word	0x200010c4

0800fb20 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800fb20:	b510      	push	{r4, lr}
 800fb22:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800fb24:	2301      	movs	r3, #1
 800fb26:	f8ad 3000 	strh.w	r3, [sp]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	f88d 3002 	strb.w	r3, [sp, #2]
 800fb30:	9301      	str	r3, [sp, #4]
 800fb32:	9302      	str	r3, [sp, #8]
 800fb34:	9303      	str	r3, [sp, #12]
 800fb36:	9304      	str	r3, [sp, #16]
 800fb38:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800fb3c:	7b04      	ldrb	r4, [r0, #12]
 800fb3e:	b174      	cbz	r4, 800fb5e <RegionUS915InitDefaults+0x3e>
 800fb40:	3c01      	subs	r4, #1
 800fb42:	b2e4      	uxtb	r4, r4
 800fb44:	2c01      	cmp	r4, #1
 800fb46:	d87e      	bhi.n	800fc46 <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fb48:	4b40      	ldr	r3, [pc, #256]	; (800fc4c <RegionUS915InitDefaults+0x12c>)
 800fb4a:	6818      	ldr	r0, [r3, #0]
 800fb4c:	2206      	movs	r2, #6
 800fb4e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800fb52:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fb56:	f7fe fdd6 	bl	800e706 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	e071      	b.n	800fc42 <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800fb5e:	6803      	ldr	r3, [r0, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d070      	beq.n	800fc46 <RegionUS915InitDefaults+0x126>
 800fb64:	6842      	ldr	r2, [r0, #4]
 800fb66:	2a00      	cmp	r2, #0
 800fb68:	d06d      	beq.n	800fc46 <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800fb6a:	4939      	ldr	r1, [pc, #228]	; (800fc50 <RegionUS915InitDefaults+0x130>)
 800fb6c:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800fb6e:	4937      	ldr	r1, [pc, #220]	; (800fc4c <RegionUS915InitDefaults+0x12c>)
 800fb70:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800fb72:	6880      	ldr	r0, [r0, #8]
 800fb74:	4a37      	ldr	r2, [pc, #220]	; (800fc54 <RegionUS915InitDefaults+0x134>)
 800fb76:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800fb78:	2200      	movs	r2, #0
 800fb7a:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800fb7c:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800fb7e:	2218      	movs	r2, #24
 800fb80:	4669      	mov	r1, sp
 800fb82:	f001 fbba 	bl	80112fa <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800fb86:	e011      	b.n	800fbac <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800fb88:	4b30      	ldr	r3, [pc, #192]	; (800fc4c <RegionUS915InitDefaults+0x12c>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4932      	ldr	r1, [pc, #200]	; (800fc58 <RegionUS915InitDefaults+0x138>)
 800fb8e:	4a33      	ldr	r2, [pc, #204]	; (800fc5c <RegionUS915InitDefaults+0x13c>)
 800fb90:	fb01 2204 	mla	r2, r1, r4, r2
 800fb94:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800fb98:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800fb9c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800fba0:	2230      	movs	r2, #48	; 0x30
 800fba2:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800fba4:	2200      	movs	r2, #0
 800fba6:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800fba8:	3401      	adds	r4, #1
 800fbaa:	b2e4      	uxtb	r4, r4
 800fbac:	2c3f      	cmp	r4, #63	; 0x3f
 800fbae:	d9eb      	bls.n	800fb88 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800fbb0:	2340      	movs	r3, #64	; 0x40
 800fbb2:	2b47      	cmp	r3, #71	; 0x47
 800fbb4:	d814      	bhi.n	800fbe0 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800fbb6:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800fbba:	4a24      	ldr	r2, [pc, #144]	; (800fc4c <RegionUS915InitDefaults+0x12c>)
 800fbbc:	6812      	ldr	r2, [r2, #0]
 800fbbe:	4c28      	ldr	r4, [pc, #160]	; (800fc60 <RegionUS915InitDefaults+0x140>)
 800fbc0:	4928      	ldr	r1, [pc, #160]	; (800fc64 <RegionUS915InitDefaults+0x144>)
 800fbc2:	fb04 1100 	mla	r1, r4, r0, r1
 800fbc6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800fbca:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800fbce:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800fbd2:	2144      	movs	r1, #68	; 0x44
 800fbd4:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800fbda:	3301      	adds	r3, #1
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	e7e8      	b.n	800fbb2 <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800fbe0:	4c1a      	ldr	r4, [pc, #104]	; (800fc4c <RegionUS915InitDefaults+0x12c>)
 800fbe2:	6820      	ldr	r0, [r4, #0]
 800fbe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbe8:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800fbec:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800fbf0:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800fbf4:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800fbf8:	23ff      	movs	r3, #255	; 0xff
 800fbfa:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fc04:	2206      	movs	r2, #6
 800fc06:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800fc0a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fc0e:	f7fe fd7a 	bl	800e706 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fc12:	6821      	ldr	r1, [r4, #0]
 800fc14:	2206      	movs	r2, #6
 800fc16:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fc1a:	4b0d      	ldr	r3, [pc, #52]	; (800fc50 <RegionUS915InitDefaults+0x130>)
 800fc1c:	6818      	ldr	r0, [r3, #0]
 800fc1e:	f7fe fd72 	bl	800e706 <RegionCommonChanMaskCopy>
            break;
 800fc22:	e010      	b.n	800fc46 <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800fc24:	4a0a      	ldr	r2, [pc, #40]	; (800fc50 <RegionUS915InitDefaults+0x130>)
 800fc26:	6811      	ldr	r1, [r2, #0]
 800fc28:	4a08      	ldr	r2, [pc, #32]	; (800fc4c <RegionUS915InitDefaults+0x12c>)
 800fc2a:	6812      	ldr	r2, [r2, #0]
 800fc2c:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800fc30:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800fc34:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fc38:	4002      	ands	r2, r0
 800fc3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800fc3e:	3301      	adds	r3, #1
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b05      	cmp	r3, #5
 800fc44:	d9ee      	bls.n	800fc24 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800fc46:	b006      	add	sp, #24
 800fc48:	bd10      	pop	{r4, pc}
 800fc4a:	bf00      	nop
 800fc4c:	200010cc 	.word	0x200010cc
 800fc50:	200010c8 	.word	0x200010c8
 800fc54:	200010c4 	.word	0x200010c4
 800fc58:	00030d40 	.word	0x00030d40
 800fc5c:	35c80160 	.word	0x35c80160
 800fc60:	00186a00 	.word	0x00186a00
 800fc64:	35d2afc0 	.word	0x35d2afc0

0800fc68 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800fc68:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800fc6a:	290a      	cmp	r1, #10
 800fc6c:	d833      	bhi.n	800fcd6 <RegionUS915Verify+0x6e>
 800fc6e:	e8df f001 	tbb	[pc, r1]
 800fc72:	3206      	.short	0x3206
 800fc74:	0a323232 	.word	0x0a323232
 800fc78:	28321e14 	.word	0x28321e14
 800fc7c:	28          	.byte	0x28
 800fc7d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800fc7e:	6800      	ldr	r0, [r0, #0]
 800fc80:	f7ff fdf0 	bl	800f864 <VerifyRfFreq>
 800fc84:	e028      	b.n	800fcd8 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800fc86:	2204      	movs	r2, #4
 800fc88:	2100      	movs	r1, #0
 800fc8a:	f990 0000 	ldrsb.w	r0, [r0]
 800fc8e:	f7fe fcc6 	bl	800e61e <RegionCommonValueInRange>
 800fc92:	3800      	subs	r0, #0
 800fc94:	bf18      	it	ne
 800fc96:	2001      	movne	r0, #1
 800fc98:	e01e      	b.n	800fcd8 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800fc9a:	2205      	movs	r2, #5
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	f990 0000 	ldrsb.w	r0, [r0]
 800fca2:	f7fe fcbc 	bl	800e61e <RegionCommonValueInRange>
 800fca6:	3800      	subs	r0, #0
 800fca8:	bf18      	it	ne
 800fcaa:	2001      	movne	r0, #1
 800fcac:	e014      	b.n	800fcd8 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800fcae:	220d      	movs	r2, #13
 800fcb0:	2108      	movs	r1, #8
 800fcb2:	f990 0000 	ldrsb.w	r0, [r0]
 800fcb6:	f7fe fcb2 	bl	800e61e <RegionCommonValueInRange>
 800fcba:	3800      	subs	r0, #0
 800fcbc:	bf18      	it	ne
 800fcbe:	2001      	movne	r0, #1
 800fcc0:	e00a      	b.n	800fcd8 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800fcc2:	220e      	movs	r2, #14
 800fcc4:	2100      	movs	r1, #0
 800fcc6:	f990 0000 	ldrsb.w	r0, [r0]
 800fcca:	f7fe fca8 	bl	800e61e <RegionCommonValueInRange>
 800fcce:	3800      	subs	r0, #0
 800fcd0:	bf18      	it	ne
 800fcd2:	2001      	movne	r0, #1
 800fcd4:	e000      	b.n	800fcd8 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800fcd6:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800fcd8:	bd08      	pop	{r3, pc}
	...

0800fcdc <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800fcdc:	7a03      	ldrb	r3, [r0, #8]
 800fcde:	2b10      	cmp	r3, #16
 800fce0:	d134      	bne.n	800fd4c <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800fce2:	6843      	ldr	r3, [r0, #4]
 800fce4:	7bdb      	ldrb	r3, [r3, #15]
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	d130      	bne.n	800fd4c <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800fcea:	2200      	movs	r2, #0
 800fcec:	4613      	mov	r3, r2
 800fcee:	2a04      	cmp	r2, #4
 800fcf0:	d82b      	bhi.n	800fd4a <RegionUS915ApplyCFList+0x6e>
{
 800fcf2:	b530      	push	{r4, r5, lr}
 800fcf4:	e010      	b.n	800fd18 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800fcf6:	4916      	ldr	r1, [pc, #88]	; (800fd50 <RegionUS915ApplyCFList+0x74>)
 800fcf8:	680d      	ldr	r5, [r1, #0]
 800fcfa:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800fcfe:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800fd02:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800fd06:	4021      	ands	r1, r4
 800fd08:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	3202      	adds	r2, #2
 800fd12:	b2d2      	uxtb	r2, r2
 800fd14:	2b04      	cmp	r3, #4
 800fd16:	d817      	bhi.n	800fd48 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800fd18:	6841      	ldr	r1, [r0, #4]
 800fd1a:	4c0e      	ldr	r4, [pc, #56]	; (800fd54 <RegionUS915ApplyCFList+0x78>)
 800fd1c:	6824      	ldr	r4, [r4, #0]
 800fd1e:	469c      	mov	ip, r3
 800fd20:	5c89      	ldrb	r1, [r1, r2]
 800fd22:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800fd26:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800fd2a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800fd2e:	4496      	add	lr, r2
 800fd30:	f89e e001 	ldrb.w	lr, [lr, #1]
 800fd34:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800fd38:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800fd3c:	2b04      	cmp	r3, #4
 800fd3e:	d1da      	bne.n	800fcf6 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800fd40:	b2c9      	uxtb	r1, r1
 800fd42:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800fd46:	e7d6      	b.n	800fcf6 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800fd48:	bd30      	pop	{r4, r5, pc}
 800fd4a:	4770      	bx	lr
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	200010c8 	.word	0x200010c8
 800fd54:	200010cc 	.word	0x200010cc

0800fd58 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800fd5c:	2204      	movs	r2, #4
 800fd5e:	2100      	movs	r1, #0
 800fd60:	6800      	ldr	r0, [r0, #0]
 800fd62:	f7fe fcba 	bl	800e6da <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800fd66:	2801      	cmp	r0, #1
 800fd68:	d031      	beq.n	800fdce <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800fd6a:	792c      	ldrb	r4, [r5, #4]
 800fd6c:	b11c      	cbz	r4, 800fd76 <RegionUS915ChanMaskSet+0x1e>
 800fd6e:	2c01      	cmp	r4, #1
 800fd70:	d023      	beq.n	800fdba <RegionUS915ChanMaskSet+0x62>
 800fd72:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800fd74:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800fd76:	4e17      	ldr	r6, [pc, #92]	; (800fdd4 <RegionUS915ChanMaskSet+0x7c>)
 800fd78:	6830      	ldr	r0, [r6, #0]
 800fd7a:	2206      	movs	r2, #6
 800fd7c:	6829      	ldr	r1, [r5, #0]
 800fd7e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fd82:	f7fe fcc0 	bl	800e706 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800fd86:	6830      	ldr	r0, [r6, #0]
 800fd88:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800fd8c:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800fd90:	2300      	movs	r3, #0
 800fd92:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800fd96:	e00c      	b.n	800fdb2 <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800fd98:	4b0f      	ldr	r3, [pc, #60]	; (800fdd8 <RegionUS915ChanMaskSet+0x80>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800fda0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800fda4:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800fda8:	400b      	ands	r3, r1
 800fdaa:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800fdae:	3401      	adds	r4, #1
 800fdb0:	b2e4      	uxtb	r4, r4
 800fdb2:	2c05      	cmp	r4, #5
 800fdb4:	d9f0      	bls.n	800fd98 <RegionUS915ChanMaskSet+0x40>
    return true;
 800fdb6:	2001      	movs	r0, #1
 800fdb8:	e7dc      	b.n	800fd74 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800fdba:	4b06      	ldr	r3, [pc, #24]	; (800fdd4 <RegionUS915ChanMaskSet+0x7c>)
 800fdbc:	6818      	ldr	r0, [r3, #0]
 800fdbe:	2206      	movs	r2, #6
 800fdc0:	6829      	ldr	r1, [r5, #0]
 800fdc2:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800fdc6:	f7fe fc9e 	bl	800e706 <RegionCommonChanMaskCopy>
    return true;
 800fdca:	2001      	movs	r0, #1
            break;
 800fdcc:	e7d2      	b.n	800fd74 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800fdce:	2000      	movs	r0, #0
 800fdd0:	e7d0      	b.n	800fd74 <RegionUS915ChanMaskSet+0x1c>
 800fdd2:	bf00      	nop
 800fdd4:	200010cc 	.word	0x200010cc
 800fdd8:	200010c8 	.word	0x200010c8

0800fddc <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdde:	b083      	sub	sp, #12
 800fde0:	460e      	mov	r6, r1
 800fde2:	4617      	mov	r7, r2
 800fde4:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800fde6:	280d      	cmp	r0, #13
 800fde8:	bfa8      	it	ge
 800fdea:	200d      	movge	r0, #13
 800fdec:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800fdee:	4d0f      	ldr	r5, [pc, #60]	; (800fe2c <RegionUS915ComputeRxWindowParameters+0x50>)
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	f7fe fee1 	bl	800ebb8 <RegionCommonGetBandwidth>
 800fdf6:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800fdf8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800fdfc:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800fe00:	4a0b      	ldr	r2, [pc, #44]	; (800fe30 <RegionUS915ComputeRxWindowParameters+0x54>)
 800fe02:	5cd0      	ldrb	r0, [r2, r3]
 800fe04:	f7fe fda6 	bl	800e954 <RegionCommonComputeSymbolTimeLoRa>
 800fe08:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800fe0a:	4b0a      	ldr	r3, [pc, #40]	; (800fe34 <RegionUS915ComputeRxWindowParameters+0x58>)
 800fe0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe0e:	4798      	blx	r3
 800fe10:	4603      	mov	r3, r0
 800fe12:	f104 020c 	add.w	r2, r4, #12
 800fe16:	9201      	str	r2, [sp, #4]
 800fe18:	3408      	adds	r4, #8
 800fe1a:	9400      	str	r4, [sp, #0]
 800fe1c:	463a      	mov	r2, r7
 800fe1e:	4631      	mov	r1, r6
 800fe20:	4628      	mov	r0, r5
 800fe22:	f7fe fda5 	bl	800e970 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800fe26:	b003      	add	sp, #12
 800fe28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	08016dbc 	.word	0x08016dbc
 800fe30:	08016e10 	.word	0x08016e10
 800fe34:	080173cc 	.word	0x080173cc

0800fe38 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800fe38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe3c:	b08b      	sub	sp, #44	; 0x2c
 800fe3e:	4604      	mov	r4, r0
 800fe40:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800fe42:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800fe46:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800fe48:	4b22      	ldr	r3, [pc, #136]	; (800fed4 <RegionUS915RxConfig+0x9c>)
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	4798      	blx	r3
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d13d      	bne.n	800fece <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800fe52:	7ce3      	ldrb	r3, [r4, #19]
 800fe54:	b933      	cbnz	r3, 800fe64 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800fe56:	7823      	ldrb	r3, [r4, #0]
 800fe58:	f003 0307 	and.w	r3, r3, #7
 800fe5c:	4a1e      	ldr	r2, [pc, #120]	; (800fed8 <RegionUS915RxConfig+0xa0>)
 800fe5e:	4f1f      	ldr	r7, [pc, #124]	; (800fedc <RegionUS915RxConfig+0xa4>)
 800fe60:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800fe64:	4b1e      	ldr	r3, [pc, #120]	; (800fee0 <RegionUS915RxConfig+0xa8>)
 800fe66:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800fe6a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800fed4 <RegionUS915RxConfig+0x9c>
 800fe6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe72:	4638      	mov	r0, r7
 800fe74:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800fe76:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800fe7a:	7ca3      	ldrb	r3, [r4, #18]
 800fe7c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe7e:	2001      	movs	r0, #1
 800fe80:	9008      	str	r0, [sp, #32]
 800fe82:	2200      	movs	r2, #0
 800fe84:	9207      	str	r2, [sp, #28]
 800fe86:	9206      	str	r2, [sp, #24]
 800fe88:	9205      	str	r2, [sp, #20]
 800fe8a:	9204      	str	r2, [sp, #16]
 800fe8c:	9203      	str	r2, [sp, #12]
 800fe8e:	8923      	ldrh	r3, [r4, #8]
 800fe90:	9302      	str	r3, [sp, #8]
 800fe92:	2308      	movs	r3, #8
 800fe94:	9301      	str	r3, [sp, #4]
 800fe96:	9200      	str	r2, [sp, #0]
 800fe98:	4603      	mov	r3, r0
 800fe9a:	464a      	mov	r2, r9
 800fe9c:	78a1      	ldrb	r1, [r4, #2]
 800fe9e:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 800fea0:	7c63      	ldrb	r3, [r4, #17]
 800fea2:	b18b      	cbz	r3, 800fec8 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800fea4:	4b0f      	ldr	r3, [pc, #60]	; (800fee4 <RegionUS915RxConfig+0xac>)
 800fea6:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800fea8:	4b0a      	ldr	r3, [pc, #40]	; (800fed4 <RegionUS915RxConfig+0x9c>)
 800feaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feac:	310d      	adds	r1, #13
 800feae:	b2c9      	uxtb	r1, r1
 800feb0:	2001      	movs	r0, #1
 800feb2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800feb4:	4632      	mov	r2, r6
 800feb6:	4639      	mov	r1, r7
 800feb8:	7ce0      	ldrb	r0, [r4, #19]
 800feba:	f7fe fe8f 	bl	800ebdc <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800febe:	702e      	strb	r6, [r5, #0]
    return true;
 800fec0:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800fec2:	b00b      	add	sp, #44	; 0x2c
 800fec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800fec8:	4b07      	ldr	r3, [pc, #28]	; (800fee8 <RegionUS915RxConfig+0xb0>)
 800feca:	5d99      	ldrb	r1, [r3, r6]
 800fecc:	e7ec      	b.n	800fea8 <RegionUS915RxConfig+0x70>
        return false;
 800fece:	2000      	movs	r0, #0
 800fed0:	e7f7      	b.n	800fec2 <RegionUS915RxConfig+0x8a>
 800fed2:	bf00      	nop
 800fed4:	080173cc 	.word	0x080173cc
 800fed8:	000927c0 	.word	0x000927c0
 800fedc:	370870a0 	.word	0x370870a0
 800fee0:	08016e10 	.word	0x08016e10
 800fee4:	08016e20 	.word	0x08016e20
 800fee8:	08016e30 	.word	0x08016e30

0800feec <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800feec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef0:	b08d      	sub	sp, #52	; 0x34
 800fef2:	4604      	mov	r4, r0
 800fef4:	468b      	mov	fp, r1
 800fef6:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800fef8:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800fefc:	4b32      	ldr	r3, [pc, #200]	; (800ffc8 <RegionUS915TxConfig+0xdc>)
 800fefe:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800ff02:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800ffcc <RegionUS915TxConfig+0xe0>
 800ff06:	f8d9 3000 	ldr.w	r3, [r9]
 800ff0a:	7801      	ldrb	r1, [r0, #0]
 800ff0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ff10:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ff14:	7a49      	ldrb	r1, [r1, #9]
 800ff16:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ff1a:	482d      	ldr	r0, [pc, #180]	; (800ffd0 <RegionUS915TxConfig+0xe4>)
 800ff1c:	6800      	ldr	r0, [r0, #0]
 800ff1e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ff22:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ff26:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800ff2a:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800ff2e:	f7ff fce7 	bl	800f900 <LimitTxPower>
 800ff32:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800ff34:	4927      	ldr	r1, [pc, #156]	; (800ffd4 <RegionUS915TxConfig+0xe8>)
 800ff36:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ff3a:	f7fe fe3d 	bl	800ebb8 <RegionCommonGetBandwidth>
 800ff3e:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800ff40:	2200      	movs	r2, #0
 800ff42:	4925      	ldr	r1, [pc, #148]	; (800ffd8 <RegionUS915TxConfig+0xec>)
 800ff44:	4630      	mov	r0, r6
 800ff46:	f7fe fd4f 	bl	800e9e8 <RegionCommonComputeTxPower>
 800ff4a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ff4c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800ffdc <RegionUS915TxConfig+0xf0>
 800ff50:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800ff54:	f8d9 1000 	ldr.w	r1, [r9]
 800ff58:	7823      	ldrb	r3, [r4, #0]
 800ff5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff5e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ff62:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ff64:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ff68:	9308      	str	r3, [sp, #32]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	9207      	str	r2, [sp, #28]
 800ff6e:	9206      	str	r2, [sp, #24]
 800ff70:	9205      	str	r2, [sp, #20]
 800ff72:	2501      	movs	r5, #1
 800ff74:	9504      	str	r5, [sp, #16]
 800ff76:	9203      	str	r2, [sp, #12]
 800ff78:	2308      	movs	r3, #8
 800ff7a:	9302      	str	r3, [sp, #8]
 800ff7c:	9501      	str	r5, [sp, #4]
 800ff7e:	f8cd a000 	str.w	sl, [sp]
 800ff82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff86:	4628      	mov	r0, r5
 800ff88:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800ff8c:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ff8e:	f8d9 2000 	ldr.w	r2, [r9]
 800ff92:	7823      	ldrb	r3, [r4, #0]
 800ff94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff98:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ff9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ffa0:	f7fe fe3e 	bl	800ec20 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800ffa4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800ffa8:	7b21      	ldrb	r1, [r4, #12]
 800ffaa:	4628      	mov	r0, r5
 800ffac:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ffae:	89a1      	ldrh	r1, [r4, #12]
 800ffb0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ffb4:	f7ff fc86 	bl	800f8c4 <GetTimeOnAir>
 800ffb8:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800ffba:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	b00d      	add	sp, #52	; 0x34
 800ffc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc6:	bf00      	nop
 800ffc8:	08016e10 	.word	0x08016e10
 800ffcc:	200010cc 	.word	0x200010cc
 800ffd0:	200010c4 	.word	0x200010c4
 800ffd4:	08016dbc 	.word	0x08016dbc
 800ffd8:	41f00000 	.word	0x41f00000
 800ffdc:	080173cc 	.word	0x080173cc

0800ffe0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ffe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffe4:	b091      	sub	sp, #68	; 0x44
 800ffe6:	4605      	mov	r5, r0
 800ffe8:	4688      	mov	r8, r1
 800ffea:	4617      	mov	r7, r2
 800ffec:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ffee:	2400      	movs	r4, #0
 800fff0:	940e      	str	r4, [sp, #56]	; 0x38
 800fff2:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800fff6:	940b      	str	r4, [sp, #44]	; 0x2c
 800fff8:	940c      	str	r4, [sp, #48]	; 0x30
 800fffa:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fffc:	4b9c      	ldr	r3, [pc, #624]	; (8010270 <RegionUS915LinkAdrReq+0x290>)
 800fffe:	6819      	ldr	r1, [r3, #0]
 8010000:	2206      	movs	r2, #6
 8010002:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8010006:	a80b      	add	r0, sp, #44	; 0x2c
 8010008:	f7fe fb7d 	bl	800e706 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801000c:	e00d      	b.n	801002a <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801000e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010012:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8010016:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 801001a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 801001e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8010022:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8010026:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801002a:	7a2b      	ldrb	r3, [r5, #8]
 801002c:	42a3      	cmp	r3, r4
 801002e:	f240 808b 	bls.w	8010148 <RegionUS915LinkAdrReq+0x168>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8010032:	6868      	ldr	r0, [r5, #4]
 8010034:	a90e      	add	r1, sp, #56	; 0x38
 8010036:	4420      	add	r0, r4
 8010038:	f7fe fc16 	bl	800e868 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 801003c:	4603      	mov	r3, r0
 801003e:	2800      	cmp	r0, #0
 8010040:	f000 8082 	beq.w	8010148 <RegionUS915LinkAdrReq+0x168>
        bytesProcessed += nextIndex;
 8010044:	4423      	add	r3, r4
 8010046:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 8010048:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 801004c:	f1bc 0f06 	cmp.w	ip, #6
 8010050:	d0dd      	beq.n	801000e <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8010052:	f1bc 0f07 	cmp.w	ip, #7
 8010056:	d00a      	beq.n	801006e <RegionUS915LinkAdrReq+0x8e>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8010058:	f1bc 0f05 	cmp.w	ip, #5
 801005c:	d071      	beq.n	8010142 <RegionUS915LinkAdrReq+0x162>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801005e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010062:	aa10      	add	r2, sp, #64	; 0x40
 8010064:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8010068:	f82c 3c14 	strh.w	r3, [ip, #-20]
 801006c:	e7dd      	b.n	801002a <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 801006e:	2300      	movs	r3, #0
 8010070:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8010074:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8010078:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 801007c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8010080:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8010084:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8010088:	e7cf      	b.n	801002a <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 801008a:	aa10      	add	r2, sp, #64	; 0x40
 801008c:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8010090:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8010094:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8010098:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 801009c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80100a0:	ea4c 0202 	orr.w	r2, ip, r2
 80100a4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                        cntChannelMask++;
 80100a8:	3101      	adds	r1, #1
 80100aa:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 80100ac:	3301      	adds	r3, #1
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b07      	cmp	r3, #7
 80100b2:	d8ba      	bhi.n	801002a <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80100b4:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80100b8:	f04f 0c01 	mov.w	ip, #1
 80100bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80100c0:	ea12 0f0c 	tst.w	r2, ip
 80100c4:	d012      	beq.n	80100ec <RegionUS915LinkAdrReq+0x10c>
                    if( ( i % 2 ) == 0 )
 80100c6:	f013 0f01 	tst.w	r3, #1
 80100ca:	d1de      	bne.n	801008a <RegionUS915LinkAdrReq+0xaa>
                        channelsMask[cntChannelMask] |= 0x00FF;
 80100cc:	aa10      	add	r2, sp, #64	; 0x40
 80100ce:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80100d2:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80100d6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80100da:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80100de:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80100e2:	ea4c 0202 	orr.w	r2, ip, r2
 80100e6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80100ea:	e7df      	b.n	80100ac <RegionUS915LinkAdrReq+0xcc>
                    if( ( i % 2 ) == 0 )
 80100ec:	f013 0f01 	tst.w	r3, #1
 80100f0:	d113      	bne.n	801011a <RegionUS915LinkAdrReq+0x13a>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80100f2:	aa10      	add	r2, sp, #64	; 0x40
 80100f4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80100f8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80100fc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8010100:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8010104:	ea6f 0c0c 	mvn.w	ip, ip
 8010108:	fa0f fc8c 	sxth.w	ip, ip
 801010c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010110:	ea0c 0c02 	and.w	ip, ip, r2
 8010114:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
 8010118:	e7c8      	b.n	80100ac <RegionUS915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 801011a:	aa10      	add	r2, sp, #64	; 0x40
 801011c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8010120:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8010124:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8010128:	ea6f 0c0c 	mvn.w	ip, ip
 801012c:	fa0f fc8c 	sxth.w	ip, ip
 8010130:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010134:	ea0c 0c02 	and.w	ip, ip, r2
 8010138:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                        cntChannelMask++;
 801013c:	3101      	adds	r1, #1
 801013e:	b2c9      	uxtb	r1, r1
 8010140:	e7b4      	b.n	80100ac <RegionUS915LinkAdrReq+0xcc>
            for( uint8_t i = 0; i <= 7; i++ )
 8010142:	2300      	movs	r3, #0
            uint8_t cntChannelMask = 0;
 8010144:	4619      	mov	r1, r3
 8010146:	e7b3      	b.n	80100b0 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8010148:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801014c:	2b03      	cmp	r3, #3
 801014e:	dd58      	ble.n	8010202 <RegionUS915LinkAdrReq+0x222>
 8010150:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010154:	2302      	movs	r3, #2
 8010156:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801015a:	7a6b      	ldrb	r3, [r5, #9]
 801015c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8010160:	a809      	add	r0, sp, #36	; 0x24
 8010162:	f7ff fbe9 	bl	800f938 <RegionUS915GetPhyParam>
 8010166:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8010168:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801016c:	7aab      	ldrb	r3, [r5, #10]
 801016e:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8010172:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8010176:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801017a:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 801017e:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010182:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8010186:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801018a:	f995 300b 	ldrsb.w	r3, [r5, #11]
 801018e:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010192:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8010196:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801019a:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801019e:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80101a2:	2348      	movs	r3, #72	; 0x48
 80101a4:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80101a8:	ab0b      	add	r3, sp, #44	; 0x2c
 80101aa:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80101ac:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80101b0:	2304      	movs	r3, #4
 80101b2:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80101b6:	4b2e      	ldr	r3, [pc, #184]	; (8010270 <RegionUS915LinkAdrReq+0x290>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80101bc:	230e      	movs	r3, #14
 80101be:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80101c2:	2300      	movs	r3, #0
 80101c4:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80101c8:	682b      	ldr	r3, [r5, #0]
 80101ca:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80101cc:	ab0e      	add	r3, sp, #56	; 0x38
 80101ce:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80101d2:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 80101d6:	4668      	mov	r0, sp
 80101d8:	f7fe fb64 	bl	800e8a4 <RegionCommonLinkAdrReqVerifyParams>
 80101dc:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80101de:	2807      	cmp	r0, #7
 80101e0:	d01c      	beq.n	801021c <RegionUS915LinkAdrReq+0x23c>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80101e2:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80101e6:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 80101ea:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 80101ee:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80101f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80101f4:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 80101f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80101f8:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 80101fa:	4628      	mov	r0, r5
 80101fc:	b011      	add	sp, #68	; 0x44
 80101fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8010202:	2204      	movs	r2, #4
 8010204:	2100      	movs	r1, #0
 8010206:	a80b      	add	r0, sp, #44	; 0x2c
 8010208:	f7fe fa67 	bl	800e6da <RegionCommonCountChannels>
 801020c:	2801      	cmp	r0, #1
 801020e:	d902      	bls.n	8010216 <RegionUS915LinkAdrReq+0x236>
 8010210:	f04f 0907 	mov.w	r9, #7
 8010214:	e79e      	b.n	8010154 <RegionUS915LinkAdrReq+0x174>
        status &= 0xFE; // Channel mask KO
 8010216:	f04f 0906 	mov.w	r9, #6
 801021a:	e79b      	b.n	8010154 <RegionUS915LinkAdrReq+0x174>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801021c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8010270 <RegionUS915LinkAdrReq+0x290>
 8010220:	f8d9 0000 	ldr.w	r0, [r9]
 8010224:	2206      	movs	r2, #6
 8010226:	a90b      	add	r1, sp, #44	; 0x2c
 8010228:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801022c:	f7fe fa6b 	bl	800e706 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8010230:	4b10      	ldr	r3, [pc, #64]	; (8010274 <RegionUS915LinkAdrReq+0x294>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f8d9 2000 	ldr.w	r2, [r9]
 8010238:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 801023c:	8818      	ldrh	r0, [r3, #0]
 801023e:	4001      	ands	r1, r0
 8010240:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8010242:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 8010246:	8858      	ldrh	r0, [r3, #2]
 8010248:	4001      	ands	r1, r0
 801024a:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801024c:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8010250:	8898      	ldrh	r0, [r3, #4]
 8010252:	4001      	ands	r1, r0
 8010254:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8010256:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 801025a:	88d8      	ldrh	r0, [r3, #6]
 801025c:	4001      	ands	r1, r0
 801025e:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8010260:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 8010264:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8010266:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801026a:	815a      	strh	r2, [r3, #10]
 801026c:	e7b9      	b.n	80101e2 <RegionUS915LinkAdrReq+0x202>
 801026e:	bf00      	nop
 8010270:	200010cc 	.word	0x200010cc
 8010274:	200010c8 	.word	0x200010c8

08010278 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801027c:	6840      	ldr	r0, [r0, #4]
 801027e:	f7ff faf1 	bl	800f864 <VerifyRfFreq>
 8010282:	b310      	cbz	r0, 80102ca <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8010284:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8010286:	220d      	movs	r2, #13
 8010288:	2108      	movs	r1, #8
 801028a:	f994 0000 	ldrsb.w	r0, [r4]
 801028e:	f7fe f9c6 	bl	800e61e <RegionCommonValueInRange>
 8010292:	b908      	cbnz	r0, 8010298 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8010294:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8010298:	2207      	movs	r2, #7
 801029a:	2105      	movs	r1, #5
 801029c:	f994 0000 	ldrsb.w	r0, [r4]
 80102a0:	f7fe f9bd 	bl	800e61e <RegionCommonValueInRange>
 80102a4:	2801      	cmp	r0, #1
 80102a6:	d003      	beq.n	80102b0 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80102a8:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80102ac:	2b0d      	cmp	r3, #13
 80102ae:	dd01      	ble.n	80102b4 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 80102b0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80102b4:	2203      	movs	r2, #3
 80102b6:	2100      	movs	r1, #0
 80102b8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80102bc:	f7fe f9af 	bl	800e61e <RegionCommonValueInRange>
 80102c0:	b908      	cbnz	r0, 80102c6 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80102c2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 80102c6:	4628      	mov	r0, r5
 80102c8:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80102ca:	2506      	movs	r5, #6
 80102cc:	e7db      	b.n	8010286 <RegionUS915RxParamSetupReq+0xe>

080102ce <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 80102ce:	f04f 30ff 	mov.w	r0, #4294967295
 80102d2:	4770      	bx	lr

080102d4 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80102d4:	f04f 30ff 	mov.w	r0, #4294967295
 80102d8:	4770      	bx	lr

080102da <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80102da:	f04f 30ff 	mov.w	r0, #4294967295
 80102de:	4770      	bx	lr

080102e0 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80102e0:	b999      	cbnz	r1, 801030a <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80102e2:	4b0e      	ldr	r3, [pc, #56]	; (801031c <RegionUS915AlternateDr+0x3c>)
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	7b53      	ldrb	r3, [r2, #13]
 80102e8:	3301      	adds	r3, #1
 80102ea:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80102ec:	4b0b      	ldr	r3, [pc, #44]	; (801031c <RegionUS915AlternateDr+0x3c>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	7b5a      	ldrb	r2, [r3, #13]
 80102f2:	4b0b      	ldr	r3, [pc, #44]	; (8010320 <RegionUS915AlternateDr+0x40>)
 80102f4:	fba3 1302 	umull	r1, r3, r3, r2
 80102f8:	085b      	lsrs	r3, r3, #1
 80102fa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80102fe:	1ad2      	subs	r2, r2, r3
 8010300:	f012 0fff 	tst.w	r2, #255	; 0xff
 8010304:	d007      	beq.n	8010316 <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 8010306:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 8010308:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 801030a:	4b04      	ldr	r3, [pc, #16]	; (801031c <RegionUS915AlternateDr+0x3c>)
 801030c:	681a      	ldr	r2, [r3, #0]
 801030e:	7b53      	ldrb	r3, [r2, #13]
 8010310:	3b01      	subs	r3, #1
 8010312:	7353      	strb	r3, [r2, #13]
 8010314:	e7ea      	b.n	80102ec <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 8010316:	2004      	movs	r0, #4
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	200010c8 	.word	0x200010c8
 8010320:	38e38e39 	.word	0x38e38e39

08010324 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010328:	b0a4      	sub	sp, #144	; 0x90
 801032a:	4604      	mov	r4, r0
 801032c:	460e      	mov	r6, r1
 801032e:	4690      	mov	r8, r2
 8010330:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8010332:	2500      	movs	r5, #0
 8010334:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8010338:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801033c:	9511      	str	r5, [sp, #68]	; 0x44
 801033e:	2244      	movs	r2, #68	; 0x44
 8010340:	4629      	mov	r1, r5
 8010342:	a812      	add	r0, sp, #72	; 0x48
 8010344:	f004 f9c9 	bl	80146da <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8010348:	2204      	movs	r2, #4
 801034a:	4629      	mov	r1, r5
 801034c:	4b49      	ldr	r3, [pc, #292]	; (8010474 <RegionUS915NextChannel+0x150>)
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	f7fe f9c3 	bl	800e6da <RegionCommonCountChannels>
 8010354:	2800      	cmp	r0, #0
 8010356:	d052      	beq.n	80103fe <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8010358:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801035c:	2b03      	cmp	r3, #3
 801035e:	dd08      	ble.n	8010372 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8010360:	4b44      	ldr	r3, [pc, #272]	; (8010474 <RegionUS915NextChannel+0x150>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	7a1a      	ldrb	r2, [r3, #8]
 8010366:	b922      	cbnz	r2, 8010372 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8010368:	4a43      	ldr	r2, [pc, #268]	; (8010478 <RegionUS915NextChannel+0x154>)
 801036a:	6812      	ldr	r2, [r2, #0]
 801036c:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8010370:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010372:	7a63      	ldrb	r3, [r4, #9]
 8010374:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8010378:	7a23      	ldrb	r3, [r4, #8]
 801037a:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801037e:	4b3d      	ldr	r3, [pc, #244]	; (8010474 <RegionUS915NextChannel+0x150>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8010384:	4b3c      	ldr	r3, [pc, #240]	; (8010478 <RegionUS915NextChannel+0x154>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801038a:	4b3c      	ldr	r3, [pc, #240]	; (801047c <RegionUS915NextChannel+0x158>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8010390:	2348      	movs	r3, #72	; 0x48
 8010392:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801039a:	6823      	ldr	r3, [r4, #0]
 801039c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801039e:	6863      	ldr	r3, [r4, #4]
 80103a0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80103a2:	7aa3      	ldrb	r3, [r4, #10]
 80103a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80103a8:	2301      	movs	r3, #1
 80103aa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80103ae:	ab03      	add	r3, sp, #12
 80103b0:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80103b2:	ab0c      	add	r3, sp, #48	; 0x30
 80103b4:	f104 020c 	add.w	r2, r4, #12
 80103b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103bc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80103c0:	7d23      	ldrb	r3, [r4, #20]
 80103c2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80103c6:	8ae1      	ldrh	r1, [r4, #22]
 80103c8:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80103cc:	f7ff fa7a 	bl	800f8c4 <GetTimeOnAir>
 80103d0:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80103d2:	f8cd 8004 	str.w	r8, [sp, #4]
 80103d6:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 80103e0:	aa11      	add	r2, sp, #68	; 0x44
 80103e2:	4639      	mov	r1, r7
 80103e4:	a809      	add	r0, sp, #36	; 0x24
 80103e6:	f7fe fb7a 	bl	800eade <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80103ea:	4605      	mov	r5, r0
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d13c      	bne.n	801046a <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 80103f0:	7a63      	ldrb	r3, [r4, #9]
 80103f2:	b98b      	cbnz	r3, 8010418 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80103f4:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80103f8:	b1db      	cbz	r3, 8010432 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80103fa:	4603      	mov	r3, r0
 80103fc:	e026      	b.n	801044c <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80103fe:	4d1d      	ldr	r5, [pc, #116]	; (8010474 <RegionUS915NextChannel+0x150>)
 8010400:	4b1d      	ldr	r3, [pc, #116]	; (8010478 <RegionUS915NextChannel+0x154>)
 8010402:	6819      	ldr	r1, [r3, #0]
 8010404:	2204      	movs	r2, #4
 8010406:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801040a:	6828      	ldr	r0, [r5, #0]
 801040c:	f7fe f97b 	bl	800e706 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8010410:	682b      	ldr	r3, [r5, #0]
 8010412:	2200      	movs	r2, #0
 8010414:	731a      	strb	r2, [r3, #12]
 8010416:	e79f      	b.n	8010358 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8010418:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 801041c:	3901      	subs	r1, #1
 801041e:	f000 ff5f 	bl	80112e0 <randr>
 8010422:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8010426:	eb0d 0003 	add.w	r0, sp, r3
 801042a:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 801042e:	7033      	strb	r3, [r6, #0]
 8010430:	e015      	b.n	801045e <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8010432:	4b10      	ldr	r3, [pc, #64]	; (8010474 <RegionUS915NextChannel+0x150>)
 8010434:	6818      	ldr	r0, [r3, #0]
 8010436:	4632      	mov	r2, r6
 8010438:	f100 010c 	add.w	r1, r0, #12
 801043c:	f7fd ffd2 	bl	800e3e4 <RegionBaseUSComputeNext125kHzJoinChannel>
 8010440:	2803      	cmp	r0, #3
 8010442:	d10c      	bne.n	801045e <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8010444:	4605      	mov	r5, r0
 8010446:	e010      	b.n	801046a <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8010448:	3301      	adds	r3, #1
 801044a:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801044c:	4a09      	ldr	r2, [pc, #36]	; (8010474 <RegionUS915NextChannel+0x150>)
 801044e:	6812      	ldr	r2, [r2, #0]
 8010450:	7a10      	ldrb	r0, [r2, #8]
 8010452:	4118      	asrs	r0, r3
 8010454:	f010 0f01 	tst.w	r0, #1
 8010458:	d0f6      	beq.n	8010448 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 801045a:	3340      	adds	r3, #64	; 0x40
 801045c:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801045e:	2248      	movs	r2, #72	; 0x48
 8010460:	7831      	ldrb	r1, [r6, #0]
 8010462:	4b04      	ldr	r3, [pc, #16]	; (8010474 <RegionUS915NextChannel+0x150>)
 8010464:	6818      	ldr	r0, [r3, #0]
 8010466:	f7fe f91c 	bl	800e6a2 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801046a:	4628      	mov	r0, r5
 801046c:	b024      	add	sp, #144	; 0x90
 801046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010472:	bf00      	nop
 8010474:	200010c8 	.word	0x200010c8
 8010478:	200010cc 	.word	0x200010cc
 801047c:	200010c4 	.word	0x200010c4

08010480 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8010480:	4b04      	ldr	r3, [pc, #16]	; (8010494 <RegionUS915ApplyDrOffset+0x14>)
 8010482:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010486:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 8010488:	2800      	cmp	r0, #0
 801048a:	db01      	blt.n	8010490 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 801048c:	b2c0      	uxtb	r0, r0
 801048e:	4770      	bx	lr
        datarate = DR_0;
 8010490:	2000      	movs	r0, #0
 8010492:	e7fb      	b.n	801048c <RegionUS915ApplyDrOffset+0xc>
 8010494:	08016dfc 	.word	0x08016dfc

08010498 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8010498:	b510      	push	{r4, lr}
 801049a:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 801049c:	2210      	movs	r2, #16
 801049e:	2100      	movs	r1, #0
 80104a0:	30f1      	adds	r0, #241	; 0xf1
 80104a2:	f000 ff42 	bl	801132a <memset1>
    ctx->M_n = 0;
 80104a6:	2100      	movs	r1, #0
 80104a8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80104ac:	22f0      	movs	r2, #240	; 0xf0
 80104ae:	4620      	mov	r0, r4
 80104b0:	f000 ff3b 	bl	801132a <memset1>
}
 80104b4:	bd10      	pop	{r4, pc}

080104b6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80104b6:	b508      	push	{r3, lr}
 80104b8:	4602      	mov	r2, r0
 80104ba:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80104bc:	2110      	movs	r1, #16
 80104be:	f000 fb3b 	bl	8010b38 <lorawan_aes_set_key>
}
 80104c2:	bd08      	pop	{r3, pc}

080104c4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80104c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c8:	b084      	sub	sp, #16
 80104ca:	4604      	mov	r4, r0
 80104cc:	460d      	mov	r5, r1
 80104ce:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80104d0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d054      	beq.n	8010582 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80104d8:	f1c3 0810 	rsb	r8, r3, #16
 80104dc:	4647      	mov	r7, r8
 80104de:	4590      	cmp	r8, r2
 80104e0:	bf28      	it	cs
 80104e2:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80104e4:	f200 1001 	addw	r0, r0, #257	; 0x101
 80104e8:	b2ba      	uxth	r2, r7
 80104ea:	4418      	add	r0, r3
 80104ec:	f000 ff05 	bl	80112fa <memcpy1>
        ctx->M_n += mlen;
 80104f0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80104f4:	443b      	add	r3, r7
 80104f6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 80104fa:	2b0f      	cmp	r3, #15
 80104fc:	d94d      	bls.n	801059a <AES_CMAC_Update+0xd6>
 80104fe:	45b0      	cmp	r8, r6
 8010500:	d24b      	bcs.n	801059a <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 8010502:	2300      	movs	r3, #0
 8010504:	e008      	b.n	8010518 <AES_CMAC_Update+0x54>
 8010506:	18e2      	adds	r2, r4, r3
 8010508:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 801050c:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8010510:	4041      	eors	r1, r0
 8010512:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 8010516:	3301      	adds	r3, #1
 8010518:	2b0f      	cmp	r3, #15
 801051a:	ddf4      	ble.n	8010506 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801051c:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8010520:	2210      	movs	r2, #16
 8010522:	4641      	mov	r1, r8
 8010524:	4668      	mov	r0, sp
 8010526:	f000 fee8 	bl	80112fa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801052a:	4622      	mov	r2, r4
 801052c:	4669      	mov	r1, sp
 801052e:	4668      	mov	r0, sp
 8010530:	f000 fb86 	bl	8010c40 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010534:	2210      	movs	r2, #16
 8010536:	4669      	mov	r1, sp
 8010538:	4640      	mov	r0, r8
 801053a:	f000 fede 	bl	80112fa <memcpy1>

        data += mlen;
 801053e:	443d      	add	r5, r7
        len -= mlen;
 8010540:	1bf6      	subs	r6, r6, r7
 8010542:	e01e      	b.n	8010582 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8010544:	eb04 0e03 	add.w	lr, r4, r3
 8010548:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 801054c:	5cea      	ldrb	r2, [r5, r3]
 801054e:	ea8c 0c02 	eor.w	ip, ip, r2
 8010552:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 8010556:	3301      	adds	r3, #1
 8010558:	2b0f      	cmp	r3, #15
 801055a:	ddf3      	ble.n	8010544 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801055c:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8010560:	2210      	movs	r2, #16
 8010562:	4639      	mov	r1, r7
 8010564:	4668      	mov	r0, sp
 8010566:	f000 fec8 	bl	80112fa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801056a:	4622      	mov	r2, r4
 801056c:	4669      	mov	r1, sp
 801056e:	4668      	mov	r0, sp
 8010570:	f000 fb66 	bl	8010c40 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010574:	2210      	movs	r2, #16
 8010576:	4669      	mov	r1, sp
 8010578:	4638      	mov	r0, r7
 801057a:	f000 febe 	bl	80112fa <memcpy1>

        data += 16;
 801057e:	3510      	adds	r5, #16
        len -= 16;
 8010580:	3e10      	subs	r6, #16
    while( len > 16 )
 8010582:	2e10      	cmp	r6, #16
 8010584:	d901      	bls.n	801058a <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 8010586:	2300      	movs	r3, #0
 8010588:	e7e6      	b.n	8010558 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801058a:	b2b2      	uxth	r2, r6
 801058c:	4629      	mov	r1, r5
 801058e:	f204 1001 	addw	r0, r4, #257	; 0x101
 8010592:	f000 feb2 	bl	80112fa <memcpy1>
    ctx->M_n = len;
 8010596:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 801059a:	b004      	add	sp, #16
 801059c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080105a0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80105a0:	b530      	push	{r4, r5, lr}
 80105a2:	b089      	sub	sp, #36	; 0x24
 80105a4:	4605      	mov	r5, r0
 80105a6:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80105a8:	2210      	movs	r2, #16
 80105aa:	2100      	movs	r1, #0
 80105ac:	eb0d 0002 	add.w	r0, sp, r2
 80105b0:	f000 febb 	bl	801132a <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80105b4:	4622      	mov	r2, r4
 80105b6:	a904      	add	r1, sp, #16
 80105b8:	4608      	mov	r0, r1
 80105ba:	f000 fb41 	bl	8010c40 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80105be:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	db01      	blt.n	80105ca <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80105c6:	2300      	movs	r3, #0
 80105c8:	e030      	b.n	801062c <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 80105ca:	2300      	movs	r3, #0
 80105cc:	2b0e      	cmp	r3, #14
 80105ce:	dc11      	bgt.n	80105f4 <AES_CMAC_Final+0x54>
 80105d0:	f103 0220 	add.w	r2, r3, #32
 80105d4:	eb0d 0102 	add.w	r1, sp, r2
 80105d8:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80105dc:	3301      	adds	r3, #1
 80105de:	f103 0220 	add.w	r2, r3, #32
 80105e2:	446a      	add	r2, sp
 80105e4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80105e8:	09d2      	lsrs	r2, r2, #7
 80105ea:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80105ee:	f801 2c10 	strb.w	r2, [r1, #-16]
 80105f2:	e7eb      	b.n	80105cc <AES_CMAC_Final+0x2c>
 80105f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80105f8:	005b      	lsls	r3, r3, #1
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8010600:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8010604:	f88d 301f 	strb.w	r3, [sp, #31]
 8010608:	e017      	b.n	801063a <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 801060a:	f103 0220 	add.w	r2, r3, #32
 801060e:	eb0d 0102 	add.w	r1, sp, r2
 8010612:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8010616:	3301      	adds	r3, #1
 8010618:	f103 0220 	add.w	r2, r3, #32
 801061c:	446a      	add	r2, sp
 801061e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010622:	09d2      	lsrs	r2, r2, #7
 8010624:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8010628:	f801 2c10 	strb.w	r2, [r1, #-16]
 801062c:	2b0e      	cmp	r3, #14
 801062e:	ddec      	ble.n	801060a <AES_CMAC_Final+0x6a>
 8010630:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010634:	005b      	lsls	r3, r3, #1
 8010636:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801063a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 801063e:	2810      	cmp	r0, #16
 8010640:	d014      	beq.n	801066c <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8010642:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8010646:	2b00      	cmp	r3, #0
 8010648:	db30      	blt.n	80106ac <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 801064a:	2300      	movs	r3, #0
 801064c:	e041      	b.n	80106d2 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 801064e:	18e1      	adds	r1, r4, r3
 8010650:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8010654:	f103 0020 	add.w	r0, r3, #32
 8010658:	4468      	add	r0, sp
 801065a:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801065e:	4042      	eors	r2, r0
 8010660:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8010664:	3301      	adds	r3, #1
 8010666:	2b0f      	cmp	r3, #15
 8010668:	ddf1      	ble.n	801064e <AES_CMAC_Final+0xae>
 801066a:	e059      	b.n	8010720 <AES_CMAC_Final+0x180>
 801066c:	2300      	movs	r3, #0
 801066e:	e7fa      	b.n	8010666 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8010670:	f103 0220 	add.w	r2, r3, #32
 8010674:	eb0d 0102 	add.w	r1, sp, r2
 8010678:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 801067c:	3301      	adds	r3, #1
 801067e:	f103 0220 	add.w	r2, r3, #32
 8010682:	446a      	add	r2, sp
 8010684:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010688:	09d2      	lsrs	r2, r2, #7
 801068a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801068e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010692:	2b0e      	cmp	r3, #14
 8010694:	ddec      	ble.n	8010670 <AES_CMAC_Final+0xd0>
 8010696:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801069a:	005b      	lsls	r3, r3, #1
 801069c:	b2db      	uxtb	r3, r3
 801069e:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 80106a2:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80106a6:	f88d 301f 	strb.w	r3, [sp, #31]
 80106aa:	e019      	b.n	80106e0 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 80106ac:	2300      	movs	r3, #0
 80106ae:	e7f0      	b.n	8010692 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 80106b0:	f103 0220 	add.w	r2, r3, #32
 80106b4:	eb0d 0102 	add.w	r1, sp, r2
 80106b8:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80106bc:	3301      	adds	r3, #1
 80106be:	f103 0220 	add.w	r2, r3, #32
 80106c2:	446a      	add	r2, sp
 80106c4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80106c8:	09d2      	lsrs	r2, r2, #7
 80106ca:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80106ce:	f801 2c10 	strb.w	r2, [r1, #-16]
 80106d2:	2b0e      	cmp	r3, #14
 80106d4:	ddec      	ble.n	80106b0 <AES_CMAC_Final+0x110>
 80106d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80106da:	005b      	lsls	r3, r3, #1
 80106dc:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80106e0:	4420      	add	r0, r4
 80106e2:	2380      	movs	r3, #128	; 0x80
 80106e4:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80106e8:	e003      	b.n	80106f2 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 80106ea:	4423      	add	r3, r4
 80106ec:	2200      	movs	r2, #0
 80106ee:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80106f2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80106f6:	3301      	adds	r3, #1
 80106f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80106fc:	2b0f      	cmp	r3, #15
 80106fe:	d9f4      	bls.n	80106ea <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8010700:	2300      	movs	r3, #0
 8010702:	e00b      	b.n	801071c <AES_CMAC_Final+0x17c>
 8010704:	18e1      	adds	r1, r4, r3
 8010706:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801070a:	f103 0020 	add.w	r0, r3, #32
 801070e:	4468      	add	r0, sp
 8010710:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010714:	4042      	eors	r2, r0
 8010716:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801071a:	3301      	adds	r3, #1
 801071c:	2b0f      	cmp	r3, #15
 801071e:	ddf1      	ble.n	8010704 <AES_CMAC_Final+0x164>
 8010720:	2300      	movs	r3, #0
 8010722:	e009      	b.n	8010738 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8010724:	18e2      	adds	r2, r4, r3
 8010726:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 801072a:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 801072e:	ea8c 0c01 	eor.w	ip, ip, r1
 8010732:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8010736:	3301      	adds	r3, #1
 8010738:	2b0f      	cmp	r3, #15
 801073a:	ddf3      	ble.n	8010724 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801073c:	2210      	movs	r2, #16
 801073e:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8010742:	4668      	mov	r0, sp
 8010744:	f000 fdd9 	bl	80112fa <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8010748:	4622      	mov	r2, r4
 801074a:	4629      	mov	r1, r5
 801074c:	4668      	mov	r0, sp
 801074e:	f000 fa77 	bl	8010c40 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8010752:	2210      	movs	r2, #16
 8010754:	2100      	movs	r1, #0
 8010756:	eb0d 0002 	add.w	r0, sp, r2
 801075a:	f000 fde6 	bl	801132a <memset1>
}
 801075e:	b009      	add	sp, #36	; 0x24
 8010760:	bd30      	pop	{r4, r5, pc}

08010762 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8010762:	780b      	ldrb	r3, [r1, #0]
 8010764:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8010766:	784b      	ldrb	r3, [r1, #1]
 8010768:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801076a:	788b      	ldrb	r3, [r1, #2]
 801076c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 801076e:	78cb      	ldrb	r3, [r1, #3]
 8010770:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8010772:	790b      	ldrb	r3, [r1, #4]
 8010774:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8010776:	794b      	ldrb	r3, [r1, #5]
 8010778:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 801077a:	798b      	ldrb	r3, [r1, #6]
 801077c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 801077e:	79cb      	ldrb	r3, [r1, #7]
 8010780:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8010782:	7a0b      	ldrb	r3, [r1, #8]
 8010784:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8010786:	7a4b      	ldrb	r3, [r1, #9]
 8010788:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801078a:	7a8b      	ldrb	r3, [r1, #10]
 801078c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 801078e:	7acb      	ldrb	r3, [r1, #11]
 8010790:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8010792:	7b0b      	ldrb	r3, [r1, #12]
 8010794:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8010796:	7b4b      	ldrb	r3, [r1, #13]
 8010798:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801079a:	7b8b      	ldrb	r3, [r1, #14]
 801079c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 801079e:	7bcb      	ldrb	r3, [r1, #15]
 80107a0:	73c3      	strb	r3, [r0, #15]
#endif
}
 80107a2:	4770      	bx	lr

080107a4 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 80107a4:	e004      	b.n	80107b0 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80107a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107aa:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80107ae:	461a      	mov	r2, r3
 80107b0:	1e53      	subs	r3, r2, #1
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	2a00      	cmp	r2, #0
 80107b6:	d1f6      	bne.n	80107a6 <copy_block_nn+0x2>
}
 80107b8:	4770      	bx	lr

080107ba <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80107ba:	780b      	ldrb	r3, [r1, #0]
 80107bc:	7802      	ldrb	r2, [r0, #0]
 80107be:	4053      	eors	r3, r2
 80107c0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80107c2:	784b      	ldrb	r3, [r1, #1]
 80107c4:	7842      	ldrb	r2, [r0, #1]
 80107c6:	4053      	eors	r3, r2
 80107c8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80107ca:	788b      	ldrb	r3, [r1, #2]
 80107cc:	7882      	ldrb	r2, [r0, #2]
 80107ce:	4053      	eors	r3, r2
 80107d0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80107d2:	78cb      	ldrb	r3, [r1, #3]
 80107d4:	78c2      	ldrb	r2, [r0, #3]
 80107d6:	4053      	eors	r3, r2
 80107d8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80107da:	790b      	ldrb	r3, [r1, #4]
 80107dc:	7902      	ldrb	r2, [r0, #4]
 80107de:	4053      	eors	r3, r2
 80107e0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80107e2:	794b      	ldrb	r3, [r1, #5]
 80107e4:	7942      	ldrb	r2, [r0, #5]
 80107e6:	4053      	eors	r3, r2
 80107e8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80107ea:	798b      	ldrb	r3, [r1, #6]
 80107ec:	7982      	ldrb	r2, [r0, #6]
 80107ee:	4053      	eors	r3, r2
 80107f0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80107f2:	79cb      	ldrb	r3, [r1, #7]
 80107f4:	79c2      	ldrb	r2, [r0, #7]
 80107f6:	4053      	eors	r3, r2
 80107f8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80107fa:	7a0b      	ldrb	r3, [r1, #8]
 80107fc:	7a02      	ldrb	r2, [r0, #8]
 80107fe:	4053      	eors	r3, r2
 8010800:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8010802:	7a4b      	ldrb	r3, [r1, #9]
 8010804:	7a42      	ldrb	r2, [r0, #9]
 8010806:	4053      	eors	r3, r2
 8010808:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 801080a:	7a8b      	ldrb	r3, [r1, #10]
 801080c:	7a82      	ldrb	r2, [r0, #10]
 801080e:	4053      	eors	r3, r2
 8010810:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8010812:	7acb      	ldrb	r3, [r1, #11]
 8010814:	7ac2      	ldrb	r2, [r0, #11]
 8010816:	4053      	eors	r3, r2
 8010818:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 801081a:	7b0b      	ldrb	r3, [r1, #12]
 801081c:	7b02      	ldrb	r2, [r0, #12]
 801081e:	4053      	eors	r3, r2
 8010820:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8010822:	7b4b      	ldrb	r3, [r1, #13]
 8010824:	7b42      	ldrb	r2, [r0, #13]
 8010826:	4053      	eors	r3, r2
 8010828:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801082a:	7b8b      	ldrb	r3, [r1, #14]
 801082c:	7b82      	ldrb	r2, [r0, #14]
 801082e:	4053      	eors	r3, r2
 8010830:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8010832:	7bcb      	ldrb	r3, [r1, #15]
 8010834:	7bc2      	ldrb	r2, [r0, #15]
 8010836:	4053      	eors	r3, r2
 8010838:	73c3      	strb	r3, [r0, #15]
#endif
}
 801083a:	4770      	bx	lr

0801083c <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 801083c:	780b      	ldrb	r3, [r1, #0]
 801083e:	f892 c000 	ldrb.w	ip, [r2]
 8010842:	ea83 030c 	eor.w	r3, r3, ip
 8010846:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8010848:	784b      	ldrb	r3, [r1, #1]
 801084a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801084e:	ea83 030c 	eor.w	r3, r3, ip
 8010852:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8010854:	788b      	ldrb	r3, [r1, #2]
 8010856:	f892 c002 	ldrb.w	ip, [r2, #2]
 801085a:	ea83 030c 	eor.w	r3, r3, ip
 801085e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8010860:	78cb      	ldrb	r3, [r1, #3]
 8010862:	f892 c003 	ldrb.w	ip, [r2, #3]
 8010866:	ea83 030c 	eor.w	r3, r3, ip
 801086a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 801086c:	790b      	ldrb	r3, [r1, #4]
 801086e:	f892 c004 	ldrb.w	ip, [r2, #4]
 8010872:	ea83 030c 	eor.w	r3, r3, ip
 8010876:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8010878:	794b      	ldrb	r3, [r1, #5]
 801087a:	f892 c005 	ldrb.w	ip, [r2, #5]
 801087e:	ea83 030c 	eor.w	r3, r3, ip
 8010882:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8010884:	798b      	ldrb	r3, [r1, #6]
 8010886:	f892 c006 	ldrb.w	ip, [r2, #6]
 801088a:	ea83 030c 	eor.w	r3, r3, ip
 801088e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8010890:	79cb      	ldrb	r3, [r1, #7]
 8010892:	f892 c007 	ldrb.w	ip, [r2, #7]
 8010896:	ea83 030c 	eor.w	r3, r3, ip
 801089a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801089c:	7a0b      	ldrb	r3, [r1, #8]
 801089e:	f892 c008 	ldrb.w	ip, [r2, #8]
 80108a2:	ea83 030c 	eor.w	r3, r3, ip
 80108a6:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80108a8:	7a4b      	ldrb	r3, [r1, #9]
 80108aa:	f892 c009 	ldrb.w	ip, [r2, #9]
 80108ae:	ea83 030c 	eor.w	r3, r3, ip
 80108b2:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80108b4:	7a8b      	ldrb	r3, [r1, #10]
 80108b6:	f892 c00a 	ldrb.w	ip, [r2, #10]
 80108ba:	ea83 030c 	eor.w	r3, r3, ip
 80108be:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80108c0:	7acb      	ldrb	r3, [r1, #11]
 80108c2:	f892 c00b 	ldrb.w	ip, [r2, #11]
 80108c6:	ea83 030c 	eor.w	r3, r3, ip
 80108ca:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80108cc:	7b0b      	ldrb	r3, [r1, #12]
 80108ce:	f892 c00c 	ldrb.w	ip, [r2, #12]
 80108d2:	ea83 030c 	eor.w	r3, r3, ip
 80108d6:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80108d8:	7b4b      	ldrb	r3, [r1, #13]
 80108da:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80108de:	ea83 030c 	eor.w	r3, r3, ip
 80108e2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80108e4:	7b8b      	ldrb	r3, [r1, #14]
 80108e6:	f892 c00e 	ldrb.w	ip, [r2, #14]
 80108ea:	ea83 030c 	eor.w	r3, r3, ip
 80108ee:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80108f0:	7bcb      	ldrb	r3, [r1, #15]
 80108f2:	7bd2      	ldrb	r2, [r2, #15]
 80108f4:	4053      	eors	r3, r2
 80108f6:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80108f8:	4770      	bx	lr

080108fa <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80108fa:	b508      	push	{r3, lr}
    xor_block(d, k);
 80108fc:	f7ff ff5d 	bl	80107ba <xor_block>
}
 8010900:	bd08      	pop	{r3, pc}
	...

08010904 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8010904:	7802      	ldrb	r2, [r0, #0]
 8010906:	4b18      	ldr	r3, [pc, #96]	; (8010968 <shift_sub_rows+0x64>)
 8010908:	5c9a      	ldrb	r2, [r3, r2]
 801090a:	7002      	strb	r2, [r0, #0]
 801090c:	7902      	ldrb	r2, [r0, #4]
 801090e:	5c9a      	ldrb	r2, [r3, r2]
 8010910:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8010912:	7a02      	ldrb	r2, [r0, #8]
 8010914:	5c9a      	ldrb	r2, [r3, r2]
 8010916:	7202      	strb	r2, [r0, #8]
 8010918:	7b02      	ldrb	r2, [r0, #12]
 801091a:	5c9a      	ldrb	r2, [r3, r2]
 801091c:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801091e:	7842      	ldrb	r2, [r0, #1]
 8010920:	7941      	ldrb	r1, [r0, #5]
 8010922:	5c59      	ldrb	r1, [r3, r1]
 8010924:	7041      	strb	r1, [r0, #1]
 8010926:	7a41      	ldrb	r1, [r0, #9]
 8010928:	5c59      	ldrb	r1, [r3, r1]
 801092a:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 801092c:	7b41      	ldrb	r1, [r0, #13]
 801092e:	5c59      	ldrb	r1, [r3, r1]
 8010930:	7241      	strb	r1, [r0, #9]
 8010932:	5c9a      	ldrb	r2, [r3, r2]
 8010934:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8010936:	7882      	ldrb	r2, [r0, #2]
 8010938:	7a81      	ldrb	r1, [r0, #10]
 801093a:	5c59      	ldrb	r1, [r3, r1]
 801093c:	7081      	strb	r1, [r0, #2]
 801093e:	5c9a      	ldrb	r2, [r3, r2]
 8010940:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8010942:	7982      	ldrb	r2, [r0, #6]
 8010944:	7b81      	ldrb	r1, [r0, #14]
 8010946:	5c59      	ldrb	r1, [r3, r1]
 8010948:	7181      	strb	r1, [r0, #6]
 801094a:	5c9a      	ldrb	r2, [r3, r2]
 801094c:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801094e:	7bc2      	ldrb	r2, [r0, #15]
 8010950:	7ac1      	ldrb	r1, [r0, #11]
 8010952:	5c59      	ldrb	r1, [r3, r1]
 8010954:	73c1      	strb	r1, [r0, #15]
 8010956:	79c1      	ldrb	r1, [r0, #7]
 8010958:	5c59      	ldrb	r1, [r3, r1]
 801095a:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 801095c:	78c1      	ldrb	r1, [r0, #3]
 801095e:	5c59      	ldrb	r1, [r3, r1]
 8010960:	71c1      	strb	r1, [r0, #7]
 8010962:	5c9b      	ldrb	r3, [r3, r2]
 8010964:	70c3      	strb	r3, [r0, #3]
}
 8010966:	4770      	bx	lr
 8010968:	08017040 	.word	0x08017040

0801096c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 801096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010970:	b084      	sub	sp, #16
 8010972:	4604      	mov	r4, r0
    block_copy(st, dt);
 8010974:	4601      	mov	r1, r0
 8010976:	4668      	mov	r0, sp
 8010978:	f7ff fef3 	bl	8010762 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 801097c:	f89d c000 	ldrb.w	ip, [sp]
 8010980:	4b6a      	ldr	r3, [pc, #424]	; (8010b2c <mix_sub_columns+0x1c0>)
 8010982:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010986:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801098a:	4a69      	ldr	r2, [pc, #420]	; (8010b30 <mix_sub_columns+0x1c4>)
 801098c:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010990:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8010994:	4967      	ldr	r1, [pc, #412]	; (8010b34 <mix_sub_columns+0x1c8>)
 8010996:	f811 500e 	ldrb.w	r5, [r1, lr]
 801099a:	f89d 700f 	ldrb.w	r7, [sp, #15]
 801099e:	5dce      	ldrb	r6, [r1, r7]
 80109a0:	ea80 0009 	eor.w	r0, r0, r9
 80109a4:	4068      	eors	r0, r5
 80109a6:	4070      	eors	r0, r6
 80109a8:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80109aa:	f811 000c 	ldrb.w	r0, [r1, ip]
 80109ae:	f813 a008 	ldrb.w	sl, [r3, r8]
 80109b2:	f812 900e 	ldrb.w	r9, [r2, lr]
 80109b6:	ea80 0a0a 	eor.w	sl, r0, sl
 80109ba:	ea89 090a 	eor.w	r9, r9, sl
 80109be:	ea86 0609 	eor.w	r6, r6, r9
 80109c2:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80109c4:	f811 8008 	ldrb.w	r8, [r1, r8]
 80109c8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80109cc:	5dd6      	ldrb	r6, [r2, r7]
 80109ce:	ea80 0008 	eor.w	r0, r0, r8
 80109d2:	ea8e 0000 	eor.w	r0, lr, r0
 80109d6:	4070      	eors	r0, r6
 80109d8:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80109da:	f812 600c 	ldrb.w	r6, [r2, ip]
 80109de:	5dd8      	ldrb	r0, [r3, r7]
 80109e0:	ea86 0608 	eor.w	r6, r6, r8
 80109e4:	4075      	eors	r5, r6
 80109e6:	4068      	eors	r0, r5
 80109e8:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80109ea:	f89d c004 	ldrb.w	ip, [sp, #4]
 80109ee:	f813 000c 	ldrb.w	r0, [r3, ip]
 80109f2:	f89d 8009 	ldrb.w	r8, [sp, #9]
 80109f6:	f812 9008 	ldrb.w	r9, [r2, r8]
 80109fa:	f89d e00e 	ldrb.w	lr, [sp, #14]
 80109fe:	f811 500e 	ldrb.w	r5, [r1, lr]
 8010a02:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8010a06:	5dce      	ldrb	r6, [r1, r7]
 8010a08:	ea80 0009 	eor.w	r0, r0, r9
 8010a0c:	4068      	eors	r0, r5
 8010a0e:	4070      	eors	r0, r6
 8010a10:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8010a12:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010a16:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010a1a:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010a1e:	ea80 0a0a 	eor.w	sl, r0, sl
 8010a22:	ea89 090a 	eor.w	r9, r9, sl
 8010a26:	ea86 0609 	eor.w	r6, r6, r9
 8010a2a:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8010a2c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010a30:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010a34:	5dd6      	ldrb	r6, [r2, r7]
 8010a36:	ea80 0008 	eor.w	r0, r0, r8
 8010a3a:	ea8e 0000 	eor.w	r0, lr, r0
 8010a3e:	4070      	eors	r0, r6
 8010a40:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8010a42:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010a46:	5dd8      	ldrb	r0, [r3, r7]
 8010a48:	ea86 0608 	eor.w	r6, r6, r8
 8010a4c:	4075      	eors	r5, r6
 8010a4e:	4068      	eors	r0, r5
 8010a50:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8010a52:	f89d c008 	ldrb.w	ip, [sp, #8]
 8010a56:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010a5a:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8010a5e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010a62:	f89d e002 	ldrb.w	lr, [sp, #2]
 8010a66:	f811 500e 	ldrb.w	r5, [r1, lr]
 8010a6a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8010a6e:	5dce      	ldrb	r6, [r1, r7]
 8010a70:	ea80 0009 	eor.w	r0, r0, r9
 8010a74:	4068      	eors	r0, r5
 8010a76:	4070      	eors	r0, r6
 8010a78:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8010a7a:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010a7e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010a82:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010a86:	ea80 0a0a 	eor.w	sl, r0, sl
 8010a8a:	ea89 090a 	eor.w	r9, r9, sl
 8010a8e:	ea86 0609 	eor.w	r6, r6, r9
 8010a92:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8010a94:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010a98:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010a9c:	5dd6      	ldrb	r6, [r2, r7]
 8010a9e:	ea80 0008 	eor.w	r0, r0, r8
 8010aa2:	ea8e 0000 	eor.w	r0, lr, r0
 8010aa6:	4070      	eors	r0, r6
 8010aa8:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8010aaa:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010aae:	5dd8      	ldrb	r0, [r3, r7]
 8010ab0:	ea86 0608 	eor.w	r6, r6, r8
 8010ab4:	4075      	eors	r5, r6
 8010ab6:	4068      	eors	r0, r5
 8010ab8:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8010aba:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8010abe:	5d98      	ldrb	r0, [r3, r6]
 8010ac0:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8010ac4:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010ac8:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8010acc:	f811 c007 	ldrb.w	ip, [r1, r7]
 8010ad0:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8010ad4:	f811 e005 	ldrb.w	lr, [r1, r5]
 8010ad8:	ea80 0009 	eor.w	r0, r0, r9
 8010adc:	ea8c 0000 	eor.w	r0, ip, r0
 8010ae0:	ea8e 0000 	eor.w	r0, lr, r0
 8010ae4:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8010ae6:	5d88      	ldrb	r0, [r1, r6]
 8010ae8:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010aec:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010af0:	ea80 0a0a 	eor.w	sl, r0, sl
 8010af4:	ea89 090a 	eor.w	r9, r9, sl
 8010af8:	ea8e 0e09 	eor.w	lr, lr, r9
 8010afc:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8010b00:	f811 1008 	ldrb.w	r1, [r1, r8]
 8010b04:	f813 e007 	ldrb.w	lr, [r3, r7]
 8010b08:	5d57      	ldrb	r7, [r2, r5]
 8010b0a:	4048      	eors	r0, r1
 8010b0c:	ea8e 0000 	eor.w	r0, lr, r0
 8010b10:	4078      	eors	r0, r7
 8010b12:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010b14:	5d92      	ldrb	r2, [r2, r6]
 8010b16:	5d5b      	ldrb	r3, [r3, r5]
 8010b18:	4051      	eors	r1, r2
 8010b1a:	ea8c 0c01 	eor.w	ip, ip, r1
 8010b1e:	ea83 030c 	eor.w	r3, r3, ip
 8010b22:	73e3      	strb	r3, [r4, #15]
  }
 8010b24:	b004      	add	sp, #16
 8010b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b2a:	bf00      	nop
 8010b2c:	08016e40 	.word	0x08016e40
 8010b30:	08016f40 	.word	0x08016f40
 8010b34:	08017040 	.word	0x08017040

08010b38 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8010b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b3c:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8010b3e:	f1a1 0310 	sub.w	r3, r1, #16
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	2b10      	cmp	r3, #16
 8010b46:	d806      	bhi.n	8010b56 <lorawan_aes_set_key+0x1e>
 8010b48:	460d      	mov	r5, r1
 8010b4a:	4a3b      	ldr	r2, [pc, #236]	; (8010c38 <lorawan_aes_set_key+0x100>)
 8010b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8010b50:	f013 0f01 	tst.w	r3, #1
 8010b54:	d105      	bne.n	8010b62 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8010b56:	2300      	movs	r3, #0
 8010b58:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8010b5c:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8010b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8010b62:	460a      	mov	r2, r1
 8010b64:	4601      	mov	r1, r0
 8010b66:	4620      	mov	r0, r4
 8010b68:	f7ff fe1c 	bl	80107a4 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8010b6c:	f105 031c 	add.w	r3, r5, #28
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8010b78:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010b82:	462b      	mov	r3, r5
 8010b84:	f04f 0c01 	mov.w	ip, #1
 8010b88:	e023      	b.n	8010bd2 <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 8010b8a:	2d18      	cmp	r5, #24
 8010b8c:	d901      	bls.n	8010b92 <lorawan_aes_set_key+0x5a>
 8010b8e:	2a10      	cmp	r2, #16
 8010b90:	d048      	beq.n	8010c24 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8010b92:	1b5a      	subs	r2, r3, r5
 8010b94:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8010b96:	f814 9002 	ldrb.w	r9, [r4, r2]
 8010b9a:	ea89 0808 	eor.w	r8, r9, r8
 8010b9e:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8010ba2:	f102 0801 	add.w	r8, r2, #1
 8010ba6:	f814 8008 	ldrb.w	r8, [r4, r8]
 8010baa:	f100 0901 	add.w	r9, r0, #1
 8010bae:	ea88 0707 	eor.w	r7, r8, r7
 8010bb2:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8010bb6:	1c97      	adds	r7, r2, #2
 8010bb8:	5de7      	ldrb	r7, [r4, r7]
 8010bba:	f100 0802 	add.w	r8, r0, #2
 8010bbe:	407e      	eors	r6, r7
 8010bc0:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8010bc4:	3203      	adds	r2, #3
 8010bc6:	5ca6      	ldrb	r6, [r4, r2]
 8010bc8:	1cc2      	adds	r2, r0, #3
 8010bca:	4071      	eors	r1, r6
 8010bcc:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010bce:	3304      	adds	r3, #4
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	4573      	cmp	r3, lr
 8010bd4:	d22d      	bcs.n	8010c32 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	1f1a      	subs	r2, r3, #4
 8010bda:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8010bde:	1eda      	subs	r2, r3, #3
 8010be0:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8010be2:	1e9a      	subs	r2, r3, #2
 8010be4:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8010be6:	1e5a      	subs	r2, r3, #1
 8010be8:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8010bea:	fbb3 f2f5 	udiv	r2, r3, r5
 8010bee:	fb05 3212 	mls	r2, r5, r2, r3
 8010bf2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8010bf6:	d1c8      	bne.n	8010b8a <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 8010bf8:	4a10      	ldr	r2, [pc, #64]	; (8010c3c <lorawan_aes_set_key+0x104>)
 8010bfa:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010bfe:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8010c02:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8010c04:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8010c06:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8010c0a:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8010c0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010c12:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8010c16:	b2d2      	uxtb	r2, r2
 8010c18:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8010c1c:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 8010c20:	46c8      	mov	r8, r9
 8010c22:	e7b6      	b.n	8010b92 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 8010c24:	4a05      	ldr	r2, [pc, #20]	; (8010c3c <lorawan_aes_set_key+0x104>)
 8010c26:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8010c2a:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8010c2c:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8010c2e:	5c51      	ldrb	r1, [r2, r1]
 8010c30:	e7af      	b.n	8010b92 <lorawan_aes_set_key+0x5a>
    return 0;
 8010c32:	2000      	movs	r0, #0
 8010c34:	e793      	b.n	8010b5e <lorawan_aes_set_key+0x26>
 8010c36:	bf00      	nop
 8010c38:	00010101 	.word	0x00010101
 8010c3c:	08017040 	.word	0x08017040

08010c40 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8010c40:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8010c44:	b31b      	cbz	r3, 8010c8e <lorawan_aes_encrypt+0x4e>
{
 8010c46:	b570      	push	{r4, r5, r6, lr}
 8010c48:	b084      	sub	sp, #16
 8010c4a:	460e      	mov	r6, r1
 8010c4c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8010c4e:	4601      	mov	r1, r0
 8010c50:	4668      	mov	r0, sp
 8010c52:	f7ff fdf3 	bl	801083c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8010c56:	2401      	movs	r4, #1
 8010c58:	e009      	b.n	8010c6e <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8010c5a:	4668      	mov	r0, sp
 8010c5c:	f7ff fe86 	bl	801096c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8010c60:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8010c64:	4668      	mov	r0, sp
 8010c66:	f7ff fe48 	bl	80108fa <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8010c6a:	3401      	adds	r4, #1
 8010c6c:	b2e4      	uxtb	r4, r4
 8010c6e:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8010c72:	42a3      	cmp	r3, r4
 8010c74:	d8f1      	bhi.n	8010c5a <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8010c76:	4668      	mov	r0, sp
 8010c78:	f7ff fe44 	bl	8010904 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8010c7c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010c80:	4669      	mov	r1, sp
 8010c82:	4630      	mov	r0, r6
 8010c84:	f7ff fdda 	bl	801083c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8010c88:	2000      	movs	r0, #0
}
 8010c8a:	b004      	add	sp, #16
 8010c8c:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8010c8e:	20ff      	movs	r0, #255	; 0xff
}
 8010c90:	4770      	bx	lr
	...

08010c94 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010c94:	2300      	movs	r3, #0
 8010c96:	2b0a      	cmp	r3, #10
 8010c98:	d817      	bhi.n	8010cca <GetKeyByID+0x36>
{
 8010c9a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010c9c:	4a0c      	ldr	r2, [pc, #48]	; (8010cd0 <GetKeyByID+0x3c>)
 8010c9e:	6814      	ldr	r4, [r2, #0]
 8010ca0:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010ca4:	4422      	add	r2, r4
 8010ca6:	7e12      	ldrb	r2, [r2, #24]
 8010ca8:	4282      	cmp	r2, r0
 8010caa:	d006      	beq.n	8010cba <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010cac:	3301      	adds	r3, #1
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	2b0a      	cmp	r3, #10
 8010cb2:	d9f3      	bls.n	8010c9c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010cb4:	2003      	movs	r0, #3
}
 8010cb6:	bc10      	pop	{r4}
 8010cb8:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010cba:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8010cbe:	f10c 0c18 	add.w	ip, ip, #24
 8010cc2:	4464      	add	r4, ip
 8010cc4:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	e7f5      	b.n	8010cb6 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010cca:	2003      	movs	r0, #3
}
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop
 8010cd0:	200010d0 	.word	0x200010d0

08010cd4 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8010cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd8:	b0cc      	sub	sp, #304	; 0x130
 8010cda:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8010cdc:	b3a9      	cbz	r1, 8010d4a <ComputeCmac+0x76>
 8010cde:	4607      	mov	r7, r0
 8010ce0:	4616      	mov	r6, r2
 8010ce2:	461c      	mov	r4, r3
 8010ce4:	4688      	mov	r8, r1
 8010ce6:	b395      	cbz	r5, 8010d4e <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8010ce8:	a802      	add	r0, sp, #8
 8010cea:	f7ff fbd5 	bl	8010498 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8010cee:	a901      	add	r1, sp, #4
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f7ff ffcf 	bl	8010c94 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	b118      	cbz	r0, 8010d02 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	b04c      	add	sp, #304	; 0x130
 8010cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8010d02:	9901      	ldr	r1, [sp, #4]
 8010d04:	3101      	adds	r1, #1
 8010d06:	a802      	add	r0, sp, #8
 8010d08:	f7ff fbd5 	bl	80104b6 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8010d0c:	b127      	cbz	r7, 8010d18 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8010d0e:	2210      	movs	r2, #16
 8010d10:	4639      	mov	r1, r7
 8010d12:	a802      	add	r0, sp, #8
 8010d14:	f7ff fbd6 	bl	80104c4 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8010d18:	4632      	mov	r2, r6
 8010d1a:	4641      	mov	r1, r8
 8010d1c:	a802      	add	r0, sp, #8
 8010d1e:	f7ff fbd1 	bl	80104c4 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8010d22:	a902      	add	r1, sp, #8
 8010d24:	a848      	add	r0, sp, #288	; 0x120
 8010d26:	f7ff fc3b 	bl	80105a0 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8010d2a:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8010d2e:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8010d32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010d36:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 8010d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d3e:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8010d42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010d46:	602b      	str	r3, [r5, #0]
 8010d48:	e7d7      	b.n	8010cfa <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8010d4a:	2402      	movs	r4, #2
 8010d4c:	e7d5      	b.n	8010cfa <ComputeCmac+0x26>
 8010d4e:	2402      	movs	r4, #2
 8010d50:	e7d3      	b.n	8010cfa <ComputeCmac+0x26>
	...

08010d54 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8010d54:	b140      	cbz	r0, 8010d68 <SecureElementInit+0x14>
{
 8010d56:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8010d58:	4a04      	ldr	r2, [pc, #16]	; (8010d6c <SecureElementInit+0x18>)
 8010d5a:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8010d5c:	22d8      	movs	r2, #216	; 0xd8
 8010d5e:	4904      	ldr	r1, [pc, #16]	; (8010d70 <SecureElementInit+0x1c>)
 8010d60:	f000 facb 	bl	80112fa <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8010d64:	2000      	movs	r0, #0
}
 8010d66:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010d68:	2002      	movs	r0, #2
}
 8010d6a:	4770      	bx	lr
 8010d6c:	200010d0 	.word	0x200010d0
 8010d70:	0803e500 	.word	0x0803e500

08010d74 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010d74:	2300      	movs	r3, #0
 8010d76:	2b0a      	cmp	r3, #10
 8010d78:	d817      	bhi.n	8010daa <SecureElementGetKeyByID+0x36>
{
 8010d7a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010d7c:	4a0c      	ldr	r2, [pc, #48]	; (8010db0 <SecureElementGetKeyByID+0x3c>)
 8010d7e:	6814      	ldr	r4, [r2, #0]
 8010d80:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010d84:	4422      	add	r2, r4
 8010d86:	7e12      	ldrb	r2, [r2, #24]
 8010d88:	4282      	cmp	r2, r0
 8010d8a:	d006      	beq.n	8010d9a <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	2b0a      	cmp	r3, #10
 8010d92:	d9f3      	bls.n	8010d7c <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010d94:	2003      	movs	r0, #3
}
 8010d96:	bc10      	pop	{r4}
 8010d98:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010d9a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8010d9e:	f10c 0c18 	add.w	ip, ip, #24
 8010da2:	4464      	add	r4, ip
 8010da4:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010da6:	2000      	movs	r0, #0
 8010da8:	e7f5      	b.n	8010d96 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010daa:	2003      	movs	r0, #3
}
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	200010d0 	.word	0x200010d0

08010db4 <PrintKey>:
{
 8010db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db8:	b099      	sub	sp, #100	; 0x64
 8010dba:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8010dbc:	a917      	add	r1, sp, #92	; 0x5c
 8010dbe:	f7ff ffd9 	bl	8010d74 <SecureElementGetKeyByID>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d042      	beq.n	8010e4e <PrintKey+0x9a>
}
 8010dc8:	b019      	add	sp, #100	; 0x64
 8010dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 8010dce:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8010dd2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8010dda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ddc:	785a      	ldrb	r2, [r3, #1]
 8010dde:	9214      	str	r2, [sp, #80]	; 0x50
 8010de0:	7899      	ldrb	r1, [r3, #2]
 8010de2:	9115      	str	r1, [sp, #84]	; 0x54
 8010de4:	78da      	ldrb	r2, [r3, #3]
 8010de6:	7919      	ldrb	r1, [r3, #4]
 8010de8:	7958      	ldrb	r0, [r3, #5]
 8010dea:	799c      	ldrb	r4, [r3, #6]
 8010dec:	79dd      	ldrb	r5, [r3, #7]
 8010dee:	7a1e      	ldrb	r6, [r3, #8]
 8010df0:	7a5f      	ldrb	r7, [r3, #9]
 8010df2:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8010df6:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8010dfa:	f893 800c 	ldrb.w	r8, [r3, #12]
 8010dfe:	f893 900d 	ldrb.w	r9, [r3, #13]
 8010e02:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8010e06:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8010e0a:	7c1b      	ldrb	r3, [r3, #16]
 8010e0c:	9310      	str	r3, [sp, #64]	; 0x40
 8010e0e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8010e12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010e16:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8010e1a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8010e1e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8010e22:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8010e26:	9709      	str	r7, [sp, #36]	; 0x24
 8010e28:	9608      	str	r6, [sp, #32]
 8010e2a:	9507      	str	r5, [sp, #28]
 8010e2c:	9406      	str	r4, [sp, #24]
 8010e2e:	9005      	str	r0, [sp, #20]
 8010e30:	9104      	str	r1, [sp, #16]
 8010e32:	9203      	str	r2, [sp, #12]
 8010e34:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010e36:	9102      	str	r1, [sp, #8]
 8010e38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e3a:	9201      	str	r2, [sp, #4]
 8010e3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e3e:	9300      	str	r3, [sp, #0]
 8010e40:	4b09      	ldr	r3, [pc, #36]	; (8010e68 <PrintKey+0xb4>)
 8010e42:	2200      	movs	r2, #0
 8010e44:	4611      	mov	r1, r2
 8010e46:	2002      	movs	r0, #2
 8010e48:	f002 f934 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8010e4c:	e7bc      	b.n	8010dc8 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010e4e:	2b0a      	cmp	r3, #10
 8010e50:	d8ba      	bhi.n	8010dc8 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 8010e52:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010e56:	4905      	ldr	r1, [pc, #20]	; (8010e6c <PrintKey+0xb8>)
 8010e58:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8010e5c:	42a2      	cmp	r2, r4
 8010e5e:	d0b6      	beq.n	8010dce <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010e60:	3301      	adds	r3, #1
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	e7f3      	b.n	8010e4e <PrintKey+0x9a>
 8010e66:	bf00      	nop
 8010e68:	08017140 	.word	0x08017140
 8010e6c:	080172d8 	.word	0x080172d8

08010e70 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8010e70:	2b0b      	cmp	r3, #11
 8010e72:	d80a      	bhi.n	8010e8a <SecureElementComputeAesCmac+0x1a>
{
 8010e74:	b500      	push	{lr}
 8010e76:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8010e78:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010e7c:	f8cd c000 	str.w	ip, [sp]
 8010e80:	f7ff ff28 	bl	8010cd4 <ComputeCmac>
}
 8010e84:	b003      	add	sp, #12
 8010e86:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010e8a:	2003      	movs	r0, #3
}
 8010e8c:	4770      	bx	lr

08010e8e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8010e8e:	b190      	cbz	r0, 8010eb6 <SecureElementVerifyAesCmac+0x28>
{
 8010e90:	b510      	push	{r4, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	468c      	mov	ip, r1
 8010e96:	4614      	mov	r4, r2
 8010e98:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8010e9e:	aa03      	add	r2, sp, #12
 8010ea0:	9200      	str	r2, [sp, #0]
 8010ea2:	4662      	mov	r2, ip
 8010ea4:	f7ff ff16 	bl	8010cd4 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010ea8:	b918      	cbnz	r0, 8010eb2 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8010eaa:	9b03      	ldr	r3, [sp, #12]
 8010eac:	42a3      	cmp	r3, r4
 8010eae:	d000      	beq.n	8010eb2 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010eb0:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8010eb2:	b004      	add	sp, #16
 8010eb4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010eb6:	2002      	movs	r0, #2
}
 8010eb8:	4770      	bx	lr

08010eba <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8010eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ebe:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8010ec0:	b348      	cbz	r0, 8010f16 <SecureElementAesEncrypt+0x5c>
 8010ec2:	460d      	mov	r5, r1
 8010ec4:	4614      	mov	r4, r2
 8010ec6:	461e      	mov	r6, r3
 8010ec8:	4607      	mov	r7, r0
 8010eca:	b33b      	cbz	r3, 8010f1c <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8010ecc:	f011 0f0f 	tst.w	r1, #15
 8010ed0:	d127      	bne.n	8010f22 <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8010ed2:	22f0      	movs	r2, #240	; 0xf0
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	a801      	add	r0, sp, #4
 8010ed8:	f000 fa27 	bl	801132a <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8010edc:	4669      	mov	r1, sp
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f7ff fed8 	bl	8010c94 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010ee4:	4680      	mov	r8, r0
 8010ee6:	b118      	cbz	r0, 8010ef0 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8010ee8:	4640      	mov	r0, r8
 8010eea:	b03e      	add	sp, #248	; 0xf8
 8010eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8010ef0:	aa01      	add	r2, sp, #4
 8010ef2:	2110      	movs	r1, #16
 8010ef4:	9800      	ldr	r0, [sp, #0]
 8010ef6:	3001      	adds	r0, #1
 8010ef8:	f7ff fe1e 	bl	8010b38 <lorawan_aes_set_key>
        uint8_t block = 0;
 8010efc:	4644      	mov	r4, r8
        while( size != 0 )
 8010efe:	e007      	b.n	8010f10 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8010f00:	aa01      	add	r2, sp, #4
 8010f02:	1931      	adds	r1, r6, r4
 8010f04:	1938      	adds	r0, r7, r4
 8010f06:	f7ff fe9b 	bl	8010c40 <lorawan_aes_encrypt>
            block = block + 16;
 8010f0a:	3410      	adds	r4, #16
 8010f0c:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 8010f0e:	3d10      	subs	r5, #16
        while( size != 0 )
 8010f10:	2d00      	cmp	r5, #0
 8010f12:	d1f5      	bne.n	8010f00 <SecureElementAesEncrypt+0x46>
 8010f14:	e7e8      	b.n	8010ee8 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8010f16:	f04f 0802 	mov.w	r8, #2
 8010f1a:	e7e5      	b.n	8010ee8 <SecureElementAesEncrypt+0x2e>
 8010f1c:	f04f 0802 	mov.w	r8, #2
 8010f20:	e7e2      	b.n	8010ee8 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010f22:	f04f 0805 	mov.w	r8, #5
 8010f26:	e7df      	b.n	8010ee8 <SecureElementAesEncrypt+0x2e>

08010f28 <SecureElementSetKey>:
{
 8010f28:	b530      	push	{r4, r5, lr}
 8010f2a:	b085      	sub	sp, #20
    if( key == NULL )
 8010f2c:	2900      	cmp	r1, #0
 8010f2e:	d038      	beq.n	8010fa2 <SecureElementSetKey+0x7a>
 8010f30:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010f32:	2300      	movs	r3, #0
 8010f34:	2b0a      	cmp	r3, #10
 8010f36:	d830      	bhi.n	8010f9a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010f38:	4a1b      	ldr	r2, [pc, #108]	; (8010fa8 <SecureElementSetKey+0x80>)
 8010f3a:	6811      	ldr	r1, [r2, #0]
 8010f3c:	461c      	mov	r4, r3
 8010f3e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010f42:	440a      	add	r2, r1
 8010f44:	7e12      	ldrb	r2, [r2, #24]
 8010f46:	4282      	cmp	r2, r0
 8010f48:	d002      	beq.n	8010f50 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	e7f1      	b.n	8010f34 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8010f50:	280d      	cmp	r0, #13
 8010f52:	d00a      	beq.n	8010f6a <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010f54:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8010f58:	3418      	adds	r4, #24
 8010f5a:	1908      	adds	r0, r1, r4
 8010f5c:	2210      	movs	r2, #16
 8010f5e:	4661      	mov	r1, ip
 8010f60:	3001      	adds	r0, #1
 8010f62:	f000 f9ca 	bl	80112fa <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8010f66:	2500      	movs	r5, #0
 8010f68:	e018      	b.n	8010f9c <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	9300      	str	r3, [sp, #0]
 8010f6e:	9301      	str	r3, [sp, #4]
 8010f70:	9302      	str	r3, [sp, #8]
 8010f72:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8010f74:	466b      	mov	r3, sp
 8010f76:	220c      	movs	r2, #12
 8010f78:	2110      	movs	r1, #16
 8010f7a:	4660      	mov	r0, ip
 8010f7c:	f7ff ff9d 	bl	8010eba <SecureElementAesEncrypt>
 8010f80:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010f82:	4b09      	ldr	r3, [pc, #36]	; (8010fa8 <SecureElementSetKey+0x80>)
 8010f84:	6818      	ldr	r0, [r3, #0]
 8010f86:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8010f8a:	3418      	adds	r4, #24
 8010f8c:	4420      	add	r0, r4
 8010f8e:	2210      	movs	r2, #16
 8010f90:	4669      	mov	r1, sp
 8010f92:	3001      	adds	r0, #1
 8010f94:	f000 f9b1 	bl	80112fa <memcpy1>
                return retval;
 8010f98:	e000      	b.n	8010f9c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010f9a:	2503      	movs	r5, #3
}
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	b005      	add	sp, #20
 8010fa0:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010fa2:	2502      	movs	r5, #2
 8010fa4:	e7fa      	b.n	8010f9c <SecureElementSetKey+0x74>
 8010fa6:	bf00      	nop
 8010fa8:	200010d0 	.word	0x200010d0

08010fac <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8010fac:	b1d0      	cbz	r0, 8010fe4 <SecureElementDeriveAndStoreKey+0x38>
{
 8010fae:	b510      	push	{r4, lr}
 8010fb0:	b084      	sub	sp, #16
 8010fb2:	4614      	mov	r4, r2
 8010fb4:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8010fb6:	2a0c      	cmp	r2, #12
 8010fb8:	d101      	bne.n	8010fbe <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8010fba:	290b      	cmp	r1, #11
 8010fbc:	d114      	bne.n	8010fe8 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	9301      	str	r3, [sp, #4]
 8010fc4:	9302      	str	r3, [sp, #8]
 8010fc6:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8010fc8:	466b      	mov	r3, sp
 8010fca:	460a      	mov	r2, r1
 8010fcc:	2110      	movs	r1, #16
 8010fce:	4660      	mov	r0, ip
 8010fd0:	f7ff ff73 	bl	8010eba <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010fd4:	b108      	cbz	r0, 8010fda <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8010fd6:	b004      	add	sp, #16
 8010fd8:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8010fda:	4669      	mov	r1, sp
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f7ff ffa3 	bl	8010f28 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010fe2:	e7f8      	b.n	8010fd6 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8010fe4:	2002      	movs	r0, #2
}
 8010fe6:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010fe8:	2003      	movs	r0, #3
 8010fea:	e7f4      	b.n	8010fd6 <SecureElementDeriveAndStoreKey+0x2a>

08010fec <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8010fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fee:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8010ff2:	9c07      	ldr	r4, [sp, #28]
 8010ff4:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8010ff6:	b35b      	cbz	r3, 8011050 <SecureElementProcessJoinAccept+0x64>
 8010ff8:	461f      	mov	r7, r3
 8010ffa:	b35c      	cbz	r4, 8011054 <SecureElementProcessJoinAccept+0x68>
 8010ffc:	b366      	cbz	r6, 8011058 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010ffe:	2d21      	cmp	r5, #33	; 0x21
 8011000:	d82c      	bhi.n	801105c <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8011002:	462a      	mov	r2, r5
 8011004:	4619      	mov	r1, r3
 8011006:	4620      	mov	r0, r4
 8011008:	f000 f977 	bl	80112fa <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801100c:	1c63      	adds	r3, r4, #1
 801100e:	2201      	movs	r2, #1
 8011010:	1e69      	subs	r1, r5, #1
 8011012:	18b8      	adds	r0, r7, r2
 8011014:	f7ff ff51 	bl	8010eba <SecureElementAesEncrypt>
 8011018:	bb10      	cbnz	r0, 8011060 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801101a:	7ae3      	ldrb	r3, [r4, #11]
 801101c:	09db      	lsrs	r3, r3, #7
 801101e:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8011020:	1961      	adds	r1, r4, r5
 8011022:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8011026:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 801102a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 801102e:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8011032:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8011036:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 801103a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 801103e:	b98b      	cbnz	r3, 8011064 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8011040:	2301      	movs	r3, #1
 8011042:	1f29      	subs	r1, r5, #4
 8011044:	4620      	mov	r0, r4
 8011046:	f7ff ff22 	bl	8010e8e <SecureElementVerifyAesCmac>
 801104a:	b140      	cbz	r0, 801105e <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801104c:	2001      	movs	r0, #1
 801104e:	e006      	b.n	801105e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8011050:	2002      	movs	r0, #2
 8011052:	e004      	b.n	801105e <SecureElementProcessJoinAccept+0x72>
 8011054:	2002      	movs	r0, #2
 8011056:	e002      	b.n	801105e <SecureElementProcessJoinAccept+0x72>
 8011058:	2002      	movs	r0, #2
 801105a:	e000      	b.n	801105e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801105c:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 801105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8011060:	2007      	movs	r0, #7
 8011062:	e7fc      	b.n	801105e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8011064:	2004      	movs	r0, #4
 8011066:	e7fa      	b.n	801105e <SecureElementProcessJoinAccept+0x72>

08011068 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8011068:	b140      	cbz	r0, 801107c <SecureElementSetDevEui+0x14>
{
 801106a:	b508      	push	{r3, lr}
 801106c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 801106e:	2208      	movs	r2, #8
 8011070:	4b03      	ldr	r3, [pc, #12]	; (8011080 <SecureElementSetDevEui+0x18>)
 8011072:	6818      	ldr	r0, [r3, #0]
 8011074:	f000 f941 	bl	80112fa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8011078:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801107a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801107c:	2002      	movs	r0, #2
}
 801107e:	4770      	bx	lr
 8011080:	200010d0 	.word	0x200010d0

08011084 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8011084:	b138      	cbz	r0, 8011096 <SecureElementGetDevEui+0x12>
{
 8011086:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8011088:	2208      	movs	r2, #8
 801108a:	4904      	ldr	r1, [pc, #16]	; (801109c <SecureElementGetDevEui+0x18>)
 801108c:	6809      	ldr	r1, [r1, #0]
 801108e:	f000 f934 	bl	80112fa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8011092:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8011094:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8011096:	2002      	movs	r0, #2
}
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	200010d0 	.word	0x200010d0

080110a0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 80110a0:	b148      	cbz	r0, 80110b6 <SecureElementSetJoinEui+0x16>
{
 80110a2:	b508      	push	{r3, lr}
 80110a4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 80110a6:	4b05      	ldr	r3, [pc, #20]	; (80110bc <SecureElementSetJoinEui+0x1c>)
 80110a8:	6818      	ldr	r0, [r3, #0]
 80110aa:	2208      	movs	r2, #8
 80110ac:	4410      	add	r0, r2
 80110ae:	f000 f924 	bl	80112fa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80110b2:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80110b4:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80110b6:	2002      	movs	r0, #2
}
 80110b8:	4770      	bx	lr
 80110ba:	bf00      	nop
 80110bc:	200010d0 	.word	0x200010d0

080110c0 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 80110c0:	b140      	cbz	r0, 80110d4 <SecureElementGetJoinEui+0x14>
{
 80110c2:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 80110c4:	4a04      	ldr	r2, [pc, #16]	; (80110d8 <SecureElementGetJoinEui+0x18>)
 80110c6:	6811      	ldr	r1, [r2, #0]
 80110c8:	2208      	movs	r2, #8
 80110ca:	4411      	add	r1, r2
 80110cc:	f000 f915 	bl	80112fa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80110d0:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80110d2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80110d4:	2002      	movs	r0, #2
}
 80110d6:	4770      	bx	lr
 80110d8:	200010d0 	.word	0x200010d0

080110dc <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 80110dc:	2802      	cmp	r0, #2
 80110de:	d004      	beq.n	80110ea <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 80110e0:	4b04      	ldr	r3, [pc, #16]	; (80110f4 <SecureElementSetDevAddr+0x18>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80110e6:	2000      	movs	r0, #0
 80110e8:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 80110ea:	4b02      	ldr	r3, [pc, #8]	; (80110f4 <SecureElementSetDevAddr+0x18>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	6119      	str	r1, [r3, #16]
 80110f0:	e7f9      	b.n	80110e6 <SecureElementSetDevAddr+0xa>
 80110f2:	bf00      	nop
 80110f4:	200010d0 	.word	0x200010d0

080110f8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 80110f8:	b169      	cbz	r1, 8011116 <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80110fa:	2802      	cmp	r0, #2
 80110fc:	d005      	beq.n	801110a <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80110fe:	4a07      	ldr	r2, [pc, #28]	; (801111c <SecureElementGetDevAddr+0x24>)
 8011100:	6812      	ldr	r2, [r2, #0]
 8011102:	6952      	ldr	r2, [r2, #20]
 8011104:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8011106:	2000      	movs	r0, #0
 8011108:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 801110a:	4a04      	ldr	r2, [pc, #16]	; (801111c <SecureElementGetDevAddr+0x24>)
 801110c:	6812      	ldr	r2, [r2, #0]
 801110e:	6912      	ldr	r2, [r2, #16]
 8011110:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8011112:	2000      	movs	r0, #0
 8011114:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8011116:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	200010d0 	.word	0x200010d0

08011120 <SecureElementInitMcuID>:
{
 8011120:	b530      	push	{r4, r5, lr}
 8011122:	b085      	sub	sp, #20
 8011124:	4605      	mov	r5, r0
 8011126:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8011128:	2300      	movs	r3, #0
 801112a:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 801112c:	a802      	add	r0, sp, #8
 801112e:	f7ff ffa9 	bl	8011084 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8011132:	a901      	add	r1, sp, #4
 8011134:	2001      	movs	r0, #1
 8011136:	f7ff ffdf 	bl	80110f8 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 801113a:	b195      	cbz	r5, 8011162 <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 801113c:	2300      	movs	r3, #0
 801113e:	2b07      	cmp	r3, #7
 8011140:	d808      	bhi.n	8011154 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 8011142:	f103 0210 	add.w	r2, r3, #16
 8011146:	446a      	add	r2, sp
 8011148:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 801114c:	b9aa      	cbnz	r2, 801117a <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 801114e:	3301      	adds	r3, #1
 8011150:	b2db      	uxtb	r3, r3
 8011152:	e7f4      	b.n	801113e <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 8011154:	2300      	movs	r3, #0
        if( id_init == false )
 8011156:	b923      	cbnz	r3, 8011162 <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8011158:	a802      	add	r0, sp, #8
 801115a:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 801115c:	a802      	add	r0, sp, #8
 801115e:	f7ff ff83 	bl	8011068 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8011162:	b13c      	cbz	r4, 8011174 <SecureElementInitMcuID+0x54>
 8011164:	9b01      	ldr	r3, [sp, #4]
 8011166:	b92b      	cbnz	r3, 8011174 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8011168:	a801      	add	r0, sp, #4
 801116a:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 801116c:	9901      	ldr	r1, [sp, #4]
 801116e:	2001      	movs	r0, #1
 8011170:	f7ff ffb4 	bl	80110dc <SecureElementSetDevAddr>
}
 8011174:	2000      	movs	r0, #0
 8011176:	b005      	add	sp, #20
 8011178:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 801117a:	2301      	movs	r3, #1
 801117c:	e7eb      	b.n	8011156 <SecureElementInitMcuID+0x36>
	...

08011180 <PrintIds>:
{
 8011180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011182:	b08f      	sub	sp, #60	; 0x3c
 8011184:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8011186:	2400      	movs	r4, #0
 8011188:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 801118a:	a80a      	add	r0, sp, #40	; 0x28
 801118c:	f7ff ff7a 	bl	8011084 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8011190:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011194:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8011198:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 801119c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 80111a0:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80111a4:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 80111a8:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 80111ac:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 80111b0:	f8cd e01c 	str.w	lr, [sp, #28]
 80111b4:	f8cd c018 	str.w	ip, [sp, #24]
 80111b8:	9705      	str	r7, [sp, #20]
 80111ba:	9604      	str	r6, [sp, #16]
 80111bc:	9003      	str	r0, [sp, #12]
 80111be:	9102      	str	r1, [sp, #8]
 80111c0:	9201      	str	r2, [sp, #4]
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	4b20      	ldr	r3, [pc, #128]	; (8011248 <PrintIds+0xc8>)
 80111c6:	4622      	mov	r2, r4
 80111c8:	4621      	mov	r1, r4
 80111ca:	2002      	movs	r0, #2
 80111cc:	f001 ff72 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 80111d0:	a80c      	add	r0, sp, #48	; 0x30
 80111d2:	f7ff ff75 	bl	80110c0 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 80111d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80111da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80111de:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80111e2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 80111e6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80111ea:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 80111ee:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 80111f2:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 80111f6:	f8cd e01c 	str.w	lr, [sp, #28]
 80111fa:	f8cd c018 	str.w	ip, [sp, #24]
 80111fe:	9705      	str	r7, [sp, #20]
 8011200:	9604      	str	r6, [sp, #16]
 8011202:	9003      	str	r0, [sp, #12]
 8011204:	9102      	str	r1, [sp, #8]
 8011206:	9201      	str	r2, [sp, #4]
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	4b10      	ldr	r3, [pc, #64]	; (801124c <PrintIds+0xcc>)
 801120c:	4622      	mov	r2, r4
 801120e:	4621      	mov	r1, r4
 8011210:	2002      	movs	r0, #2
 8011212:	f001 ff4f 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8011216:	a909      	add	r1, sp, #36	; 0x24
 8011218:	4628      	mov	r0, r5
 801121a:	f7ff ff6d 	bl	80110f8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 801121e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8011222:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8011226:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 801122a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801122e:	9003      	str	r0, [sp, #12]
 8011230:	9102      	str	r1, [sp, #8]
 8011232:	9201      	str	r2, [sp, #4]
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	4b06      	ldr	r3, [pc, #24]	; (8011250 <PrintIds+0xd0>)
 8011238:	4622      	mov	r2, r4
 801123a:	4621      	mov	r1, r4
 801123c:	2002      	movs	r0, #2
 801123e:	f001 ff39 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 8011242:	b00f      	add	sp, #60	; 0x3c
 8011244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011246:	bf00      	nop
 8011248:	0801719c 	.word	0x0801719c
 801124c:	080171dc 	.word	0x080171dc
 8011250:	0801721c 	.word	0x0801721c

08011254 <SecureElementPrintKeys>:
{
 8011254:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8011256:	2000      	movs	r0, #0
 8011258:	f7ff fdac 	bl	8010db4 <PrintKey>
    PrintKey( NWK_KEY );
 801125c:	2001      	movs	r0, #1
 801125e:	f7ff fda9 	bl	8010db4 <PrintKey>
    PrintKey( APP_S_KEY );
 8011262:	2009      	movs	r0, #9
 8011264:	f7ff fda6 	bl	8010db4 <PrintKey>
    PrintKey( NWK_S_KEY );
 8011268:	2008      	movs	r0, #8
 801126a:	f7ff fda3 	bl	8010db4 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 801126e:	2000      	movs	r0, #0
 8011270:	f7ff ff86 	bl	8011180 <PrintIds>
}
 8011274:	2000      	movs	r0, #0
 8011276:	bd08      	pop	{r3, pc}

08011278 <SecureElementPrintSessionKeys>:
{
 8011278:	b510      	push	{r4, lr}
 801127a:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 801127c:	200b      	movs	r0, #11
 801127e:	f7ff fd99 	bl	8010db4 <PrintKey>
    PrintKey( MC_KE_KEY );
 8011282:	200c      	movs	r0, #12
 8011284:	f7ff fd96 	bl	8010db4 <PrintKey>
    PrintKey( APP_S_KEY );
 8011288:	2009      	movs	r0, #9
 801128a:	f7ff fd93 	bl	8010db4 <PrintKey>
    PrintKey( NWK_S_KEY );
 801128e:	2008      	movs	r0, #8
 8011290:	f7ff fd90 	bl	8010db4 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8011294:	200a      	movs	r0, #10
 8011296:	f7ff fd8d 	bl	8010db4 <PrintKey>
    PrintIds( mode );
 801129a:	4620      	mov	r0, r4
 801129c:	f7ff ff70 	bl	8011180 <PrintIds>
}
 80112a0:	2000      	movs	r0, #0
 80112a2:	bd10      	pop	{r4, pc}

080112a4 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80112a4:	4b09      	ldr	r3, [pc, #36]	; (80112cc <rand1+0x28>)
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	4909      	ldr	r1, [pc, #36]	; (80112d0 <rand1+0x2c>)
 80112aa:	f243 0039 	movw	r0, #12345	; 0x3039
 80112ae:	fb01 0002 	mla	r0, r1, r2, r0
 80112b2:	6018      	str	r0, [r3, #0]
 80112b4:	2303      	movs	r3, #3
 80112b6:	fba3 2300 	umull	r2, r3, r3, r0
 80112ba:	1ac2      	subs	r2, r0, r3
 80112bc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80112c0:	0f9b      	lsrs	r3, r3, #30
 80112c2:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 80112c6:	1ac0      	subs	r0, r0, r3
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop
 80112cc:	200000f8 	.word	0x200000f8
 80112d0:	41c64e6d 	.word	0x41c64e6d

080112d4 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80112d4:	4b01      	ldr	r3, [pc, #4]	; (80112dc <srand1+0x8>)
 80112d6:	6018      	str	r0, [r3, #0]
}
 80112d8:	4770      	bx	lr
 80112da:	bf00      	nop
 80112dc:	200000f8 	.word	0x200000f8

080112e0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80112e0:	b538      	push	{r3, r4, r5, lr}
 80112e2:	4605      	mov	r5, r0
 80112e4:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80112e6:	f7ff ffdd 	bl	80112a4 <rand1>
 80112ea:	1b61      	subs	r1, r4, r5
 80112ec:	3101      	adds	r1, #1
 80112ee:	fb90 f3f1 	sdiv	r3, r0, r1
 80112f2:	fb01 0013 	mls	r0, r1, r3, r0
}
 80112f6:	4428      	add	r0, r5
 80112f8:	bd38      	pop	{r3, r4, r5, pc}

080112fa <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80112fa:	e004      	b.n	8011306 <memcpy1+0xc>
    {
        *dst++ = *src++;
 80112fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011300:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8011304:	461a      	mov	r2, r3
 8011306:	1e53      	subs	r3, r2, #1
 8011308:	b29b      	uxth	r3, r3
 801130a:	2a00      	cmp	r2, #0
 801130c:	d1f6      	bne.n	80112fc <memcpy1+0x2>
    }
}
 801130e:	4770      	bx	lr

08011310 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8011310:	1e53      	subs	r3, r2, #1
 8011312:	4418      	add	r0, r3
    while( size-- )
 8011314:	e004      	b.n	8011320 <memcpyr+0x10>
    {
        *dst-- = *src++;
 8011316:	f811 2b01 	ldrb.w	r2, [r1], #1
 801131a:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 801131e:	461a      	mov	r2, r3
 8011320:	1e53      	subs	r3, r2, #1
 8011322:	b29b      	uxth	r3, r3
 8011324:	2a00      	cmp	r2, #0
 8011326:	d1f6      	bne.n	8011316 <memcpyr+0x6>
    }
}
 8011328:	4770      	bx	lr

0801132a <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 801132a:	e002      	b.n	8011332 <memset1+0x8>
    {
        *dst++ = value;
 801132c:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8011330:	461a      	mov	r2, r3
 8011332:	1e53      	subs	r3, r2, #1
 8011334:	b29b      	uxth	r3, r3
 8011336:	2a00      	cmp	r2, #0
 8011338:	d1f8      	bne.n	801132c <memset1+0x2>
    }
}
 801133a:	4770      	bx	lr

0801133c <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 801133c:	b1f0      	cbz	r0, 801137c <Crc32+0x40>
{
 801133e:	b510      	push	{r4, lr}
 8011340:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8011342:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8011346:	f04f 30ff 	mov.w	r0, #4294967295
 801134a:	e00e      	b.n	801136a <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801134c:	f340 0c00 	sbfx	ip, r0, #0, #1
 8011350:	4a0b      	ldr	r2, [pc, #44]	; (8011380 <Crc32+0x44>)
 8011352:	ea0c 0202 	and.w	r2, ip, r2
 8011356:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 801135a:	3301      	adds	r3, #1
 801135c:	b29b      	uxth	r3, r3
 801135e:	2b07      	cmp	r3, #7
 8011360:	d9f4      	bls.n	801134c <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8011362:	f10e 0e01 	add.w	lr, lr, #1
 8011366:	fa1f fe8e 	uxth.w	lr, lr
 801136a:	458e      	cmp	lr, r1
 801136c:	d204      	bcs.n	8011378 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 801136e:	f814 300e 	ldrb.w	r3, [r4, lr]
 8011372:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8011374:	2300      	movs	r3, #0
 8011376:	e7f2      	b.n	801135e <Crc32+0x22>
        }
    }

    return ~crc;
 8011378:	43c0      	mvns	r0, r0
}
 801137a:	bd10      	pop	{r4, pc}
        return 0;
 801137c:	2000      	movs	r0, #0
}
 801137e:	4770      	bx	lr
 8011380:	edb88320 	.word	0xedb88320

08011384 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8011384:	2001      	movs	r0, #1
 8011386:	4770      	bx	lr

08011388 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8011388:	280a      	cmp	r0, #10
 801138a:	d807      	bhi.n	801139c <RadioGetLoRaBandwidthInHz+0x14>
 801138c:	e8df f000 	tbb	[pc, r0]
 8011390:	17110b20 	.word	0x17110b20
 8011394:	061e1c1a 	.word	0x061e1c1a
 8011398:	0e08      	.short	0x0e08
 801139a:	14          	.byte	0x14
 801139b:	00          	.byte	0x00
 801139c:	2000      	movs	r0, #0
 801139e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80113a0:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 80113a4:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80113a6:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 80113aa:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80113ac:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 80113b0:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80113b2:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 80113b6:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80113b8:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 80113bc:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80113be:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 80113c2:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80113c4:	4804      	ldr	r0, [pc, #16]	; (80113d8 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 80113c6:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80113c8:	4804      	ldr	r0, [pc, #16]	; (80113dc <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80113ca:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80113cc:	4804      	ldr	r0, [pc, #16]	; (80113e0 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80113ce:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80113d0:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop
 80113d8:	0001e848 	.word	0x0001e848
 80113dc:	0003d090 	.word	0x0003d090
 80113e0:	0007a120 	.word	0x0007a120

080113e4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80113e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 80113e8:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80113ea:	b953      	cbnz	r3, 8011402 <RadioGetGfskTimeOnAirNumerator+0x1e>
 80113ec:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 80113ee:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80113f0:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80113f2:	b141      	cbz	r1, 8011406 <RadioGetGfskTimeOnAirNumerator+0x22>
 80113f4:	2302      	movs	r3, #2
 80113f6:	f89d 0000 	ldrb.w	r0, [sp]
 80113fa:	4418      	add	r0, r3
}
 80113fc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8011400:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8011402:	2300      	movs	r3, #0
 8011404:	e7f3      	b.n	80113ee <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8011406:	2300      	movs	r3, #0
 8011408:	e7f5      	b.n	80113f6 <RadioGetGfskTimeOnAirNumerator+0x12>

0801140a <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801140a:	b570      	push	{r4, r5, r6, lr}
 801140c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8011410:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8011414:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8011416:	f1a1 0c05 	sub.w	ip, r1, #5
 801141a:	f1bc 0f01 	cmp.w	ip, #1
 801141e:	d931      	bls.n	8011484 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011420:	b918      	cbnz	r0, 801142a <RadioGetLoRaTimeOnAirNumerator+0x20>
 8011422:	f1a1 060b 	sub.w	r6, r1, #11
 8011426:	2e01      	cmp	r6, #1
 8011428:	d934      	bls.n	8011494 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 801142a:	2801      	cmp	r0, #1
 801142c:	d02e      	beq.n	801148c <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 801142e:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8011430:	f89d c014 	ldrb.w	ip, [sp, #20]
 8011434:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8011438:	b385      	cbz	r5, 801149c <RadioGetLoRaTimeOnAirNumerator+0x92>
 801143a:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801143c:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 801143e:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8011440:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8011444:	b364      	cbz	r4, 80114a0 <RadioGetLoRaTimeOnAirNumerator+0x96>
 8011446:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 801144a:	44f4      	add	ip, lr

    if( datarate <= 6 )
 801144c:	2906      	cmp	r1, #6
 801144e:	d904      	bls.n	801145a <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8011450:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8011454:	b10e      	cbz	r6, 801145a <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8011456:	1e88      	subs	r0, r1, #2
 8011458:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 801145a:	f1bc 0f00 	cmp.w	ip, #0
 801145e:	db22      	blt.n	80114a6 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8011460:	4484      	add	ip, r0
 8011462:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011466:	fb9c fcf0 	sdiv	ip, ip, r0
 801146a:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 801146e:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8011472:	2906      	cmp	r1, #6
 8011474:	d801      	bhi.n	801147a <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8011476:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801147a:	0080      	lsls	r0, r0, #2
 801147c:	3001      	adds	r0, #1
 801147e:	3902      	subs	r1, #2
}
 8011480:	4088      	lsls	r0, r1
 8011482:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8011484:	2b0b      	cmp	r3, #11
 8011486:	d8cb      	bhi.n	8011420 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8011488:	230c      	movs	r3, #12
 801148a:	e7c9      	b.n	8011420 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801148c:	290c      	cmp	r1, #12
 801148e:	d003      	beq.n	8011498 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8011490:	2600      	movs	r6, #0
 8011492:	e7cd      	b.n	8011430 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8011494:	2601      	movs	r6, #1
 8011496:	e7cb      	b.n	8011430 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8011498:	2601      	movs	r6, #1
 801149a:	e7c9      	b.n	8011430 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 801149c:	2000      	movs	r0, #0
 801149e:	e7cd      	b.n	801143c <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 80114a0:	f04f 0e14 	mov.w	lr, #20
 80114a4:	e7d1      	b.n	801144a <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 80114a6:	f04f 0c00 	mov.w	ip, #0
 80114aa:	e7d9      	b.n	8011460 <RadioGetLoRaTimeOnAirNumerator+0x56>

080114ac <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80114ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ae:	b085      	sub	sp, #20
 80114b0:	460e      	mov	r6, r1
 80114b2:	4615      	mov	r5, r2
 80114b4:	4619      	mov	r1, r3
 80114b6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80114ba:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80114be:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80114c2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80114c6:	b148      	cbz	r0, 80114dc <RadioTimeOnAir+0x30>
 80114c8:	2801      	cmp	r0, #1
 80114ca:	d012      	beq.n	80114f2 <RadioTimeOnAir+0x46>
 80114cc:	2501      	movs	r5, #1
 80114ce:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80114d0:	442c      	add	r4, r5
 80114d2:	1e60      	subs	r0, r4, #1
}
 80114d4:	fbb0 f0f5 	udiv	r0, r0, r5
 80114d8:	b005      	add	sp, #20
 80114da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80114dc:	f8cd c004 	str.w	ip, [sp, #4]
 80114e0:	9700      	str	r7, [sp, #0]
 80114e2:	4628      	mov	r0, r5
 80114e4:	f7ff ff7e 	bl	80113e4 <RadioGetGfskTimeOnAirNumerator>
 80114e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80114ec:	fb03 f400 	mul.w	r4, r3, r0
        break;
 80114f0:	e7ee      	b.n	80114d0 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80114f2:	f8cd c008 	str.w	ip, [sp, #8]
 80114f6:	9701      	str	r7, [sp, #4]
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	4613      	mov	r3, r2
 80114fc:	460a      	mov	r2, r1
 80114fe:	4629      	mov	r1, r5
 8011500:	4630      	mov	r0, r6
 8011502:	f7ff ff82 	bl	801140a <RadioGetLoRaTimeOnAirNumerator>
 8011506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801150a:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801150e:	4b03      	ldr	r3, [pc, #12]	; (801151c <RadioTimeOnAir+0x70>)
 8011510:	5d98      	ldrb	r0, [r3, r6]
 8011512:	f7ff ff39 	bl	8011388 <RadioGetLoRaBandwidthInHz>
 8011516:	4605      	mov	r5, r0
        break;
 8011518:	e7da      	b.n	80114d0 <RadioTimeOnAir+0x24>
 801151a:	bf00      	nop
 801151c:	080173c8 	.word	0x080173c8

08011520 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8011520:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8011522:	4b05      	ldr	r3, [pc, #20]	; (8011538 <RadioOnTxTimeoutProcess+0x18>)
 8011524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011528:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801152a:	4b04      	ldr	r3, [pc, #16]	; (801153c <RadioOnTxTimeoutProcess+0x1c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	b113      	cbz	r3, 8011536 <RadioOnTxTimeoutProcess+0x16>
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	b103      	cbz	r3, 8011536 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8011534:	4798      	blx	r3
    }
}
 8011536:	bd08      	pop	{r3, pc}
 8011538:	48000400 	.word	0x48000400
 801153c:	200011d4 	.word	0x200011d4

08011540 <RadioOnTxTimeoutIrq>:
{
 8011540:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8011542:	f7ff ffed 	bl	8011520 <RadioOnTxTimeoutProcess>
}
 8011546:	bd08      	pop	{r3, pc}

08011548 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8011548:	b508      	push	{r3, lr}
 801154a:	4b05      	ldr	r3, [pc, #20]	; (8011560 <RadioOnRxTimeoutProcess+0x18>)
 801154c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011550:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011552:	4b04      	ldr	r3, [pc, #16]	; (8011564 <RadioOnRxTimeoutProcess+0x1c>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	b113      	cbz	r3, 801155e <RadioOnRxTimeoutProcess+0x16>
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	b103      	cbz	r3, 801155e <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 801155c:	4798      	blx	r3
    }
}
 801155e:	bd08      	pop	{r3, pc}
 8011560:	48000400 	.word	0x48000400
 8011564:	200011d4 	.word	0x200011d4

08011568 <RadioOnRxTimeoutIrq>:
{
 8011568:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 801156a:	f7ff ffed 	bl	8011548 <RadioOnRxTimeoutProcess>
}
 801156e:	bd08      	pop	{r3, pc}

08011570 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8011570:	f04f 30ff 	mov.w	r0, #4294967295
 8011574:	4770      	bx	lr

08011576 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8011576:	f04f 30ff 	mov.w	r0, #4294967295
 801157a:	4770      	bx	lr

0801157c <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 801157c:	2001      	movs	r0, #1
 801157e:	4770      	bx	lr

08011580 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8011580:	2001      	movs	r0, #1
 8011582:	4770      	bx	lr

08011584 <RadioWrite>:
{
 8011584:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8011586:	f000 fe37 	bl	80121f8 <SUBGRF_WriteRegister>
}
 801158a:	bd08      	pop	{r3, pc}

0801158c <RadioTxCw>:
{
 801158c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801158e:	f001 fbcf 	bl	8012d30 <SUBGRF_SetRfTxPower>
 8011592:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011594:	210e      	movs	r1, #14
 8011596:	f640 101f 	movw	r0, #2335	; 0x91f
 801159a:	f000 fe2d 	bl	80121f8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801159e:	2101      	movs	r1, #1
 80115a0:	4620      	mov	r0, r4
 80115a2:	f001 fbb1 	bl	8012d08 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80115a6:	f000 fff7 	bl	8012598 <SUBGRF_SetTxContinuousWave>
}
 80115aa:	bd10      	pop	{r4, pc}

080115ac <RadioTxPrbs>:
{
 80115ac:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80115ae:	2101      	movs	r1, #1
 80115b0:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <RadioTxPrbs+0x24>)
 80115b2:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80115b6:	f001 fba7 	bl	8012d08 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80115ba:	212d      	movs	r1, #45	; 0x2d
 80115bc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80115c0:	f7ff ffe0 	bl	8011584 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80115c4:	f000 ffef 	bl	80125a6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80115c8:	4802      	ldr	r0, [pc, #8]	; (80115d4 <RadioTxPrbs+0x28>)
 80115ca:	f000 ff25 	bl	8012418 <SUBGRF_SetTx>
}
 80115ce:	bd08      	pop	{r3, pc}
 80115d0:	200011f0 	.word	0x200011f0
 80115d4:	000fffff 	.word	0x000fffff

080115d8 <RadioSetRxDutyCycle>:
{
 80115d8:	b570      	push	{r4, r5, r6, lr}
 80115da:	4604      	mov	r4, r0
 80115dc:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80115de:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80115e2:	4e09      	ldr	r6, [pc, #36]	; (8011608 <RadioSetRxDutyCycle+0x30>)
 80115e4:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80115e6:	2300      	movs	r3, #0
 80115e8:	461a      	mov	r2, r3
 80115ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80115ee:	4608      	mov	r0, r1
 80115f0:	f001 f8a5 	bl	801273e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80115f4:	2100      	movs	r1, #0
 80115f6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80115fa:	f001 fb85 	bl	8012d08 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80115fe:	4629      	mov	r1, r5
 8011600:	4620      	mov	r0, r4
 8011602:	f000 ff99 	bl	8012538 <SUBGRF_SetRxDutyCycle>
}
 8011606:	bd70      	pop	{r4, r5, r6, pc}
 8011608:	200011f0 	.word	0x200011f0

0801160c <RadioRxBoosted>:
{
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8011610:	f001 fc69 	bl	8012ee6 <RFW_Is_Init>
 8011614:	2801      	cmp	r0, #1
 8011616:	d019      	beq.n	801164c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011618:	2300      	movs	r3, #0
 801161a:	461a      	mov	r2, r3
 801161c:	f240 2162 	movw	r1, #610	; 0x262
 8011620:	4608      	mov	r0, r1
 8011622:	f001 f88c 	bl	801273e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011626:	b9a4      	cbnz	r4, 8011652 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011628:	4c11      	ldr	r4, [pc, #68]	; (8011670 <RadioRxBoosted+0x64>)
 801162a:	2100      	movs	r1, #0
 801162c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801162e:	4b11      	ldr	r3, [pc, #68]	; (8011674 <RadioRxBoosted+0x68>)
 8011630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011634:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011636:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801163a:	f001 fb65 	bl	8012d08 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801163e:	7863      	ldrb	r3, [r4, #1]
 8011640:	b183      	cbz	r3, 8011664 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8011642:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011646:	f000 ff59 	bl	80124fc <SUBGRF_SetRxBoosted>
}
 801164a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 801164c:	f001 fc53 	bl	8012ef6 <RFW_ReceiveInit>
 8011650:	e7e9      	b.n	8011626 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011652:	4d09      	ldr	r5, [pc, #36]	; (8011678 <RadioRxBoosted+0x6c>)
 8011654:	4621      	mov	r1, r4
 8011656:	4628      	mov	r0, r5
 8011658:	f002 f91e 	bl	8013898 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801165c:	4628      	mov	r0, r5
 801165e:	f002 f8d5 	bl	801380c <UTIL_TIMER_Start>
 8011662:	e7e1      	b.n	8011628 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8011664:	4b02      	ldr	r3, [pc, #8]	; (8011670 <RadioRxBoosted+0x64>)
 8011666:	6898      	ldr	r0, [r3, #8]
 8011668:	0180      	lsls	r0, r0, #6
 801166a:	f000 ff47 	bl	80124fc <SUBGRF_SetRxBoosted>
}
 801166e:	e7ec      	b.n	801164a <RadioRxBoosted+0x3e>
 8011670:	200011f0 	.word	0x200011f0
 8011674:	48000400 	.word	0x48000400
 8011678:	200011d8 	.word	0x200011d8

0801167c <RadioStandby>:
{
 801167c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 801167e:	2000      	movs	r0, #0
 8011680:	f000 feb0 	bl	80123e4 <SUBGRF_SetStandby>
}
 8011684:	bd08      	pop	{r3, pc}

08011686 <RadioRead>:
{
 8011686:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8011688:	f000 fdc6 	bl	8012218 <SUBGRF_ReadRegister>
}
 801168c:	bd08      	pop	{r3, pc}

0801168e <RadioGetStatus>:
{
 801168e:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8011690:	f000 fda6 	bl	80121e0 <SUBGRF_GetOperatingMode>
 8011694:	2805      	cmp	r0, #5
 8011696:	d007      	beq.n	80116a8 <RadioGetStatus+0x1a>
 8011698:	2807      	cmp	r0, #7
 801169a:	d007      	beq.n	80116ac <RadioGetStatus+0x1e>
 801169c:	2804      	cmp	r0, #4
 801169e:	d001      	beq.n	80116a4 <RadioGetStatus+0x16>
            return RF_IDLE;
 80116a0:	2000      	movs	r0, #0
}
 80116a2:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80116a4:	2002      	movs	r0, #2
 80116a6:	e7fc      	b.n	80116a2 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80116a8:	2001      	movs	r0, #1
 80116aa:	e7fa      	b.n	80116a2 <RadioGetStatus+0x14>
            return RF_CAD;
 80116ac:	2003      	movs	r0, #3
 80116ae:	e7f8      	b.n	80116a2 <RadioGetStatus+0x14>

080116b0 <RadioIrqProcess>:
{
 80116b0:	b530      	push	{r4, r5, lr}
 80116b2:	b083      	sub	sp, #12
    uint8_t size = 0;
 80116b4:	2300      	movs	r3, #0
 80116b6:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80116ba:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80116bc:	4ba5      	ldr	r3, [pc, #660]	; (8011954 <RadioIrqProcess+0x2a4>)
 80116be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80116c2:	2b20      	cmp	r3, #32
 80116c4:	d829      	bhi.n	801171a <RadioIrqProcess+0x6a>
 80116c6:	b21a      	sxth	r2, r3
 80116c8:	2a00      	cmp	r2, #0
 80116ca:	f000 8140 	beq.w	801194e <RadioIrqProcess+0x29e>
 80116ce:	3b01      	subs	r3, #1
 80116d0:	2b1f      	cmp	r3, #31
 80116d2:	f200 813c 	bhi.w	801194e <RadioIrqProcess+0x29e>
 80116d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80116da:	0063      	.short	0x0063
 80116dc:	013a007f 	.word	0x013a007f
 80116e0:	013a00f7 	.word	0x013a00f7
 80116e4:	013a013a 	.word	0x013a013a
 80116e8:	013a0127 	.word	0x013a0127
 80116ec:	013a013a 	.word	0x013a013a
 80116f0:	013a013a 	.word	0x013a013a
 80116f4:	013a013a 	.word	0x013a013a
 80116f8:	013a0134 	.word	0x013a0134
 80116fc:	013a013a 	.word	0x013a013a
 8011700:	013a013a 	.word	0x013a013a
 8011704:	013a013a 	.word	0x013a013a
 8011708:	013a013a 	.word	0x013a013a
 801170c:	013a013a 	.word	0x013a013a
 8011710:	013a013a 	.word	0x013a013a
 8011714:	013a013a 	.word	0x013a013a
 8011718:	0155      	.short	0x0155
 801171a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801171e:	f000 80b3 	beq.w	8011888 <RadioIrqProcess+0x1d8>
 8011722:	d928      	bls.n	8011776 <RadioIrqProcess+0xc6>
 8011724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011728:	f040 8111 	bne.w	801194e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801172c:	4b8a      	ldr	r3, [pc, #552]	; (8011958 <RadioIrqProcess+0x2a8>)
 801172e:	2201      	movs	r2, #1
 8011730:	2100      	movs	r1, #0
 8011732:	2002      	movs	r0, #2
 8011734:	f001 fcbe 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8011738:	f000 fd52 	bl	80121e0 <SUBGRF_GetOperatingMode>
 801173c:	2804      	cmp	r0, #4
 801173e:	f000 80b0 	beq.w	80118a2 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8011742:	f000 fd4d 	bl	80121e0 <SUBGRF_GetOperatingMode>
 8011746:	2805      	cmp	r0, #5
 8011748:	f040 8101 	bne.w	801194e <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 801174c:	4b83      	ldr	r3, [pc, #524]	; (801195c <RadioIrqProcess+0x2ac>)
 801174e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011752:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8011754:	4882      	ldr	r0, [pc, #520]	; (8011960 <RadioIrqProcess+0x2b0>)
 8011756:	f001 ffff 	bl	8013758 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801175a:	2000      	movs	r0, #0
 801175c:	f000 fe42 	bl	80123e4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011760:	4b80      	ldr	r3, [pc, #512]	; (8011964 <RadioIrqProcess+0x2b4>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	f000 80f2 	beq.w	801194e <RadioIrqProcess+0x29e>
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	2b00      	cmp	r3, #0
 801176e:	f000 80ee 	beq.w	801194e <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8011772:	4798      	blx	r3
 8011774:	e0eb      	b.n	801194e <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8011776:	2b40      	cmp	r3, #64	; 0x40
 8011778:	f000 811d 	beq.w	80119b6 <RadioIrqProcess+0x306>
 801177c:	2b80      	cmp	r3, #128	; 0x80
 801177e:	f040 80e6 	bne.w	801194e <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011782:	2000      	movs	r0, #0
 8011784:	f000 fe2e 	bl	80123e4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011788:	4b76      	ldr	r3, [pc, #472]	; (8011964 <RadioIrqProcess+0x2b4>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	f000 80de 	beq.w	801194e <RadioIrqProcess+0x29e>
 8011792:	699b      	ldr	r3, [r3, #24]
 8011794:	2b00      	cmp	r3, #0
 8011796:	f000 80da 	beq.w	801194e <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 801179a:	2000      	movs	r0, #0
 801179c:	4798      	blx	r3
 801179e:	e0d6      	b.n	801194e <RadioIrqProcess+0x29e>
 80117a0:	4b6e      	ldr	r3, [pc, #440]	; (801195c <RadioIrqProcess+0x2ac>)
 80117a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80117a6:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80117a8:	486f      	ldr	r0, [pc, #444]	; (8011968 <RadioIrqProcess+0x2b8>)
 80117aa:	f001 ffd5 	bl	8013758 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80117ae:	2000      	movs	r0, #0
 80117b0:	f000 fe18 	bl	80123e4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80117b4:	f001 fb99 	bl	8012eea <RFW_Is_LongPacketModeEnabled>
 80117b8:	2801      	cmp	r0, #1
 80117ba:	d00a      	beq.n	80117d2 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80117bc:	4b69      	ldr	r3, [pc, #420]	; (8011964 <RadioIrqProcess+0x2b4>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f000 80c4 	beq.w	801194e <RadioIrqProcess+0x29e>
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f000 80c0 	beq.w	801194e <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80117ce:	4798      	blx	r3
 80117d0:	e0bd      	b.n	801194e <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80117d2:	f001 fb93 	bl	8012efc <RFW_DeInit_TxLongPacket>
 80117d6:	e7f1      	b.n	80117bc <RadioIrqProcess+0x10c>
 80117d8:	4b60      	ldr	r3, [pc, #384]	; (801195c <RadioIrqProcess+0x2ac>)
 80117da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80117de:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80117e0:	485f      	ldr	r0, [pc, #380]	; (8011960 <RadioIrqProcess+0x2b0>)
 80117e2:	f001 ffb9 	bl	8013758 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80117e6:	4b5b      	ldr	r3, [pc, #364]	; (8011954 <RadioIrqProcess+0x2a4>)
 80117e8:	785b      	ldrb	r3, [r3, #1]
 80117ea:	b303      	cbz	r3, 801182e <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80117ec:	22ff      	movs	r2, #255	; 0xff
 80117ee:	f10d 0107 	add.w	r1, sp, #7
 80117f2:	485e      	ldr	r0, [pc, #376]	; (801196c <RadioIrqProcess+0x2bc>)
 80117f4:	f001 fa32 	bl	8012c5c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80117f8:	485d      	ldr	r0, [pc, #372]	; (8011970 <RadioIrqProcess+0x2c0>)
 80117fa:	f001 fa49 	bl	8012c90 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80117fe:	4b59      	ldr	r3, [pc, #356]	; (8011964 <RadioIrqProcess+0x2b4>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 80a3 	beq.w	801194e <RadioIrqProcess+0x29e>
 8011808:	689c      	ldr	r4, [r3, #8]
 801180a:	2c00      	cmp	r4, #0
 801180c:	f000 809f 	beq.w	801194e <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8011810:	4b50      	ldr	r3, [pc, #320]	; (8011954 <RadioIrqProcess+0x2a4>)
 8011812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011816:	2b01      	cmp	r3, #1
 8011818:	d11d      	bne.n	8011856 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801181a:	4a4e      	ldr	r2, [pc, #312]	; (8011954 <RadioIrqProcess+0x2a4>)
 801181c:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8011820:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8011824:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011828:	4850      	ldr	r0, [pc, #320]	; (801196c <RadioIrqProcess+0x2bc>)
 801182a:	47a0      	blx	r4
                break;
 801182c:	e08f      	b.n	801194e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801182e:	2000      	movs	r0, #0
 8011830:	f000 fdd8 	bl	80123e4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8011834:	2100      	movs	r1, #0
 8011836:	f640 1002 	movw	r0, #2306	; 0x902
 801183a:	f000 fcdd 	bl	80121f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801183e:	f640 1044 	movw	r0, #2372	; 0x944
 8011842:	f000 fce9 	bl	8012218 <SUBGRF_ReadRegister>
 8011846:	f040 0102 	orr.w	r1, r0, #2
 801184a:	b2c9      	uxtb	r1, r1
 801184c:	f640 1044 	movw	r0, #2372	; 0x944
 8011850:	f000 fcd2 	bl	80121f8 <SUBGRF_WriteRegister>
 8011854:	e7ca      	b.n	80117ec <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8011856:	4c3f      	ldr	r4, [pc, #252]	; (8011954 <RadioIrqProcess+0x2a4>)
 8011858:	4669      	mov	r1, sp
 801185a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801185c:	f001 faf8 	bl	8012e50 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8011860:	4b40      	ldr	r3, [pc, #256]	; (8011964 <RadioIrqProcess+0x2b4>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	689d      	ldr	r5, [r3, #8]
 8011866:	9b00      	ldr	r3, [sp, #0]
 8011868:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801186c:	4a41      	ldr	r2, [pc, #260]	; (8011974 <RadioIrqProcess+0x2c4>)
 801186e:	fb82 1203 	smull	r1, r2, r2, r3
 8011872:	17db      	asrs	r3, r3, #31
 8011874:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011878:	b25b      	sxtb	r3, r3
 801187a:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 801187e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011882:	483a      	ldr	r0, [pc, #232]	; (801196c <RadioIrqProcess+0x2bc>)
 8011884:	47a8      	blx	r5
                break;
 8011886:	e062      	b.n	801194e <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011888:	2000      	movs	r0, #0
 801188a:	f000 fdab 	bl	80123e4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801188e:	4b35      	ldr	r3, [pc, #212]	; (8011964 <RadioIrqProcess+0x2b4>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d05b      	beq.n	801194e <RadioIrqProcess+0x29e>
 8011896:	699b      	ldr	r3, [r3, #24]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d058      	beq.n	801194e <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 801189c:	2001      	movs	r0, #1
 801189e:	4798      	blx	r3
 80118a0:	e055      	b.n	801194e <RadioIrqProcess+0x29e>
 80118a2:	4b2e      	ldr	r3, [pc, #184]	; (801195c <RadioIrqProcess+0x2ac>)
 80118a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80118a8:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80118aa:	482f      	ldr	r0, [pc, #188]	; (8011968 <RadioIrqProcess+0x2b8>)
 80118ac:	f001 ff54 	bl	8013758 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80118b0:	2000      	movs	r0, #0
 80118b2:	f000 fd97 	bl	80123e4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80118b6:	4b2b      	ldr	r3, [pc, #172]	; (8011964 <RadioIrqProcess+0x2b4>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d047      	beq.n	801194e <RadioIrqProcess+0x29e>
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d044      	beq.n	801194e <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80118c4:	4798      	blx	r3
 80118c6:	e042      	b.n	801194e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80118c8:	4b2b      	ldr	r3, [pc, #172]	; (8011978 <RadioIrqProcess+0x2c8>)
 80118ca:	2201      	movs	r2, #1
 80118cc:	2100      	movs	r1, #0
 80118ce:	2002      	movs	r0, #2
 80118d0:	f001 fbf0 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80118d4:	4b1f      	ldr	r3, [pc, #124]	; (8011954 <RadioIrqProcess+0x2a4>)
 80118d6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80118d8:	b3c9      	cbz	r1, 801194e <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80118da:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80118de:	f640 1003 	movw	r0, #2307	; 0x903
 80118e2:	f7ff fe4f 	bl	8011584 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80118e6:	4c1b      	ldr	r4, [pc, #108]	; (8011954 <RadioIrqProcess+0x2a4>)
 80118e8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80118ec:	f640 1004 	movw	r0, #2308	; 0x904
 80118f0:	f7ff fe48 	bl	8011584 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80118f4:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80118f8:	f640 1005 	movw	r0, #2309	; 0x905
 80118fc:	f7ff fe42 	bl	8011584 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8011900:	f640 1002 	movw	r0, #2306	; 0x902
 8011904:	f7ff febf 	bl	8011686 <RadioRead>
 8011908:	f040 0101 	orr.w	r1, r0, #1
 801190c:	b2c9      	uxtb	r1, r1
 801190e:	f640 1002 	movw	r0, #2306	; 0x902
 8011912:	f7ff fe37 	bl	8011584 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8011916:	2200      	movs	r2, #0
 8011918:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801191a:	4613      	mov	r3, r2
 801191c:	f240 2162 	movw	r1, #610	; 0x262
 8011920:	4608      	mov	r0, r1
 8011922:	f000 ff0c 	bl	801273e <SUBGRF_SetDioIrqParams>
 8011926:	e012      	b.n	801194e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8011928:	4b14      	ldr	r3, [pc, #80]	; (801197c <RadioIrqProcess+0x2cc>)
 801192a:	2201      	movs	r2, #1
 801192c:	2100      	movs	r1, #0
 801192e:	2002      	movs	r0, #2
 8011930:	f001 fbc0 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8011934:	f001 fad7 	bl	8012ee6 <RFW_Is_Init>
 8011938:	2801      	cmp	r0, #1
 801193a:	d108      	bne.n	801194e <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 801193c:	f001 fadf 	bl	8012efe <RFW_ReceivePayload>
 8011940:	e005      	b.n	801194e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8011942:	4b0f      	ldr	r3, [pc, #60]	; (8011980 <RadioIrqProcess+0x2d0>)
 8011944:	2201      	movs	r2, #1
 8011946:	2100      	movs	r1, #0
 8011948:	2002      	movs	r0, #2
 801194a:	f001 fbb3 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
}
 801194e:	b003      	add	sp, #12
 8011950:	bd30      	pop	{r4, r5, pc}
 8011952:	bf00      	nop
 8011954:	200011f0 	.word	0x200011f0
 8011958:	0801735c 	.word	0x0801735c
 801195c:	48000400 	.word	0x48000400
 8011960:	200011d8 	.word	0x200011d8
 8011964:	200011d4 	.word	0x200011d4
 8011968:	2000124c 	.word	0x2000124c
 801196c:	200010d4 	.word	0x200010d4
 8011970:	20001214 	.word	0x20001214
 8011974:	10624dd3 	.word	0x10624dd3
 8011978:	08017370 	.word	0x08017370
 801197c:	0801737c 	.word	0x0801737c
 8011980:	08017388 	.word	0x08017388
        TimerStop( &RxTimeoutTimer );
 8011984:	4817      	ldr	r0, [pc, #92]	; (80119e4 <RadioIrqProcess+0x334>)
 8011986:	f001 fee7 	bl	8013758 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801198a:	4b17      	ldr	r3, [pc, #92]	; (80119e8 <RadioIrqProcess+0x338>)
 801198c:	785b      	ldrb	r3, [r3, #1]
 801198e:	b173      	cbz	r3, 80119ae <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011990:	4b16      	ldr	r3, [pc, #88]	; (80119ec <RadioIrqProcess+0x33c>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d0da      	beq.n	801194e <RadioIrqProcess+0x29e>
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d0d7      	beq.n	801194e <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 801199e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80119a0:	4b13      	ldr	r3, [pc, #76]	; (80119f0 <RadioIrqProcess+0x340>)
 80119a2:	2201      	movs	r2, #1
 80119a4:	2100      	movs	r1, #0
 80119a6:	2002      	movs	r0, #2
 80119a8:	f001 fb84 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
 80119ac:	e7cf      	b.n	801194e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80119ae:	2000      	movs	r0, #0
 80119b0:	f000 fd18 	bl	80123e4 <SUBGRF_SetStandby>
 80119b4:	e7ec      	b.n	8011990 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80119b6:	4b0f      	ldr	r3, [pc, #60]	; (80119f4 <RadioIrqProcess+0x344>)
 80119b8:	2201      	movs	r2, #1
 80119ba:	2100      	movs	r1, #0
 80119bc:	2002      	movs	r0, #2
 80119be:	f001 fb79 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80119c2:	4b09      	ldr	r3, [pc, #36]	; (80119e8 <RadioIrqProcess+0x338>)
 80119c4:	785b      	ldrb	r3, [r3, #1]
 80119c6:	b143      	cbz	r3, 80119da <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80119c8:	4b08      	ldr	r3, [pc, #32]	; (80119ec <RadioIrqProcess+0x33c>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d0be      	beq.n	801194e <RadioIrqProcess+0x29e>
 80119d0:	691b      	ldr	r3, [r3, #16]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d0bb      	beq.n	801194e <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80119d6:	4798      	blx	r3
}
 80119d8:	e7b9      	b.n	801194e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80119da:	2000      	movs	r0, #0
 80119dc:	f000 fd02 	bl	80123e4 <SUBGRF_SetStandby>
 80119e0:	e7f2      	b.n	80119c8 <RadioIrqProcess+0x318>
 80119e2:	bf00      	nop
 80119e4:	200011d8 	.word	0x200011d8
 80119e8:	200011f0 	.word	0x200011f0
 80119ec:	200011d4 	.word	0x200011d4
 80119f0:	08017394 	.word	0x08017394
 80119f4:	080173a0 	.word	0x080173a0

080119f8 <RadioOnDioIrq>:
{
 80119f8:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80119fa:	4b03      	ldr	r3, [pc, #12]	; (8011a08 <RadioOnDioIrq+0x10>)
 80119fc:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8011a00:	f7ff fe56 	bl	80116b0 <RadioIrqProcess>
}
 8011a04:	bd08      	pop	{r3, pc}
 8011a06:	bf00      	nop
 8011a08:	200011f0 	.word	0x200011f0

08011a0c <RadioGetWakeupTime>:
{
 8011a0c:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8011a0e:	f001 f9a6 	bl	8012d5e <SUBGRF_GetRadioWakeUpTime>
}
 8011a12:	3003      	adds	r0, #3
 8011a14:	bd08      	pop	{r3, pc}
	...

08011a18 <RadioSetMaxPayloadLength>:
{
 8011a18:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8011a1a:	2801      	cmp	r0, #1
 8011a1c:	d004      	beq.n	8011a28 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8011a1e:	4b0a      	ldr	r3, [pc, #40]	; (8011a48 <RadioSetMaxPayloadLength+0x30>)
 8011a20:	7d5b      	ldrb	r3, [r3, #21]
 8011a22:	2b01      	cmp	r3, #1
 8011a24:	d008      	beq.n	8011a38 <RadioSetMaxPayloadLength+0x20>
}
 8011a26:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8011a28:	4b08      	ldr	r3, [pc, #32]	; (8011a4c <RadioSetMaxPayloadLength+0x34>)
 8011a2a:	7019      	strb	r1, [r3, #0]
 8011a2c:	4806      	ldr	r0, [pc, #24]	; (8011a48 <RadioSetMaxPayloadLength+0x30>)
 8011a2e:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011a30:	300e      	adds	r0, #14
 8011a32:	f001 f853 	bl	8012adc <SUBGRF_SetPacketParams>
 8011a36:	e7f6      	b.n	8011a26 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8011a38:	4b04      	ldr	r3, [pc, #16]	; (8011a4c <RadioSetMaxPayloadLength+0x34>)
 8011a3a:	7019      	strb	r1, [r3, #0]
 8011a3c:	4802      	ldr	r0, [pc, #8]	; (8011a48 <RadioSetMaxPayloadLength+0x30>)
 8011a3e:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011a40:	300e      	adds	r0, #14
 8011a42:	f001 f84b 	bl	8012adc <SUBGRF_SetPacketParams>
}
 8011a46:	e7ee      	b.n	8011a26 <RadioSetMaxPayloadLength+0xe>
 8011a48:	200011f0 	.word	0x200011f0
 8011a4c:	200000fc 	.word	0x200000fc

08011a50 <RadioReadRegisters>:
{
 8011a50:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8011a52:	f000 fc5f 	bl	8012314 <SUBGRF_ReadRegisters>
}
 8011a56:	bd08      	pop	{r3, pc}

08011a58 <RadioWriteRegisters>:
{
 8011a58:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8011a5a:	f000 fc19 	bl	8012290 <SUBGRF_WriteRegisters>
}
 8011a5e:	bd08      	pop	{r3, pc}

08011a60 <RadioRssi>:
{
 8011a60:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8011a62:	f001 f8cb 	bl	8012bfc <SUBGRF_GetRssiInst>
}
 8011a66:	b200      	sxth	r0, r0
 8011a68:	bd08      	pop	{r3, pc}
	...

08011a6c <RadioSetTxContinuousWave>:
{
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8011a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a74:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8011a78:	f000 fed4 	bl	8012824 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f001 f957 	bl	8012d30 <SUBGRF_SetRfTxPower>
 8011a82:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011a84:	210e      	movs	r1, #14
 8011a86:	f640 101f 	movw	r0, #2335	; 0x91f
 8011a8a:	f000 fbb5 	bl	80121f8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8011a8e:	2101      	movs	r1, #1
 8011a90:	4628      	mov	r0, r5
 8011a92:	f001 f939 	bl	8012d08 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8011a96:	f000 fd7f 	bl	8012598 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8011a9a:	4d04      	ldr	r5, [pc, #16]	; (8011aac <RadioSetTxContinuousWave+0x40>)
 8011a9c:	4621      	mov	r1, r4
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	f001 fefa 	bl	8013898 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f001 feb1 	bl	801380c <UTIL_TIMER_Start>
}
 8011aaa:	bd38      	pop	{r3, r4, r5, pc}
 8011aac:	2000124c 	.word	0x2000124c

08011ab0 <RadioSetChannel>:
{
 8011ab0:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8011ab2:	f000 feb7 	bl	8012824 <SUBGRF_SetRfFrequency>
}
 8011ab6:	bd08      	pop	{r3, pc}

08011ab8 <RadioStartCad>:
{
 8011ab8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011aba:	2100      	movs	r1, #0
 8011abc:	4b07      	ldr	r3, [pc, #28]	; (8011adc <RadioStartCad+0x24>)
 8011abe:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8011ac2:	f001 f921 	bl	8012d08 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	461a      	mov	r2, r3
 8011aca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8011ace:	4608      	mov	r0, r1
 8011ad0:	f000 fe35 	bl	801273e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8011ad4:	f000 fd54 	bl	8012580 <SUBGRF_SetCad>
}
 8011ad8:	bd08      	pop	{r3, pc}
 8011ada:	bf00      	nop
 8011adc:	200011f0 	.word	0x200011f0

08011ae0 <RadioRx>:
{
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8011ae4:	f001 f9ff 	bl	8012ee6 <RFW_Is_Init>
 8011ae8:	2801      	cmp	r0, #1
 8011aea:	d019      	beq.n	8011b20 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011aec:	2300      	movs	r3, #0
 8011aee:	461a      	mov	r2, r3
 8011af0:	f240 2162 	movw	r1, #610	; 0x262
 8011af4:	4608      	mov	r0, r1
 8011af6:	f000 fe22 	bl	801273e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011afa:	b9a4      	cbnz	r4, 8011b26 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011afc:	4c11      	ldr	r4, [pc, #68]	; (8011b44 <RadioRx+0x64>)
 8011afe:	2100      	movs	r1, #0
 8011b00:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8011b02:	4b11      	ldr	r3, [pc, #68]	; (8011b48 <RadioRx+0x68>)
 8011b04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011b08:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011b0a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8011b0e:	f001 f8fb 	bl	8012d08 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8011b12:	7863      	ldrb	r3, [r4, #1]
 8011b14:	b183      	cbz	r3, 8011b38 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011b16:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011b1a:	f000 fc9f 	bl	801245c <SUBGRF_SetRx>
}
 8011b1e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8011b20:	f001 f9e9 	bl	8012ef6 <RFW_ReceiveInit>
 8011b24:	e7e9      	b.n	8011afa <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011b26:	4d09      	ldr	r5, [pc, #36]	; (8011b4c <RadioRx+0x6c>)
 8011b28:	4621      	mov	r1, r4
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	f001 feb4 	bl	8013898 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011b30:	4628      	mov	r0, r5
 8011b32:	f001 fe6b 	bl	801380c <UTIL_TIMER_Start>
 8011b36:	e7e1      	b.n	8011afc <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8011b38:	4b02      	ldr	r3, [pc, #8]	; (8011b44 <RadioRx+0x64>)
 8011b3a:	6898      	ldr	r0, [r3, #8]
 8011b3c:	0180      	lsls	r0, r0, #6
 8011b3e:	f000 fc8d 	bl	801245c <SUBGRF_SetRx>
}
 8011b42:	e7ec      	b.n	8011b1e <RadioRx+0x3e>
 8011b44:	200011f0 	.word	0x200011f0
 8011b48:	48000400 	.word	0x48000400
 8011b4c:	200011d8 	.word	0x200011d8

08011b50 <RadioSleep>:
{
 8011b50:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8011b52:	f04f 0004 	mov.w	r0, #4
 8011b56:	f000 fc25 	bl	80123a4 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8011b5a:	2002      	movs	r0, #2
 8011b5c:	f7f0 fa70 	bl	8002040 <HAL_Delay>
}
 8011b60:	bd08      	pop	{r3, pc}
	...

08011b64 <RadioSend>:
{
 8011b64:	b570      	push	{r4, r5, r6, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	4605      	mov	r5, r0
 8011b6a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	461a      	mov	r2, r3
 8011b70:	f240 2101 	movw	r1, #513	; 0x201
 8011b74:	4608      	mov	r0, r1
 8011b76:	f000 fde2 	bl	801273e <SUBGRF_SetDioIrqParams>
 8011b7a:	4b3f      	ldr	r3, [pc, #252]	; (8011c78 <RadioSend+0x114>)
 8011b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011b80:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8011b82:	4e3e      	ldr	r6, [pc, #248]	; (8011c7c <RadioSend+0x118>)
 8011b84:	2101      	movs	r1, #1
 8011b86:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8011b8a:	f001 f8bd 	bl	8012d08 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8011b8e:	7833      	ldrb	r3, [r6, #0]
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	d103      	bne.n	8011b9c <RadioSend+0x38>
 8011b94:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8011b98:	2b06      	cmp	r3, #6
 8011b9a:	d012      	beq.n	8011bc2 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8011b9c:	f640 0089 	movw	r0, #2185	; 0x889
 8011ba0:	f000 fb3a 	bl	8012218 <SUBGRF_ReadRegister>
 8011ba4:	f040 0104 	orr.w	r1, r0, #4
 8011ba8:	b2c9      	uxtb	r1, r1
 8011baa:	f640 0089 	movw	r0, #2185	; 0x889
 8011bae:	f000 fb23 	bl	80121f8 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8011bb2:	4b32      	ldr	r3, [pc, #200]	; (8011c7c <RadioSend+0x118>)
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	2b03      	cmp	r3, #3
 8011bb8:	d818      	bhi.n	8011bec <RadioSend+0x88>
 8011bba:	e8df f003 	tbb	[pc, r3]
 8011bbe:	0d23      	.short	0x0d23
 8011bc0:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8011bc2:	f640 0089 	movw	r0, #2185	; 0x889
 8011bc6:	f000 fb27 	bl	8012218 <SUBGRF_ReadRegister>
 8011bca:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011bce:	f640 0089 	movw	r0, #2185	; 0x889
 8011bd2:	f000 fb11 	bl	80121f8 <SUBGRF_WriteRegister>
 8011bd6:	e7ec      	b.n	8011bb2 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8011bd8:	4828      	ldr	r0, [pc, #160]	; (8011c7c <RadioSend+0x118>)
 8011bda:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011bdc:	300e      	adds	r0, #14
 8011bde:	f000 ff7d 	bl	8012adc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011be2:	2200      	movs	r2, #0
 8011be4:	4621      	mov	r1, r4
 8011be6:	4628      	mov	r0, r5
 8011be8:	f000 fc30 	bl	801244c <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8011bec:	4c24      	ldr	r4, [pc, #144]	; (8011c80 <RadioSend+0x11c>)
 8011bee:	4b23      	ldr	r3, [pc, #140]	; (8011c7c <RadioSend+0x118>)
 8011bf0:	6859      	ldr	r1, [r3, #4]
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f001 fe50 	bl	8013898 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f001 fe07 	bl	801380c <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8011bfe:	2000      	movs	r0, #0
}
 8011c00:	b002      	add	sp, #8
 8011c02:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8011c04:	f001 f96f 	bl	8012ee6 <RFW_Is_Init>
 8011c08:	2801      	cmp	r0, #1
 8011c0a:	d00a      	beq.n	8011c22 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8011c0c:	481b      	ldr	r0, [pc, #108]	; (8011c7c <RadioSend+0x118>)
 8011c0e:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011c10:	300e      	adds	r0, #14
 8011c12:	f000 ff63 	bl	8012adc <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8011c16:	2200      	movs	r2, #0
 8011c18:	4621      	mov	r1, r4
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	f000 fc16 	bl	801244c <SUBGRF_SendPayload>
 8011c20:	e7e4      	b.n	8011bec <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8011c22:	f10d 0207 	add.w	r2, sp, #7
 8011c26:	4621      	mov	r1, r4
 8011c28:	4628      	mov	r0, r5
 8011c2a:	f001 f961 	bl	8012ef0 <RFW_TransmitInit>
 8011c2e:	b968      	cbnz	r0, 8011c4c <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8011c30:	4812      	ldr	r0, [pc, #72]	; (8011c7c <RadioSend+0x118>)
 8011c32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c36:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011c38:	300e      	adds	r0, #14
 8011c3a:	f000 ff4f 	bl	8012adc <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8011c3e:	2200      	movs	r2, #0
 8011c40:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011c44:	4628      	mov	r0, r5
 8011c46:	f000 fc01 	bl	801244c <SUBGRF_SendPayload>
 8011c4a:	e7cf      	b.n	8011bec <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8011c4c:	4b0d      	ldr	r3, [pc, #52]	; (8011c84 <RadioSend+0x120>)
 8011c4e:	2201      	movs	r2, #1
 8011c50:	2100      	movs	r1, #0
 8011c52:	2002      	movs	r0, #2
 8011c54:	f001 fa2e 	bl	80130b4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8011c58:	2003      	movs	r0, #3
 8011c5a:	e7d1      	b.n	8011c00 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8011c5c:	4807      	ldr	r0, [pc, #28]	; (8011c7c <RadioSend+0x118>)
 8011c5e:	2302      	movs	r3, #2
 8011c60:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8011c62:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011c64:	300e      	adds	r0, #14
 8011c66:	f000 ff39 	bl	8012adc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	4621      	mov	r1, r4
 8011c6e:	4628      	mov	r0, r5
 8011c70:	f000 fbec 	bl	801244c <SUBGRF_SendPayload>
            break;
 8011c74:	e7ba      	b.n	8011bec <RadioSend+0x88>
 8011c76:	bf00      	nop
 8011c78:	48000400 	.word	0x48000400
 8011c7c:	200011f0 	.word	0x200011f0
 8011c80:	2000124c 	.word	0x2000124c
 8011c84:	080173b0 	.word	0x080173b0

08011c88 <RadioRandom>:
{
 8011c88:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	4619      	mov	r1, r3
 8011c90:	4618      	mov	r0, r3
 8011c92:	f000 fd54 	bl	801273e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8011c96:	f000 fbfb 	bl	8012490 <SUBGRF_GetRandom>
}
 8011c9a:	bd08      	pop	{r3, pc}

08011c9c <RadioSetModem>:
{
 8011c9c:	b510      	push	{r4, lr}
 8011c9e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011ca0:	4b14      	ldr	r3, [pc, #80]	; (8011cf4 <RadioSetModem+0x58>)
 8011ca2:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8011ca4:	f001 f92c 	bl	8012f00 <RFW_SetRadioModem>
    switch( modem )
 8011ca8:	2c01      	cmp	r4, #1
 8011caa:	d010      	beq.n	8011cce <RadioSetModem+0x32>
 8011cac:	2c03      	cmp	r4, #3
 8011cae:	d01a      	beq.n	8011ce6 <RadioSetModem+0x4a>
 8011cb0:	b134      	cbz	r4, 8011cc0 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8011cb2:	2003      	movs	r0, #3
 8011cb4:	f000 fde2 	bl	801287c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011cb8:	4b0e      	ldr	r3, [pc, #56]	; (8011cf4 <RadioSetModem+0x58>)
 8011cba:	2200      	movs	r2, #0
 8011cbc:	735a      	strb	r2, [r3, #13]
}
 8011cbe:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	f000 fddb 	bl	801287c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011cc6:	4b0b      	ldr	r3, [pc, #44]	; (8011cf4 <RadioSetModem+0x58>)
 8011cc8:	2200      	movs	r2, #0
 8011cca:	735a      	strb	r2, [r3, #13]
        break;
 8011ccc:	e7f7      	b.n	8011cbe <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8011cce:	2001      	movs	r0, #1
 8011cd0:	f000 fdd4 	bl	801287c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8011cd4:	4b07      	ldr	r3, [pc, #28]	; (8011cf4 <RadioSetModem+0x58>)
 8011cd6:	7b5a      	ldrb	r2, [r3, #13]
 8011cd8:	7b18      	ldrb	r0, [r3, #12]
 8011cda:	4282      	cmp	r2, r0
 8011cdc:	d0ef      	beq.n	8011cbe <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8011cde:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8011ce0:	f000 f80a 	bl	8011cf8 <RadioSetPublicNetwork>
 8011ce4:	e7eb      	b.n	8011cbe <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8011ce6:	2002      	movs	r0, #2
 8011ce8:	f000 fdc8 	bl	801287c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011cec:	4b01      	ldr	r3, [pc, #4]	; (8011cf4 <RadioSetModem+0x58>)
 8011cee:	2200      	movs	r2, #0
 8011cf0:	735a      	strb	r2, [r3, #13]
}
 8011cf2:	e7e4      	b.n	8011cbe <RadioSetModem+0x22>
 8011cf4:	200011f0 	.word	0x200011f0

08011cf8 <RadioSetPublicNetwork>:
{
 8011cf8:	b510      	push	{r4, lr}
 8011cfa:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8011cfc:	4b0e      	ldr	r3, [pc, #56]	; (8011d38 <RadioSetPublicNetwork+0x40>)
 8011cfe:	7318      	strb	r0, [r3, #12]
 8011d00:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8011d02:	2001      	movs	r0, #1
 8011d04:	f7ff ffca 	bl	8011c9c <RadioSetModem>
    if( enable == true )
 8011d08:	b154      	cbz	r4, 8011d20 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8011d0a:	2134      	movs	r1, #52	; 0x34
 8011d0c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011d10:	f000 fa72 	bl	80121f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8011d14:	2144      	movs	r1, #68	; 0x44
 8011d16:	f240 7041 	movw	r0, #1857	; 0x741
 8011d1a:	f000 fa6d 	bl	80121f8 <SUBGRF_WriteRegister>
}
 8011d1e:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8011d20:	2114      	movs	r1, #20
 8011d22:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011d26:	f000 fa67 	bl	80121f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8011d2a:	2124      	movs	r1, #36	; 0x24
 8011d2c:	f240 7041 	movw	r0, #1857	; 0x741
 8011d30:	f000 fa62 	bl	80121f8 <SUBGRF_WriteRegister>
}
 8011d34:	e7f3      	b.n	8011d1e <RadioSetPublicNetwork+0x26>
 8011d36:	bf00      	nop
 8011d38:	200011f0 	.word	0x200011f0

08011d3c <RadioSetTxConfig>:
{
 8011d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d40:	b083      	sub	sp, #12
 8011d42:	4604      	mov	r4, r0
 8011d44:	460e      	mov	r6, r1
 8011d46:	4617      	mov	r7, r2
 8011d48:	461d      	mov	r5, r3
 8011d4a:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8011d4e:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8011d52:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8011d56:	f001 f8c5 	bl	8012ee4 <RFW_DeInit>
    switch( modem )
 8011d5a:	b1ac      	cbz	r4, 8011d88 <RadioSetTxConfig+0x4c>
 8011d5c:	2c01      	cmp	r4, #1
 8011d5e:	d05a      	beq.n	8011e16 <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8011d60:	4630      	mov	r0, r6
 8011d62:	f000 ffe5 	bl	8012d30 <SUBGRF_SetRfTxPower>
 8011d66:	4c55      	ldr	r4, [pc, #340]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011d68:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011d6c:	210e      	movs	r1, #14
 8011d6e:	f640 101f 	movw	r0, #2335	; 0x91f
 8011d72:	f000 fa41 	bl	80121f8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8011d76:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8011d7a:	f001 f8b8 	bl	8012eee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8011d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d80:	6063      	str	r3, [r4, #4]
}
 8011d82:	b003      	add	sp, #12
 8011d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011d88:	4c4c      	ldr	r4, [pc, #304]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011d8a:	f04f 0b00 	mov.w	fp, #0
 8011d8e:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d94:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011d96:	230b      	movs	r3, #11
 8011d98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f001 f83f 	bl	8012e20 <SUBGRF_GetFskBandwidthRegValue>
 8011da2:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8011da6:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011da8:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011dac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8011db0:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011db4:	2304      	movs	r3, #4
 8011db6:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8011db8:	2318      	movs	r3, #24
 8011dba:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011dbc:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011dc0:	f089 0901 	eor.w	r9, r9, #1
 8011dc4:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8011dc8:	f1ba 0f00 	cmp.w	sl, #0
 8011dcc:	d01f      	beq.n	8011e0e <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011dce:	22f2      	movs	r2, #242	; 0xf2
 8011dd0:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011dd2:	4c3a      	ldr	r4, [pc, #232]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011dd8:	f7ff fc50 	bl	801167c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8011ddc:	2000      	movs	r0, #0
 8011dde:	f7ff ff5d 	bl	8011c9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011de2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011de6:	f000 fdf1 	bl	80129cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011dea:	f104 000e 	add.w	r0, r4, #14
 8011dee:	f000 fe75 	bl	8012adc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011df2:	4a33      	ldr	r2, [pc, #204]	; (8011ec0 <RadioSetTxConfig+0x184>)
 8011df4:	466b      	mov	r3, sp
 8011df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011dfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f000 fa56 	bl	80122b0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011e04:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011e08:	f000 fa29 	bl	801225e <SUBGRF_SetWhiteningSeed>
            break;
 8011e0c:	e7a8      	b.n	8011d60 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011e0e:	4b2b      	ldr	r3, [pc, #172]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011e10:	2201      	movs	r2, #1
 8011e12:	75da      	strb	r2, [r3, #23]
 8011e14:	e7dd      	b.n	8011dd2 <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011e16:	4a29      	ldr	r2, [pc, #164]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011e18:	2301      	movs	r3, #1
 8011e1a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8011e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8011e26:	4927      	ldr	r1, [pc, #156]	; (8011ec4 <RadioSetTxConfig+0x188>)
 8011e28:	5d49      	ldrb	r1, [r1, r5]
 8011e2a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8011e2e:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8011e32:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011e36:	b91d      	cbnz	r5, 8011e40 <RadioSetTxConfig+0x104>
 8011e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e3a:	3a0b      	subs	r2, #11
 8011e3c:	2a01      	cmp	r2, #1
 8011e3e:	d92c      	bls.n	8011e9a <RadioSetTxConfig+0x15e>
 8011e40:	2d01      	cmp	r5, #1
 8011e42:	d027      	beq.n	8011e94 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011e44:	4a1d      	ldr	r2, [pc, #116]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011e46:	2100      	movs	r1, #0
 8011e48:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011e4c:	4a1b      	ldr	r2, [pc, #108]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011e4e:	2101      	movs	r1, #1
 8011e50:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011e52:	3b05      	subs	r3, #5
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	428b      	cmp	r3, r1
 8011e58:	d924      	bls.n	8011ea4 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011e5a:	4b18      	ldr	r3, [pc, #96]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011e5c:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011e60:	4c16      	ldr	r4, [pc, #88]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011e62:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011e66:	4b18      	ldr	r3, [pc, #96]	; (8011ec8 <RadioSetTxConfig+0x18c>)
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011e6c:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011e70:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011e74:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011e78:	f7ff fc00 	bl	801167c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011e7c:	2001      	movs	r0, #1
 8011e7e:	f7ff ff0d 	bl	8011c9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011e82:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011e86:	f000 fda1 	bl	80129cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011e8a:	f104 000e 	add.w	r0, r4, #14
 8011e8e:	f000 fe25 	bl	8012adc <SUBGRF_SetPacketParams>
            break;
 8011e92:	e765      	b.n	8011d60 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011e94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e96:	2a0c      	cmp	r2, #12
 8011e98:	d1d4      	bne.n	8011e44 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011e9a:	4a08      	ldr	r2, [pc, #32]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011e9c:	2101      	movs	r1, #1
 8011e9e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011ea2:	e7d3      	b.n	8011e4c <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 8011ea4:	f1b8 0f0b 	cmp.w	r8, #11
 8011ea8:	d803      	bhi.n	8011eb2 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011eaa:	4613      	mov	r3, r2
 8011eac:	220c      	movs	r2, #12
 8011eae:	839a      	strh	r2, [r3, #28]
 8011eb0:	e7d6      	b.n	8011e60 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011eb2:	4b02      	ldr	r3, [pc, #8]	; (8011ebc <RadioSetTxConfig+0x180>)
 8011eb4:	f8a3 801c 	strh.w	r8, [r3, #28]
 8011eb8:	e7d2      	b.n	8011e60 <RadioSetTxConfig+0x124>
 8011eba:	bf00      	nop
 8011ebc:	200011f0 	.word	0x200011f0
 8011ec0:	080166bc 	.word	0x080166bc
 8011ec4:	080173c8 	.word	0x080173c8
 8011ec8:	200000fc 	.word	0x200000fc

08011ecc <RadioSetRxConfig>:
{
 8011ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed0:	b085      	sub	sp, #20
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	460d      	mov	r5, r1
 8011ed6:	4616      	mov	r6, r2
 8011ed8:	9301      	str	r3, [sp, #4]
 8011eda:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8011ede:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8011ee2:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8011ee6:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8011eea:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8011eee:	4b73      	ldr	r3, [pc, #460]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8011ef0:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8011ef4:	f000 fff6 	bl	8012ee4 <RFW_DeInit>
    if( rxContinuous == true )
 8011ef8:	f1b8 0f00 	cmp.w	r8, #0
 8011efc:	d001      	beq.n	8011f02 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8011efe:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8011f02:	b14f      	cbz	r7, 8011f18 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8011f04:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8011f08:	4b6d      	ldr	r3, [pc, #436]	; (80120c0 <RadioSetRxConfig+0x1f4>)
 8011f0a:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8011f0c:	b144      	cbz	r4, 8011f20 <RadioSetRxConfig+0x54>
 8011f0e:	2c01      	cmp	r4, #1
 8011f10:	d057      	beq.n	8011fc2 <RadioSetRxConfig+0xf6>
}
 8011f12:	b005      	add	sp, #20
 8011f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8011f18:	4b69      	ldr	r3, [pc, #420]	; (80120c0 <RadioSetRxConfig+0x1f4>)
 8011f1a:	22ff      	movs	r2, #255	; 0xff
 8011f1c:	701a      	strb	r2, [r3, #0]
 8011f1e:	e7f5      	b.n	8011f0c <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011f20:	2000      	movs	r0, #0
 8011f22:	f000 fb47 	bl	80125b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011f26:	4c65      	ldr	r4, [pc, #404]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8011f28:	f04f 0800 	mov.w	r8, #0
 8011f2c:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011f30:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011f32:	230b      	movs	r3, #11
 8011f34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011f38:	4628      	mov	r0, r5
 8011f3a:	f000 ff71 	bl	8012e20 <SUBGRF_GetFskBandwidthRegValue>
 8011f3e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011f42:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011f46:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8011f4a:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011f4e:	2304      	movs	r3, #4
 8011f50:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8011f52:	2318      	movs	r3, #24
 8011f54:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011f56:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011f5a:	f087 0701 	eor.w	r7, r7, #1
 8011f5e:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8011f60:	4b57      	ldr	r3, [pc, #348]	; (80120c0 <RadioSetRxConfig+0x1f4>)
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8011f66:	f1bb 0f00 	cmp.w	fp, #0
 8011f6a:	d026      	beq.n	8011fba <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011f6c:	22f2      	movs	r2, #242	; 0xf2
 8011f6e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011f70:	4c52      	ldr	r4, [pc, #328]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8011f72:	2301      	movs	r3, #1
 8011f74:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011f76:	f7ff fb81 	bl	801167c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	f7ff fe8e 	bl	8011c9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011f80:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011f84:	f000 fd22 	bl	80129cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011f88:	f104 000e 	add.w	r0, r4, #14
 8011f8c:	f000 fda6 	bl	8012adc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011f90:	4a4c      	ldr	r2, [pc, #304]	; (80120c4 <RadioSetRxConfig+0x1f8>)
 8011f92:	ab02      	add	r3, sp, #8
 8011f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f98:	e883 0003 	stmia.w	r3, {r0, r1}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f000 f987 	bl	80122b0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011fa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011fa6:	f000 f95a 	bl	801225e <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011faa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8011fae:	fb03 f30a 	mul.w	r3, r3, sl
 8011fb2:	fbb3 f3f6 	udiv	r3, r3, r6
 8011fb6:	60a3      	str	r3, [r4, #8]
            break;
 8011fb8:	e7ab      	b.n	8011f12 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011fba:	4b40      	ldr	r3, [pc, #256]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	75da      	strb	r2, [r3, #23]
 8011fc0:	e7d6      	b.n	8011f70 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	f000 faf6 	bl	80125b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011fc8:	4a3c      	ldr	r2, [pc, #240]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8011fca:	2301      	movs	r3, #1
 8011fcc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8011fd0:	b2f3      	uxtb	r3, r6
 8011fd2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8011fd6:	493c      	ldr	r1, [pc, #240]	; (80120c8 <RadioSetRxConfig+0x1fc>)
 8011fd8:	5d49      	ldrb	r1, [r1, r5]
 8011fda:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8011fde:	9901      	ldr	r1, [sp, #4]
 8011fe0:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011fe4:	b91d      	cbnz	r5, 8011fee <RadioSetRxConfig+0x122>
 8011fe6:	f1a6 020b 	sub.w	r2, r6, #11
 8011fea:	2a01      	cmp	r2, #1
 8011fec:	d94b      	bls.n	8012086 <RadioSetRxConfig+0x1ba>
 8011fee:	2d01      	cmp	r5, #1
 8011ff0:	d047      	beq.n	8012082 <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011ff2:	4a32      	ldr	r2, [pc, #200]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011ffa:	4a30      	ldr	r2, [pc, #192]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8011ffc:	2101      	movs	r1, #1
 8011ffe:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8012000:	3b05      	subs	r3, #5
 8012002:	b2db      	uxtb	r3, r3
 8012004:	428b      	cmp	r3, r1
 8012006:	d943      	bls.n	8012090 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8012008:	4b2c      	ldr	r3, [pc, #176]	; (80120bc <RadioSetRxConfig+0x1f0>)
 801200a:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801200e:	4c2b      	ldr	r4, [pc, #172]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8012010:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8012012:	4b2b      	ldr	r3, [pc, #172]	; (80120c0 <RadioSetRxConfig+0x1f4>)
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8012018:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801201c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012020:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8012024:	f7ff fb2a 	bl	801167c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8012028:	2001      	movs	r0, #1
 801202a:	f7ff fe37 	bl	8011c9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801202e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012032:	f000 fccb 	bl	80129cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012036:	f104 000e 	add.w	r0, r4, #14
 801203a:	f000 fd4f 	bl	8012adc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801203e:	fa5f f08a 	uxtb.w	r0, sl
 8012042:	f000 fac4 	bl	80125ce <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8012046:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801204a:	f000 f8e5 	bl	8012218 <SUBGRF_ReadRegister>
 801204e:	f000 0101 	and.w	r1, r0, #1
 8012052:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8012056:	f000 f8cf 	bl	80121f8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801205a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801205e:	2b01      	cmp	r3, #1
 8012060:	d021      	beq.n	80120a6 <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8012062:	f240 7036 	movw	r0, #1846	; 0x736
 8012066:	f000 f8d7 	bl	8012218 <SUBGRF_ReadRegister>
 801206a:	f040 0104 	orr.w	r1, r0, #4
 801206e:	b2c9      	uxtb	r1, r1
 8012070:	f240 7036 	movw	r0, #1846	; 0x736
 8012074:	f000 f8c0 	bl	80121f8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8012078:	4b10      	ldr	r3, [pc, #64]	; (80120bc <RadioSetRxConfig+0x1f0>)
 801207a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801207e:	609a      	str	r2, [r3, #8]
}
 8012080:	e747      	b.n	8011f12 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012082:	2e0c      	cmp	r6, #12
 8012084:	d1b5      	bne.n	8011ff2 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8012086:	4a0d      	ldr	r2, [pc, #52]	; (80120bc <RadioSetRxConfig+0x1f0>)
 8012088:	2101      	movs	r1, #1
 801208a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801208e:	e7b4      	b.n	8011ffa <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8012090:	f1b9 0f0b 	cmp.w	r9, #11
 8012094:	d803      	bhi.n	801209e <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8012096:	4613      	mov	r3, r2
 8012098:	220c      	movs	r2, #12
 801209a:	839a      	strh	r2, [r3, #28]
 801209c:	e7b7      	b.n	801200e <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801209e:	4b07      	ldr	r3, [pc, #28]	; (80120bc <RadioSetRxConfig+0x1f0>)
 80120a0:	f8a3 901c 	strh.w	r9, [r3, #28]
 80120a4:	e7b3      	b.n	801200e <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80120a6:	f240 7036 	movw	r0, #1846	; 0x736
 80120aa:	f000 f8b5 	bl	8012218 <SUBGRF_ReadRegister>
 80120ae:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80120b2:	f240 7036 	movw	r0, #1846	; 0x736
 80120b6:	f000 f89f 	bl	80121f8 <SUBGRF_WriteRegister>
 80120ba:	e7dd      	b.n	8012078 <RadioSetRxConfig+0x1ac>
 80120bc:	200011f0 	.word	0x200011f0
 80120c0:	200000fc 	.word	0x200000fc
 80120c4:	080166bc 	.word	0x080166bc
 80120c8:	080173c8 	.word	0x080173c8

080120cc <RadioIsChannelFree>:
{
 80120cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120ce:	b08b      	sub	sp, #44	; 0x2c
 80120d0:	4604      	mov	r4, r0
 80120d2:	460f      	mov	r7, r1
 80120d4:	4616      	mov	r6, r2
 80120d6:	461d      	mov	r5, r3
    RadioStandby( );
 80120d8:	f7ff fad0 	bl	801167c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80120dc:	2000      	movs	r0, #0
 80120de:	f7ff fddd 	bl	8011c9c <RadioSetModem>
    RadioSetChannel( freq );
 80120e2:	4620      	mov	r0, r4
 80120e4:	f7ff fce4 	bl	8011ab0 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80120e8:	2301      	movs	r3, #1
 80120ea:	9309      	str	r3, [sp, #36]	; 0x24
 80120ec:	2400      	movs	r4, #0
 80120ee:	9408      	str	r4, [sp, #32]
 80120f0:	9407      	str	r4, [sp, #28]
 80120f2:	9406      	str	r4, [sp, #24]
 80120f4:	9405      	str	r4, [sp, #20]
 80120f6:	9404      	str	r4, [sp, #16]
 80120f8:	9403      	str	r4, [sp, #12]
 80120fa:	9402      	str	r4, [sp, #8]
 80120fc:	2303      	movs	r3, #3
 80120fe:	9301      	str	r3, [sp, #4]
 8012100:	9700      	str	r7, [sp, #0]
 8012102:	4623      	mov	r3, r4
 8012104:	f44f 7216 	mov.w	r2, #600	; 0x258
 8012108:	4639      	mov	r1, r7
 801210a:	4620      	mov	r0, r4
 801210c:	f7ff fede 	bl	8011ecc <RadioSetRxConfig>
    RadioRx( 0 );
 8012110:	4620      	mov	r0, r4
 8012112:	f7ff fce5 	bl	8011ae0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8012116:	f7ff fc79 	bl	8011a0c <RadioGetWakeupTime>
 801211a:	f7ef ff91 	bl	8002040 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 801211e:	f001 fadb 	bl	80136d8 <UTIL_TIMER_GetCurrentTime>
 8012122:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8012124:	4620      	mov	r0, r4
 8012126:	f001 fae1 	bl	80136ec <UTIL_TIMER_GetElapsedTime>
 801212a:	42a8      	cmp	r0, r5
 801212c:	d206      	bcs.n	801213c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 801212e:	2000      	movs	r0, #0
 8012130:	f7ff fc96 	bl	8011a60 <RadioRssi>
        if( rssi > rssiThresh )
 8012134:	42b0      	cmp	r0, r6
 8012136:	ddf5      	ble.n	8012124 <RadioIsChannelFree+0x58>
            status = false;
 8012138:	2400      	movs	r4, #0
 801213a:	e000      	b.n	801213e <RadioIsChannelFree+0x72>
    bool status = true;
 801213c:	2401      	movs	r4, #1
    RadioStandby( );
 801213e:	f7ff fa9d 	bl	801167c <RadioStandby>
}
 8012142:	4620      	mov	r0, r4
 8012144:	b00b      	add	sp, #44	; 0x2c
 8012146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012148 <RadioInit>:
{
 8012148:	b570      	push	{r4, r5, r6, lr}
 801214a:	b082      	sub	sp, #8
    RadioEvents = events;
 801214c:	4b1d      	ldr	r3, [pc, #116]	; (80121c4 <RadioInit+0x7c>)
 801214e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8012150:	4d1d      	ldr	r5, [pc, #116]	; (80121c8 <RadioInit+0x80>)
 8012152:	2400      	movs	r4, #0
 8012154:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8012156:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8012158:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801215a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 801215c:	481b      	ldr	r0, [pc, #108]	; (80121cc <RadioInit+0x84>)
 801215e:	f000 fb27 	bl	80127b0 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8012162:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8012164:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8012166:	f000 fa53 	bl	8012610 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801216a:	4621      	mov	r1, r4
 801216c:	4620      	mov	r0, r4
 801216e:	f000 fd27 	bl	8012bc0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8012172:	2204      	movs	r2, #4
 8012174:	4621      	mov	r1, r4
 8012176:	2001      	movs	r0, #1
 8012178:	f000 fb9a 	bl	80128b0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801217c:	4623      	mov	r3, r4
 801217e:	4622      	mov	r2, r4
 8012180:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012184:	4608      	mov	r0, r1
 8012186:	f000 fada 	bl	801273e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801218a:	f7ff fce1 	bl	8011b50 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801218e:	4e10      	ldr	r6, [pc, #64]	; (80121d0 <RadioInit+0x88>)
 8012190:	9400      	str	r4, [sp, #0]
 8012192:	4b10      	ldr	r3, [pc, #64]	; (80121d4 <RadioInit+0x8c>)
 8012194:	4622      	mov	r2, r4
 8012196:	f04f 31ff 	mov.w	r1, #4294967295
 801219a:	4630      	mov	r0, r6
 801219c:	f001 fa7e 	bl	801369c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80121a0:	4d0d      	ldr	r5, [pc, #52]	; (80121d8 <RadioInit+0x90>)
 80121a2:	9400      	str	r4, [sp, #0]
 80121a4:	4b0d      	ldr	r3, [pc, #52]	; (80121dc <RadioInit+0x94>)
 80121a6:	4622      	mov	r2, r4
 80121a8:	f04f 31ff 	mov.w	r1, #4294967295
 80121ac:	4628      	mov	r0, r5
 80121ae:	f001 fa75 	bl	801369c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80121b2:	4630      	mov	r0, r6
 80121b4:	f001 fad0 	bl	8013758 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80121b8:	4628      	mov	r0, r5
 80121ba:	f001 facd 	bl	8013758 <UTIL_TIMER_Stop>
}
 80121be:	b002      	add	sp, #8
 80121c0:	bd70      	pop	{r4, r5, r6, pc}
 80121c2:	bf00      	nop
 80121c4:	200011d4 	.word	0x200011d4
 80121c8:	200011f0 	.word	0x200011f0
 80121cc:	080119f9 	.word	0x080119f9
 80121d0:	2000124c 	.word	0x2000124c
 80121d4:	08011541 	.word	0x08011541
 80121d8:	200011d8 	.word	0x200011d8
 80121dc:	08011569 	.word	0x08011569

080121e0 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 80121e0:	4b01      	ldr	r3, [pc, #4]	; (80121e8 <SUBGRF_GetOperatingMode+0x8>)
 80121e2:	7818      	ldrb	r0, [r3, #0]
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop
 80121e8:	2000126a 	.word	0x2000126a

080121ec <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 80121ec:	4b01      	ldr	r3, [pc, #4]	; (80121f4 <SUBGRF_GetPacketType+0x8>)
 80121ee:	7818      	ldrb	r0, [r3, #0]
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	2000126b 	.word	0x2000126b

080121f8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80121f8:	b500      	push	{lr}
 80121fa:	b083      	sub	sp, #12
 80121fc:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8012200:	2301      	movs	r3, #1
 8012202:	f10d 0207 	add.w	r2, sp, #7
 8012206:	4601      	mov	r1, r0
 8012208:	4802      	ldr	r0, [pc, #8]	; (8012214 <SUBGRF_WriteRegister+0x1c>)
 801220a:	f7f4 ff8d 	bl	8007128 <HAL_SUBGHZ_WriteRegisters>
}
 801220e:	b003      	add	sp, #12
 8012210:	f85d fb04 	ldr.w	pc, [sp], #4
 8012214:	200003e4 	.word	0x200003e4

08012218 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8012218:	b500      	push	{lr}
 801221a:	b083      	sub	sp, #12
 801221c:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801221e:	2301      	movs	r3, #1
 8012220:	f10d 0207 	add.w	r2, sp, #7
 8012224:	4803      	ldr	r0, [pc, #12]	; (8012234 <SUBGRF_ReadRegister+0x1c>)
 8012226:	f7f4 ffcf 	bl	80071c8 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 801222a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801222e:	b003      	add	sp, #12
 8012230:	f85d fb04 	ldr.w	pc, [sp], #4
 8012234:	200003e4 	.word	0x200003e4

08012238 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8012238:	b510      	push	{r4, lr}
 801223a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 801223c:	f7f0 ffc2 	bl	80031c4 <RBI_IsDCDC>
 8012240:	2801      	cmp	r0, #1
 8012242:	d000      	beq.n	8012246 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8012244:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8012246:	f640 1023 	movw	r0, #2339	; 0x923
 801224a:	f7ff ffe5 	bl	8012218 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 801224e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8012252:	4321      	orrs	r1, r4
 8012254:	f640 1023 	movw	r0, #2339	; 0x923
 8012258:	f7ff ffce 	bl	80121f8 <SUBGRF_WriteRegister>
}
 801225c:	e7f2      	b.n	8012244 <Radio_SMPS_Set+0xc>

0801225e <SUBGRF_SetWhiteningSeed>:
{
 801225e:	b510      	push	{r4, lr}
 8012260:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8012262:	f7ff ffc3 	bl	80121ec <SUBGRF_GetPacketType>
 8012266:	b100      	cbz	r0, 801226a <SUBGRF_SetWhiteningSeed+0xc>
}
 8012268:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801226a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801226e:	f7ff ffd3 	bl	8012218 <SUBGRF_ReadRegister>
 8012272:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8012276:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801227a:	4301      	orrs	r1, r0
 801227c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012280:	f7ff ffba 	bl	80121f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8012284:	b2e1      	uxtb	r1, r4
 8012286:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801228a:	f7ff ffb5 	bl	80121f8 <SUBGRF_WriteRegister>
}
 801228e:	e7eb      	b.n	8012268 <SUBGRF_SetWhiteningSeed+0xa>

08012290 <SUBGRF_WriteRegisters>:
{
 8012290:	b510      	push	{r4, lr}
 8012292:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012294:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012298:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801229a:	460a      	mov	r2, r1
 801229c:	4601      	mov	r1, r0
 801229e:	4803      	ldr	r0, [pc, #12]	; (80122ac <SUBGRF_WriteRegisters+0x1c>)
 80122a0:	f7f4 ff42 	bl	8007128 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122a4:	f384 8810 	msr	PRIMASK, r4
}
 80122a8:	bd10      	pop	{r4, pc}
 80122aa:	bf00      	nop
 80122ac:	200003e4 	.word	0x200003e4

080122b0 <SUBGRF_SetSyncWord>:
{
 80122b0:	b508      	push	{r3, lr}
 80122b2:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80122b4:	2208      	movs	r2, #8
 80122b6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80122ba:	f7ff ffe9 	bl	8012290 <SUBGRF_WriteRegisters>
}
 80122be:	2000      	movs	r0, #0
 80122c0:	bd08      	pop	{r3, pc}

080122c2 <SUBGRF_SetCrcSeed>:
{
 80122c2:	b500      	push	{lr}
 80122c4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80122c6:	0a03      	lsrs	r3, r0, #8
 80122c8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80122cc:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80122d0:	f7ff ff8c 	bl	80121ec <SUBGRF_GetPacketType>
 80122d4:	b110      	cbz	r0, 80122dc <SUBGRF_SetCrcSeed+0x1a>
}
 80122d6:	b003      	add	sp, #12
 80122d8:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80122dc:	2202      	movs	r2, #2
 80122de:	a901      	add	r1, sp, #4
 80122e0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80122e4:	f7ff ffd4 	bl	8012290 <SUBGRF_WriteRegisters>
}
 80122e8:	e7f5      	b.n	80122d6 <SUBGRF_SetCrcSeed+0x14>

080122ea <SUBGRF_SetCrcPolynomial>:
{
 80122ea:	b500      	push	{lr}
 80122ec:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80122ee:	0a03      	lsrs	r3, r0, #8
 80122f0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80122f4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80122f8:	f7ff ff78 	bl	80121ec <SUBGRF_GetPacketType>
 80122fc:	b110      	cbz	r0, 8012304 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80122fe:	b003      	add	sp, #12
 8012300:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8012304:	2202      	movs	r2, #2
 8012306:	a901      	add	r1, sp, #4
 8012308:	f240 60be 	movw	r0, #1726	; 0x6be
 801230c:	f7ff ffc0 	bl	8012290 <SUBGRF_WriteRegisters>
}
 8012310:	e7f5      	b.n	80122fe <SUBGRF_SetCrcPolynomial+0x14>
	...

08012314 <SUBGRF_ReadRegisters>:
{
 8012314:	b510      	push	{r4, lr}
 8012316:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012318:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801231c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801231e:	460a      	mov	r2, r1
 8012320:	4601      	mov	r1, r0
 8012322:	4803      	ldr	r0, [pc, #12]	; (8012330 <SUBGRF_ReadRegisters+0x1c>)
 8012324:	f7f4 ff50 	bl	80071c8 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012328:	f384 8810 	msr	PRIMASK, r4
}
 801232c:	bd10      	pop	{r4, pc}
 801232e:	bf00      	nop
 8012330:	200003e4 	.word	0x200003e4

08012334 <SUBGRF_WriteBuffer>:
{
 8012334:	b510      	push	{r4, lr}
 8012336:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012338:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801233c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801233e:	460a      	mov	r2, r1
 8012340:	4601      	mov	r1, r0
 8012342:	4803      	ldr	r0, [pc, #12]	; (8012350 <SUBGRF_WriteBuffer+0x1c>)
 8012344:	f7f5 f89e 	bl	8007484 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012348:	f384 8810 	msr	PRIMASK, r4
}
 801234c:	bd10      	pop	{r4, pc}
 801234e:	bf00      	nop
 8012350:	200003e4 	.word	0x200003e4

08012354 <SUBGRF_SetPayload>:
{
 8012354:	b508      	push	{r3, lr}
 8012356:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8012358:	4601      	mov	r1, r0
 801235a:	2000      	movs	r0, #0
 801235c:	f7ff ffea 	bl	8012334 <SUBGRF_WriteBuffer>
}
 8012360:	bd08      	pop	{r3, pc}
	...

08012364 <SUBGRF_ReadBuffer>:
{
 8012364:	b510      	push	{r4, lr}
 8012366:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012368:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801236c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801236e:	460a      	mov	r2, r1
 8012370:	4601      	mov	r1, r0
 8012372:	4803      	ldr	r0, [pc, #12]	; (8012380 <SUBGRF_ReadBuffer+0x1c>)
 8012374:	f7f5 f8d0 	bl	8007518 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012378:	f384 8810 	msr	PRIMASK, r4
}
 801237c:	bd10      	pop	{r4, pc}
 801237e:	bf00      	nop
 8012380:	200003e4 	.word	0x200003e4

08012384 <SUBGRF_WriteCommand>:
{
 8012384:	b510      	push	{r4, lr}
 8012386:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012388:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801238c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801238e:	460a      	mov	r2, r1
 8012390:	4601      	mov	r1, r0
 8012392:	4803      	ldr	r0, [pc, #12]	; (80123a0 <SUBGRF_WriteCommand+0x1c>)
 8012394:	f7f4 ff6c 	bl	8007270 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012398:	f384 8810 	msr	PRIMASK, r4
}
 801239c:	bd10      	pop	{r4, pc}
 801239e:	bf00      	nop
 80123a0:	200003e4 	.word	0x200003e4

080123a4 <SUBGRF_SetSleep>:
{
 80123a4:	b510      	push	{r4, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80123aa:	2000      	movs	r0, #0
 80123ac:	f7f0 fefe 	bl	80031ac <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80123b0:	2002      	movs	r0, #2
 80123b2:	f7ff ff41 	bl	8012238 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80123b6:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80123ba:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80123be:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80123c0:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80123c4:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80123c6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80123ca:	2201      	movs	r2, #1
 80123cc:	f10d 0107 	add.w	r1, sp, #7
 80123d0:	2084      	movs	r0, #132	; 0x84
 80123d2:	f7ff ffd7 	bl	8012384 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80123d6:	4b02      	ldr	r3, [pc, #8]	; (80123e0 <SUBGRF_SetSleep+0x3c>)
 80123d8:	2200      	movs	r2, #0
 80123da:	701a      	strb	r2, [r3, #0]
}
 80123dc:	b002      	add	sp, #8
 80123de:	bd10      	pop	{r4, pc}
 80123e0:	2000126a 	.word	0x2000126a

080123e4 <SUBGRF_SetStandby>:
{
 80123e4:	b500      	push	{lr}
 80123e6:	b083      	sub	sp, #12
 80123e8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80123ec:	2201      	movs	r2, #1
 80123ee:	f10d 0107 	add.w	r1, sp, #7
 80123f2:	2080      	movs	r0, #128	; 0x80
 80123f4:	f7ff ffc6 	bl	8012384 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80123f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80123fc:	b92b      	cbnz	r3, 801240a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80123fe:	4b05      	ldr	r3, [pc, #20]	; (8012414 <SUBGRF_SetStandby+0x30>)
 8012400:	2201      	movs	r2, #1
 8012402:	701a      	strb	r2, [r3, #0]
}
 8012404:	b003      	add	sp, #12
 8012406:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801240a:	4b02      	ldr	r3, [pc, #8]	; (8012414 <SUBGRF_SetStandby+0x30>)
 801240c:	2202      	movs	r2, #2
 801240e:	701a      	strb	r2, [r3, #0]
}
 8012410:	e7f8      	b.n	8012404 <SUBGRF_SetStandby+0x20>
 8012412:	bf00      	nop
 8012414:	2000126a 	.word	0x2000126a

08012418 <SUBGRF_SetTx>:
{
 8012418:	b500      	push	{lr}
 801241a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 801241c:	4b0a      	ldr	r3, [pc, #40]	; (8012448 <SUBGRF_SetTx+0x30>)
 801241e:	2204      	movs	r2, #4
 8012420:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012422:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012426:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801242a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801242e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012432:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8012436:	2203      	movs	r2, #3
 8012438:	a901      	add	r1, sp, #4
 801243a:	2083      	movs	r0, #131	; 0x83
 801243c:	f7ff ffa2 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012440:	b003      	add	sp, #12
 8012442:	f85d fb04 	ldr.w	pc, [sp], #4
 8012446:	bf00      	nop
 8012448:	2000126a 	.word	0x2000126a

0801244c <SUBGRF_SendPayload>:
{
 801244c:	b510      	push	{r4, lr}
 801244e:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8012450:	f7ff ff80 	bl	8012354 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8012454:	4620      	mov	r0, r4
 8012456:	f7ff ffdf 	bl	8012418 <SUBGRF_SetTx>
}
 801245a:	bd10      	pop	{r4, pc}

0801245c <SUBGRF_SetRx>:
{
 801245c:	b500      	push	{lr}
 801245e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8012460:	4b0a      	ldr	r3, [pc, #40]	; (801248c <SUBGRF_SetRx+0x30>)
 8012462:	2205      	movs	r2, #5
 8012464:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012466:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801246a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801246e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012472:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012476:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801247a:	2203      	movs	r2, #3
 801247c:	a901      	add	r1, sp, #4
 801247e:	2082      	movs	r0, #130	; 0x82
 8012480:	f7ff ff80 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012484:	b003      	add	sp, #12
 8012486:	f85d fb04 	ldr.w	pc, [sp], #4
 801248a:	bf00      	nop
 801248c:	2000126a 	.word	0x2000126a

08012490 <SUBGRF_GetRandom>:
{
 8012490:	b570      	push	{r4, r5, r6, lr}
 8012492:	b082      	sub	sp, #8
    uint32_t number = 0;
 8012494:	2600      	movs	r6, #0
 8012496:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8012498:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801249c:	f7ff febc 	bl	8012218 <SUBGRF_ReadRegister>
 80124a0:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80124a2:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80124a6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80124aa:	f7ff fea5 	bl	80121f8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80124ae:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80124b2:	f7ff feb1 	bl	8012218 <SUBGRF_ReadRegister>
 80124b6:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80124b8:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80124bc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80124c0:	f7ff fe9a 	bl	80121f8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80124c4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80124c8:	f7ff ffc8 	bl	801245c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80124cc:	2204      	movs	r2, #4
 80124ce:	eb0d 0102 	add.w	r1, sp, r2
 80124d2:	f640 0019 	movw	r0, #2073	; 0x819
 80124d6:	f7ff ff1d 	bl	8012314 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80124da:	4630      	mov	r0, r6
 80124dc:	f7ff ff82 	bl	80123e4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80124e0:	4629      	mov	r1, r5
 80124e2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80124e6:	f7ff fe87 	bl	80121f8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80124ea:	4621      	mov	r1, r4
 80124ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80124f0:	f7ff fe82 	bl	80121f8 <SUBGRF_WriteRegister>
}
 80124f4:	9801      	ldr	r0, [sp, #4]
 80124f6:	b002      	add	sp, #8
 80124f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080124fc <SUBGRF_SetRxBoosted>:
{
 80124fc:	b510      	push	{r4, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8012502:	4b0c      	ldr	r3, [pc, #48]	; (8012534 <SUBGRF_SetRxBoosted+0x38>)
 8012504:	2205      	movs	r2, #5
 8012506:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8012508:	2197      	movs	r1, #151	; 0x97
 801250a:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801250e:	f7ff fe73 	bl	80121f8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012512:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8012516:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801251a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801251e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012522:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8012526:	2203      	movs	r2, #3
 8012528:	a901      	add	r1, sp, #4
 801252a:	2082      	movs	r0, #130	; 0x82
 801252c:	f7ff ff2a 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012530:	b002      	add	sp, #8
 8012532:	bd10      	pop	{r4, pc}
 8012534:	2000126a 	.word	0x2000126a

08012538 <SUBGRF_SetRxDutyCycle>:
{
 8012538:	b500      	push	{lr}
 801253a:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801253c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012540:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8012544:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012548:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801254c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8012550:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012554:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8012558:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801255c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8012560:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8012564:	2206      	movs	r2, #6
 8012566:	4669      	mov	r1, sp
 8012568:	2094      	movs	r0, #148	; 0x94
 801256a:	f7ff ff0b 	bl	8012384 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801256e:	4b03      	ldr	r3, [pc, #12]	; (801257c <SUBGRF_SetRxDutyCycle+0x44>)
 8012570:	2206      	movs	r2, #6
 8012572:	701a      	strb	r2, [r3, #0]
}
 8012574:	b003      	add	sp, #12
 8012576:	f85d fb04 	ldr.w	pc, [sp], #4
 801257a:	bf00      	nop
 801257c:	2000126a 	.word	0x2000126a

08012580 <SUBGRF_SetCad>:
{
 8012580:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8012582:	2200      	movs	r2, #0
 8012584:	4611      	mov	r1, r2
 8012586:	20c5      	movs	r0, #197	; 0xc5
 8012588:	f7ff fefc 	bl	8012384 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801258c:	4b01      	ldr	r3, [pc, #4]	; (8012594 <SUBGRF_SetCad+0x14>)
 801258e:	2207      	movs	r2, #7
 8012590:	701a      	strb	r2, [r3, #0]
}
 8012592:	bd08      	pop	{r3, pc}
 8012594:	2000126a 	.word	0x2000126a

08012598 <SUBGRF_SetTxContinuousWave>:
{
 8012598:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801259a:	2200      	movs	r2, #0
 801259c:	4611      	mov	r1, r2
 801259e:	20d1      	movs	r0, #209	; 0xd1
 80125a0:	f7ff fef0 	bl	8012384 <SUBGRF_WriteCommand>
}
 80125a4:	bd08      	pop	{r3, pc}

080125a6 <SUBGRF_SetTxInfinitePreamble>:
{
 80125a6:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80125a8:	2200      	movs	r2, #0
 80125aa:	4611      	mov	r1, r2
 80125ac:	20d2      	movs	r0, #210	; 0xd2
 80125ae:	f7ff fee9 	bl	8012384 <SUBGRF_WriteCommand>
}
 80125b2:	bd08      	pop	{r3, pc}

080125b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80125b4:	b500      	push	{lr}
 80125b6:	b083      	sub	sp, #12
 80125b8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80125bc:	2201      	movs	r2, #1
 80125be:	f10d 0107 	add.w	r1, sp, #7
 80125c2:	209f      	movs	r0, #159	; 0x9f
 80125c4:	f7ff fede 	bl	8012384 <SUBGRF_WriteCommand>
}
 80125c8:	b003      	add	sp, #12
 80125ca:	f85d fb04 	ldr.w	pc, [sp], #4

080125ce <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80125ce:	b500      	push	{lr}
 80125d0:	b083      	sub	sp, #12
 80125d2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80125d6:	2201      	movs	r2, #1
 80125d8:	f10d 0107 	add.w	r1, sp, #7
 80125dc:	20a0      	movs	r0, #160	; 0xa0
 80125de:	f7ff fed1 	bl	8012384 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80125e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80125e6:	2b3f      	cmp	r3, #63	; 0x3f
 80125e8:	d90f      	bls.n	801260a <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80125ea:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80125ec:	2200      	movs	r2, #0
        while( mant > 31 )
 80125ee:	e002      	b.n	80125f6 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80125f0:	089b      	lsrs	r3, r3, #2
            exp++;
 80125f2:	3201      	adds	r2, #1
 80125f4:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 80125f6:	2b1f      	cmp	r3, #31
 80125f8:	d8fa      	bhi.n	80125f0 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80125fa:	00d9      	lsls	r1, r3, #3
 80125fc:	b2c9      	uxtb	r1, r1
 80125fe:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8012600:	b2c9      	uxtb	r1, r1
 8012602:	f240 7006 	movw	r0, #1798	; 0x706
 8012606:	f7ff fdf7 	bl	80121f8 <SUBGRF_WriteRegister>
}
 801260a:	b003      	add	sp, #12
 801260c:	f85d fb04 	ldr.w	pc, [sp], #4

08012610 <SUBGRF_SetRegulatorMode>:
{
 8012610:	b500      	push	{lr}
 8012612:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8012614:	f7f0 fdd6 	bl	80031c4 <RBI_IsDCDC>
 8012618:	2801      	cmp	r0, #1
 801261a:	d00b      	beq.n	8012634 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 801261c:	2300      	movs	r3, #0
 801261e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8012622:	2201      	movs	r2, #1
 8012624:	f10d 0107 	add.w	r1, sp, #7
 8012628:	2096      	movs	r0, #150	; 0x96
 801262a:	f7ff feab 	bl	8012384 <SUBGRF_WriteCommand>
}
 801262e:	b003      	add	sp, #12
 8012630:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8012634:	2301      	movs	r3, #1
 8012636:	f88d 3007 	strb.w	r3, [sp, #7]
 801263a:	e7f2      	b.n	8012622 <SUBGRF_SetRegulatorMode+0x12>

0801263c <SUBGRF_Calibrate>:
{
 801263c:	b500      	push	{lr}
 801263e:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012640:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8012644:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012648:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801264a:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801264e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8012650:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8012654:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8012656:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801265a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801265c:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8012660:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8012662:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8012666:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012668:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801266c:	2201      	movs	r2, #1
 801266e:	f10d 0107 	add.w	r1, sp, #7
 8012672:	2089      	movs	r0, #137	; 0x89
 8012674:	f7ff fe86 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012678:	b003      	add	sp, #12
 801267a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012680 <SUBGRF_CalibrateImage>:
{
 8012680:	b500      	push	{lr}
 8012682:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8012684:	4b1f      	ldr	r3, [pc, #124]	; (8012704 <SUBGRF_CalibrateImage+0x84>)
 8012686:	4298      	cmp	r0, r3
 8012688:	d90d      	bls.n	80126a6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801268a:	23e1      	movs	r3, #225	; 0xe1
 801268c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8012690:	23e9      	movs	r3, #233	; 0xe9
 8012692:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8012696:	2202      	movs	r2, #2
 8012698:	a901      	add	r1, sp, #4
 801269a:	2098      	movs	r0, #152	; 0x98
 801269c:	f7ff fe72 	bl	8012384 <SUBGRF_WriteCommand>
}
 80126a0:	b003      	add	sp, #12
 80126a2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80126a6:	4b18      	ldr	r3, [pc, #96]	; (8012708 <SUBGRF_CalibrateImage+0x88>)
 80126a8:	4298      	cmp	r0, r3
 80126aa:	d906      	bls.n	80126ba <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80126ac:	23d7      	movs	r3, #215	; 0xd7
 80126ae:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80126b2:	23db      	movs	r3, #219	; 0xdb
 80126b4:	f88d 3005 	strb.w	r3, [sp, #5]
 80126b8:	e7ed      	b.n	8012696 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80126ba:	4b14      	ldr	r3, [pc, #80]	; (801270c <SUBGRF_CalibrateImage+0x8c>)
 80126bc:	4298      	cmp	r0, r3
 80126be:	d906      	bls.n	80126ce <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80126c0:	23c1      	movs	r3, #193	; 0xc1
 80126c2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80126c6:	23c5      	movs	r3, #197	; 0xc5
 80126c8:	f88d 3005 	strb.w	r3, [sp, #5]
 80126cc:	e7e3      	b.n	8012696 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80126ce:	4b10      	ldr	r3, [pc, #64]	; (8012710 <SUBGRF_CalibrateImage+0x90>)
 80126d0:	4298      	cmp	r0, r3
 80126d2:	d906      	bls.n	80126e2 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80126d4:	2375      	movs	r3, #117	; 0x75
 80126d6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80126da:	2381      	movs	r3, #129	; 0x81
 80126dc:	f88d 3005 	strb.w	r3, [sp, #5]
 80126e0:	e7d9      	b.n	8012696 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80126e2:	4b0c      	ldr	r3, [pc, #48]	; (8012714 <SUBGRF_CalibrateImage+0x94>)
 80126e4:	4298      	cmp	r0, r3
 80126e6:	d906      	bls.n	80126f6 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 80126e8:	236b      	movs	r3, #107	; 0x6b
 80126ea:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80126ee:	236f      	movs	r3, #111	; 0x6f
 80126f0:	f88d 3005 	strb.w	r3, [sp, #5]
 80126f4:	e7cf      	b.n	8012696 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 80126f6:	2329      	movs	r3, #41	; 0x29
 80126f8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 80126fc:	232b      	movs	r3, #43	; 0x2b
 80126fe:	f88d 3005 	strb.w	r3, [sp, #5]
 8012702:	e7c8      	b.n	8012696 <SUBGRF_CalibrateImage+0x16>
 8012704:	35a4e900 	.word	0x35a4e900
 8012708:	32a9f880 	.word	0x32a9f880
 801270c:	2de54480 	.word	0x2de54480
 8012710:	1b6b0b00 	.word	0x1b6b0b00
 8012714:	1954fc40 	.word	0x1954fc40

08012718 <SUBGRF_SetPaConfig>:
{
 8012718:	b500      	push	{lr}
 801271a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 801271c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8012720:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8012724:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8012728:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801272c:	2204      	movs	r2, #4
 801272e:	eb0d 0102 	add.w	r1, sp, r2
 8012732:	2095      	movs	r0, #149	; 0x95
 8012734:	f7ff fe26 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012738:	b003      	add	sp, #12
 801273a:	f85d fb04 	ldr.w	pc, [sp], #4

0801273e <SUBGRF_SetDioIrqParams>:
{
 801273e:	b500      	push	{lr}
 8012740:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8012742:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8012746:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801274a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801274e:	0a08      	lsrs	r0, r1, #8
 8012750:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8012754:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8012758:	0a11      	lsrs	r1, r2, #8
 801275a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801275e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8012762:	0a1a      	lsrs	r2, r3, #8
 8012764:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8012768:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801276c:	2208      	movs	r2, #8
 801276e:	4669      	mov	r1, sp
 8012770:	4610      	mov	r0, r2
 8012772:	f7ff fe07 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012776:	b003      	add	sp, #12
 8012778:	f85d fb04 	ldr.w	pc, [sp], #4

0801277c <SUBGRF_SetTcxoMode>:
{
 801277c:	b500      	push	{lr}
 801277e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8012780:	f000 0007 	and.w	r0, r0, #7
 8012784:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012788:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801278c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012790:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012794:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8012798:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801279c:	2204      	movs	r2, #4
 801279e:	eb0d 0102 	add.w	r1, sp, r2
 80127a2:	2097      	movs	r0, #151	; 0x97
 80127a4:	f7ff fdee 	bl	8012384 <SUBGRF_WriteCommand>
}
 80127a8:	b003      	add	sp, #12
 80127aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080127b0 <SUBGRF_Init>:
{
 80127b0:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80127b2:	b108      	cbz	r0, 80127b8 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80127b4:	4a18      	ldr	r2, [pc, #96]	; (8012818 <SUBGRF_Init+0x68>)
 80127b6:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80127b8:	f7ef fb32 	bl	8001e20 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80127bc:	2002      	movs	r0, #2
 80127be:	f7ff fd3b 	bl	8012238 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80127c2:	2000      	movs	r0, #0
 80127c4:	4b15      	ldr	r3, [pc, #84]	; (801281c <SUBGRF_Init+0x6c>)
 80127c6:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80127c8:	f7ff fe0c 	bl	80123e4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80127cc:	f7f0 fcf6 	bl	80031bc <RBI_IsTCXO>
 80127d0:	2801      	cmp	r0, #1
 80127d2:	d014      	beq.n	80127fe <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80127d4:	2120      	movs	r1, #32
 80127d6:	f640 1011 	movw	r0, #2321	; 0x911
 80127da:	f7ff fd0d 	bl	80121f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80127de:	2120      	movs	r1, #32
 80127e0:	f640 1012 	movw	r0, #2322	; 0x912
 80127e4:	f7ff fd08 	bl	80121f8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80127e8:	210e      	movs	r1, #14
 80127ea:	f640 101f 	movw	r0, #2335	; 0x91f
 80127ee:	f7ff fd03 	bl	80121f8 <SUBGRF_WriteRegister>
    RBI_Init();
 80127f2:	f7f0 fcd7 	bl	80031a4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80127f6:	4b0a      	ldr	r3, [pc, #40]	; (8012820 <SUBGRF_Init+0x70>)
 80127f8:	2201      	movs	r2, #1
 80127fa:	701a      	strb	r2, [r3, #0]
}
 80127fc:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80127fe:	2140      	movs	r1, #64	; 0x40
 8012800:	f7ff ffbc 	bl	801277c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8012804:	2100      	movs	r1, #0
 8012806:	f640 1011 	movw	r0, #2321	; 0x911
 801280a:	f7ff fcf5 	bl	80121f8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801280e:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8012812:	f7ff ff13 	bl	801263c <SUBGRF_Calibrate>
 8012816:	e7e7      	b.n	80127e8 <SUBGRF_Init+0x38>
 8012818:	2000126c 	.word	0x2000126c
 801281c:	20001268 	.word	0x20001268
 8012820:	2000126a 	.word	0x2000126a

08012824 <SUBGRF_SetRfFrequency>:
{
 8012824:	b510      	push	{r4, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 801282a:	4b12      	ldr	r3, [pc, #72]	; (8012874 <SUBGRF_SetRfFrequency+0x50>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	b1d3      	cbz	r3, 8012866 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8012830:	4a11      	ldr	r2, [pc, #68]	; (8012878 <SUBGRF_SetRfFrequency+0x54>)
 8012832:	2300      	movs	r3, #0
 8012834:	0660      	lsls	r0, r4, #25
 8012836:	09e1      	lsrs	r1, r4, #7
 8012838:	f7ee fc12 	bl	8001060 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801283c:	0e03      	lsrs	r3, r0, #24
 801283e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8012842:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012846:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801284a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801284e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8012852:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8012856:	2204      	movs	r2, #4
 8012858:	eb0d 0102 	add.w	r1, sp, r2
 801285c:	2086      	movs	r0, #134	; 0x86
 801285e:	f7ff fd91 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012862:	b002      	add	sp, #8
 8012864:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8012866:	f7ff ff0b 	bl	8012680 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801286a:	4b02      	ldr	r3, [pc, #8]	; (8012874 <SUBGRF_SetRfFrequency+0x50>)
 801286c:	2201      	movs	r2, #1
 801286e:	701a      	strb	r2, [r3, #0]
 8012870:	e7de      	b.n	8012830 <SUBGRF_SetRfFrequency+0xc>
 8012872:	bf00      	nop
 8012874:	20001268 	.word	0x20001268
 8012878:	01e84800 	.word	0x01e84800

0801287c <SUBGRF_SetPacketType>:
{
 801287c:	b500      	push	{lr}
 801287e:	b083      	sub	sp, #12
 8012880:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8012884:	b2c3      	uxtb	r3, r0
 8012886:	4a09      	ldr	r2, [pc, #36]	; (80128ac <SUBGRF_SetPacketType+0x30>)
 8012888:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801288a:	b143      	cbz	r3, 801289e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801288c:	2201      	movs	r2, #1
 801288e:	f10d 0107 	add.w	r1, sp, #7
 8012892:	208a      	movs	r0, #138	; 0x8a
 8012894:	f7ff fd76 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012898:	b003      	add	sp, #12
 801289a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801289e:	2100      	movs	r1, #0
 80128a0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80128a4:	f7ff fca8 	bl	80121f8 <SUBGRF_WriteRegister>
 80128a8:	e7f0      	b.n	801288c <SUBGRF_SetPacketType+0x10>
 80128aa:	bf00      	nop
 80128ac:	2000126b 	.word	0x2000126b

080128b0 <SUBGRF_SetTxParams>:
{
 80128b0:	b570      	push	{r4, r5, r6, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	460c      	mov	r4, r1
 80128b6:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80128b8:	2801      	cmp	r0, #1
 80128ba:	d035      	beq.n	8012928 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80128bc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80128c0:	f7ff fcaa 	bl	8012218 <SUBGRF_ReadRegister>
 80128c4:	f040 011e 	orr.w	r1, r0, #30
 80128c8:	b2c9      	uxtb	r1, r1
 80128ca:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80128ce:	f7ff fc93 	bl	80121f8 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80128d2:	2001      	movs	r0, #1
 80128d4:	f7f0 fc7a 	bl	80031cc <RBI_GetRFOMaxPowerConfig>
 80128d8:	4605      	mov	r5, r0
        if (power > max_power)
 80128da:	4284      	cmp	r4, r0
 80128dc:	dd00      	ble.n	80128e0 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 80128de:	b244      	sxtb	r4, r0
        if (max_power == 20)
 80128e0:	2d14      	cmp	r5, #20
 80128e2:	d054      	beq.n	801298e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 80128e4:	2d11      	cmp	r5, #17
 80128e6:	d05c      	beq.n	80129a2 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 80128e8:	2d0e      	cmp	r5, #14
 80128ea:	d064      	beq.n	80129b6 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80128ec:	2301      	movs	r3, #1
 80128ee:	2200      	movs	r2, #0
 80128f0:	2107      	movs	r1, #7
 80128f2:	2004      	movs	r0, #4
 80128f4:	f7ff ff10 	bl	8012718 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80128f8:	1b64      	subs	r4, r4, r5
 80128fa:	3416      	adds	r4, #22
 80128fc:	b265      	sxtb	r5, r4
        if (power < -9)
 80128fe:	f115 0f09 	cmn.w	r5, #9
 8012902:	da01      	bge.n	8012908 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8012904:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8012908:	2138      	movs	r1, #56	; 0x38
 801290a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801290e:	f7ff fc73 	bl	80121f8 <SUBGRF_WriteRegister>
    buf[0] = power;
 8012912:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8012916:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801291a:	2202      	movs	r2, #2
 801291c:	a901      	add	r1, sp, #4
 801291e:	208e      	movs	r0, #142	; 0x8e
 8012920:	f7ff fd30 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012924:	b002      	add	sp, #8
 8012926:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8012928:	2000      	movs	r0, #0
 801292a:	f7f0 fc4f 	bl	80031cc <RBI_GetRFOMaxPowerConfig>
 801292e:	4605      	mov	r5, r0
        if (power >  max_power)
 8012930:	4284      	cmp	r4, r0
 8012932:	dd00      	ble.n	8012936 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8012934:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8012936:	2d0e      	cmp	r5, #14
 8012938:	d015      	beq.n	8012966 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 801293a:	2d0a      	cmp	r5, #10
 801293c:	d01d      	beq.n	801297a <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801293e:	2301      	movs	r3, #1
 8012940:	461a      	mov	r2, r3
 8012942:	2100      	movs	r1, #0
 8012944:	2007      	movs	r0, #7
 8012946:	f7ff fee7 	bl	8012718 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801294a:	1b65      	subs	r5, r4, r5
 801294c:	350e      	adds	r5, #14
 801294e:	b26d      	sxtb	r5, r5
        if (power < -17)
 8012950:	f115 0f11 	cmn.w	r5, #17
 8012954:	da01      	bge.n	801295a <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8012956:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801295a:	2118      	movs	r1, #24
 801295c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012960:	f7ff fc4a 	bl	80121f8 <SUBGRF_WriteRegister>
 8012964:	e7d5      	b.n	8012912 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8012966:	2301      	movs	r3, #1
 8012968:	461a      	mov	r2, r3
 801296a:	2100      	movs	r1, #0
 801296c:	2004      	movs	r0, #4
 801296e:	f7ff fed3 	bl	8012718 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012972:	1b65      	subs	r5, r4, r5
 8012974:	350e      	adds	r5, #14
 8012976:	b26d      	sxtb	r5, r5
 8012978:	e7ea      	b.n	8012950 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801297a:	2301      	movs	r3, #1
 801297c:	461a      	mov	r2, r3
 801297e:	2100      	movs	r1, #0
 8012980:	4618      	mov	r0, r3
 8012982:	f7ff fec9 	bl	8012718 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8012986:	1b65      	subs	r5, r4, r5
 8012988:	350d      	adds	r5, #13
 801298a:	b26d      	sxtb	r5, r5
 801298c:	e7e0      	b.n	8012950 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801298e:	2301      	movs	r3, #1
 8012990:	2200      	movs	r2, #0
 8012992:	2105      	movs	r1, #5
 8012994:	2003      	movs	r0, #3
 8012996:	f7ff febf 	bl	8012718 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801299a:	1b65      	subs	r5, r4, r5
 801299c:	3516      	adds	r5, #22
 801299e:	b26d      	sxtb	r5, r5
 80129a0:	e7ad      	b.n	80128fe <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80129a2:	2301      	movs	r3, #1
 80129a4:	2200      	movs	r2, #0
 80129a6:	2103      	movs	r1, #3
 80129a8:	2002      	movs	r0, #2
 80129aa:	f7ff feb5 	bl	8012718 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80129ae:	1b65      	subs	r5, r4, r5
 80129b0:	3516      	adds	r5, #22
 80129b2:	b26d      	sxtb	r5, r5
 80129b4:	e7a3      	b.n	80128fe <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80129b6:	2301      	movs	r3, #1
 80129b8:	2200      	movs	r2, #0
 80129ba:	2102      	movs	r1, #2
 80129bc:	4608      	mov	r0, r1
 80129be:	f7ff feab 	bl	8012718 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80129c2:	1b65      	subs	r5, r4, r5
 80129c4:	350e      	adds	r5, #14
 80129c6:	b26d      	sxtb	r5, r5
 80129c8:	e799      	b.n	80128fe <SUBGRF_SetTxParams+0x4e>
	...

080129cc <SUBGRF_SetModulationParams>:
{
 80129cc:	b510      	push	{r4, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80129d2:	4b3e      	ldr	r3, [pc, #248]	; (8012acc <SUBGRF_SetModulationParams+0x100>)
 80129d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80129d8:	ab02      	add	r3, sp, #8
 80129da:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80129de:	7820      	ldrb	r0, [r4, #0]
 80129e0:	4b3b      	ldr	r3, [pc, #236]	; (8012ad0 <SUBGRF_SetModulationParams+0x104>)
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	4298      	cmp	r0, r3
 80129e6:	d106      	bne.n	80129f6 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80129e8:	7823      	ldrb	r3, [r4, #0]
 80129ea:	2b03      	cmp	r3, #3
 80129ec:	d82c      	bhi.n	8012a48 <SUBGRF_SetModulationParams+0x7c>
 80129ee:	e8df f003 	tbb	[pc, r3]
 80129f2:	4205      	.short	0x4205
 80129f4:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80129f6:	f7ff ff41 	bl	801287c <SUBGRF_SetPacketType>
 80129fa:	e7f5      	b.n	80129e8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80129fc:	6862      	ldr	r2, [r4, #4]
 80129fe:	4b35      	ldr	r3, [pc, #212]	; (8012ad4 <SUBGRF_SetModulationParams+0x108>)
 8012a00:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012a04:	0c1a      	lsrs	r2, r3, #16
 8012a06:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012a0a:	0a1a      	lsrs	r2, r3, #8
 8012a0c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012a10:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012a14:	7b23      	ldrb	r3, [r4, #12]
 8012a16:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012a1a:	7b63      	ldrb	r3, [r4, #13]
 8012a1c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8012a20:	68a1      	ldr	r1, [r4, #8]
 8012a22:	4a2d      	ldr	r2, [pc, #180]	; (8012ad8 <SUBGRF_SetModulationParams+0x10c>)
 8012a24:	2300      	movs	r3, #0
 8012a26:	0648      	lsls	r0, r1, #25
 8012a28:	09c9      	lsrs	r1, r1, #7
 8012a2a:	f7ee fb19 	bl	8001060 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8012a2e:	0c03      	lsrs	r3, r0, #16
 8012a30:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8012a34:	0a03      	lsrs	r3, r0, #8
 8012a36:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8012a3a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012a3e:	2208      	movs	r2, #8
 8012a40:	4669      	mov	r1, sp
 8012a42:	208b      	movs	r0, #139	; 0x8b
 8012a44:	f7ff fc9e 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012a48:	b002      	add	sp, #8
 8012a4a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8012a4c:	6922      	ldr	r2, [r4, #16]
 8012a4e:	4b21      	ldr	r3, [pc, #132]	; (8012ad4 <SUBGRF_SetModulationParams+0x108>)
 8012a50:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012a54:	0c1a      	lsrs	r2, r3, #16
 8012a56:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012a5a:	0a1a      	lsrs	r2, r3, #8
 8012a5c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012a60:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8012a64:	7d23      	ldrb	r3, [r4, #20]
 8012a66:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012a6a:	2204      	movs	r2, #4
 8012a6c:	4669      	mov	r1, sp
 8012a6e:	208b      	movs	r0, #139	; 0x8b
 8012a70:	f7ff fc88 	bl	8012384 <SUBGRF_WriteCommand>
        break;
 8012a74:	e7e8      	b.n	8012a48 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8012a76:	7e23      	ldrb	r3, [r4, #24]
 8012a78:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8012a7c:	7e63      	ldrb	r3, [r4, #25]
 8012a7e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8012a82:	7ea3      	ldrb	r3, [r4, #26]
 8012a84:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8012a88:	7ee3      	ldrb	r3, [r4, #27]
 8012a8a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012a8e:	2204      	movs	r2, #4
 8012a90:	4669      	mov	r1, sp
 8012a92:	208b      	movs	r0, #139	; 0x8b
 8012a94:	f7ff fc76 	bl	8012384 <SUBGRF_WriteCommand>
        break;
 8012a98:	e7d6      	b.n	8012a48 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8012a9a:	6862      	ldr	r2, [r4, #4]
 8012a9c:	4b0d      	ldr	r3, [pc, #52]	; (8012ad4 <SUBGRF_SetModulationParams+0x108>)
 8012a9e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012aa2:	0c1a      	lsrs	r2, r3, #16
 8012aa4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012aa8:	0a1a      	lsrs	r2, r3, #8
 8012aaa:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012aae:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012ab2:	7b23      	ldrb	r3, [r4, #12]
 8012ab4:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012ab8:	7b63      	ldrb	r3, [r4, #13]
 8012aba:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012abe:	2205      	movs	r2, #5
 8012ac0:	4669      	mov	r1, sp
 8012ac2:	208b      	movs	r0, #139	; 0x8b
 8012ac4:	f7ff fc5e 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012ac8:	e7be      	b.n	8012a48 <SUBGRF_SetModulationParams+0x7c>
 8012aca:	bf00      	nop
 8012acc:	080166c4 	.word	0x080166c4
 8012ad0:	2000126b 	.word	0x2000126b
 8012ad4:	3d090000 	.word	0x3d090000
 8012ad8:	01e84800 	.word	0x01e84800

08012adc <SUBGRF_SetPacketParams>:
{
 8012adc:	b510      	push	{r4, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8012ae2:	ab01      	add	r3, sp, #4
 8012ae4:	4a33      	ldr	r2, [pc, #204]	; (8012bb4 <SUBGRF_SetPacketParams+0xd8>)
 8012ae6:	ca07      	ldmia	r2, {r0, r1, r2}
 8012ae8:	c303      	stmia	r3!, {r0, r1}
 8012aea:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8012aec:	7820      	ldrb	r0, [r4, #0]
 8012aee:	4b32      	ldr	r3, [pc, #200]	; (8012bb8 <SUBGRF_SetPacketParams+0xdc>)
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	4298      	cmp	r0, r3
 8012af4:	d106      	bne.n	8012b04 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8012af6:	7823      	ldrb	r3, [r4, #0]
 8012af8:	2b03      	cmp	r3, #3
 8012afa:	d82a      	bhi.n	8012b52 <SUBGRF_SetPacketParams+0x76>
 8012afc:	e8df f003 	tbb	[pc, r3]
 8012b00:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8012b04:	f7ff feba 	bl	801287c <SUBGRF_SetPacketType>
 8012b08:	e7f5      	b.n	8012af6 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8012b0a:	7a63      	ldrb	r3, [r4, #9]
 8012b0c:	2bf1      	cmp	r3, #241	; 0xf1
 8012b0e:	d022      	beq.n	8012b56 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8012b10:	2bf2      	cmp	r3, #242	; 0xf2
 8012b12:	d02a      	beq.n	8012b6a <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8012b14:	8862      	ldrh	r2, [r4, #2]
 8012b16:	0a11      	lsrs	r1, r2, #8
 8012b18:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8012b1c:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8012b20:	7922      	ldrb	r2, [r4, #4]
 8012b22:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8012b26:	7962      	ldrb	r2, [r4, #5]
 8012b28:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8012b2c:	79a2      	ldrb	r2, [r4, #6]
 8012b2e:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8012b32:	79e2      	ldrb	r2, [r4, #7]
 8012b34:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8012b38:	7a22      	ldrb	r2, [r4, #8]
 8012b3a:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8012b3e:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8012b42:	7aa3      	ldrb	r3, [r4, #10]
 8012b44:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8012b48:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8012b4a:	a901      	add	r1, sp, #4
 8012b4c:	208c      	movs	r0, #140	; 0x8c
 8012b4e:	f7ff fc19 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012b52:	b004      	add	sp, #16
 8012b54:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8012b56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012b5a:	f7ff fbb2 	bl	80122c2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8012b5e:	f248 0005 	movw	r0, #32773	; 0x8005
 8012b62:	f7ff fbc2 	bl	80122ea <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8012b66:	2302      	movs	r3, #2
 8012b68:	e7d4      	b.n	8012b14 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8012b6a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8012b6e:	f7ff fba8 	bl	80122c2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8012b72:	f241 0021 	movw	r0, #4129	; 0x1021
 8012b76:	f7ff fbb8 	bl	80122ea <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8012b7a:	2306      	movs	r3, #6
 8012b7c:	e7ca      	b.n	8012b14 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8012b7e:	7b23      	ldrb	r3, [r4, #12]
 8012b80:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8012b84:	2201      	movs	r2, #1
        break;
 8012b86:	e7e0      	b.n	8012b4a <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8012b88:	89e3      	ldrh	r3, [r4, #14]
 8012b8a:	0a1a      	lsrs	r2, r3, #8
 8012b8c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8012b90:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8012b94:	7c23      	ldrb	r3, [r4, #16]
 8012b96:	4a09      	ldr	r2, [pc, #36]	; (8012bbc <SUBGRF_SetPacketParams+0xe0>)
 8012b98:	7013      	strb	r3, [r2, #0]
 8012b9a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8012b9e:	7c63      	ldrb	r3, [r4, #17]
 8012ba0:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8012ba4:	7ca3      	ldrb	r3, [r4, #18]
 8012ba6:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8012baa:	7ce3      	ldrb	r3, [r4, #19]
 8012bac:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8012bb0:	2206      	movs	r2, #6
        break;
 8012bb2:	e7ca      	b.n	8012b4a <SUBGRF_SetPacketParams+0x6e>
 8012bb4:	080166cc 	.word	0x080166cc
 8012bb8:	2000126b 	.word	0x2000126b
 8012bbc:	20001269 	.word	0x20001269

08012bc0 <SUBGRF_SetBufferBaseAddress>:
{
 8012bc0:	b500      	push	{lr}
 8012bc2:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8012bc4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8012bc8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8012bcc:	2202      	movs	r2, #2
 8012bce:	a901      	add	r1, sp, #4
 8012bd0:	208f      	movs	r0, #143	; 0x8f
 8012bd2:	f7ff fbd7 	bl	8012384 <SUBGRF_WriteCommand>
}
 8012bd6:	b003      	add	sp, #12
 8012bd8:	f85d fb04 	ldr.w	pc, [sp], #4

08012bdc <SUBGRF_ReadCommand>:
{
 8012bdc:	b510      	push	{r4, lr}
 8012bde:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012be0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012be4:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8012be6:	460a      	mov	r2, r1
 8012be8:	4601      	mov	r1, r0
 8012bea:	4803      	ldr	r0, [pc, #12]	; (8012bf8 <SUBGRF_ReadCommand+0x1c>)
 8012bec:	f7f4 fb96 	bl	800731c <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bf0:	f384 8810 	msr	PRIMASK, r4
}
 8012bf4:	bd10      	pop	{r4, pc}
 8012bf6:	bf00      	nop
 8012bf8:	200003e4 	.word	0x200003e4

08012bfc <SUBGRF_GetRssiInst>:
{
 8012bfc:	b500      	push	{lr}
 8012bfe:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8012c00:	2201      	movs	r2, #1
 8012c02:	a901      	add	r1, sp, #4
 8012c04:	2015      	movs	r0, #21
 8012c06:	f7ff ffe9 	bl	8012bdc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8012c0a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8012c0e:	4240      	negs	r0, r0
}
 8012c10:	1040      	asrs	r0, r0, #1
 8012c12:	b003      	add	sp, #12
 8012c14:	f85d fb04 	ldr.w	pc, [sp], #4

08012c18 <SUBGRF_GetRxBufferStatus>:
{
 8012c18:	b530      	push	{r4, r5, lr}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	4605      	mov	r5, r0
 8012c1e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8012c20:	2202      	movs	r2, #2
 8012c22:	a901      	add	r1, sp, #4
 8012c24:	2013      	movs	r0, #19
 8012c26:	f7ff ffd9 	bl	8012bdc <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012c2a:	f7ff fadf 	bl	80121ec <SUBGRF_GetPacketType>
 8012c2e:	2801      	cmp	r0, #1
 8012c30:	d007      	beq.n	8012c42 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8012c32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012c36:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8012c38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c3c:	7023      	strb	r3, [r4, #0]
}
 8012c3e:	b003      	add	sp, #12
 8012c40:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012c42:	4b05      	ldr	r3, [pc, #20]	; (8012c58 <SUBGRF_GetRxBufferStatus+0x40>)
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d1f2      	bne.n	8012c32 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8012c4c:	f240 7002 	movw	r0, #1794	; 0x702
 8012c50:	f7ff fae2 	bl	8012218 <SUBGRF_ReadRegister>
 8012c54:	7028      	strb	r0, [r5, #0]
 8012c56:	e7ef      	b.n	8012c38 <SUBGRF_GetRxBufferStatus+0x20>
 8012c58:	20001269 	.word	0x20001269

08012c5c <SUBGRF_GetPayload>:
{
 8012c5c:	b570      	push	{r4, r5, r6, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	4606      	mov	r6, r0
 8012c62:	460c      	mov	r4, r1
 8012c64:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8012c66:	2300      	movs	r3, #0
 8012c68:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8012c6c:	f10d 0107 	add.w	r1, sp, #7
 8012c70:	4620      	mov	r0, r4
 8012c72:	f7ff ffd1 	bl	8012c18 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8012c76:	7822      	ldrb	r2, [r4, #0]
 8012c78:	42aa      	cmp	r2, r5
 8012c7a:	d902      	bls.n	8012c82 <SUBGRF_GetPayload+0x26>
        return 1;
 8012c7c:	2001      	movs	r0, #1
}
 8012c7e:	b002      	add	sp, #8
 8012c80:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8012c82:	4631      	mov	r1, r6
 8012c84:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012c88:	f7ff fb6c 	bl	8012364 <SUBGRF_ReadBuffer>
    return 0;
 8012c8c:	2000      	movs	r0, #0
 8012c8e:	e7f6      	b.n	8012c7e <SUBGRF_GetPayload+0x22>

08012c90 <SUBGRF_GetPacketStatus>:
{
 8012c90:	b510      	push	{r4, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8012c96:	2203      	movs	r2, #3
 8012c98:	a901      	add	r1, sp, #4
 8012c9a:	2014      	movs	r0, #20
 8012c9c:	f7ff ff9e 	bl	8012bdc <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8012ca0:	f7ff faa4 	bl	80121ec <SUBGRF_GetPacketType>
 8012ca4:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8012ca6:	b148      	cbz	r0, 8012cbc <SUBGRF_GetPacketStatus+0x2c>
 8012ca8:	2801      	cmp	r0, #1
 8012caa:	d018      	beq.n	8012cde <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8012cac:	2214      	movs	r2, #20
 8012cae:	2100      	movs	r1, #0
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f000 fb20 	bl	80132f6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8012cb6:	230f      	movs	r3, #15
 8012cb8:	7023      	strb	r3, [r4, #0]
}
 8012cba:	e00e      	b.n	8012cda <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8012cbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012cc0:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8012cc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012cc6:	425b      	negs	r3, r3
 8012cc8:	105b      	asrs	r3, r3, #1
 8012cca:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8012ccc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012cd0:	425b      	negs	r3, r3
 8012cd2:	105b      	asrs	r3, r3, #1
 8012cd4:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	60a3      	str	r3, [r4, #8]
}
 8012cda:	b002      	add	sp, #8
 8012cdc:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8012cde:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ce2:	425b      	negs	r3, r3
 8012ce4:	105b      	asrs	r3, r3, #1
 8012ce6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8012ce8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8012cec:	3302      	adds	r3, #2
 8012cee:	109b      	asrs	r3, r3, #2
 8012cf0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8012cf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012cf6:	425b      	negs	r3, r3
 8012cf8:	105b      	asrs	r3, r3, #1
 8012cfa:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8012cfc:	4b01      	ldr	r3, [pc, #4]	; (8012d04 <SUBGRF_GetPacketStatus+0x74>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	6123      	str	r3, [r4, #16]
            break;
 8012d02:	e7ea      	b.n	8012cda <SUBGRF_GetPacketStatus+0x4a>
 8012d04:	20001264 	.word	0x20001264

08012d08 <SUBGRF_SetSwitch>:
{
 8012d08:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8012d0a:	2901      	cmp	r1, #1
 8012d0c:	d003      	beq.n	8012d16 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8012d0e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8012d10:	f7f0 fa4c 	bl	80031ac <RBI_ConfigRFSwitch>
}
 8012d14:	bd10      	pop	{r4, pc}
 8012d16:	4604      	mov	r4, r0
 8012d18:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8012d1a:	2c01      	cmp	r4, #1
 8012d1c:	d003      	beq.n	8012d26 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8012d1e:	2c02      	cmp	r4, #2
 8012d20:	d1f6      	bne.n	8012d10 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8012d22:	2003      	movs	r0, #3
 8012d24:	e7f4      	b.n	8012d10 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8012d26:	2004      	movs	r0, #4
 8012d28:	f7ff fa86 	bl	8012238 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8012d2c:	2002      	movs	r0, #2
 8012d2e:	e7f6      	b.n	8012d1e <SUBGRF_SetSwitch+0x16>

08012d30 <SUBGRF_SetRfTxPower>:
{
 8012d30:	b538      	push	{r3, r4, r5, lr}
 8012d32:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8012d34:	f7f0 fa3e 	bl	80031b4 <RBI_GetTxConfig>
    switch (TxConfig)
 8012d38:	b148      	cbz	r0, 8012d4e <SUBGRF_SetRfTxPower+0x1e>
 8012d3a:	2802      	cmp	r0, #2
 8012d3c:	d10d      	bne.n	8012d5a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8012d3e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8012d40:	2202      	movs	r2, #2
 8012d42:	4621      	mov	r1, r4
 8012d44:	4628      	mov	r0, r5
 8012d46:	f7ff fdb3 	bl	80128b0 <SUBGRF_SetTxParams>
}
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8012d4e:	2c0f      	cmp	r4, #15
 8012d50:	dc01      	bgt.n	8012d56 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8012d52:	2501      	movs	r5, #1
 8012d54:	e7f4      	b.n	8012d40 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8012d56:	2502      	movs	r5, #2
 8012d58:	e7f2      	b.n	8012d40 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8012d5a:	2501      	movs	r5, #1
 8012d5c:	e7f0      	b.n	8012d40 <SUBGRF_SetRfTxPower+0x10>

08012d5e <SUBGRF_GetRadioWakeUpTime>:
}
 8012d5e:	2001      	movs	r0, #1
 8012d60:	4770      	bx	lr
	...

08012d64 <HAL_SUBGHZ_TxCpltCallback>:
{
 8012d64:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8012d66:	4b02      	ldr	r3, [pc, #8]	; (8012d70 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2001      	movs	r0, #1
 8012d6c:	4798      	blx	r3
}
 8012d6e:	bd08      	pop	{r3, pc}
 8012d70:	2000126c 	.word	0x2000126c

08012d74 <HAL_SUBGHZ_RxCpltCallback>:
{
 8012d74:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8012d76:	4b02      	ldr	r3, [pc, #8]	; (8012d80 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2002      	movs	r0, #2
 8012d7c:	4798      	blx	r3
}
 8012d7e:	bd08      	pop	{r3, pc}
 8012d80:	2000126c 	.word	0x2000126c

08012d84 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8012d84:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8012d86:	4b02      	ldr	r3, [pc, #8]	; (8012d90 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	2040      	movs	r0, #64	; 0x40
 8012d8c:	4798      	blx	r3
}
 8012d8e:	bd08      	pop	{r3, pc}
 8012d90:	2000126c 	.word	0x2000126c

08012d94 <HAL_SUBGHZ_CADStatusCallback>:
{
 8012d94:	b508      	push	{r3, lr}
    switch (cadstatus)
 8012d96:	b111      	cbz	r1, 8012d9e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8012d98:	2901      	cmp	r1, #1
 8012d9a:	d005      	beq.n	8012da8 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8012d9c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8012d9e:	4b05      	ldr	r3, [pc, #20]	; (8012db4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2080      	movs	r0, #128	; 0x80
 8012da4:	4798      	blx	r3
            break;
 8012da6:	e7f9      	b.n	8012d9c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8012da8:	4b02      	ldr	r3, [pc, #8]	; (8012db4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012db0:	4798      	blx	r3
}
 8012db2:	e7f3      	b.n	8012d9c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8012db4:	2000126c 	.word	0x2000126c

08012db8 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8012db8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8012dba:	4b03      	ldr	r3, [pc, #12]	; (8012dc8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012dc2:	4798      	blx	r3
}
 8012dc4:	bd08      	pop	{r3, pc}
 8012dc6:	bf00      	nop
 8012dc8:	2000126c 	.word	0x2000126c

08012dcc <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8012dcc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8012dce:	4b02      	ldr	r3, [pc, #8]	; (8012dd8 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	2020      	movs	r0, #32
 8012dd4:	4798      	blx	r3
}
 8012dd6:	bd08      	pop	{r3, pc}
 8012dd8:	2000126c 	.word	0x2000126c

08012ddc <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8012ddc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8012dde:	4b02      	ldr	r3, [pc, #8]	; (8012de8 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2004      	movs	r0, #4
 8012de4:	4798      	blx	r3
}
 8012de6:	bd08      	pop	{r3, pc}
 8012de8:	2000126c 	.word	0x2000126c

08012dec <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8012dec:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8012dee:	4b02      	ldr	r3, [pc, #8]	; (8012df8 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	2008      	movs	r0, #8
 8012df4:	4798      	blx	r3
}
 8012df6:	bd08      	pop	{r3, pc}
 8012df8:	2000126c 	.word	0x2000126c

08012dfc <HAL_SUBGHZ_HeaderValidCallback>:
{
 8012dfc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8012dfe:	4b02      	ldr	r3, [pc, #8]	; (8012e08 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2010      	movs	r0, #16
 8012e04:	4798      	blx	r3
}
 8012e06:	bd08      	pop	{r3, pc}
 8012e08:	2000126c 	.word	0x2000126c

08012e0c <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8012e0c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8012e0e:	4b03      	ldr	r3, [pc, #12]	; (8012e1c <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012e16:	4798      	blx	r3
}
 8012e18:	bd08      	pop	{r3, pc}
 8012e1a:	bf00      	nop
 8012e1c:	2000126c 	.word	0x2000126c

08012e20 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8012e20:	4601      	mov	r1, r0
 8012e22:	b188      	cbz	r0, 8012e48 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012e24:	2300      	movs	r3, #0
 8012e26:	2b15      	cmp	r3, #21
 8012e28:	d80d      	bhi.n	8012e46 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	4a07      	ldr	r2, [pc, #28]	; (8012e4c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8012e2e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012e32:	428a      	cmp	r2, r1
 8012e34:	d802      	bhi.n	8012e3c <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012e36:	3301      	adds	r3, #1
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	e7f4      	b.n	8012e26 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8012e3c:	4b03      	ldr	r3, [pc, #12]	; (8012e4c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8012e3e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8012e42:	7918      	ldrb	r0, [r3, #4]
 8012e44:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8012e46:	e7fe      	b.n	8012e46 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8012e48:	201f      	movs	r0, #31
}
 8012e4a:	4770      	bx	lr
 8012e4c:	08017458 	.word	0x08017458

08012e50 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8012e50:	b570      	push	{r4, r5, r6, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	4605      	mov	r5, r0
 8012e56:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8012e58:	4b1d      	ldr	r3, [pc, #116]	; (8012ed0 <SUBGRF_GetCFO+0x80>)
 8012e5a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8012e5c:	f640 0007 	movw	r0, #2055	; 0x807
 8012e60:	f7ff f9da 	bl	8012218 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8012e64:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8012e68:	3308      	adds	r3, #8
 8012e6a:	446b      	add	r3, sp
 8012e6c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8012e70:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8012e74:	3301      	adds	r3, #1
 8012e76:	fa02 f303 	lsl.w	r3, r2, r3
 8012e7a:	4a16      	ldr	r2, [pc, #88]	; (8012ed4 <SUBGRF_GetCFO+0x84>)
 8012e7c:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8012e80:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8012e84:	2807      	cmp	r0, #7
 8012e86:	d921      	bls.n	8012ecc <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8012e88:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8012e8a:	fb03 f000 	mul.w	r0, r3, r0
 8012e8e:	2803      	cmp	r0, #3
 8012e90:	d800      	bhi.n	8012e94 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8012e92:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8012e94:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8012e98:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8012e9c:	f7ff f9bc 	bl	8012218 <SUBGRF_ReadRegister>
 8012ea0:	0206      	lsls	r6, r0, #8
 8012ea2:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8012ea6:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8012eaa:	f7ff f9b5 	bl	8012218 <SUBGRF_ReadRegister>
 8012eae:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8012eb0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8012eb4:	d003      	beq.n	8012ebe <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8012eb6:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8012eba:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8012ebe:	096b      	lsrs	r3, r5, #5
 8012ec0:	fb03 f000 	mul.w	r0, r3, r0
 8012ec4:	11c0      	asrs	r0, r0, #7
 8012ec6:	6020      	str	r0, [r4, #0]
}
 8012ec8:	b002      	add	sp, #8
 8012eca:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8012ecc:	2302      	movs	r3, #2
 8012ece:	e7dc      	b.n	8012e8a <SUBGRF_GetCFO+0x3a>
 8012ed0:	0c0a0804 	.word	0x0c0a0804
 8012ed4:	01e84800 	.word	0x01e84800

08012ed8 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8012ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8012edc:	4770      	bx	lr

08012ede <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8012ede:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee2:	4770      	bx	lr

08012ee4 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8012ee4:	4770      	bx	lr

08012ee6 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	4770      	bx	lr

08012eea <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8012eea:	2000      	movs	r0, #0
 8012eec:	4770      	bx	lr

08012eee <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8012eee:	4770      	bx	lr

08012ef0 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8012ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef4:	4770      	bx	lr

08012ef6 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8012ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8012efa:	4770      	bx	lr

08012efc <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8012efc:	4770      	bx	lr

08012efe <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8012efe:	4770      	bx	lr

08012f00 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8012f00:	4770      	bx	lr
	...

08012f04 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8012f04:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f06:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012f0a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8012f0c:	4b1e      	ldr	r3, [pc, #120]	; (8012f88 <TRACE_AllocateBufer+0x84>)
 8012f0e:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8012f12:	8a1a      	ldrh	r2, [r3, #16]
 8012f14:	4596      	cmp	lr, r2
 8012f16:	d011      	beq.n	8012f3c <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012f18:	4596      	cmp	lr, r2
 8012f1a:	d921      	bls.n	8012f60 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012f1c:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8012f20:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8012f22:	4283      	cmp	r3, r0
 8012f24:	d81f      	bhi.n	8012f66 <TRACE_AllocateBufer+0x62>
 8012f26:	4282      	cmp	r2, r0
 8012f28:	d91d      	bls.n	8012f66 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012f2a:	4b17      	ldr	r3, [pc, #92]	; (8012f88 <TRACE_AllocateBufer+0x84>)
 8012f2c:	2401      	movs	r4, #1
 8012f2e:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012f30:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012f34:	2400      	movs	r4, #0
 8012f36:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012f38:	4613      	mov	r3, r2
 8012f3a:	e014      	b.n	8012f66 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012f3c:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8012f40:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8012f42:	4298      	cmp	r0, r3
 8012f44:	d30f      	bcc.n	8012f66 <TRACE_AllocateBufer+0x62>
 8012f46:	4282      	cmp	r2, r0
 8012f48:	d90d      	bls.n	8012f66 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012f4a:	4b0f      	ldr	r3, [pc, #60]	; (8012f88 <TRACE_AllocateBufer+0x84>)
 8012f4c:	2401      	movs	r4, #1
 8012f4e:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012f50:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012f54:	f04f 0e00 	mov.w	lr, #0
 8012f58:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	e002      	b.n	8012f66 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8012f60:	eba2 020e 	sub.w	r2, r2, lr
 8012f64:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8012f66:	4283      	cmp	r3, r0
 8012f68:	d90a      	bls.n	8012f80 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8012f6a:	4a07      	ldr	r2, [pc, #28]	; (8012f88 <TRACE_AllocateBufer+0x84>)
 8012f6c:	8a53      	ldrh	r3, [r2, #18]
 8012f6e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012f70:	4403      	add	r3, r0
 8012f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012f76:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8012f78:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f7a:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8012f7e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8012f80:	f04f 30ff 	mov.w	r0, #4294967295
 8012f84:	e7f9      	b.n	8012f7a <TRACE_AllocateBufer+0x76>
 8012f86:	bf00      	nop
 8012f88:	20001670 	.word	0x20001670

08012f8c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f8c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012f90:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8012f92:	4a03      	ldr	r2, [pc, #12]	; (8012fa0 <TRACE_Lock+0x14>)
 8012f94:	8ad3      	ldrh	r3, [r2, #22]
 8012f96:	3301      	adds	r3, #1
 8012f98:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f9a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012f9e:	4770      	bx	lr
 8012fa0:	20001670 	.word	0x20001670

08012fa4 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fa4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012fa8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8012faa:	4a03      	ldr	r2, [pc, #12]	; (8012fb8 <TRACE_UnLock+0x14>)
 8012fac:	8ad3      	ldrh	r3, [r2, #22]
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fb2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012fb6:	4770      	bx	lr
 8012fb8:	20001670 	.word	0x20001670

08012fbc <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8012fbc:	4b02      	ldr	r3, [pc, #8]	; (8012fc8 <TRACE_IsLocked+0xc>)
 8012fbe:	8ad8      	ldrh	r0, [r3, #22]
}
 8012fc0:	3800      	subs	r0, #0
 8012fc2:	bf18      	it	ne
 8012fc4:	2001      	movne	r0, #1
 8012fc6:	4770      	bx	lr
 8012fc8:	20001670 	.word	0x20001670

08012fcc <UTIL_ADV_TRACE_Init>:
{
 8012fcc:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8012fce:	2218      	movs	r2, #24
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	4807      	ldr	r0, [pc, #28]	; (8012ff0 <UTIL_ADV_TRACE_Init+0x24>)
 8012fd4:	f000 f98f 	bl	80132f6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012fdc:	2100      	movs	r1, #0
 8012fde:	4805      	ldr	r0, [pc, #20]	; (8012ff4 <UTIL_ADV_TRACE_Init+0x28>)
 8012fe0:	f000 f989 	bl	80132f6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8012fe4:	4b04      	ldr	r3, [pc, #16]	; (8012ff8 <UTIL_ADV_TRACE_Init+0x2c>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	4804      	ldr	r0, [pc, #16]	; (8012ffc <UTIL_ADV_TRACE_Init+0x30>)
 8012fea:	4798      	blx	r3
}
 8012fec:	bd08      	pop	{r3, pc}
 8012fee:	bf00      	nop
 8012ff0:	20001670 	.word	0x20001670
 8012ff4:	20001270 	.word	0x20001270
 8012ff8:	0801673c 	.word	0x0801673c
 8012ffc:	0801317d 	.word	0x0801317d

08013000 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8013000:	4b01      	ldr	r3, [pc, #4]	; (8013008 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8013002:	6058      	str	r0, [r3, #4]
}
 8013004:	4770      	bx	lr
 8013006:	bf00      	nop
 8013008:	20001670 	.word	0x20001670

0801300c <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801300c:	4b01      	ldr	r3, [pc, #4]	; (8013014 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801300e:	7218      	strb	r0, [r3, #8]
}
 8013010:	4770      	bx	lr
 8013012:	bf00      	nop
 8013014:	20001670 	.word	0x20001670

08013018 <TRACE_Send>:
{
 8013018:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801301a:	f3ef 8310 	mrs	r3, PRIMASK
 801301e:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013020:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8013022:	f7ff ffcb 	bl	8012fbc <TRACE_IsLocked>
 8013026:	b118      	cbz	r0, 8013030 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013028:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801302c:	2000      	movs	r0, #0
}
 801302e:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8013030:	f7ff ffac 	bl	8012f8c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8013034:	4b1c      	ldr	r3, [pc, #112]	; (80130a8 <TRACE_Send+0x90>)
 8013036:	8a1a      	ldrh	r2, [r3, #16]
 8013038:	8a5b      	ldrh	r3, [r3, #18]
 801303a:	429a      	cmp	r2, r3
 801303c:	d02e      	beq.n	801309c <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801303e:	491a      	ldr	r1, [pc, #104]	; (80130a8 <TRACE_Send+0x90>)
 8013040:	7889      	ldrb	r1, [r1, #2]
 8013042:	2901      	cmp	r1, #1
 8013044:	d017      	beq.n	8013076 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8013046:	4a18      	ldr	r2, [pc, #96]	; (80130a8 <TRACE_Send+0x90>)
 8013048:	7892      	ldrb	r2, [r2, #2]
 801304a:	b932      	cbnz	r2, 801305a <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801304c:	4a16      	ldr	r2, [pc, #88]	; (80130a8 <TRACE_Send+0x90>)
 801304e:	8a12      	ldrh	r2, [r2, #16]
 8013050:	4293      	cmp	r3, r2
 8013052:	d91e      	bls.n	8013092 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8013054:	1a9b      	subs	r3, r3, r2
 8013056:	4a14      	ldr	r2, [pc, #80]	; (80130a8 <TRACE_Send+0x90>)
 8013058:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801305a:	4e13      	ldr	r6, [pc, #76]	; (80130a8 <TRACE_Send+0x90>)
 801305c:	8a33      	ldrh	r3, [r6, #16]
 801305e:	4d13      	ldr	r5, [pc, #76]	; (80130ac <TRACE_Send+0x94>)
 8013060:	441d      	add	r5, r3
 8013062:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8013066:	f7ee ffd1 	bl	800200c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801306a:	4b11      	ldr	r3, [pc, #68]	; (80130b0 <TRACE_Send+0x98>)
 801306c:	68db      	ldr	r3, [r3, #12]
 801306e:	8ab1      	ldrh	r1, [r6, #20]
 8013070:	4628      	mov	r0, r5
 8013072:	4798      	blx	r3
 8013074:	e7db      	b.n	801302e <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8013076:	480c      	ldr	r0, [pc, #48]	; (80130a8 <TRACE_Send+0x90>)
 8013078:	8801      	ldrh	r1, [r0, #0]
 801307a:	1a8a      	subs	r2, r1, r2
 801307c:	b292      	uxth	r2, r2
 801307e:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8013080:	2102      	movs	r1, #2
 8013082:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8013084:	2100      	movs	r1, #0
 8013086:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8013088:	2a00      	cmp	r2, #0
 801308a:	d1dc      	bne.n	8013046 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801308c:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801308e:	8201      	strh	r1, [r0, #16]
 8013090:	e7d9      	b.n	8013046 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8013092:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8013096:	4b04      	ldr	r3, [pc, #16]	; (80130a8 <TRACE_Send+0x90>)
 8013098:	829a      	strh	r2, [r3, #20]
 801309a:	e7de      	b.n	801305a <TRACE_Send+0x42>
      TRACE_UnLock();
 801309c:	f7ff ff82 	bl	8012fa4 <TRACE_UnLock>
 80130a0:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80130a4:	2000      	movs	r0, #0
}
 80130a6:	e7c2      	b.n	801302e <TRACE_Send+0x16>
 80130a8:	20001670 	.word	0x20001670
 80130ac:	20001270 	.word	0x20001270
 80130b0:	0801673c 	.word	0x0801673c

080130b4 <UTIL_ADV_TRACE_COND_FSend>:
{
 80130b4:	b408      	push	{r3}
 80130b6:	b530      	push	{r4, r5, lr}
 80130b8:	b086      	sub	sp, #24
 80130ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80130bc:	2300      	movs	r3, #0
 80130be:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80130c2:	4b2b      	ldr	r3, [pc, #172]	; (8013170 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80130c4:	7a1b      	ldrb	r3, [r3, #8]
 80130c6:	4283      	cmp	r3, r0
 80130c8:	d34c      	bcc.n	8013164 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80130ca:	4b29      	ldr	r3, [pc, #164]	; (8013170 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	4399      	bics	r1, r3
 80130d0:	d14b      	bne.n	801316a <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80130d2:	4b27      	ldr	r3, [pc, #156]	; (8013170 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	b123      	cbz	r3, 80130e2 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 80130d8:	b11a      	cbz	r2, 80130e2 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80130da:	f10d 0102 	add.w	r1, sp, #2
 80130de:	a801      	add	r0, sp, #4
 80130e0:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80130e2:	ab0a      	add	r3, sp, #40	; 0x28
 80130e4:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80130e6:	4622      	mov	r2, r4
 80130e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80130ec:	4821      	ldr	r0, [pc, #132]	; (8013174 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80130ee:	f000 fcd1 	bl	8013a94 <tiny_vsnprintf_like>
 80130f2:	b285      	uxth	r5, r0
  TRACE_Lock();
 80130f4:	f7ff ff4a 	bl	8012f8c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80130f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80130fc:	18e8      	adds	r0, r5, r3
 80130fe:	4669      	mov	r1, sp
 8013100:	b280      	uxth	r0, r0
 8013102:	f7ff feff 	bl	8012f04 <TRACE_AllocateBufer>
 8013106:	f1b0 3fff 	cmp.w	r0, #4294967295
 801310a:	d026      	beq.n	801315a <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 801310c:	2300      	movs	r3, #0
 801310e:	e00d      	b.n	801312c <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8013110:	f8bd 2000 	ldrh.w	r2, [sp]
 8013114:	f103 0118 	add.w	r1, r3, #24
 8013118:	4469      	add	r1, sp
 801311a:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 801311e:	4916      	ldr	r1, [pc, #88]	; (8013178 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8013120:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8013122:	3201      	adds	r2, #1
 8013124:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8013128:	3301      	adds	r3, #1
 801312a:	b29b      	uxth	r3, r3
 801312c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013130:	429a      	cmp	r2, r3
 8013132:	d8ed      	bhi.n	8013110 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8013134:	f8bd 0000 	ldrh.w	r0, [sp]
 8013138:	9b05      	ldr	r3, [sp, #20]
 801313a:	4622      	mov	r2, r4
 801313c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013140:	4c0d      	ldr	r4, [pc, #52]	; (8013178 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8013142:	4420      	add	r0, r4
 8013144:	f000 fca6 	bl	8013a94 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8013148:	f7ff ff2c 	bl	8012fa4 <TRACE_UnLock>
    return TRACE_Send();
 801314c:	f7ff ff64 	bl	8013018 <TRACE_Send>
}
 8013150:	b006      	add	sp, #24
 8013152:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013156:	b001      	add	sp, #4
 8013158:	4770      	bx	lr
  TRACE_UnLock();
 801315a:	f7ff ff23 	bl	8012fa4 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 801315e:	f06f 0002 	mvn.w	r0, #2
 8013162:	e7f5      	b.n	8013150 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8013164:	f06f 0004 	mvn.w	r0, #4
 8013168:	e7f2      	b.n	8013150 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801316a:	f06f 0005 	mvn.w	r0, #5
 801316e:	e7ef      	b.n	8013150 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8013170:	20001670 	.word	0x20001670
 8013174:	20001688 	.word	0x20001688
 8013178:	20001270 	.word	0x20001270

0801317c <TRACE_TxCpltCallback>:
{
 801317c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801317e:	f3ef 8310 	mrs	r3, PRIMASK
 8013182:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013184:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8013186:	4b26      	ldr	r3, [pc, #152]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 8013188:	789b      	ldrb	r3, [r3, #2]
 801318a:	2b02      	cmp	r3, #2
 801318c:	d016      	beq.n	80131bc <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801318e:	4a24      	ldr	r2, [pc, #144]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 8013190:	8a13      	ldrh	r3, [r2, #16]
 8013192:	8a90      	ldrh	r0, [r2, #20]
 8013194:	4403      	add	r3, r0
 8013196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801319a:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801319c:	4b20      	ldr	r3, [pc, #128]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 801319e:	8a1a      	ldrh	r2, [r3, #16]
 80131a0:	8a5b      	ldrh	r3, [r3, #18]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d003      	beq.n	80131ae <TRACE_TxCpltCallback+0x32>
 80131a6:	481e      	ldr	r0, [pc, #120]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 80131a8:	8ac0      	ldrh	r0, [r0, #22]
 80131aa:	2801      	cmp	r0, #1
 80131ac:	d00b      	beq.n	80131c6 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131ae:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80131b2:	f7ee ff31 	bl	8002018 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80131b6:	f7ff fef5 	bl	8012fa4 <TRACE_UnLock>
}
 80131ba:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80131bc:	4b18      	ldr	r3, [pc, #96]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 80131be:	2200      	movs	r2, #0
 80131c0:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80131c2:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80131c4:	e7ea      	b.n	801319c <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80131c6:	4816      	ldr	r0, [pc, #88]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 80131c8:	7880      	ldrb	r0, [r0, #2]
 80131ca:	2801      	cmp	r0, #1
 80131cc:	d014      	beq.n	80131f8 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80131ce:	4a14      	ldr	r2, [pc, #80]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 80131d0:	7892      	ldrb	r2, [r2, #2]
 80131d2:	b932      	cbnz	r2, 80131e2 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80131d4:	4a12      	ldr	r2, [pc, #72]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 80131d6:	8a12      	ldrh	r2, [r2, #16]
 80131d8:	4293      	cmp	r3, r2
 80131da:	d91b      	bls.n	8013214 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80131dc:	1a9b      	subs	r3, r3, r2
 80131de:	4a10      	ldr	r2, [pc, #64]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 80131e0:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80131e2:	4b0f      	ldr	r3, [pc, #60]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 80131e4:	8a1a      	ldrh	r2, [r3, #16]
 80131e6:	480f      	ldr	r0, [pc, #60]	; (8013224 <TRACE_TxCpltCallback+0xa8>)
 80131e8:	4410      	add	r0, r2
 80131ea:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80131ee:	4a0e      	ldr	r2, [pc, #56]	; (8013228 <TRACE_TxCpltCallback+0xac>)
 80131f0:	68d2      	ldr	r2, [r2, #12]
 80131f2:	8a99      	ldrh	r1, [r3, #20]
 80131f4:	4790      	blx	r2
 80131f6:	e7e0      	b.n	80131ba <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80131f8:	4c09      	ldr	r4, [pc, #36]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 80131fa:	8820      	ldrh	r0, [r4, #0]
 80131fc:	1a82      	subs	r2, r0, r2
 80131fe:	b292      	uxth	r2, r2
 8013200:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8013202:	2002      	movs	r0, #2
 8013204:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8013206:	2000      	movs	r0, #0
 8013208:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801320a:	2a00      	cmp	r2, #0
 801320c:	d1df      	bne.n	80131ce <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801320e:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8013210:	8220      	strh	r0, [r4, #16]
 8013212:	e7dc      	b.n	80131ce <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8013214:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8013218:	4b01      	ldr	r3, [pc, #4]	; (8013220 <TRACE_TxCpltCallback+0xa4>)
 801321a:	829a      	strh	r2, [r3, #20]
 801321c:	e7e1      	b.n	80131e2 <TRACE_TxCpltCallback+0x66>
 801321e:	bf00      	nop
 8013220:	20001670 	.word	0x20001670
 8013224:	20001270 	.word	0x20001270
 8013228:	0801673c 	.word	0x0801673c

0801322c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801322c:	2300      	movs	r3, #0
 801322e:	4a02      	ldr	r2, [pc, #8]	; (8013238 <UTIL_LPM_Init+0xc>)
 8013230:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013232:	4a02      	ldr	r2, [pc, #8]	; (801323c <UTIL_LPM_Init+0x10>)
 8013234:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013236:	4770      	bx	lr
 8013238:	2000188c 	.word	0x2000188c
 801323c:	20001888 	.word	0x20001888

08013240 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013240:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013244:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8013246:	b141      	cbz	r1, 801325a <UTIL_LPM_SetStopMode+0x1a>
 8013248:	2901      	cmp	r1, #1
 801324a:	d103      	bne.n	8013254 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801324c:	4906      	ldr	r1, [pc, #24]	; (8013268 <UTIL_LPM_SetStopMode+0x28>)
 801324e:	680a      	ldr	r2, [r1, #0]
 8013250:	4302      	orrs	r2, r0
 8013252:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013254:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013258:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801325a:	4903      	ldr	r1, [pc, #12]	; (8013268 <UTIL_LPM_SetStopMode+0x28>)
 801325c:	680a      	ldr	r2, [r1, #0]
 801325e:	ea22 0200 	bic.w	r2, r2, r0
 8013262:	600a      	str	r2, [r1, #0]
      break;
 8013264:	e7f6      	b.n	8013254 <UTIL_LPM_SetStopMode+0x14>
 8013266:	bf00      	nop
 8013268:	2000188c 	.word	0x2000188c

0801326c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801326c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013270:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8013272:	b141      	cbz	r1, 8013286 <UTIL_LPM_SetOffMode+0x1a>
 8013274:	2901      	cmp	r1, #1
 8013276:	d103      	bne.n	8013280 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013278:	4906      	ldr	r1, [pc, #24]	; (8013294 <UTIL_LPM_SetOffMode+0x28>)
 801327a:	680a      	ldr	r2, [r1, #0]
 801327c:	4302      	orrs	r2, r0
 801327e:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013280:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013284:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8013286:	4903      	ldr	r1, [pc, #12]	; (8013294 <UTIL_LPM_SetOffMode+0x28>)
 8013288:	680a      	ldr	r2, [r1, #0]
 801328a:	ea22 0200 	bic.w	r2, r2, r0
 801328e:	600a      	str	r2, [r1, #0]
      break;
 8013290:	e7f6      	b.n	8013280 <UTIL_LPM_SetOffMode+0x14>
 8013292:	bf00      	nop
 8013294:	20001888 	.word	0x20001888

08013298 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8013298:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801329a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801329e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80132a0:	4b0c      	ldr	r3, [pc, #48]	; (80132d4 <UTIL_LPM_EnterLowPower+0x3c>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	b13b      	cbz	r3, 80132b6 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80132a6:	4d0c      	ldr	r5, [pc, #48]	; (80132d8 <UTIL_LPM_EnterLowPower+0x40>)
 80132a8:	682b      	ldr	r3, [r5, #0]
 80132aa:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80132ac:	686b      	ldr	r3, [r5, #4]
 80132ae:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132b0:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80132b4:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80132b6:	4b09      	ldr	r3, [pc, #36]	; (80132dc <UTIL_LPM_EnterLowPower+0x44>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	b12b      	cbz	r3, 80132c8 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80132bc:	4d06      	ldr	r5, [pc, #24]	; (80132d8 <UTIL_LPM_EnterLowPower+0x40>)
 80132be:	68ab      	ldr	r3, [r5, #8]
 80132c0:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80132c2:	68eb      	ldr	r3, [r5, #12]
 80132c4:	4798      	blx	r3
 80132c6:	e7f3      	b.n	80132b0 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80132c8:	4d03      	ldr	r5, [pc, #12]	; (80132d8 <UTIL_LPM_EnterLowPower+0x40>)
 80132ca:	692b      	ldr	r3, [r5, #16]
 80132cc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80132ce:	696b      	ldr	r3, [r5, #20]
 80132d0:	4798      	blx	r3
 80132d2:	e7ed      	b.n	80132b0 <UTIL_LPM_EnterLowPower+0x18>
 80132d4:	2000188c 	.word	0x2000188c
 80132d8:	080166d8 	.word	0x080166d8
 80132dc:	20001888 	.word	0x20001888

080132e0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80132e0:	e004      	b.n	80132ec <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80132e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132e6:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80132ea:	461a      	mov	r2, r3
 80132ec:	1e53      	subs	r3, r2, #1
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	2a00      	cmp	r2, #0
 80132f2:	d1f6      	bne.n	80132e2 <UTIL_MEM_cpy_8+0x2>
    }
}
 80132f4:	4770      	bx	lr

080132f6 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80132f6:	e002      	b.n	80132fe <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80132f8:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80132fc:	461a      	mov	r2, r3
 80132fe:	1e53      	subs	r3, r2, #1
 8013300:	b29b      	uxth	r3, r3
 8013302:	2a00      	cmp	r2, #0
 8013304:	d1f8      	bne.n	80132f8 <UTIL_MEM_set_8+0x2>
  }
}
 8013306:	4770      	bx	lr

08013308 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013308:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801330c:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801330e:	4a06      	ldr	r2, [pc, #24]	; (8013328 <UTIL_SEQ_SetTask+0x20>)
 8013310:	6813      	ldr	r3, [r2, #0]
 8013312:	4303      	orrs	r3, r0
 8013314:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8013316:	4a05      	ldr	r2, [pc, #20]	; (801332c <UTIL_SEQ_SetTask+0x24>)
 8013318:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 801331c:	4303      	orrs	r3, r0
 801331e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013322:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8013326:	4770      	bx	lr
 8013328:	200018b4 	.word	0x200018b4
 801332c:	200018ac 	.word	0x200018ac

08013330 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8013330:	4770      	bx	lr

08013332 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8013332:	4770      	bx	lr

08013334 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013334:	0c03      	lsrs	r3, r0, #16
 8013336:	041b      	lsls	r3, r3, #16
 8013338:	b9b3      	cbnz	r3, 8013368 <SEQ_BitPosition+0x34>
 801333a:	0400      	lsls	r0, r0, #16
 801333c:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801333e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013342:	d102      	bne.n	801334a <SEQ_BitPosition+0x16>
 8013344:	3308      	adds	r3, #8
 8013346:	b2db      	uxtb	r3, r3
 8013348:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801334a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801334e:	d102      	bne.n	8013356 <SEQ_BitPosition+0x22>
 8013350:	3304      	adds	r3, #4
 8013352:	b2db      	uxtb	r3, r3
 8013354:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013356:	0f00      	lsrs	r0, r0, #28
 8013358:	4a04      	ldr	r2, [pc, #16]	; (801336c <SEQ_BitPosition+0x38>)
 801335a:	5c10      	ldrb	r0, [r2, r0]
 801335c:	4418      	add	r0, r3
 801335e:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8013360:	f1c0 001f 	rsb	r0, r0, #31
}
 8013364:	b2c0      	uxtb	r0, r0
 8013366:	4770      	bx	lr
uint8_t n = 0U;
 8013368:	2300      	movs	r3, #0
 801336a:	e7e8      	b.n	801333e <SEQ_BitPosition+0xa>
 801336c:	08017508 	.word	0x08017508

08013370 <UTIL_SEQ_Run>:
{
 8013370:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8013372:	4b42      	ldr	r3, [pc, #264]	; (801347c <UTIL_SEQ_Run+0x10c>)
 8013374:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8013376:	4020      	ands	r0, r4
 8013378:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801337a:	4b41      	ldr	r3, [pc, #260]	; (8013480 <UTIL_SEQ_Run+0x110>)
 801337c:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 801337e:	4b41      	ldr	r3, [pc, #260]	; (8013484 <UTIL_SEQ_Run+0x114>)
 8013380:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8013382:	4941      	ldr	r1, [pc, #260]	; (8013488 <UTIL_SEQ_Run+0x118>)
 8013384:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8013386:	4941      	ldr	r1, [pc, #260]	; (801348c <UTIL_SEQ_Run+0x11c>)
 8013388:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801338a:	e02f      	b.n	80133ec <UTIL_SEQ_Run+0x7c>
      counter++;
 801338c:	3301      	adds	r3, #1
 801338e:	e034      	b.n	80133fa <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013390:	4d3f      	ldr	r5, [pc, #252]	; (8013490 <UTIL_SEQ_Run+0x120>)
 8013392:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013396:	6868      	ldr	r0, [r5, #4]
 8013398:	4010      	ands	r0, r2
 801339a:	f7ff ffcb 	bl	8013334 <SEQ_BitPosition>
 801339e:	4e3d      	ldr	r6, [pc, #244]	; (8013494 <UTIL_SEQ_Run+0x124>)
 80133a0:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80133a2:	686a      	ldr	r2, [r5, #4]
 80133a4:	2301      	movs	r3, #1
 80133a6:	fa03 f000 	lsl.w	r0, r3, r0
 80133aa:	ea22 0200 	bic.w	r2, r2, r0
 80133ae:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133b0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80133b4:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80133b6:	6832      	ldr	r2, [r6, #0]
 80133b8:	fa03 f202 	lsl.w	r2, r3, r2
 80133bc:	43d6      	mvns	r6, r2
 80133be:	4d30      	ldr	r5, [pc, #192]	; (8013480 <UTIL_SEQ_Run+0x110>)
 80133c0:	6828      	ldr	r0, [r5, #0]
 80133c2:	ea20 0202 	bic.w	r2, r0, r2
 80133c6:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d12d      	bne.n	8013428 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133cc:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 80133d0:	4b30      	ldr	r3, [pc, #192]	; (8013494 <UTIL_SEQ_Run+0x124>)
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	4b30      	ldr	r3, [pc, #192]	; (8013498 <UTIL_SEQ_Run+0x128>)
 80133d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133da:	4798      	blx	r3
    local_taskset = TaskSet;
 80133dc:	4b28      	ldr	r3, [pc, #160]	; (8013480 <UTIL_SEQ_Run+0x110>)
 80133de:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 80133e0:	4b28      	ldr	r3, [pc, #160]	; (8013484 <UTIL_SEQ_Run+0x114>)
 80133e2:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80133e4:	4928      	ldr	r1, [pc, #160]	; (8013488 <UTIL_SEQ_Run+0x118>)
 80133e6:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 80133e8:	4928      	ldr	r1, [pc, #160]	; (801348c <UTIL_SEQ_Run+0x11c>)
 80133ea:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80133ec:	4002      	ands	r2, r0
 80133ee:	4d23      	ldr	r5, [pc, #140]	; (801347c <UTIL_SEQ_Run+0x10c>)
 80133f0:	682d      	ldr	r5, [r5, #0]
 80133f2:	422a      	tst	r2, r5
 80133f4:	d020      	beq.n	8013438 <UTIL_SEQ_Run+0xc8>
 80133f6:	400b      	ands	r3, r1
 80133f8:	d11e      	bne.n	8013438 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80133fa:	4a25      	ldr	r2, [pc, #148]	; (8013490 <UTIL_SEQ_Run+0x120>)
 80133fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013400:	4002      	ands	r2, r0
 8013402:	422a      	tst	r2, r5
 8013404:	d0c2      	beq.n	801338c <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013406:	4922      	ldr	r1, [pc, #136]	; (8013490 <UTIL_SEQ_Run+0x120>)
 8013408:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 801340c:	4002      	ands	r2, r0
 801340e:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013414:	6849      	ldr	r1, [r1, #4]
 8013416:	4211      	tst	r1, r2
 8013418:	d1ba      	bne.n	8013390 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801341a:	491d      	ldr	r1, [pc, #116]	; (8013490 <UTIL_SEQ_Run+0x120>)
 801341c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013420:	f04f 30ff 	mov.w	r0, #4294967295
 8013424:	6048      	str	r0, [r1, #4]
 8013426:	e7b3      	b.n	8013390 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013428:	3b01      	subs	r3, #1
 801342a:	4819      	ldr	r0, [pc, #100]	; (8013490 <UTIL_SEQ_Run+0x120>)
 801342c:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8013430:	4032      	ands	r2, r6
 8013432:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013436:	e7c7      	b.n	80133c8 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013438:	4b16      	ldr	r3, [pc, #88]	; (8013494 <UTIL_SEQ_Run+0x124>)
 801343a:	f04f 32ff 	mov.w	r2, #4294967295
 801343e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013440:	f7ff ff76 	bl	8013330 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013444:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013448:	b672      	cpsid	i
  local_taskset = TaskSet;
 801344a:	4b0d      	ldr	r3, [pc, #52]	; (8013480 <UTIL_SEQ_Run+0x110>)
 801344c:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 801344e:	4a0d      	ldr	r2, [pc, #52]	; (8013484 <UTIL_SEQ_Run+0x114>)
 8013450:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8013452:	4a0d      	ldr	r2, [pc, #52]	; (8013488 <UTIL_SEQ_Run+0x118>)
 8013454:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013456:	4013      	ands	r3, r2
 8013458:	4a08      	ldr	r2, [pc, #32]	; (801347c <UTIL_SEQ_Run+0x10c>)
 801345a:	6812      	ldr	r2, [r2, #0]
 801345c:	4213      	tst	r3, r2
 801345e:	d103      	bne.n	8013468 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8013460:	4b0a      	ldr	r3, [pc, #40]	; (801348c <UTIL_SEQ_Run+0x11c>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	420b      	tst	r3, r1
 8013466:	d006      	beq.n	8013476 <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013468:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 801346c:	f7ff ff61 	bl	8013332 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8013470:	4b02      	ldr	r3, [pc, #8]	; (801347c <UTIL_SEQ_Run+0x10c>)
 8013472:	601c      	str	r4, [r3, #0]
}
 8013474:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8013476:	f7ee fd4f 	bl	8001f18 <UTIL_SEQ_Idle>
 801347a:	e7f5      	b.n	8013468 <UTIL_SEQ_Run+0xf8>
 801347c:	20000100 	.word	0x20000100
 8013480:	200018b4 	.word	0x200018b4
 8013484:	20001894 	.word	0x20001894
 8013488:	20000104 	.word	0x20000104
 801348c:	20001898 	.word	0x20001898
 8013490:	200018ac 	.word	0x200018ac
 8013494:	20001890 	.word	0x20001890
 8013498:	2000189c 	.word	0x2000189c

0801349c <UTIL_SEQ_RegTask>:
{
 801349c:	b538      	push	{r3, r4, r5, lr}
 801349e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134a0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80134a4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80134a6:	f7ff ff45 	bl	8013334 <SEQ_BitPosition>
 80134aa:	4b03      	ldr	r3, [pc, #12]	; (80134b8 <UTIL_SEQ_RegTask+0x1c>)
 80134ac:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134b0:	f385 8810 	msr	PRIMASK, r5
}
 80134b4:	bd38      	pop	{r3, r4, r5, pc}
 80134b6:	bf00      	nop
 80134b8:	2000189c 	.word	0x2000189c

080134bc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80134bc:	b082      	sub	sp, #8
 80134be:	b082      	sub	sp, #8
 80134c0:	f10d 0c08 	add.w	ip, sp, #8
 80134c4:	e90c 0006 	stmdb	ip, {r1, r2}
 80134c8:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80134ca:	2200      	movs	r2, #0
 80134cc:	6002      	str	r2, [r0, #0]
 80134ce:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 80134d0:	440b      	add	r3, r1
 80134d2:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80134d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80134d8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80134dc:	440a      	add	r2, r1
 80134de:	b291      	uxth	r1, r2
 80134e0:	b212      	sxth	r2, r2
 80134e2:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80134e4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80134e8:	db04      	blt.n	80134f4 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80134ea:	3301      	adds	r3, #1
 80134ec:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80134ee:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80134f2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80134f4:	b002      	add	sp, #8
 80134f6:	b002      	add	sp, #8
 80134f8:	4770      	bx	lr

080134fa <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80134fa:	b082      	sub	sp, #8
 80134fc:	b082      	sub	sp, #8
 80134fe:	f10d 0c08 	add.w	ip, sp, #8
 8013502:	e90c 0006 	stmdb	ip, {r1, r2}
 8013506:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8013508:	2200      	movs	r2, #0
 801350a:	6002      	str	r2, [r0, #0]
 801350c:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801350e:	1acb      	subs	r3, r1, r3
 8013510:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8013512:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8013516:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801351a:	1a52      	subs	r2, r2, r1
 801351c:	b291      	uxth	r1, r2
 801351e:	b212      	sxth	r2, r2
 8013520:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8013522:	2a00      	cmp	r2, #0
 8013524:	db02      	blt.n	801352c <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8013526:	b002      	add	sp, #8
 8013528:	b002      	add	sp, #8
 801352a:	4770      	bx	lr
    c.Seconds--;
 801352c:	3b01      	subs	r3, #1
 801352e:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8013530:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8013534:	8081      	strh	r1, [r0, #4]
  return c;
 8013536:	e7f6      	b.n	8013526 <SysTimeSub+0x2c>

08013538 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8013538:	b530      	push	{r4, r5, lr}
 801353a:	b089      	sub	sp, #36	; 0x24
 801353c:	ac02      	add	r4, sp, #8
 801353e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013542:	2300      	movs	r3, #0
 8013544:	9304      	str	r3, [sp, #16]
 8013546:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801354a:	4d0b      	ldr	r5, [pc, #44]	; (8013578 <SysTimeSet+0x40>)
 801354c:	692b      	ldr	r3, [r5, #16]
 801354e:	a805      	add	r0, sp, #20
 8013550:	4798      	blx	r3
 8013552:	4603      	mov	r3, r0
 8013554:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8013556:	9a05      	ldr	r2, [sp, #20]
 8013558:	9200      	str	r2, [sp, #0]
 801355a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801355e:	a806      	add	r0, sp, #24
 8013560:	f7ff ffcb 	bl	80134fa <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8013564:	682b      	ldr	r3, [r5, #0]
 8013566:	9806      	ldr	r0, [sp, #24]
 8013568:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801356a:	68ab      	ldr	r3, [r5, #8]
 801356c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013570:	4798      	blx	r3
}
 8013572:	b009      	add	sp, #36	; 0x24
 8013574:	bd30      	pop	{r4, r5, pc}
 8013576:	bf00      	nop
 8013578:	080166fc 	.word	0x080166fc

0801357c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801357c:	b530      	push	{r4, r5, lr}
 801357e:	b087      	sub	sp, #28
 8013580:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013582:	2300      	movs	r3, #0
 8013584:	9304      	str	r3, [sp, #16]
 8013586:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801358a:	6003      	str	r3, [r0, #0]
 801358c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801358e:	4d0b      	ldr	r5, [pc, #44]	; (80135bc <SysTimeGet+0x40>)
 8013590:	692b      	ldr	r3, [r5, #16]
 8013592:	a805      	add	r0, sp, #20
 8013594:	4798      	blx	r3
 8013596:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013598:	68eb      	ldr	r3, [r5, #12]
 801359a:	4798      	blx	r3
 801359c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80135a0:	686b      	ldr	r3, [r5, #4]
 80135a2:	4798      	blx	r3
 80135a4:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80135a6:	9b05      	ldr	r3, [sp, #20]
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	9b04      	ldr	r3, [sp, #16]
 80135ac:	aa02      	add	r2, sp, #8
 80135ae:	ca06      	ldmia	r2, {r1, r2}
 80135b0:	4620      	mov	r0, r4
 80135b2:	f7ff ff83 	bl	80134bc <SysTimeAdd>

  return sysTime;
}
 80135b6:	4620      	mov	r0, r4
 80135b8:	b007      	add	sp, #28
 80135ba:	bd30      	pop	{r4, r5, pc}
 80135bc:	080166fc 	.word	0x080166fc

080135c0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80135c0:	b530      	push	{r4, r5, lr}
 80135c2:	b083      	sub	sp, #12
 80135c4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80135c6:	2300      	movs	r3, #0
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80135ce:	4b06      	ldr	r3, [pc, #24]	; (80135e8 <SysTimeGetMcuTime+0x28>)
 80135d0:	691b      	ldr	r3, [r3, #16]
 80135d2:	466d      	mov	r5, sp
 80135d4:	a801      	add	r0, sp, #4
 80135d6:	4798      	blx	r3
 80135d8:	9000      	str	r0, [sp, #0]

  return calendarTime;
 80135da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80135de:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80135e2:	4620      	mov	r0, r4
 80135e4:	b003      	add	sp, #12
 80135e6:	bd30      	pop	{r4, r5, pc}
 80135e8:	080166fc 	.word	0x080166fc

080135ec <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80135ec:	b530      	push	{r4, r5, lr}
 80135ee:	b089      	sub	sp, #36	; 0x24
 80135f0:	ac02      	add	r4, sp, #8
 80135f2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80135f6:	4d0c      	ldr	r5, [pc, #48]	; (8013628 <SysTimeToMs+0x3c>)
 80135f8:	68eb      	ldr	r3, [r5, #12]
 80135fa:	4798      	blx	r3
 80135fc:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013600:	686b      	ldr	r3, [r5, #4]
 8013602:	4798      	blx	r3
 8013604:	4603      	mov	r3, r0
 8013606:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8013608:	9a07      	ldr	r2, [sp, #28]
 801360a:	9200      	str	r2, [sp, #0]
 801360c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013610:	a804      	add	r0, sp, #16
 8013612:	f7ff ff72 	bl	80134fa <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8013616:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 801361a:	9a04      	ldr	r2, [sp, #16]
 801361c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013620:	fb00 3002 	mla	r0, r0, r2, r3
 8013624:	b009      	add	sp, #36	; 0x24
 8013626:	bd30      	pop	{r4, r5, pc}
 8013628:	080166fc 	.word	0x080166fc

0801362c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801362c:	b530      	push	{r4, r5, lr}
 801362e:	b087      	sub	sp, #28
 8013630:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8013632:	4b12      	ldr	r3, [pc, #72]	; (801367c <SysTimeFromMs+0x50>)
 8013634:	fba3 2301 	umull	r2, r3, r3, r1
 8013638:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801363a:	9304      	str	r3, [sp, #16]
 801363c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8013640:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013644:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8013648:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 801364c:	2300      	movs	r3, #0
 801364e:	9302      	str	r3, [sp, #8]
 8013650:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013652:	4d0b      	ldr	r5, [pc, #44]	; (8013680 <SysTimeFromMs+0x54>)
 8013654:	68eb      	ldr	r3, [r5, #12]
 8013656:	4798      	blx	r3
 8013658:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801365c:	686b      	ldr	r3, [r5, #4]
 801365e:	4798      	blx	r3
 8013660:	4603      	mov	r3, r0
 8013662:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8013664:	9a03      	ldr	r2, [sp, #12]
 8013666:	9200      	str	r2, [sp, #0]
 8013668:	aa06      	add	r2, sp, #24
 801366a:	e912 0006 	ldmdb	r2, {r1, r2}
 801366e:	4620      	mov	r0, r4
 8013670:	f7ff ff24 	bl	80134bc <SysTimeAdd>
}
 8013674:	4620      	mov	r0, r4
 8013676:	b007      	add	sp, #28
 8013678:	bd30      	pop	{r4, r5, pc}
 801367a:	bf00      	nop
 801367c:	10624dd3 	.word	0x10624dd3
 8013680:	080166fc 	.word	0x080166fc

08013684 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8013684:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8013686:	4b03      	ldr	r3, [pc, #12]	; (8013694 <UTIL_TIMER_Init+0x10>)
 8013688:	2200      	movs	r2, #0
 801368a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801368c:	4b02      	ldr	r3, [pc, #8]	; (8013698 <UTIL_TIMER_Init+0x14>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	4798      	blx	r3
}
 8013692:	bd08      	pop	{r3, pc}
 8013694:	200018b8 	.word	0x200018b8
 8013698:	08016710 	.word	0x08016710

0801369c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 801369c:	b1a8      	cbz	r0, 80136ca <UTIL_TIMER_Create+0x2e>
{
 801369e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a0:	4617      	mov	r7, r2
 80136a2:	461e      	mov	r6, r3
 80136a4:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80136a6:	b193      	cbz	r3, 80136ce <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80136a8:	2500      	movs	r5, #0
 80136aa:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80136ac:	4b09      	ldr	r3, [pc, #36]	; (80136d4 <UTIL_TIMER_Create+0x38>)
 80136ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b0:	4608      	mov	r0, r1
 80136b2:	4798      	blx	r3
 80136b4:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80136b6:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80136b8:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80136ba:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80136bc:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80136be:	9b06      	ldr	r3, [sp, #24]
 80136c0:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80136c2:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80136c4:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80136c6:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80136c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80136ca:	2001      	movs	r0, #1
}
 80136cc:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80136ce:	2001      	movs	r0, #1
 80136d0:	e7fa      	b.n	80136c8 <UTIL_TIMER_Create+0x2c>
 80136d2:	bf00      	nop
 80136d4:	08016710 	.word	0x08016710

080136d8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80136d8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80136da:	4c03      	ldr	r4, [pc, #12]	; (80136e8 <UTIL_TIMER_GetCurrentTime+0x10>)
 80136dc:	69e3      	ldr	r3, [r4, #28]
 80136de:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80136e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80136e2:	4798      	blx	r3
}
 80136e4:	bd10      	pop	{r4, pc}
 80136e6:	bf00      	nop
 80136e8:	08016710 	.word	0x08016710

080136ec <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80136ec:	b570      	push	{r4, r5, r6, lr}
 80136ee:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80136f0:	4d05      	ldr	r5, [pc, #20]	; (8013708 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80136f2:	69eb      	ldr	r3, [r5, #28]
 80136f4:	4798      	blx	r3
 80136f6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80136f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80136fa:	4630      	mov	r0, r6
 80136fc:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80136fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013700:	1a20      	subs	r0, r4, r0
 8013702:	4798      	blx	r3
}
 8013704:	bd70      	pop	{r4, r5, r6, pc}
 8013706:	bf00      	nop
 8013708:	08016710 	.word	0x08016710

0801370c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801370c:	4b05      	ldr	r3, [pc, #20]	; (8013724 <TimerExists+0x18>)
 801370e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8013710:	e000      	b.n	8013714 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8013712:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8013714:	b11b      	cbz	r3, 801371e <TimerExists+0x12>
    if( cur == TimerObject )
 8013716:	4283      	cmp	r3, r0
 8013718:	d1fb      	bne.n	8013712 <TimerExists+0x6>
      return true;
 801371a:	2001      	movs	r0, #1
  }
  return false;
}
 801371c:	4770      	bx	lr
  return false;
 801371e:	2000      	movs	r0, #0
 8013720:	4770      	bx	lr
 8013722:	bf00      	nop
 8013724:	200018b8 	.word	0x200018b8

08013728 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8013728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801372c:	4e09      	ldr	r6, [pc, #36]	; (8013754 <TimerSetTimeout+0x2c>)
 801372e:	6a33      	ldr	r3, [r6, #32]
 8013730:	4798      	blx	r3
 8013732:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8013734:	2301      	movs	r3, #1
 8013736:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8013738:	6827      	ldr	r7, [r4, #0]
 801373a:	69b6      	ldr	r6, [r6, #24]
 801373c:	47b0      	blx	r6
 801373e:	4428      	add	r0, r5
 8013740:	4287      	cmp	r7, r0
 8013742:	d202      	bcs.n	801374a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8013744:	47b0      	blx	r6
 8013746:	4428      	add	r0, r5
 8013748:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801374a:	4b02      	ldr	r3, [pc, #8]	; (8013754 <TimerSetTimeout+0x2c>)
 801374c:	689b      	ldr	r3, [r3, #8]
 801374e:	6820      	ldr	r0, [r4, #0]
 8013750:	4798      	blx	r3
}
 8013752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013754:	08016710 	.word	0x08016710

08013758 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8013758:	b368      	cbz	r0, 80137b6 <UTIL_TIMER_Stop+0x5e>
{
 801375a:	b510      	push	{r4, lr}
 801375c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801375e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013762:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8013764:	4b15      	ldr	r3, [pc, #84]	; (80137bc <UTIL_TIMER_Stop+0x64>)
 8013766:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8013768:	2301      	movs	r3, #1
 801376a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 801376c:	b1e1      	cbz	r1, 80137a8 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801376e:	2300      	movs	r3, #0
 8013770:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8013772:	4288      	cmp	r0, r1
 8013774:	d006      	beq.n	8013784 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8013776:	460b      	mov	r3, r1
        while( cur != NULL )
 8013778:	b1b3      	cbz	r3, 80137a8 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 801377a:	4293      	cmp	r3, r2
 801377c:	d011      	beq.n	80137a2 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 801377e:	4619      	mov	r1, r3
            cur = cur->Next;
 8013780:	695b      	ldr	r3, [r3, #20]
 8013782:	e7f9      	b.n	8013778 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8013784:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8013786:	6948      	ldr	r0, [r1, #20]
 8013788:	b120      	cbz	r0, 8013794 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 801378a:	4b0c      	ldr	r3, [pc, #48]	; (80137bc <UTIL_TIMER_Stop+0x64>)
 801378c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801378e:	f7ff ffcb 	bl	8013728 <TimerSetTimeout>
 8013792:	e009      	b.n	80137a8 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8013794:	4b0a      	ldr	r3, [pc, #40]	; (80137c0 <UTIL_TIMER_Stop+0x68>)
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	4798      	blx	r3
            TimerListHead = NULL;
 801379a:	4b08      	ldr	r3, [pc, #32]	; (80137bc <UTIL_TIMER_Stop+0x64>)
 801379c:	2200      	movs	r2, #0
 801379e:	601a      	str	r2, [r3, #0]
 80137a0:	e002      	b.n	80137a8 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80137a2:	695b      	ldr	r3, [r3, #20]
 80137a4:	b123      	cbz	r3, 80137b0 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80137a6:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137a8:	f384 8810 	msr	PRIMASK, r4
}
 80137ac:	2000      	movs	r0, #0
}
 80137ae:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80137b0:	2300      	movs	r3, #0
 80137b2:	614b      	str	r3, [r1, #20]
 80137b4:	e7f8      	b.n	80137a8 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80137b6:	2001      	movs	r0, #1
}
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop
 80137bc:	200018b8 	.word	0x200018b8
 80137c0:	08016710 	.word	0x08016710

080137c4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80137c4:	4b09      	ldr	r3, [pc, #36]	; (80137ec <TimerInsertTimer+0x28>)
 80137c6:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80137c8:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80137ca:	e001      	b.n	80137d0 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80137cc:	461a      	mov	r2, r3
        next = next->Next;
 80137ce:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80137d0:	6951      	ldr	r1, [r2, #20]
 80137d2:	b139      	cbz	r1, 80137e4 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 80137d4:	6819      	ldr	r1, [r3, #0]
 80137d6:	f8d0 c000 	ldr.w	ip, [r0]
 80137da:	458c      	cmp	ip, r1
 80137dc:	d8f6      	bhi.n	80137cc <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 80137de:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80137e0:	6143      	str	r3, [r0, #20]
        return;
 80137e2:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 80137e4:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80137e6:	2300      	movs	r3, #0
 80137e8:	6143      	str	r3, [r0, #20]
}
 80137ea:	4770      	bx	lr
 80137ec:	200018b8 	.word	0x200018b8

080137f0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80137f0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80137f2:	4b05      	ldr	r3, [pc, #20]	; (8013808 <TimerInsertNewHeadTimer+0x18>)
 80137f4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80137f6:	b10b      	cbz	r3, 80137fc <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80137f8:	2200      	movs	r2, #0
 80137fa:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80137fc:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80137fe:	4b02      	ldr	r3, [pc, #8]	; (8013808 <TimerInsertNewHeadTimer+0x18>)
 8013800:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8013802:	f7ff ff91 	bl	8013728 <TimerSetTimeout>
}
 8013806:	bd08      	pop	{r3, pc}
 8013808:	200018b8 	.word	0x200018b8

0801380c <UTIL_TIMER_Start>:
{
 801380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801380e:	2800      	cmp	r0, #0
 8013810:	d036      	beq.n	8013880 <UTIL_TIMER_Start+0x74>
 8013812:	4604      	mov	r4, r0
 8013814:	f7ff ff7a 	bl	801370c <TimerExists>
 8013818:	2800      	cmp	r0, #0
 801381a:	d134      	bne.n	8013886 <UTIL_TIMER_Start+0x7a>
 801381c:	7a65      	ldrb	r5, [r4, #9]
 801381e:	2d00      	cmp	r5, #0
 8013820:	d133      	bne.n	801388a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013822:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013826:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8013828:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801382a:	4b19      	ldr	r3, [pc, #100]	; (8013890 <UTIL_TIMER_Start+0x84>)
 801382c:	6a1b      	ldr	r3, [r3, #32]
 801382e:	4798      	blx	r3
    if( ticks < minValue )
 8013830:	4287      	cmp	r7, r0
 8013832:	d300      	bcc.n	8013836 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8013834:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8013836:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8013838:	2300      	movs	r3, #0
 801383a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 801383c:	2201      	movs	r2, #1
 801383e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013840:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8013842:	4b14      	ldr	r3, [pc, #80]	; (8013894 <UTIL_TIMER_Start+0x88>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	b183      	cbz	r3, 801386a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8013848:	4b11      	ldr	r3, [pc, #68]	; (8013890 <UTIL_TIMER_Start+0x84>)
 801384a:	699b      	ldr	r3, [r3, #24]
 801384c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801384e:	6823      	ldr	r3, [r4, #0]
 8013850:	4418      	add	r0, r3
 8013852:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8013854:	4b0f      	ldr	r3, [pc, #60]	; (8013894 <UTIL_TIMER_Start+0x88>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	4298      	cmp	r0, r3
 801385c:	d20c      	bcs.n	8013878 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801385e:	4620      	mov	r0, r4
 8013860:	f7ff ffc6 	bl	80137f0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013864:	f386 8810 	msr	PRIMASK, r6
}
 8013868:	e00b      	b.n	8013882 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 801386a:	4b09      	ldr	r3, [pc, #36]	; (8013890 <UTIL_TIMER_Start+0x84>)
 801386c:	691b      	ldr	r3, [r3, #16]
 801386e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8013870:	4620      	mov	r0, r4
 8013872:	f7ff ffbd 	bl	80137f0 <TimerInsertNewHeadTimer>
 8013876:	e7f5      	b.n	8013864 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8013878:	4620      	mov	r0, r4
 801387a:	f7ff ffa3 	bl	80137c4 <TimerInsertTimer>
 801387e:	e7f1      	b.n	8013864 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013880:	2501      	movs	r5, #1
}
 8013882:	4628      	mov	r0, r5
 8013884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013886:	2501      	movs	r5, #1
 8013888:	e7fb      	b.n	8013882 <UTIL_TIMER_Start+0x76>
 801388a:	2501      	movs	r5, #1
 801388c:	e7f9      	b.n	8013882 <UTIL_TIMER_Start+0x76>
 801388e:	bf00      	nop
 8013890:	08016710 	.word	0x08016710
 8013894:	200018b8 	.word	0x200018b8

08013898 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8013898:	b198      	cbz	r0, 80138c2 <UTIL_TIMER_SetPeriod+0x2a>
{
 801389a:	b510      	push	{r4, lr}
 801389c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801389e:	4b0a      	ldr	r3, [pc, #40]	; (80138c8 <UTIL_TIMER_SetPeriod+0x30>)
 80138a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a2:	4608      	mov	r0, r1
 80138a4:	4798      	blx	r3
 80138a6:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80138a8:	4620      	mov	r0, r4
 80138aa:	f7ff ff2f 	bl	801370c <TimerExists>
 80138ae:	b908      	cbnz	r0, 80138b4 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80138b0:	2000      	movs	r0, #0
}
 80138b2:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80138b4:	4620      	mov	r0, r4
 80138b6:	f7ff ff4f 	bl	8013758 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80138ba:	4620      	mov	r0, r4
 80138bc:	f7ff ffa6 	bl	801380c <UTIL_TIMER_Start>
 80138c0:	e7f7      	b.n	80138b2 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80138c2:	2001      	movs	r0, #1
}
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	08016710 	.word	0x08016710

080138cc <UTIL_TIMER_IRQ_Handler>:
{
 80138cc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80138ce:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80138d2:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80138d4:	4c1e      	ldr	r4, [pc, #120]	; (8013950 <UTIL_TIMER_IRQ_Handler+0x84>)
 80138d6:	6963      	ldr	r3, [r4, #20]
 80138d8:	4798      	blx	r3
 80138da:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80138dc:	6923      	ldr	r3, [r4, #16]
 80138de:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 80138e0:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 80138e2:	4b1c      	ldr	r3, [pc, #112]	; (8013954 <UTIL_TIMER_IRQ_Handler+0x88>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	b923      	cbnz	r3, 80138f2 <UTIL_TIMER_IRQ_Handler+0x26>
 80138e8:	e018      	b.n	801391c <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 80138ea:	2200      	movs	r2, #0
 80138ec:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80138ee:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80138f0:	b1a3      	cbz	r3, 801391c <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80138f2:	681a      	ldr	r2, [r3, #0]
 80138f4:	42a2      	cmp	r2, r4
 80138f6:	d9f8      	bls.n	80138ea <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80138f8:	1a31      	subs	r1, r6, r0
 80138fa:	440a      	add	r2, r1
 80138fc:	601a      	str	r2, [r3, #0]
 80138fe:	e7f6      	b.n	80138ee <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8013900:	4b14      	ldr	r3, [pc, #80]	; (8013954 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013902:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8013904:	6962      	ldr	r2, [r4, #20]
 8013906:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8013908:	2300      	movs	r3, #0
 801390a:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 801390c:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801390e:	68e3      	ldr	r3, [r4, #12]
 8013910:	6920      	ldr	r0, [r4, #16]
 8013912:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8013914:	8963      	ldrh	r3, [r4, #10]
 8013916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801391a:	d012      	beq.n	8013942 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801391c:	4b0d      	ldr	r3, [pc, #52]	; (8013954 <UTIL_TIMER_IRQ_Handler+0x88>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	b13b      	cbz	r3, 8013932 <UTIL_TIMER_IRQ_Handler+0x66>
 8013922:	681c      	ldr	r4, [r3, #0]
 8013924:	2c00      	cmp	r4, #0
 8013926:	d0eb      	beq.n	8013900 <UTIL_TIMER_IRQ_Handler+0x34>
 8013928:	4b09      	ldr	r3, [pc, #36]	; (8013950 <UTIL_TIMER_IRQ_Handler+0x84>)
 801392a:	699b      	ldr	r3, [r3, #24]
 801392c:	4798      	blx	r3
 801392e:	4284      	cmp	r4, r0
 8013930:	d3e6      	bcc.n	8013900 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8013932:	4b08      	ldr	r3, [pc, #32]	; (8013954 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013934:	6818      	ldr	r0, [r3, #0]
 8013936:	b108      	cbz	r0, 801393c <UTIL_TIMER_IRQ_Handler+0x70>
 8013938:	7a03      	ldrb	r3, [r0, #8]
 801393a:	b133      	cbz	r3, 801394a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801393c:	f385 8810 	msr	PRIMASK, r5
}
 8013940:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8013942:	4620      	mov	r0, r4
 8013944:	f7ff ff62 	bl	801380c <UTIL_TIMER_Start>
 8013948:	e7e8      	b.n	801391c <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 801394a:	f7ff feed 	bl	8013728 <TimerSetTimeout>
 801394e:	e7f5      	b.n	801393c <UTIL_TIMER_IRQ_Handler+0x70>
 8013950:	08016710 	.word	0x08016710
 8013954:	200018b8 	.word	0x200018b8

08013958 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8013958:	4601      	mov	r1, r0
  int i = 0;
 801395a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801395c:	e008      	b.n	8013970 <ee_skip_atoi+0x18>
 801395e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013962:	1c53      	adds	r3, r2, #1
 8013964:	600b      	str	r3, [r1, #0]
 8013966:	7813      	ldrb	r3, [r2, #0]
 8013968:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801396c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013970:	680a      	ldr	r2, [r1, #0]
 8013972:	7813      	ldrb	r3, [r2, #0]
 8013974:	3b30      	subs	r3, #48	; 0x30
 8013976:	b2db      	uxtb	r3, r3
 8013978:	2b09      	cmp	r3, #9
 801397a:	d9f0      	bls.n	801395e <ee_skip_atoi+0x6>
  return i;
}
 801397c:	4770      	bx	lr
	...

08013980 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8013980:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8013984:	b093      	sub	sp, #76	; 0x4c
 8013986:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013988:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801398a:	f016 0f40 	tst.w	r6, #64	; 0x40
 801398e:	d110      	bne.n	80139b2 <ee_number+0x32>
  char *dig = lower_digits;
 8013990:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8013a8c <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8013994:	1e9f      	subs	r7, r3, #2
 8013996:	2f22      	cmp	r7, #34	; 0x22
 8013998:	d875      	bhi.n	8013a86 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 801399a:	f016 0401 	ands.w	r4, r6, #1
 801399e:	d00b      	beq.n	80139b8 <ee_number+0x38>
 80139a0:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80139a4:	f016 0f02 	tst.w	r6, #2
 80139a8:	d00f      	beq.n	80139ca <ee_number+0x4a>
  {
    if (num < 0)
 80139aa:	2a00      	cmp	r2, #0
 80139ac:	db07      	blt.n	80139be <ee_number+0x3e>
  sign = 0;
 80139ae:	2700      	movs	r7, #0
 80139b0:	e00c      	b.n	80139cc <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80139b2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8013a90 <ee_number+0x110>
 80139b6:	e7ed      	b.n	8013994 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80139b8:	f04f 0e20 	mov.w	lr, #32
 80139bc:	e7f2      	b.n	80139a4 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80139be:	4252      	negs	r2, r2
      size--;
 80139c0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80139c2:	3e01      	subs	r6, #1
 80139c4:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80139c6:	272d      	movs	r7, #45	; 0x2d
 80139c8:	e000      	b.n	80139cc <ee_number+0x4c>
  sign = 0;
 80139ca:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 80139cc:	bb5a      	cbnz	r2, 8013a26 <ee_number+0xa6>
    tmp[i++] = '0';
 80139ce:	2330      	movs	r3, #48	; 0x30
 80139d0:	f88d 3004 	strb.w	r3, [sp, #4]
 80139d4:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 80139d8:	45ac      	cmp	ip, r5
 80139da:	dd00      	ble.n	80139de <ee_number+0x5e>
 80139dc:	4665      	mov	r5, ip
  size -= precision;
 80139de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80139e0:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80139e2:	b31c      	cbz	r4, 8013a2c <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 80139e4:	b11f      	cbz	r7, 80139ee <ee_number+0x6e>
 80139e6:	f800 7b01 	strb.w	r7, [r0], #1
 80139ea:	3901      	subs	r1, #1
 80139ec:	d007      	beq.n	80139fe <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80139f4:	dd24      	ble.n	8013a40 <ee_number+0xc0>
 80139f6:	f800 eb01 	strb.w	lr, [r0], #1
 80139fa:	3901      	subs	r1, #1
 80139fc:	d1f7      	bne.n	80139ee <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80139fe:	b013      	add	sp, #76	; 0x4c
 8013a00:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013a04:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a08:	fb03 2216 	mls	r2, r3, r6, r2
 8013a0c:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8013a10:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8013a14:	446a      	add	r2, sp
 8013a16:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8013a1a:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013a1c:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8013a20:	2a00      	cmp	r2, #0
 8013a22:	d1ef      	bne.n	8013a04 <ee_number+0x84>
 8013a24:	e7d8      	b.n	80139d8 <ee_number+0x58>
  i = 0;
 8013a26:	f04f 0c00 	mov.w	ip, #0
 8013a2a:	e7f9      	b.n	8013a20 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8013a32:	ddd7      	ble.n	80139e4 <ee_number+0x64>
 8013a34:	2220      	movs	r2, #32
 8013a36:	f800 2b01 	strb.w	r2, [r0], #1
 8013a3a:	3901      	subs	r1, #1
 8013a3c:	d1f6      	bne.n	8013a2c <ee_number+0xac>
 8013a3e:	e7de      	b.n	80139fe <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8013a40:	4565      	cmp	r5, ip
 8013a42:	f105 35ff 	add.w	r5, r5, #4294967295
 8013a46:	dd05      	ble.n	8013a54 <ee_number+0xd4>
 8013a48:	2230      	movs	r2, #48	; 0x30
 8013a4a:	f800 2b01 	strb.w	r2, [r0], #1
 8013a4e:	3901      	subs	r1, #1
 8013a50:	d1f6      	bne.n	8013a40 <ee_number+0xc0>
 8013a52:	e7d4      	b.n	80139fe <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8013a54:	4662      	mov	r2, ip
 8013a56:	2a00      	cmp	r2, #0
 8013a58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013a5c:	dd09      	ble.n	8013a72 <ee_number+0xf2>
 8013a5e:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8013a62:	446a      	add	r2, sp
 8013a64:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8013a68:	f800 2b01 	strb.w	r2, [r0], #1
 8013a6c:	3901      	subs	r1, #1
 8013a6e:	d1f1      	bne.n	8013a54 <ee_number+0xd4>
 8013a70:	e7c5      	b.n	80139fe <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f103 33ff 	add.w	r3, r3, #4294967295
 8013a78:	ddc1      	ble.n	80139fe <ee_number+0x7e>
 8013a7a:	2220      	movs	r2, #32
 8013a7c:	f800 2b01 	strb.w	r2, [r0], #1
 8013a80:	3901      	subs	r1, #1
 8013a82:	d1f6      	bne.n	8013a72 <ee_number+0xf2>
 8013a84:	e7bb      	b.n	80139fe <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8013a86:	2000      	movs	r0, #0
 8013a88:	e7b9      	b.n	80139fe <ee_number+0x7e>
 8013a8a:	bf00      	nop
 8013a8c:	08017518 	.word	0x08017518
 8013a90:	08017540 	.word	0x08017540

08013a94 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8013a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a98:	b087      	sub	sp, #28
 8013a9a:	9205      	str	r2, [sp, #20]
 8013a9c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8013a9e:	1e0f      	subs	r7, r1, #0
 8013aa0:	f340 80b8 	ble.w	8013c14 <tiny_vsnprintf_like+0x180>
 8013aa4:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	e004      	b.n	8013ab4 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8013aaa:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013aae:	9b05      	ldr	r3, [sp, #20]
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	9305      	str	r3, [sp, #20]
 8013ab4:	9905      	ldr	r1, [sp, #20]
 8013ab6:	780a      	ldrb	r2, [r1, #0]
 8013ab8:	b922      	cbnz	r2, 8013ac4 <tiny_vsnprintf_like+0x30>
 8013aba:	1ba3      	subs	r3, r4, r6
 8013abc:	1e78      	subs	r0, r7, #1
 8013abe:	4283      	cmp	r3, r0
 8013ac0:	f2c0 80a2 	blt.w	8013c08 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8013ac4:	1ba3      	subs	r3, r4, r6
 8013ac6:	f107 38ff 	add.w	r8, r7, #4294967295
 8013aca:	4543      	cmp	r3, r8
 8013acc:	f280 809c 	bge.w	8013c08 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8013ad0:	2a25      	cmp	r2, #37	; 0x25
 8013ad2:	d1ea      	bne.n	8013aaa <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8013ad4:	1c4b      	adds	r3, r1, #1
 8013ad6:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8013ad8:	784b      	ldrb	r3, [r1, #1]
 8013ada:	2b30      	cmp	r3, #48	; 0x30
 8013adc:	d020      	beq.n	8013b20 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8013ade:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8013ae2:	3b30      	subs	r3, #48	; 0x30
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	2b09      	cmp	r3, #9
 8013ae8:	d91d      	bls.n	8013b26 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8013aea:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8013aee:	9b05      	ldr	r3, [sp, #20]
 8013af0:	781a      	ldrb	r2, [r3, #0]
 8013af2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8013af6:	2b20      	cmp	r3, #32
 8013af8:	d867      	bhi.n	8013bca <tiny_vsnprintf_like+0x136>
 8013afa:	e8df f003 	tbb	[pc, r3]
 8013afe:	664a      	.short	0x664a
 8013b00:	66666666 	.word	0x66666666
 8013b04:	66666666 	.word	0x66666666
 8013b08:	66621e66 	.word	0x66621e66
 8013b0c:	62666666 	.word	0x62666666
 8013b10:	66666666 	.word	0x66666666
 8013b14:	66666666 	.word	0x66666666
 8013b18:	19662866 	.word	0x19662866
 8013b1c:	6666      	.short	0x6666
 8013b1e:	7c          	.byte	0x7c
 8013b1f:	00          	.byte	0x00
      flags |= ZEROPAD;
 8013b20:	f04f 0901 	mov.w	r9, #1
 8013b24:	e7dd      	b.n	8013ae2 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8013b26:	a805      	add	r0, sp, #20
 8013b28:	f7ff ff16 	bl	8013958 <ee_skip_atoi>
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	e7de      	b.n	8013aee <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8013b30:	230a      	movs	r3, #10
 8013b32:	e031      	b.n	8013b98 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8013b34:	2320      	movs	r3, #32
 8013b36:	f804 3b01 	strb.w	r3, [r4], #1
 8013b3a:	3d01      	subs	r5, #1
 8013b3c:	2d00      	cmp	r5, #0
 8013b3e:	dcf9      	bgt.n	8013b34 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8013b40:	9b04      	ldr	r3, [sp, #16]
 8013b42:	1d1a      	adds	r2, r3, #4
 8013b44:	9204      	str	r2, [sp, #16]
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8013b4c:	e7af      	b.n	8013aae <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8013b4e:	9b04      	ldr	r3, [sp, #16]
 8013b50:	1d1a      	adds	r2, r3, #4
 8013b52:	9204      	str	r2, [sp, #16]
 8013b54:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8013b58:	f1b8 0f00 	cmp.w	r8, #0
 8013b5c:	d003      	beq.n	8013b66 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8013b5e:	4640      	mov	r0, r8
 8013b60:	f7ec fb5e 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8013b64:	e006      	b.n	8013b74 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8013b66:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013c18 <tiny_vsnprintf_like+0x184>
 8013b6a:	e7f8      	b.n	8013b5e <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8013b6c:	2220      	movs	r2, #32
 8013b6e:	f804 2b01 	strb.w	r2, [r4], #1
 8013b72:	461d      	mov	r5, r3
 8013b74:	1e6b      	subs	r3, r5, #1
 8013b76:	4285      	cmp	r5, r0
 8013b78:	dcf8      	bgt.n	8013b6c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	e006      	b.n	8013b8c <tiny_vsnprintf_like+0xf8>
 8013b7e:	4643      	mov	r3, r8
 8013b80:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013b84:	f804 1b01 	strb.w	r1, [r4], #1
 8013b88:	3201      	adds	r2, #1
 8013b8a:	4698      	mov	r8, r3
 8013b8c:	4282      	cmp	r2, r0
 8013b8e:	dbf6      	blt.n	8013b7e <tiny_vsnprintf_like+0xea>
 8013b90:	e78d      	b.n	8013aae <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8013b92:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8013b96:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8013b98:	f019 0f02 	tst.w	r9, #2
 8013b9c:	d02f      	beq.n	8013bfe <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8013b9e:	9a04      	ldr	r2, [sp, #16]
 8013ba0:	1d11      	adds	r1, r2, #4
 8013ba2:	9104      	str	r1, [sp, #16]
 8013ba4:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8013ba6:	1ba1      	subs	r1, r4, r6
 8013ba8:	f8cd 9008 	str.w	r9, [sp, #8]
 8013bac:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb0:	9001      	str	r0, [sp, #4]
 8013bb2:	9500      	str	r5, [sp, #0]
 8013bb4:	eba8 0101 	sub.w	r1, r8, r1
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f7ff fee1 	bl	8013980 <ee_number>
 8013bbe:	4604      	mov	r4, r0
 8013bc0:	e775      	b.n	8013aae <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8013bc2:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8013bc6:	230a      	movs	r3, #10
 8013bc8:	e7e6      	b.n	8013b98 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8013bca:	2a25      	cmp	r2, #37	; 0x25
 8013bcc:	d002      	beq.n	8013bd4 <tiny_vsnprintf_like+0x140>
 8013bce:	2325      	movs	r3, #37	; 0x25
 8013bd0:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013bd4:	1ba3      	subs	r3, r4, r6
 8013bd6:	4598      	cmp	r8, r3
 8013bd8:	dd0f      	ble.n	8013bfa <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8013bda:	9b05      	ldr	r3, [sp, #20]
 8013bdc:	781a      	ldrb	r2, [r3, #0]
 8013bde:	b13a      	cbz	r2, 8013bf0 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8013be0:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013be4:	1ba3      	subs	r3, r4, r6
 8013be6:	4598      	cmp	r8, r3
 8013be8:	f73f af61 	bgt.w	8013aae <tiny_vsnprintf_like+0x1a>
    base = 10;
 8013bec:	230a      	movs	r3, #10
 8013bee:	e7d3      	b.n	8013b98 <tiny_vsnprintf_like+0x104>
          --fmt;
 8013bf0:	3b01      	subs	r3, #1
 8013bf2:	9305      	str	r3, [sp, #20]
 8013bf4:	e7f6      	b.n	8013be4 <tiny_vsnprintf_like+0x150>
        base = 16;
 8013bf6:	2310      	movs	r3, #16
 8013bf8:	e7ce      	b.n	8013b98 <tiny_vsnprintf_like+0x104>
    base = 10;
 8013bfa:	230a      	movs	r3, #10
 8013bfc:	e7cc      	b.n	8013b98 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8013bfe:	9a04      	ldr	r2, [sp, #16]
 8013c00:	1d11      	adds	r1, r2, #4
 8013c02:	9104      	str	r1, [sp, #16]
 8013c04:	6812      	ldr	r2, [r2, #0]
 8013c06:	e7ce      	b.n	8013ba6 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8013c08:	2300      	movs	r3, #0
 8013c0a:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8013c0c:	1ba0      	subs	r0, r4, r6
}
 8013c0e:	b007      	add	sp, #28
 8013c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8013c14:	2000      	movs	r0, #0
 8013c16:	e7fa      	b.n	8013c0e <tiny_vsnprintf_like+0x17a>
 8013c18:	08017568 	.word	0x08017568

08013c1c <__cvt>:
 8013c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c20:	b088      	sub	sp, #32
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	461f      	mov	r7, r3
 8013c26:	4614      	mov	r4, r2
 8013c28:	bfb8      	it	lt
 8013c2a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8013c2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013c30:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013c32:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8013c36:	bfb6      	itet	lt
 8013c38:	461f      	movlt	r7, r3
 8013c3a:	2300      	movge	r3, #0
 8013c3c:	232d      	movlt	r3, #45	; 0x2d
 8013c3e:	7013      	strb	r3, [r2, #0]
 8013c40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c42:	f023 0820 	bic.w	r8, r3, #32
 8013c46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013c4a:	d005      	beq.n	8013c58 <__cvt+0x3c>
 8013c4c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013c50:	d100      	bne.n	8013c54 <__cvt+0x38>
 8013c52:	3501      	adds	r5, #1
 8013c54:	2302      	movs	r3, #2
 8013c56:	e000      	b.n	8013c5a <__cvt+0x3e>
 8013c58:	2303      	movs	r3, #3
 8013c5a:	aa07      	add	r2, sp, #28
 8013c5c:	9204      	str	r2, [sp, #16]
 8013c5e:	aa06      	add	r2, sp, #24
 8013c60:	e9cd a202 	strd	sl, r2, [sp, #8]
 8013c64:	e9cd 3500 	strd	r3, r5, [sp]
 8013c68:	4622      	mov	r2, r4
 8013c6a:	463b      	mov	r3, r7
 8013c6c:	f000 fe3c 	bl	80148e8 <_dtoa_r>
 8013c70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013c74:	4606      	mov	r6, r0
 8013c76:	d102      	bne.n	8013c7e <__cvt+0x62>
 8013c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c7a:	07db      	lsls	r3, r3, #31
 8013c7c:	d522      	bpl.n	8013cc4 <__cvt+0xa8>
 8013c7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013c82:	eb06 0905 	add.w	r9, r6, r5
 8013c86:	d110      	bne.n	8013caa <__cvt+0x8e>
 8013c88:	7833      	ldrb	r3, [r6, #0]
 8013c8a:	2b30      	cmp	r3, #48	; 0x30
 8013c8c:	d10a      	bne.n	8013ca4 <__cvt+0x88>
 8013c8e:	2200      	movs	r2, #0
 8013c90:	2300      	movs	r3, #0
 8013c92:	4620      	mov	r0, r4
 8013c94:	4639      	mov	r1, r7
 8013c96:	f7ec feef 	bl	8000a78 <__aeabi_dcmpeq>
 8013c9a:	b918      	cbnz	r0, 8013ca4 <__cvt+0x88>
 8013c9c:	f1c5 0501 	rsb	r5, r5, #1
 8013ca0:	f8ca 5000 	str.w	r5, [sl]
 8013ca4:	f8da 3000 	ldr.w	r3, [sl]
 8013ca8:	4499      	add	r9, r3
 8013caa:	2200      	movs	r2, #0
 8013cac:	2300      	movs	r3, #0
 8013cae:	4620      	mov	r0, r4
 8013cb0:	4639      	mov	r1, r7
 8013cb2:	f7ec fee1 	bl	8000a78 <__aeabi_dcmpeq>
 8013cb6:	b108      	cbz	r0, 8013cbc <__cvt+0xa0>
 8013cb8:	f8cd 901c 	str.w	r9, [sp, #28]
 8013cbc:	2230      	movs	r2, #48	; 0x30
 8013cbe:	9b07      	ldr	r3, [sp, #28]
 8013cc0:	454b      	cmp	r3, r9
 8013cc2:	d307      	bcc.n	8013cd4 <__cvt+0xb8>
 8013cc4:	9b07      	ldr	r3, [sp, #28]
 8013cc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013cc8:	1b9b      	subs	r3, r3, r6
 8013cca:	4630      	mov	r0, r6
 8013ccc:	6013      	str	r3, [r2, #0]
 8013cce:	b008      	add	sp, #32
 8013cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd4:	1c59      	adds	r1, r3, #1
 8013cd6:	9107      	str	r1, [sp, #28]
 8013cd8:	701a      	strb	r2, [r3, #0]
 8013cda:	e7f0      	b.n	8013cbe <__cvt+0xa2>

08013cdc <__exponent>:
 8013cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cde:	4603      	mov	r3, r0
 8013ce0:	2900      	cmp	r1, #0
 8013ce2:	bfb8      	it	lt
 8013ce4:	4249      	neglt	r1, r1
 8013ce6:	f803 2b02 	strb.w	r2, [r3], #2
 8013cea:	bfb4      	ite	lt
 8013cec:	222d      	movlt	r2, #45	; 0x2d
 8013cee:	222b      	movge	r2, #43	; 0x2b
 8013cf0:	2909      	cmp	r1, #9
 8013cf2:	7042      	strb	r2, [r0, #1]
 8013cf4:	dd2a      	ble.n	8013d4c <__exponent+0x70>
 8013cf6:	f10d 0207 	add.w	r2, sp, #7
 8013cfa:	4617      	mov	r7, r2
 8013cfc:	260a      	movs	r6, #10
 8013cfe:	4694      	mov	ip, r2
 8013d00:	fb91 f5f6 	sdiv	r5, r1, r6
 8013d04:	fb06 1415 	mls	r4, r6, r5, r1
 8013d08:	3430      	adds	r4, #48	; 0x30
 8013d0a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013d0e:	460c      	mov	r4, r1
 8013d10:	2c63      	cmp	r4, #99	; 0x63
 8013d12:	f102 32ff 	add.w	r2, r2, #4294967295
 8013d16:	4629      	mov	r1, r5
 8013d18:	dcf1      	bgt.n	8013cfe <__exponent+0x22>
 8013d1a:	3130      	adds	r1, #48	; 0x30
 8013d1c:	f1ac 0402 	sub.w	r4, ip, #2
 8013d20:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013d24:	1c41      	adds	r1, r0, #1
 8013d26:	4622      	mov	r2, r4
 8013d28:	42ba      	cmp	r2, r7
 8013d2a:	d30a      	bcc.n	8013d42 <__exponent+0x66>
 8013d2c:	f10d 0209 	add.w	r2, sp, #9
 8013d30:	eba2 020c 	sub.w	r2, r2, ip
 8013d34:	42bc      	cmp	r4, r7
 8013d36:	bf88      	it	hi
 8013d38:	2200      	movhi	r2, #0
 8013d3a:	4413      	add	r3, r2
 8013d3c:	1a18      	subs	r0, r3, r0
 8013d3e:	b003      	add	sp, #12
 8013d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d42:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013d46:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013d4a:	e7ed      	b.n	8013d28 <__exponent+0x4c>
 8013d4c:	2330      	movs	r3, #48	; 0x30
 8013d4e:	3130      	adds	r1, #48	; 0x30
 8013d50:	7083      	strb	r3, [r0, #2]
 8013d52:	70c1      	strb	r1, [r0, #3]
 8013d54:	1d03      	adds	r3, r0, #4
 8013d56:	e7f1      	b.n	8013d3c <__exponent+0x60>

08013d58 <_printf_float>:
 8013d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d5c:	b091      	sub	sp, #68	; 0x44
 8013d5e:	460c      	mov	r4, r1
 8013d60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8013d64:	4616      	mov	r6, r2
 8013d66:	461f      	mov	r7, r3
 8013d68:	4605      	mov	r5, r0
 8013d6a:	f000 fcbf 	bl	80146ec <_localeconv_r>
 8013d6e:	6803      	ldr	r3, [r0, #0]
 8013d70:	9309      	str	r3, [sp, #36]	; 0x24
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7ec fa54 	bl	8000220 <strlen>
 8013d78:	2300      	movs	r3, #0
 8013d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8013d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8013d80:	900a      	str	r0, [sp, #40]	; 0x28
 8013d82:	3307      	adds	r3, #7
 8013d84:	f023 0307 	bic.w	r3, r3, #7
 8013d88:	f103 0208 	add.w	r2, r3, #8
 8013d8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013d90:	f8d4 b000 	ldr.w	fp, [r4]
 8013d94:	f8c8 2000 	str.w	r2, [r8]
 8013d98:	e9d3 a800 	ldrd	sl, r8, [r3]
 8013d9c:	4652      	mov	r2, sl
 8013d9e:	4643      	mov	r3, r8
 8013da0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013da4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8013da8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013daa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013dac:	4b9c      	ldr	r3, [pc, #624]	; (8014020 <_printf_float+0x2c8>)
 8013dae:	f04f 32ff 	mov.w	r2, #4294967295
 8013db2:	4650      	mov	r0, sl
 8013db4:	f7ec fe92 	bl	8000adc <__aeabi_dcmpun>
 8013db8:	bb70      	cbnz	r0, 8013e18 <_printf_float+0xc0>
 8013dba:	4b99      	ldr	r3, [pc, #612]	; (8014020 <_printf_float+0x2c8>)
 8013dbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8013dc2:	4650      	mov	r0, sl
 8013dc4:	f7ec fe6c 	bl	8000aa0 <__aeabi_dcmple>
 8013dc8:	bb30      	cbnz	r0, 8013e18 <_printf_float+0xc0>
 8013dca:	2200      	movs	r2, #0
 8013dcc:	2300      	movs	r3, #0
 8013dce:	4650      	mov	r0, sl
 8013dd0:	4641      	mov	r1, r8
 8013dd2:	f7ec fe5b 	bl	8000a8c <__aeabi_dcmplt>
 8013dd6:	b110      	cbz	r0, 8013dde <_printf_float+0x86>
 8013dd8:	232d      	movs	r3, #45	; 0x2d
 8013dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013dde:	4a91      	ldr	r2, [pc, #580]	; (8014024 <_printf_float+0x2cc>)
 8013de0:	4b91      	ldr	r3, [pc, #580]	; (8014028 <_printf_float+0x2d0>)
 8013de2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013de6:	bf94      	ite	ls
 8013de8:	4690      	movls	r8, r2
 8013dea:	4698      	movhi	r8, r3
 8013dec:	2303      	movs	r3, #3
 8013dee:	6123      	str	r3, [r4, #16]
 8013df0:	f02b 0304 	bic.w	r3, fp, #4
 8013df4:	6023      	str	r3, [r4, #0]
 8013df6:	f04f 0a00 	mov.w	sl, #0
 8013dfa:	9700      	str	r7, [sp, #0]
 8013dfc:	4633      	mov	r3, r6
 8013dfe:	aa0f      	add	r2, sp, #60	; 0x3c
 8013e00:	4621      	mov	r1, r4
 8013e02:	4628      	mov	r0, r5
 8013e04:	f000 f9d4 	bl	80141b0 <_printf_common>
 8013e08:	3001      	adds	r0, #1
 8013e0a:	f040 808f 	bne.w	8013f2c <_printf_float+0x1d4>
 8013e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e12:	b011      	add	sp, #68	; 0x44
 8013e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e18:	4652      	mov	r2, sl
 8013e1a:	4643      	mov	r3, r8
 8013e1c:	4650      	mov	r0, sl
 8013e1e:	4641      	mov	r1, r8
 8013e20:	f7ec fe5c 	bl	8000adc <__aeabi_dcmpun>
 8013e24:	b140      	cbz	r0, 8013e38 <_printf_float+0xe0>
 8013e26:	f1b8 0f00 	cmp.w	r8, #0
 8013e2a:	bfbc      	itt	lt
 8013e2c:	232d      	movlt	r3, #45	; 0x2d
 8013e2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013e32:	4a7e      	ldr	r2, [pc, #504]	; (801402c <_printf_float+0x2d4>)
 8013e34:	4b7e      	ldr	r3, [pc, #504]	; (8014030 <_printf_float+0x2d8>)
 8013e36:	e7d4      	b.n	8013de2 <_printf_float+0x8a>
 8013e38:	6863      	ldr	r3, [r4, #4]
 8013e3a:	1c5a      	adds	r2, r3, #1
 8013e3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013e40:	d142      	bne.n	8013ec8 <_printf_float+0x170>
 8013e42:	2306      	movs	r3, #6
 8013e44:	6063      	str	r3, [r4, #4]
 8013e46:	2200      	movs	r2, #0
 8013e48:	9206      	str	r2, [sp, #24]
 8013e4a:	aa0e      	add	r2, sp, #56	; 0x38
 8013e4c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8013e50:	aa0d      	add	r2, sp, #52	; 0x34
 8013e52:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8013e56:	9203      	str	r2, [sp, #12]
 8013e58:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8013e5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013e60:	6023      	str	r3, [r4, #0]
 8013e62:	6863      	ldr	r3, [r4, #4]
 8013e64:	9300      	str	r3, [sp, #0]
 8013e66:	4652      	mov	r2, sl
 8013e68:	4643      	mov	r3, r8
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8013e6e:	f7ff fed5 	bl	8013c1c <__cvt>
 8013e72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e74:	2947      	cmp	r1, #71	; 0x47
 8013e76:	4680      	mov	r8, r0
 8013e78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e7a:	d108      	bne.n	8013e8e <_printf_float+0x136>
 8013e7c:	1cc8      	adds	r0, r1, #3
 8013e7e:	db02      	blt.n	8013e86 <_printf_float+0x12e>
 8013e80:	6863      	ldr	r3, [r4, #4]
 8013e82:	4299      	cmp	r1, r3
 8013e84:	dd40      	ble.n	8013f08 <_printf_float+0x1b0>
 8013e86:	f1a9 0902 	sub.w	r9, r9, #2
 8013e8a:	fa5f f989 	uxtb.w	r9, r9
 8013e8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013e92:	d81f      	bhi.n	8013ed4 <_printf_float+0x17c>
 8013e94:	3901      	subs	r1, #1
 8013e96:	464a      	mov	r2, r9
 8013e98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013e9c:	910d      	str	r1, [sp, #52]	; 0x34
 8013e9e:	f7ff ff1d 	bl	8013cdc <__exponent>
 8013ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ea4:	1813      	adds	r3, r2, r0
 8013ea6:	2a01      	cmp	r2, #1
 8013ea8:	4682      	mov	sl, r0
 8013eaa:	6123      	str	r3, [r4, #16]
 8013eac:	dc02      	bgt.n	8013eb4 <_printf_float+0x15c>
 8013eae:	6822      	ldr	r2, [r4, #0]
 8013eb0:	07d2      	lsls	r2, r2, #31
 8013eb2:	d501      	bpl.n	8013eb8 <_printf_float+0x160>
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	6123      	str	r3, [r4, #16]
 8013eb8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d09c      	beq.n	8013dfa <_printf_float+0xa2>
 8013ec0:	232d      	movs	r3, #45	; 0x2d
 8013ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ec6:	e798      	b.n	8013dfa <_printf_float+0xa2>
 8013ec8:	2947      	cmp	r1, #71	; 0x47
 8013eca:	d1bc      	bne.n	8013e46 <_printf_float+0xee>
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d1ba      	bne.n	8013e46 <_printf_float+0xee>
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	e7b7      	b.n	8013e44 <_printf_float+0xec>
 8013ed4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013ed8:	d118      	bne.n	8013f0c <_printf_float+0x1b4>
 8013eda:	2900      	cmp	r1, #0
 8013edc:	6863      	ldr	r3, [r4, #4]
 8013ede:	dd0b      	ble.n	8013ef8 <_printf_float+0x1a0>
 8013ee0:	6121      	str	r1, [r4, #16]
 8013ee2:	b913      	cbnz	r3, 8013eea <_printf_float+0x192>
 8013ee4:	6822      	ldr	r2, [r4, #0]
 8013ee6:	07d0      	lsls	r0, r2, #31
 8013ee8:	d502      	bpl.n	8013ef0 <_printf_float+0x198>
 8013eea:	3301      	adds	r3, #1
 8013eec:	440b      	add	r3, r1
 8013eee:	6123      	str	r3, [r4, #16]
 8013ef0:	65a1      	str	r1, [r4, #88]	; 0x58
 8013ef2:	f04f 0a00 	mov.w	sl, #0
 8013ef6:	e7df      	b.n	8013eb8 <_printf_float+0x160>
 8013ef8:	b913      	cbnz	r3, 8013f00 <_printf_float+0x1a8>
 8013efa:	6822      	ldr	r2, [r4, #0]
 8013efc:	07d2      	lsls	r2, r2, #31
 8013efe:	d501      	bpl.n	8013f04 <_printf_float+0x1ac>
 8013f00:	3302      	adds	r3, #2
 8013f02:	e7f4      	b.n	8013eee <_printf_float+0x196>
 8013f04:	2301      	movs	r3, #1
 8013f06:	e7f2      	b.n	8013eee <_printf_float+0x196>
 8013f08:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f0e:	4299      	cmp	r1, r3
 8013f10:	db05      	blt.n	8013f1e <_printf_float+0x1c6>
 8013f12:	6823      	ldr	r3, [r4, #0]
 8013f14:	6121      	str	r1, [r4, #16]
 8013f16:	07d8      	lsls	r0, r3, #31
 8013f18:	d5ea      	bpl.n	8013ef0 <_printf_float+0x198>
 8013f1a:	1c4b      	adds	r3, r1, #1
 8013f1c:	e7e7      	b.n	8013eee <_printf_float+0x196>
 8013f1e:	2900      	cmp	r1, #0
 8013f20:	bfd4      	ite	le
 8013f22:	f1c1 0202 	rsble	r2, r1, #2
 8013f26:	2201      	movgt	r2, #1
 8013f28:	4413      	add	r3, r2
 8013f2a:	e7e0      	b.n	8013eee <_printf_float+0x196>
 8013f2c:	6823      	ldr	r3, [r4, #0]
 8013f2e:	055a      	lsls	r2, r3, #21
 8013f30:	d407      	bmi.n	8013f42 <_printf_float+0x1ea>
 8013f32:	6923      	ldr	r3, [r4, #16]
 8013f34:	4642      	mov	r2, r8
 8013f36:	4631      	mov	r1, r6
 8013f38:	4628      	mov	r0, r5
 8013f3a:	47b8      	blx	r7
 8013f3c:	3001      	adds	r0, #1
 8013f3e:	d12b      	bne.n	8013f98 <_printf_float+0x240>
 8013f40:	e765      	b.n	8013e0e <_printf_float+0xb6>
 8013f42:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013f46:	f240 80dc 	bls.w	8014102 <_printf_float+0x3aa>
 8013f4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013f4e:	2200      	movs	r2, #0
 8013f50:	2300      	movs	r3, #0
 8013f52:	f7ec fd91 	bl	8000a78 <__aeabi_dcmpeq>
 8013f56:	2800      	cmp	r0, #0
 8013f58:	d033      	beq.n	8013fc2 <_printf_float+0x26a>
 8013f5a:	4a36      	ldr	r2, [pc, #216]	; (8014034 <_printf_float+0x2dc>)
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	4631      	mov	r1, r6
 8013f60:	4628      	mov	r0, r5
 8013f62:	47b8      	blx	r7
 8013f64:	3001      	adds	r0, #1
 8013f66:	f43f af52 	beq.w	8013e0e <_printf_float+0xb6>
 8013f6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	db02      	blt.n	8013f78 <_printf_float+0x220>
 8013f72:	6823      	ldr	r3, [r4, #0]
 8013f74:	07d8      	lsls	r0, r3, #31
 8013f76:	d50f      	bpl.n	8013f98 <_printf_float+0x240>
 8013f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f7c:	4631      	mov	r1, r6
 8013f7e:	4628      	mov	r0, r5
 8013f80:	47b8      	blx	r7
 8013f82:	3001      	adds	r0, #1
 8013f84:	f43f af43 	beq.w	8013e0e <_printf_float+0xb6>
 8013f88:	f04f 0800 	mov.w	r8, #0
 8013f8c:	f104 091a 	add.w	r9, r4, #26
 8013f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f92:	3b01      	subs	r3, #1
 8013f94:	4543      	cmp	r3, r8
 8013f96:	dc09      	bgt.n	8013fac <_printf_float+0x254>
 8013f98:	6823      	ldr	r3, [r4, #0]
 8013f9a:	079b      	lsls	r3, r3, #30
 8013f9c:	f100 8103 	bmi.w	80141a6 <_printf_float+0x44e>
 8013fa0:	68e0      	ldr	r0, [r4, #12]
 8013fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fa4:	4298      	cmp	r0, r3
 8013fa6:	bfb8      	it	lt
 8013fa8:	4618      	movlt	r0, r3
 8013faa:	e732      	b.n	8013e12 <_printf_float+0xba>
 8013fac:	2301      	movs	r3, #1
 8013fae:	464a      	mov	r2, r9
 8013fb0:	4631      	mov	r1, r6
 8013fb2:	4628      	mov	r0, r5
 8013fb4:	47b8      	blx	r7
 8013fb6:	3001      	adds	r0, #1
 8013fb8:	f43f af29 	beq.w	8013e0e <_printf_float+0xb6>
 8013fbc:	f108 0801 	add.w	r8, r8, #1
 8013fc0:	e7e6      	b.n	8013f90 <_printf_float+0x238>
 8013fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	dc37      	bgt.n	8014038 <_printf_float+0x2e0>
 8013fc8:	4a1a      	ldr	r2, [pc, #104]	; (8014034 <_printf_float+0x2dc>)
 8013fca:	2301      	movs	r3, #1
 8013fcc:	4631      	mov	r1, r6
 8013fce:	4628      	mov	r0, r5
 8013fd0:	47b8      	blx	r7
 8013fd2:	3001      	adds	r0, #1
 8013fd4:	f43f af1b 	beq.w	8013e0e <_printf_float+0xb6>
 8013fd8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8013fdc:	4313      	orrs	r3, r2
 8013fde:	d102      	bne.n	8013fe6 <_printf_float+0x28e>
 8013fe0:	6823      	ldr	r3, [r4, #0]
 8013fe2:	07d9      	lsls	r1, r3, #31
 8013fe4:	d5d8      	bpl.n	8013f98 <_printf_float+0x240>
 8013fe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013fea:	4631      	mov	r1, r6
 8013fec:	4628      	mov	r0, r5
 8013fee:	47b8      	blx	r7
 8013ff0:	3001      	adds	r0, #1
 8013ff2:	f43f af0c 	beq.w	8013e0e <_printf_float+0xb6>
 8013ff6:	f04f 0900 	mov.w	r9, #0
 8013ffa:	f104 0a1a 	add.w	sl, r4, #26
 8013ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014000:	425b      	negs	r3, r3
 8014002:	454b      	cmp	r3, r9
 8014004:	dc01      	bgt.n	801400a <_printf_float+0x2b2>
 8014006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014008:	e794      	b.n	8013f34 <_printf_float+0x1dc>
 801400a:	2301      	movs	r3, #1
 801400c:	4652      	mov	r2, sl
 801400e:	4631      	mov	r1, r6
 8014010:	4628      	mov	r0, r5
 8014012:	47b8      	blx	r7
 8014014:	3001      	adds	r0, #1
 8014016:	f43f aefa 	beq.w	8013e0e <_printf_float+0xb6>
 801401a:	f109 0901 	add.w	r9, r9, #1
 801401e:	e7ee      	b.n	8013ffe <_printf_float+0x2a6>
 8014020:	7fefffff 	.word	0x7fefffff
 8014024:	0801756f 	.word	0x0801756f
 8014028:	08017573 	.word	0x08017573
 801402c:	08017577 	.word	0x08017577
 8014030:	0801757b 	.word	0x0801757b
 8014034:	0801757f 	.word	0x0801757f
 8014038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801403a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801403c:	429a      	cmp	r2, r3
 801403e:	bfa8      	it	ge
 8014040:	461a      	movge	r2, r3
 8014042:	2a00      	cmp	r2, #0
 8014044:	4691      	mov	r9, r2
 8014046:	dc37      	bgt.n	80140b8 <_printf_float+0x360>
 8014048:	f04f 0b00 	mov.w	fp, #0
 801404c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014050:	f104 021a 	add.w	r2, r4, #26
 8014054:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014058:	ebaa 0309 	sub.w	r3, sl, r9
 801405c:	455b      	cmp	r3, fp
 801405e:	dc33      	bgt.n	80140c8 <_printf_float+0x370>
 8014060:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014064:	429a      	cmp	r2, r3
 8014066:	db3b      	blt.n	80140e0 <_printf_float+0x388>
 8014068:	6823      	ldr	r3, [r4, #0]
 801406a:	07da      	lsls	r2, r3, #31
 801406c:	d438      	bmi.n	80140e0 <_printf_float+0x388>
 801406e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014072:	eba2 0903 	sub.w	r9, r2, r3
 8014076:	eba2 020a 	sub.w	r2, r2, sl
 801407a:	4591      	cmp	r9, r2
 801407c:	bfa8      	it	ge
 801407e:	4691      	movge	r9, r2
 8014080:	f1b9 0f00 	cmp.w	r9, #0
 8014084:	dc34      	bgt.n	80140f0 <_printf_float+0x398>
 8014086:	f04f 0800 	mov.w	r8, #0
 801408a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801408e:	f104 0a1a 	add.w	sl, r4, #26
 8014092:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014096:	1a9b      	subs	r3, r3, r2
 8014098:	eba3 0309 	sub.w	r3, r3, r9
 801409c:	4543      	cmp	r3, r8
 801409e:	f77f af7b 	ble.w	8013f98 <_printf_float+0x240>
 80140a2:	2301      	movs	r3, #1
 80140a4:	4652      	mov	r2, sl
 80140a6:	4631      	mov	r1, r6
 80140a8:	4628      	mov	r0, r5
 80140aa:	47b8      	blx	r7
 80140ac:	3001      	adds	r0, #1
 80140ae:	f43f aeae 	beq.w	8013e0e <_printf_float+0xb6>
 80140b2:	f108 0801 	add.w	r8, r8, #1
 80140b6:	e7ec      	b.n	8014092 <_printf_float+0x33a>
 80140b8:	4613      	mov	r3, r2
 80140ba:	4631      	mov	r1, r6
 80140bc:	4642      	mov	r2, r8
 80140be:	4628      	mov	r0, r5
 80140c0:	47b8      	blx	r7
 80140c2:	3001      	adds	r0, #1
 80140c4:	d1c0      	bne.n	8014048 <_printf_float+0x2f0>
 80140c6:	e6a2      	b.n	8013e0e <_printf_float+0xb6>
 80140c8:	2301      	movs	r3, #1
 80140ca:	4631      	mov	r1, r6
 80140cc:	4628      	mov	r0, r5
 80140ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80140d0:	47b8      	blx	r7
 80140d2:	3001      	adds	r0, #1
 80140d4:	f43f ae9b 	beq.w	8013e0e <_printf_float+0xb6>
 80140d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140da:	f10b 0b01 	add.w	fp, fp, #1
 80140de:	e7b9      	b.n	8014054 <_printf_float+0x2fc>
 80140e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140e4:	4631      	mov	r1, r6
 80140e6:	4628      	mov	r0, r5
 80140e8:	47b8      	blx	r7
 80140ea:	3001      	adds	r0, #1
 80140ec:	d1bf      	bne.n	801406e <_printf_float+0x316>
 80140ee:	e68e      	b.n	8013e0e <_printf_float+0xb6>
 80140f0:	464b      	mov	r3, r9
 80140f2:	eb08 020a 	add.w	r2, r8, sl
 80140f6:	4631      	mov	r1, r6
 80140f8:	4628      	mov	r0, r5
 80140fa:	47b8      	blx	r7
 80140fc:	3001      	adds	r0, #1
 80140fe:	d1c2      	bne.n	8014086 <_printf_float+0x32e>
 8014100:	e685      	b.n	8013e0e <_printf_float+0xb6>
 8014102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014104:	2a01      	cmp	r2, #1
 8014106:	dc01      	bgt.n	801410c <_printf_float+0x3b4>
 8014108:	07db      	lsls	r3, r3, #31
 801410a:	d539      	bpl.n	8014180 <_printf_float+0x428>
 801410c:	2301      	movs	r3, #1
 801410e:	4642      	mov	r2, r8
 8014110:	4631      	mov	r1, r6
 8014112:	4628      	mov	r0, r5
 8014114:	47b8      	blx	r7
 8014116:	3001      	adds	r0, #1
 8014118:	f43f ae79 	beq.w	8013e0e <_printf_float+0xb6>
 801411c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014120:	4631      	mov	r1, r6
 8014122:	4628      	mov	r0, r5
 8014124:	47b8      	blx	r7
 8014126:	3001      	adds	r0, #1
 8014128:	f43f ae71 	beq.w	8013e0e <_printf_float+0xb6>
 801412c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014130:	2200      	movs	r2, #0
 8014132:	2300      	movs	r3, #0
 8014134:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8014138:	f7ec fc9e 	bl	8000a78 <__aeabi_dcmpeq>
 801413c:	b9d8      	cbnz	r0, 8014176 <_printf_float+0x41e>
 801413e:	f109 33ff 	add.w	r3, r9, #4294967295
 8014142:	f108 0201 	add.w	r2, r8, #1
 8014146:	4631      	mov	r1, r6
 8014148:	4628      	mov	r0, r5
 801414a:	47b8      	blx	r7
 801414c:	3001      	adds	r0, #1
 801414e:	d10e      	bne.n	801416e <_printf_float+0x416>
 8014150:	e65d      	b.n	8013e0e <_printf_float+0xb6>
 8014152:	2301      	movs	r3, #1
 8014154:	464a      	mov	r2, r9
 8014156:	4631      	mov	r1, r6
 8014158:	4628      	mov	r0, r5
 801415a:	47b8      	blx	r7
 801415c:	3001      	adds	r0, #1
 801415e:	f43f ae56 	beq.w	8013e0e <_printf_float+0xb6>
 8014162:	f108 0801 	add.w	r8, r8, #1
 8014166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014168:	3b01      	subs	r3, #1
 801416a:	4543      	cmp	r3, r8
 801416c:	dcf1      	bgt.n	8014152 <_printf_float+0x3fa>
 801416e:	4653      	mov	r3, sl
 8014170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014174:	e6df      	b.n	8013f36 <_printf_float+0x1de>
 8014176:	f04f 0800 	mov.w	r8, #0
 801417a:	f104 091a 	add.w	r9, r4, #26
 801417e:	e7f2      	b.n	8014166 <_printf_float+0x40e>
 8014180:	2301      	movs	r3, #1
 8014182:	4642      	mov	r2, r8
 8014184:	e7df      	b.n	8014146 <_printf_float+0x3ee>
 8014186:	2301      	movs	r3, #1
 8014188:	464a      	mov	r2, r9
 801418a:	4631      	mov	r1, r6
 801418c:	4628      	mov	r0, r5
 801418e:	47b8      	blx	r7
 8014190:	3001      	adds	r0, #1
 8014192:	f43f ae3c 	beq.w	8013e0e <_printf_float+0xb6>
 8014196:	f108 0801 	add.w	r8, r8, #1
 801419a:	68e3      	ldr	r3, [r4, #12]
 801419c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801419e:	1a5b      	subs	r3, r3, r1
 80141a0:	4543      	cmp	r3, r8
 80141a2:	dcf0      	bgt.n	8014186 <_printf_float+0x42e>
 80141a4:	e6fc      	b.n	8013fa0 <_printf_float+0x248>
 80141a6:	f04f 0800 	mov.w	r8, #0
 80141aa:	f104 0919 	add.w	r9, r4, #25
 80141ae:	e7f4      	b.n	801419a <_printf_float+0x442>

080141b0 <_printf_common>:
 80141b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141b4:	4616      	mov	r6, r2
 80141b6:	4699      	mov	r9, r3
 80141b8:	688a      	ldr	r2, [r1, #8]
 80141ba:	690b      	ldr	r3, [r1, #16]
 80141bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80141c0:	4293      	cmp	r3, r2
 80141c2:	bfb8      	it	lt
 80141c4:	4613      	movlt	r3, r2
 80141c6:	6033      	str	r3, [r6, #0]
 80141c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80141cc:	4607      	mov	r7, r0
 80141ce:	460c      	mov	r4, r1
 80141d0:	b10a      	cbz	r2, 80141d6 <_printf_common+0x26>
 80141d2:	3301      	adds	r3, #1
 80141d4:	6033      	str	r3, [r6, #0]
 80141d6:	6823      	ldr	r3, [r4, #0]
 80141d8:	0699      	lsls	r1, r3, #26
 80141da:	bf42      	ittt	mi
 80141dc:	6833      	ldrmi	r3, [r6, #0]
 80141de:	3302      	addmi	r3, #2
 80141e0:	6033      	strmi	r3, [r6, #0]
 80141e2:	6825      	ldr	r5, [r4, #0]
 80141e4:	f015 0506 	ands.w	r5, r5, #6
 80141e8:	d106      	bne.n	80141f8 <_printf_common+0x48>
 80141ea:	f104 0a19 	add.w	sl, r4, #25
 80141ee:	68e3      	ldr	r3, [r4, #12]
 80141f0:	6832      	ldr	r2, [r6, #0]
 80141f2:	1a9b      	subs	r3, r3, r2
 80141f4:	42ab      	cmp	r3, r5
 80141f6:	dc26      	bgt.n	8014246 <_printf_common+0x96>
 80141f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80141fc:	1e13      	subs	r3, r2, #0
 80141fe:	6822      	ldr	r2, [r4, #0]
 8014200:	bf18      	it	ne
 8014202:	2301      	movne	r3, #1
 8014204:	0692      	lsls	r2, r2, #26
 8014206:	d42b      	bmi.n	8014260 <_printf_common+0xb0>
 8014208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801420c:	4649      	mov	r1, r9
 801420e:	4638      	mov	r0, r7
 8014210:	47c0      	blx	r8
 8014212:	3001      	adds	r0, #1
 8014214:	d01e      	beq.n	8014254 <_printf_common+0xa4>
 8014216:	6823      	ldr	r3, [r4, #0]
 8014218:	6922      	ldr	r2, [r4, #16]
 801421a:	f003 0306 	and.w	r3, r3, #6
 801421e:	2b04      	cmp	r3, #4
 8014220:	bf02      	ittt	eq
 8014222:	68e5      	ldreq	r5, [r4, #12]
 8014224:	6833      	ldreq	r3, [r6, #0]
 8014226:	1aed      	subeq	r5, r5, r3
 8014228:	68a3      	ldr	r3, [r4, #8]
 801422a:	bf0c      	ite	eq
 801422c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014230:	2500      	movne	r5, #0
 8014232:	4293      	cmp	r3, r2
 8014234:	bfc4      	itt	gt
 8014236:	1a9b      	subgt	r3, r3, r2
 8014238:	18ed      	addgt	r5, r5, r3
 801423a:	2600      	movs	r6, #0
 801423c:	341a      	adds	r4, #26
 801423e:	42b5      	cmp	r5, r6
 8014240:	d11a      	bne.n	8014278 <_printf_common+0xc8>
 8014242:	2000      	movs	r0, #0
 8014244:	e008      	b.n	8014258 <_printf_common+0xa8>
 8014246:	2301      	movs	r3, #1
 8014248:	4652      	mov	r2, sl
 801424a:	4649      	mov	r1, r9
 801424c:	4638      	mov	r0, r7
 801424e:	47c0      	blx	r8
 8014250:	3001      	adds	r0, #1
 8014252:	d103      	bne.n	801425c <_printf_common+0xac>
 8014254:	f04f 30ff 	mov.w	r0, #4294967295
 8014258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801425c:	3501      	adds	r5, #1
 801425e:	e7c6      	b.n	80141ee <_printf_common+0x3e>
 8014260:	18e1      	adds	r1, r4, r3
 8014262:	1c5a      	adds	r2, r3, #1
 8014264:	2030      	movs	r0, #48	; 0x30
 8014266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801426a:	4422      	add	r2, r4
 801426c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014274:	3302      	adds	r3, #2
 8014276:	e7c7      	b.n	8014208 <_printf_common+0x58>
 8014278:	2301      	movs	r3, #1
 801427a:	4622      	mov	r2, r4
 801427c:	4649      	mov	r1, r9
 801427e:	4638      	mov	r0, r7
 8014280:	47c0      	blx	r8
 8014282:	3001      	adds	r0, #1
 8014284:	d0e6      	beq.n	8014254 <_printf_common+0xa4>
 8014286:	3601      	adds	r6, #1
 8014288:	e7d9      	b.n	801423e <_printf_common+0x8e>
	...

0801428c <_printf_i>:
 801428c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014290:	7e0f      	ldrb	r7, [r1, #24]
 8014292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014294:	2f78      	cmp	r7, #120	; 0x78
 8014296:	4691      	mov	r9, r2
 8014298:	4680      	mov	r8, r0
 801429a:	460c      	mov	r4, r1
 801429c:	469a      	mov	sl, r3
 801429e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80142a2:	d807      	bhi.n	80142b4 <_printf_i+0x28>
 80142a4:	2f62      	cmp	r7, #98	; 0x62
 80142a6:	d80a      	bhi.n	80142be <_printf_i+0x32>
 80142a8:	2f00      	cmp	r7, #0
 80142aa:	f000 80d4 	beq.w	8014456 <_printf_i+0x1ca>
 80142ae:	2f58      	cmp	r7, #88	; 0x58
 80142b0:	f000 80c0 	beq.w	8014434 <_printf_i+0x1a8>
 80142b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80142b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80142bc:	e03a      	b.n	8014334 <_printf_i+0xa8>
 80142be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80142c2:	2b15      	cmp	r3, #21
 80142c4:	d8f6      	bhi.n	80142b4 <_printf_i+0x28>
 80142c6:	a101      	add	r1, pc, #4	; (adr r1, 80142cc <_printf_i+0x40>)
 80142c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80142cc:	08014325 	.word	0x08014325
 80142d0:	08014339 	.word	0x08014339
 80142d4:	080142b5 	.word	0x080142b5
 80142d8:	080142b5 	.word	0x080142b5
 80142dc:	080142b5 	.word	0x080142b5
 80142e0:	080142b5 	.word	0x080142b5
 80142e4:	08014339 	.word	0x08014339
 80142e8:	080142b5 	.word	0x080142b5
 80142ec:	080142b5 	.word	0x080142b5
 80142f0:	080142b5 	.word	0x080142b5
 80142f4:	080142b5 	.word	0x080142b5
 80142f8:	0801443d 	.word	0x0801443d
 80142fc:	08014365 	.word	0x08014365
 8014300:	080143f7 	.word	0x080143f7
 8014304:	080142b5 	.word	0x080142b5
 8014308:	080142b5 	.word	0x080142b5
 801430c:	0801445f 	.word	0x0801445f
 8014310:	080142b5 	.word	0x080142b5
 8014314:	08014365 	.word	0x08014365
 8014318:	080142b5 	.word	0x080142b5
 801431c:	080142b5 	.word	0x080142b5
 8014320:	080143ff 	.word	0x080143ff
 8014324:	682b      	ldr	r3, [r5, #0]
 8014326:	1d1a      	adds	r2, r3, #4
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	602a      	str	r2, [r5, #0]
 801432c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014334:	2301      	movs	r3, #1
 8014336:	e09f      	b.n	8014478 <_printf_i+0x1ec>
 8014338:	6820      	ldr	r0, [r4, #0]
 801433a:	682b      	ldr	r3, [r5, #0]
 801433c:	0607      	lsls	r7, r0, #24
 801433e:	f103 0104 	add.w	r1, r3, #4
 8014342:	6029      	str	r1, [r5, #0]
 8014344:	d501      	bpl.n	801434a <_printf_i+0xbe>
 8014346:	681e      	ldr	r6, [r3, #0]
 8014348:	e003      	b.n	8014352 <_printf_i+0xc6>
 801434a:	0646      	lsls	r6, r0, #25
 801434c:	d5fb      	bpl.n	8014346 <_printf_i+0xba>
 801434e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014352:	2e00      	cmp	r6, #0
 8014354:	da03      	bge.n	801435e <_printf_i+0xd2>
 8014356:	232d      	movs	r3, #45	; 0x2d
 8014358:	4276      	negs	r6, r6
 801435a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801435e:	485a      	ldr	r0, [pc, #360]	; (80144c8 <_printf_i+0x23c>)
 8014360:	230a      	movs	r3, #10
 8014362:	e012      	b.n	801438a <_printf_i+0xfe>
 8014364:	682b      	ldr	r3, [r5, #0]
 8014366:	6820      	ldr	r0, [r4, #0]
 8014368:	1d19      	adds	r1, r3, #4
 801436a:	6029      	str	r1, [r5, #0]
 801436c:	0605      	lsls	r5, r0, #24
 801436e:	d501      	bpl.n	8014374 <_printf_i+0xe8>
 8014370:	681e      	ldr	r6, [r3, #0]
 8014372:	e002      	b.n	801437a <_printf_i+0xee>
 8014374:	0641      	lsls	r1, r0, #25
 8014376:	d5fb      	bpl.n	8014370 <_printf_i+0xe4>
 8014378:	881e      	ldrh	r6, [r3, #0]
 801437a:	4853      	ldr	r0, [pc, #332]	; (80144c8 <_printf_i+0x23c>)
 801437c:	2f6f      	cmp	r7, #111	; 0x6f
 801437e:	bf0c      	ite	eq
 8014380:	2308      	moveq	r3, #8
 8014382:	230a      	movne	r3, #10
 8014384:	2100      	movs	r1, #0
 8014386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801438a:	6865      	ldr	r5, [r4, #4]
 801438c:	60a5      	str	r5, [r4, #8]
 801438e:	2d00      	cmp	r5, #0
 8014390:	bfa2      	ittt	ge
 8014392:	6821      	ldrge	r1, [r4, #0]
 8014394:	f021 0104 	bicge.w	r1, r1, #4
 8014398:	6021      	strge	r1, [r4, #0]
 801439a:	b90e      	cbnz	r6, 80143a0 <_printf_i+0x114>
 801439c:	2d00      	cmp	r5, #0
 801439e:	d04b      	beq.n	8014438 <_printf_i+0x1ac>
 80143a0:	4615      	mov	r5, r2
 80143a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80143a6:	fb03 6711 	mls	r7, r3, r1, r6
 80143aa:	5dc7      	ldrb	r7, [r0, r7]
 80143ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80143b0:	4637      	mov	r7, r6
 80143b2:	42bb      	cmp	r3, r7
 80143b4:	460e      	mov	r6, r1
 80143b6:	d9f4      	bls.n	80143a2 <_printf_i+0x116>
 80143b8:	2b08      	cmp	r3, #8
 80143ba:	d10b      	bne.n	80143d4 <_printf_i+0x148>
 80143bc:	6823      	ldr	r3, [r4, #0]
 80143be:	07de      	lsls	r6, r3, #31
 80143c0:	d508      	bpl.n	80143d4 <_printf_i+0x148>
 80143c2:	6923      	ldr	r3, [r4, #16]
 80143c4:	6861      	ldr	r1, [r4, #4]
 80143c6:	4299      	cmp	r1, r3
 80143c8:	bfde      	ittt	le
 80143ca:	2330      	movle	r3, #48	; 0x30
 80143cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80143d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80143d4:	1b52      	subs	r2, r2, r5
 80143d6:	6122      	str	r2, [r4, #16]
 80143d8:	f8cd a000 	str.w	sl, [sp]
 80143dc:	464b      	mov	r3, r9
 80143de:	aa03      	add	r2, sp, #12
 80143e0:	4621      	mov	r1, r4
 80143e2:	4640      	mov	r0, r8
 80143e4:	f7ff fee4 	bl	80141b0 <_printf_common>
 80143e8:	3001      	adds	r0, #1
 80143ea:	d14a      	bne.n	8014482 <_printf_i+0x1f6>
 80143ec:	f04f 30ff 	mov.w	r0, #4294967295
 80143f0:	b004      	add	sp, #16
 80143f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143f6:	6823      	ldr	r3, [r4, #0]
 80143f8:	f043 0320 	orr.w	r3, r3, #32
 80143fc:	6023      	str	r3, [r4, #0]
 80143fe:	4833      	ldr	r0, [pc, #204]	; (80144cc <_printf_i+0x240>)
 8014400:	2778      	movs	r7, #120	; 0x78
 8014402:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014406:	6823      	ldr	r3, [r4, #0]
 8014408:	6829      	ldr	r1, [r5, #0]
 801440a:	061f      	lsls	r7, r3, #24
 801440c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014410:	d402      	bmi.n	8014418 <_printf_i+0x18c>
 8014412:	065f      	lsls	r7, r3, #25
 8014414:	bf48      	it	mi
 8014416:	b2b6      	uxthmi	r6, r6
 8014418:	07df      	lsls	r7, r3, #31
 801441a:	bf48      	it	mi
 801441c:	f043 0320 	orrmi.w	r3, r3, #32
 8014420:	6029      	str	r1, [r5, #0]
 8014422:	bf48      	it	mi
 8014424:	6023      	strmi	r3, [r4, #0]
 8014426:	b91e      	cbnz	r6, 8014430 <_printf_i+0x1a4>
 8014428:	6823      	ldr	r3, [r4, #0]
 801442a:	f023 0320 	bic.w	r3, r3, #32
 801442e:	6023      	str	r3, [r4, #0]
 8014430:	2310      	movs	r3, #16
 8014432:	e7a7      	b.n	8014384 <_printf_i+0xf8>
 8014434:	4824      	ldr	r0, [pc, #144]	; (80144c8 <_printf_i+0x23c>)
 8014436:	e7e4      	b.n	8014402 <_printf_i+0x176>
 8014438:	4615      	mov	r5, r2
 801443a:	e7bd      	b.n	80143b8 <_printf_i+0x12c>
 801443c:	682b      	ldr	r3, [r5, #0]
 801443e:	6826      	ldr	r6, [r4, #0]
 8014440:	6961      	ldr	r1, [r4, #20]
 8014442:	1d18      	adds	r0, r3, #4
 8014444:	6028      	str	r0, [r5, #0]
 8014446:	0635      	lsls	r5, r6, #24
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	d501      	bpl.n	8014450 <_printf_i+0x1c4>
 801444c:	6019      	str	r1, [r3, #0]
 801444e:	e002      	b.n	8014456 <_printf_i+0x1ca>
 8014450:	0670      	lsls	r0, r6, #25
 8014452:	d5fb      	bpl.n	801444c <_printf_i+0x1c0>
 8014454:	8019      	strh	r1, [r3, #0]
 8014456:	2300      	movs	r3, #0
 8014458:	6123      	str	r3, [r4, #16]
 801445a:	4615      	mov	r5, r2
 801445c:	e7bc      	b.n	80143d8 <_printf_i+0x14c>
 801445e:	682b      	ldr	r3, [r5, #0]
 8014460:	1d1a      	adds	r2, r3, #4
 8014462:	602a      	str	r2, [r5, #0]
 8014464:	681d      	ldr	r5, [r3, #0]
 8014466:	6862      	ldr	r2, [r4, #4]
 8014468:	2100      	movs	r1, #0
 801446a:	4628      	mov	r0, r5
 801446c:	f7eb fe88 	bl	8000180 <memchr>
 8014470:	b108      	cbz	r0, 8014476 <_printf_i+0x1ea>
 8014472:	1b40      	subs	r0, r0, r5
 8014474:	6060      	str	r0, [r4, #4]
 8014476:	6863      	ldr	r3, [r4, #4]
 8014478:	6123      	str	r3, [r4, #16]
 801447a:	2300      	movs	r3, #0
 801447c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014480:	e7aa      	b.n	80143d8 <_printf_i+0x14c>
 8014482:	6923      	ldr	r3, [r4, #16]
 8014484:	462a      	mov	r2, r5
 8014486:	4649      	mov	r1, r9
 8014488:	4640      	mov	r0, r8
 801448a:	47d0      	blx	sl
 801448c:	3001      	adds	r0, #1
 801448e:	d0ad      	beq.n	80143ec <_printf_i+0x160>
 8014490:	6823      	ldr	r3, [r4, #0]
 8014492:	079b      	lsls	r3, r3, #30
 8014494:	d413      	bmi.n	80144be <_printf_i+0x232>
 8014496:	68e0      	ldr	r0, [r4, #12]
 8014498:	9b03      	ldr	r3, [sp, #12]
 801449a:	4298      	cmp	r0, r3
 801449c:	bfb8      	it	lt
 801449e:	4618      	movlt	r0, r3
 80144a0:	e7a6      	b.n	80143f0 <_printf_i+0x164>
 80144a2:	2301      	movs	r3, #1
 80144a4:	4632      	mov	r2, r6
 80144a6:	4649      	mov	r1, r9
 80144a8:	4640      	mov	r0, r8
 80144aa:	47d0      	blx	sl
 80144ac:	3001      	adds	r0, #1
 80144ae:	d09d      	beq.n	80143ec <_printf_i+0x160>
 80144b0:	3501      	adds	r5, #1
 80144b2:	68e3      	ldr	r3, [r4, #12]
 80144b4:	9903      	ldr	r1, [sp, #12]
 80144b6:	1a5b      	subs	r3, r3, r1
 80144b8:	42ab      	cmp	r3, r5
 80144ba:	dcf2      	bgt.n	80144a2 <_printf_i+0x216>
 80144bc:	e7eb      	b.n	8014496 <_printf_i+0x20a>
 80144be:	2500      	movs	r5, #0
 80144c0:	f104 0619 	add.w	r6, r4, #25
 80144c4:	e7f5      	b.n	80144b2 <_printf_i+0x226>
 80144c6:	bf00      	nop
 80144c8:	08017581 	.word	0x08017581
 80144cc:	08017592 	.word	0x08017592

080144d0 <std>:
 80144d0:	2300      	movs	r3, #0
 80144d2:	b510      	push	{r4, lr}
 80144d4:	4604      	mov	r4, r0
 80144d6:	e9c0 3300 	strd	r3, r3, [r0]
 80144da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80144de:	6083      	str	r3, [r0, #8]
 80144e0:	8181      	strh	r1, [r0, #12]
 80144e2:	6643      	str	r3, [r0, #100]	; 0x64
 80144e4:	81c2      	strh	r2, [r0, #14]
 80144e6:	6183      	str	r3, [r0, #24]
 80144e8:	4619      	mov	r1, r3
 80144ea:	2208      	movs	r2, #8
 80144ec:	305c      	adds	r0, #92	; 0x5c
 80144ee:	f000 f8f4 	bl	80146da <memset>
 80144f2:	4b0d      	ldr	r3, [pc, #52]	; (8014528 <std+0x58>)
 80144f4:	6263      	str	r3, [r4, #36]	; 0x24
 80144f6:	4b0d      	ldr	r3, [pc, #52]	; (801452c <std+0x5c>)
 80144f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80144fa:	4b0d      	ldr	r3, [pc, #52]	; (8014530 <std+0x60>)
 80144fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80144fe:	4b0d      	ldr	r3, [pc, #52]	; (8014534 <std+0x64>)
 8014500:	6323      	str	r3, [r4, #48]	; 0x30
 8014502:	4b0d      	ldr	r3, [pc, #52]	; (8014538 <std+0x68>)
 8014504:	6224      	str	r4, [r4, #32]
 8014506:	429c      	cmp	r4, r3
 8014508:	d006      	beq.n	8014518 <std+0x48>
 801450a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801450e:	4294      	cmp	r4, r2
 8014510:	d002      	beq.n	8014518 <std+0x48>
 8014512:	33d0      	adds	r3, #208	; 0xd0
 8014514:	429c      	cmp	r4, r3
 8014516:	d105      	bne.n	8014524 <std+0x54>
 8014518:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801451c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014520:	f000 b958 	b.w	80147d4 <__retarget_lock_init_recursive>
 8014524:	bd10      	pop	{r4, pc}
 8014526:	bf00      	nop
 8014528:	08014655 	.word	0x08014655
 801452c:	08014677 	.word	0x08014677
 8014530:	080146af 	.word	0x080146af
 8014534:	080146d3 	.word	0x080146d3
 8014538:	200018bc 	.word	0x200018bc

0801453c <stdio_exit_handler>:
 801453c:	4a02      	ldr	r2, [pc, #8]	; (8014548 <stdio_exit_handler+0xc>)
 801453e:	4903      	ldr	r1, [pc, #12]	; (801454c <stdio_exit_handler+0x10>)
 8014540:	4803      	ldr	r0, [pc, #12]	; (8014550 <stdio_exit_handler+0x14>)
 8014542:	f000 b869 	b.w	8014618 <_fwalk_sglue>
 8014546:	bf00      	nop
 8014548:	20000108 	.word	0x20000108
 801454c:	08015e95 	.word	0x08015e95
 8014550:	20000114 	.word	0x20000114

08014554 <cleanup_stdio>:
 8014554:	6841      	ldr	r1, [r0, #4]
 8014556:	4b0c      	ldr	r3, [pc, #48]	; (8014588 <cleanup_stdio+0x34>)
 8014558:	4299      	cmp	r1, r3
 801455a:	b510      	push	{r4, lr}
 801455c:	4604      	mov	r4, r0
 801455e:	d001      	beq.n	8014564 <cleanup_stdio+0x10>
 8014560:	f001 fc98 	bl	8015e94 <_fflush_r>
 8014564:	68a1      	ldr	r1, [r4, #8]
 8014566:	4b09      	ldr	r3, [pc, #36]	; (801458c <cleanup_stdio+0x38>)
 8014568:	4299      	cmp	r1, r3
 801456a:	d002      	beq.n	8014572 <cleanup_stdio+0x1e>
 801456c:	4620      	mov	r0, r4
 801456e:	f001 fc91 	bl	8015e94 <_fflush_r>
 8014572:	68e1      	ldr	r1, [r4, #12]
 8014574:	4b06      	ldr	r3, [pc, #24]	; (8014590 <cleanup_stdio+0x3c>)
 8014576:	4299      	cmp	r1, r3
 8014578:	d004      	beq.n	8014584 <cleanup_stdio+0x30>
 801457a:	4620      	mov	r0, r4
 801457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014580:	f001 bc88 	b.w	8015e94 <_fflush_r>
 8014584:	bd10      	pop	{r4, pc}
 8014586:	bf00      	nop
 8014588:	200018bc 	.word	0x200018bc
 801458c:	20001924 	.word	0x20001924
 8014590:	2000198c 	.word	0x2000198c

08014594 <global_stdio_init.part.0>:
 8014594:	b510      	push	{r4, lr}
 8014596:	4b0b      	ldr	r3, [pc, #44]	; (80145c4 <global_stdio_init.part.0+0x30>)
 8014598:	4c0b      	ldr	r4, [pc, #44]	; (80145c8 <global_stdio_init.part.0+0x34>)
 801459a:	4a0c      	ldr	r2, [pc, #48]	; (80145cc <global_stdio_init.part.0+0x38>)
 801459c:	601a      	str	r2, [r3, #0]
 801459e:	4620      	mov	r0, r4
 80145a0:	2200      	movs	r2, #0
 80145a2:	2104      	movs	r1, #4
 80145a4:	f7ff ff94 	bl	80144d0 <std>
 80145a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80145ac:	2201      	movs	r2, #1
 80145ae:	2109      	movs	r1, #9
 80145b0:	f7ff ff8e 	bl	80144d0 <std>
 80145b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80145b8:	2202      	movs	r2, #2
 80145ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145be:	2112      	movs	r1, #18
 80145c0:	f7ff bf86 	b.w	80144d0 <std>
 80145c4:	200019f4 	.word	0x200019f4
 80145c8:	200018bc 	.word	0x200018bc
 80145cc:	0801453d 	.word	0x0801453d

080145d0 <__sfp_lock_acquire>:
 80145d0:	4801      	ldr	r0, [pc, #4]	; (80145d8 <__sfp_lock_acquire+0x8>)
 80145d2:	f000 b900 	b.w	80147d6 <__retarget_lock_acquire_recursive>
 80145d6:	bf00      	nop
 80145d8:	200019fd 	.word	0x200019fd

080145dc <__sfp_lock_release>:
 80145dc:	4801      	ldr	r0, [pc, #4]	; (80145e4 <__sfp_lock_release+0x8>)
 80145de:	f000 b8fb 	b.w	80147d8 <__retarget_lock_release_recursive>
 80145e2:	bf00      	nop
 80145e4:	200019fd 	.word	0x200019fd

080145e8 <__sinit>:
 80145e8:	b510      	push	{r4, lr}
 80145ea:	4604      	mov	r4, r0
 80145ec:	f7ff fff0 	bl	80145d0 <__sfp_lock_acquire>
 80145f0:	6a23      	ldr	r3, [r4, #32]
 80145f2:	b11b      	cbz	r3, 80145fc <__sinit+0x14>
 80145f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145f8:	f7ff bff0 	b.w	80145dc <__sfp_lock_release>
 80145fc:	4b04      	ldr	r3, [pc, #16]	; (8014610 <__sinit+0x28>)
 80145fe:	6223      	str	r3, [r4, #32]
 8014600:	4b04      	ldr	r3, [pc, #16]	; (8014614 <__sinit+0x2c>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d1f5      	bne.n	80145f4 <__sinit+0xc>
 8014608:	f7ff ffc4 	bl	8014594 <global_stdio_init.part.0>
 801460c:	e7f2      	b.n	80145f4 <__sinit+0xc>
 801460e:	bf00      	nop
 8014610:	08014555 	.word	0x08014555
 8014614:	200019f4 	.word	0x200019f4

08014618 <_fwalk_sglue>:
 8014618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801461c:	4607      	mov	r7, r0
 801461e:	4688      	mov	r8, r1
 8014620:	4614      	mov	r4, r2
 8014622:	2600      	movs	r6, #0
 8014624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014628:	f1b9 0901 	subs.w	r9, r9, #1
 801462c:	d505      	bpl.n	801463a <_fwalk_sglue+0x22>
 801462e:	6824      	ldr	r4, [r4, #0]
 8014630:	2c00      	cmp	r4, #0
 8014632:	d1f7      	bne.n	8014624 <_fwalk_sglue+0xc>
 8014634:	4630      	mov	r0, r6
 8014636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801463a:	89ab      	ldrh	r3, [r5, #12]
 801463c:	2b01      	cmp	r3, #1
 801463e:	d907      	bls.n	8014650 <_fwalk_sglue+0x38>
 8014640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014644:	3301      	adds	r3, #1
 8014646:	d003      	beq.n	8014650 <_fwalk_sglue+0x38>
 8014648:	4629      	mov	r1, r5
 801464a:	4638      	mov	r0, r7
 801464c:	47c0      	blx	r8
 801464e:	4306      	orrs	r6, r0
 8014650:	3568      	adds	r5, #104	; 0x68
 8014652:	e7e9      	b.n	8014628 <_fwalk_sglue+0x10>

08014654 <__sread>:
 8014654:	b510      	push	{r4, lr}
 8014656:	460c      	mov	r4, r1
 8014658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801465c:	f000 f86c 	bl	8014738 <_read_r>
 8014660:	2800      	cmp	r0, #0
 8014662:	bfab      	itete	ge
 8014664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014666:	89a3      	ldrhlt	r3, [r4, #12]
 8014668:	181b      	addge	r3, r3, r0
 801466a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801466e:	bfac      	ite	ge
 8014670:	6563      	strge	r3, [r4, #84]	; 0x54
 8014672:	81a3      	strhlt	r3, [r4, #12]
 8014674:	bd10      	pop	{r4, pc}

08014676 <__swrite>:
 8014676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801467a:	461f      	mov	r7, r3
 801467c:	898b      	ldrh	r3, [r1, #12]
 801467e:	05db      	lsls	r3, r3, #23
 8014680:	4605      	mov	r5, r0
 8014682:	460c      	mov	r4, r1
 8014684:	4616      	mov	r6, r2
 8014686:	d505      	bpl.n	8014694 <__swrite+0x1e>
 8014688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801468c:	2302      	movs	r3, #2
 801468e:	2200      	movs	r2, #0
 8014690:	f000 f840 	bl	8014714 <_lseek_r>
 8014694:	89a3      	ldrh	r3, [r4, #12]
 8014696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801469a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801469e:	81a3      	strh	r3, [r4, #12]
 80146a0:	4632      	mov	r2, r6
 80146a2:	463b      	mov	r3, r7
 80146a4:	4628      	mov	r0, r5
 80146a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146aa:	f000 b857 	b.w	801475c <_write_r>

080146ae <__sseek>:
 80146ae:	b510      	push	{r4, lr}
 80146b0:	460c      	mov	r4, r1
 80146b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146b6:	f000 f82d 	bl	8014714 <_lseek_r>
 80146ba:	1c43      	adds	r3, r0, #1
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	bf15      	itete	ne
 80146c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80146c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80146ca:	81a3      	strheq	r3, [r4, #12]
 80146cc:	bf18      	it	ne
 80146ce:	81a3      	strhne	r3, [r4, #12]
 80146d0:	bd10      	pop	{r4, pc}

080146d2 <__sclose>:
 80146d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146d6:	f000 b80d 	b.w	80146f4 <_close_r>

080146da <memset>:
 80146da:	4402      	add	r2, r0
 80146dc:	4603      	mov	r3, r0
 80146de:	4293      	cmp	r3, r2
 80146e0:	d100      	bne.n	80146e4 <memset+0xa>
 80146e2:	4770      	bx	lr
 80146e4:	f803 1b01 	strb.w	r1, [r3], #1
 80146e8:	e7f9      	b.n	80146de <memset+0x4>
	...

080146ec <_localeconv_r>:
 80146ec:	4800      	ldr	r0, [pc, #0]	; (80146f0 <_localeconv_r+0x4>)
 80146ee:	4770      	bx	lr
 80146f0:	20000254 	.word	0x20000254

080146f4 <_close_r>:
 80146f4:	b538      	push	{r3, r4, r5, lr}
 80146f6:	4d06      	ldr	r5, [pc, #24]	; (8014710 <_close_r+0x1c>)
 80146f8:	2300      	movs	r3, #0
 80146fa:	4604      	mov	r4, r0
 80146fc:	4608      	mov	r0, r1
 80146fe:	602b      	str	r3, [r5, #0]
 8014700:	f7ed fd5c 	bl	80021bc <_close>
 8014704:	1c43      	adds	r3, r0, #1
 8014706:	d102      	bne.n	801470e <_close_r+0x1a>
 8014708:	682b      	ldr	r3, [r5, #0]
 801470a:	b103      	cbz	r3, 801470e <_close_r+0x1a>
 801470c:	6023      	str	r3, [r4, #0]
 801470e:	bd38      	pop	{r3, r4, r5, pc}
 8014710:	200019f8 	.word	0x200019f8

08014714 <_lseek_r>:
 8014714:	b538      	push	{r3, r4, r5, lr}
 8014716:	4d07      	ldr	r5, [pc, #28]	; (8014734 <_lseek_r+0x20>)
 8014718:	4604      	mov	r4, r0
 801471a:	4608      	mov	r0, r1
 801471c:	4611      	mov	r1, r2
 801471e:	2200      	movs	r2, #0
 8014720:	602a      	str	r2, [r5, #0]
 8014722:	461a      	mov	r2, r3
 8014724:	f7ed fd54 	bl	80021d0 <_lseek>
 8014728:	1c43      	adds	r3, r0, #1
 801472a:	d102      	bne.n	8014732 <_lseek_r+0x1e>
 801472c:	682b      	ldr	r3, [r5, #0]
 801472e:	b103      	cbz	r3, 8014732 <_lseek_r+0x1e>
 8014730:	6023      	str	r3, [r4, #0]
 8014732:	bd38      	pop	{r3, r4, r5, pc}
 8014734:	200019f8 	.word	0x200019f8

08014738 <_read_r>:
 8014738:	b538      	push	{r3, r4, r5, lr}
 801473a:	4d07      	ldr	r5, [pc, #28]	; (8014758 <_read_r+0x20>)
 801473c:	4604      	mov	r4, r0
 801473e:	4608      	mov	r0, r1
 8014740:	4611      	mov	r1, r2
 8014742:	2200      	movs	r2, #0
 8014744:	602a      	str	r2, [r5, #0]
 8014746:	461a      	mov	r2, r3
 8014748:	f7ed fd1a 	bl	8002180 <_read>
 801474c:	1c43      	adds	r3, r0, #1
 801474e:	d102      	bne.n	8014756 <_read_r+0x1e>
 8014750:	682b      	ldr	r3, [r5, #0]
 8014752:	b103      	cbz	r3, 8014756 <_read_r+0x1e>
 8014754:	6023      	str	r3, [r4, #0]
 8014756:	bd38      	pop	{r3, r4, r5, pc}
 8014758:	200019f8 	.word	0x200019f8

0801475c <_write_r>:
 801475c:	b538      	push	{r3, r4, r5, lr}
 801475e:	4d07      	ldr	r5, [pc, #28]	; (801477c <_write_r+0x20>)
 8014760:	4604      	mov	r4, r0
 8014762:	4608      	mov	r0, r1
 8014764:	4611      	mov	r1, r2
 8014766:	2200      	movs	r2, #0
 8014768:	602a      	str	r2, [r5, #0]
 801476a:	461a      	mov	r2, r3
 801476c:	f7ed fd18 	bl	80021a0 <_write>
 8014770:	1c43      	adds	r3, r0, #1
 8014772:	d102      	bne.n	801477a <_write_r+0x1e>
 8014774:	682b      	ldr	r3, [r5, #0]
 8014776:	b103      	cbz	r3, 801477a <_write_r+0x1e>
 8014778:	6023      	str	r3, [r4, #0]
 801477a:	bd38      	pop	{r3, r4, r5, pc}
 801477c:	200019f8 	.word	0x200019f8

08014780 <__errno>:
 8014780:	4b01      	ldr	r3, [pc, #4]	; (8014788 <__errno+0x8>)
 8014782:	6818      	ldr	r0, [r3, #0]
 8014784:	4770      	bx	lr
 8014786:	bf00      	nop
 8014788:	20000160 	.word	0x20000160

0801478c <__libc_init_array>:
 801478c:	b570      	push	{r4, r5, r6, lr}
 801478e:	4d0d      	ldr	r5, [pc, #52]	; (80147c4 <__libc_init_array+0x38>)
 8014790:	4c0d      	ldr	r4, [pc, #52]	; (80147c8 <__libc_init_array+0x3c>)
 8014792:	1b64      	subs	r4, r4, r5
 8014794:	10a4      	asrs	r4, r4, #2
 8014796:	2600      	movs	r6, #0
 8014798:	42a6      	cmp	r6, r4
 801479a:	d109      	bne.n	80147b0 <__libc_init_array+0x24>
 801479c:	4d0b      	ldr	r5, [pc, #44]	; (80147cc <__libc_init_array+0x40>)
 801479e:	4c0c      	ldr	r4, [pc, #48]	; (80147d0 <__libc_init_array+0x44>)
 80147a0:	f001 ff4a 	bl	8016638 <_init>
 80147a4:	1b64      	subs	r4, r4, r5
 80147a6:	10a4      	asrs	r4, r4, #2
 80147a8:	2600      	movs	r6, #0
 80147aa:	42a6      	cmp	r6, r4
 80147ac:	d105      	bne.n	80147ba <__libc_init_array+0x2e>
 80147ae:	bd70      	pop	{r4, r5, r6, pc}
 80147b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80147b4:	4798      	blx	r3
 80147b6:	3601      	adds	r6, #1
 80147b8:	e7ee      	b.n	8014798 <__libc_init_array+0xc>
 80147ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80147be:	4798      	blx	r3
 80147c0:	3601      	adds	r6, #1
 80147c2:	e7f2      	b.n	80147aa <__libc_init_array+0x1e>
 80147c4:	080178f0 	.word	0x080178f0
 80147c8:	080178f0 	.word	0x080178f0
 80147cc:	080178f0 	.word	0x080178f0
 80147d0:	080178f4 	.word	0x080178f4

080147d4 <__retarget_lock_init_recursive>:
 80147d4:	4770      	bx	lr

080147d6 <__retarget_lock_acquire_recursive>:
 80147d6:	4770      	bx	lr

080147d8 <__retarget_lock_release_recursive>:
 80147d8:	4770      	bx	lr

080147da <quorem>:
 80147da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147de:	6903      	ldr	r3, [r0, #16]
 80147e0:	690c      	ldr	r4, [r1, #16]
 80147e2:	42a3      	cmp	r3, r4
 80147e4:	4607      	mov	r7, r0
 80147e6:	db7b      	blt.n	80148e0 <quorem+0x106>
 80147e8:	3c01      	subs	r4, #1
 80147ea:	f101 0814 	add.w	r8, r1, #20
 80147ee:	f100 0514 	add.w	r5, r0, #20
 80147f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80147f6:	9301      	str	r3, [sp, #4]
 80147f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80147fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014800:	3301      	adds	r3, #1
 8014802:	429a      	cmp	r2, r3
 8014804:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014808:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801480c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014810:	d32e      	bcc.n	8014870 <quorem+0x96>
 8014812:	f04f 0e00 	mov.w	lr, #0
 8014816:	4640      	mov	r0, r8
 8014818:	46ac      	mov	ip, r5
 801481a:	46f2      	mov	sl, lr
 801481c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014820:	b293      	uxth	r3, r2
 8014822:	fb06 e303 	mla	r3, r6, r3, lr
 8014826:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801482a:	0c1a      	lsrs	r2, r3, #16
 801482c:	b29b      	uxth	r3, r3
 801482e:	fb06 220e 	mla	r2, r6, lr, r2
 8014832:	ebaa 0303 	sub.w	r3, sl, r3
 8014836:	f8dc a000 	ldr.w	sl, [ip]
 801483a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801483e:	b292      	uxth	r2, r2
 8014840:	fa13 f38a 	uxtah	r3, r3, sl
 8014844:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801484c:	b29b      	uxth	r3, r3
 801484e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014852:	4581      	cmp	r9, r0
 8014854:	f84c 3b04 	str.w	r3, [ip], #4
 8014858:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801485c:	d2de      	bcs.n	801481c <quorem+0x42>
 801485e:	f855 300b 	ldr.w	r3, [r5, fp]
 8014862:	b92b      	cbnz	r3, 8014870 <quorem+0x96>
 8014864:	9b01      	ldr	r3, [sp, #4]
 8014866:	3b04      	subs	r3, #4
 8014868:	429d      	cmp	r5, r3
 801486a:	461a      	mov	r2, r3
 801486c:	d32c      	bcc.n	80148c8 <quorem+0xee>
 801486e:	613c      	str	r4, [r7, #16]
 8014870:	4638      	mov	r0, r7
 8014872:	f001 f993 	bl	8015b9c <__mcmp>
 8014876:	2800      	cmp	r0, #0
 8014878:	db22      	blt.n	80148c0 <quorem+0xe6>
 801487a:	3601      	adds	r6, #1
 801487c:	4629      	mov	r1, r5
 801487e:	2000      	movs	r0, #0
 8014880:	f858 2b04 	ldr.w	r2, [r8], #4
 8014884:	f8d1 c000 	ldr.w	ip, [r1]
 8014888:	b293      	uxth	r3, r2
 801488a:	1ac3      	subs	r3, r0, r3
 801488c:	0c12      	lsrs	r2, r2, #16
 801488e:	fa13 f38c 	uxtah	r3, r3, ip
 8014892:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014896:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801489a:	b29b      	uxth	r3, r3
 801489c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80148a0:	45c1      	cmp	r9, r8
 80148a2:	f841 3b04 	str.w	r3, [r1], #4
 80148a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80148aa:	d2e9      	bcs.n	8014880 <quorem+0xa6>
 80148ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80148b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80148b4:	b922      	cbnz	r2, 80148c0 <quorem+0xe6>
 80148b6:	3b04      	subs	r3, #4
 80148b8:	429d      	cmp	r5, r3
 80148ba:	461a      	mov	r2, r3
 80148bc:	d30a      	bcc.n	80148d4 <quorem+0xfa>
 80148be:	613c      	str	r4, [r7, #16]
 80148c0:	4630      	mov	r0, r6
 80148c2:	b003      	add	sp, #12
 80148c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c8:	6812      	ldr	r2, [r2, #0]
 80148ca:	3b04      	subs	r3, #4
 80148cc:	2a00      	cmp	r2, #0
 80148ce:	d1ce      	bne.n	801486e <quorem+0x94>
 80148d0:	3c01      	subs	r4, #1
 80148d2:	e7c9      	b.n	8014868 <quorem+0x8e>
 80148d4:	6812      	ldr	r2, [r2, #0]
 80148d6:	3b04      	subs	r3, #4
 80148d8:	2a00      	cmp	r2, #0
 80148da:	d1f0      	bne.n	80148be <quorem+0xe4>
 80148dc:	3c01      	subs	r4, #1
 80148de:	e7eb      	b.n	80148b8 <quorem+0xde>
 80148e0:	2000      	movs	r0, #0
 80148e2:	e7ee      	b.n	80148c2 <quorem+0xe8>
 80148e4:	0000      	movs	r0, r0
	...

080148e8 <_dtoa_r>:
 80148e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ec:	69c4      	ldr	r4, [r0, #28]
 80148ee:	b099      	sub	sp, #100	; 0x64
 80148f0:	4616      	mov	r6, r2
 80148f2:	461f      	mov	r7, r3
 80148f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80148f8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80148fc:	4605      	mov	r5, r0
 80148fe:	b974      	cbnz	r4, 801491e <_dtoa_r+0x36>
 8014900:	2010      	movs	r0, #16
 8014902:	f000 fe1b 	bl	801553c <malloc>
 8014906:	4602      	mov	r2, r0
 8014908:	61e8      	str	r0, [r5, #28]
 801490a:	b920      	cbnz	r0, 8014916 <_dtoa_r+0x2e>
 801490c:	4baa      	ldr	r3, [pc, #680]	; (8014bb8 <_dtoa_r+0x2d0>)
 801490e:	21ef      	movs	r1, #239	; 0xef
 8014910:	48aa      	ldr	r0, [pc, #680]	; (8014bbc <_dtoa_r+0x2d4>)
 8014912:	f001 fb05 	bl	8015f20 <__assert_func>
 8014916:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801491a:	6004      	str	r4, [r0, #0]
 801491c:	60c4      	str	r4, [r0, #12]
 801491e:	69eb      	ldr	r3, [r5, #28]
 8014920:	6819      	ldr	r1, [r3, #0]
 8014922:	b151      	cbz	r1, 801493a <_dtoa_r+0x52>
 8014924:	685a      	ldr	r2, [r3, #4]
 8014926:	604a      	str	r2, [r1, #4]
 8014928:	2301      	movs	r3, #1
 801492a:	4093      	lsls	r3, r2
 801492c:	608b      	str	r3, [r1, #8]
 801492e:	4628      	mov	r0, r5
 8014930:	f000 fef8 	bl	8015724 <_Bfree>
 8014934:	69eb      	ldr	r3, [r5, #28]
 8014936:	2200      	movs	r2, #0
 8014938:	601a      	str	r2, [r3, #0]
 801493a:	1e3b      	subs	r3, r7, #0
 801493c:	bfb9      	ittee	lt
 801493e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014942:	9305      	strlt	r3, [sp, #20]
 8014944:	2300      	movge	r3, #0
 8014946:	f8c8 3000 	strge.w	r3, [r8]
 801494a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801494e:	4b9c      	ldr	r3, [pc, #624]	; (8014bc0 <_dtoa_r+0x2d8>)
 8014950:	bfbc      	itt	lt
 8014952:	2201      	movlt	r2, #1
 8014954:	f8c8 2000 	strlt.w	r2, [r8]
 8014958:	ea33 0309 	bics.w	r3, r3, r9
 801495c:	d119      	bne.n	8014992 <_dtoa_r+0xaa>
 801495e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014960:	f242 730f 	movw	r3, #9999	; 0x270f
 8014964:	6013      	str	r3, [r2, #0]
 8014966:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801496a:	4333      	orrs	r3, r6
 801496c:	f000 8587 	beq.w	801547e <_dtoa_r+0xb96>
 8014970:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014972:	b953      	cbnz	r3, 801498a <_dtoa_r+0xa2>
 8014974:	4b93      	ldr	r3, [pc, #588]	; (8014bc4 <_dtoa_r+0x2dc>)
 8014976:	e023      	b.n	80149c0 <_dtoa_r+0xd8>
 8014978:	4b93      	ldr	r3, [pc, #588]	; (8014bc8 <_dtoa_r+0x2e0>)
 801497a:	9303      	str	r3, [sp, #12]
 801497c:	3308      	adds	r3, #8
 801497e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014980:	6013      	str	r3, [r2, #0]
 8014982:	9803      	ldr	r0, [sp, #12]
 8014984:	b019      	add	sp, #100	; 0x64
 8014986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801498a:	4b8e      	ldr	r3, [pc, #568]	; (8014bc4 <_dtoa_r+0x2dc>)
 801498c:	9303      	str	r3, [sp, #12]
 801498e:	3303      	adds	r3, #3
 8014990:	e7f5      	b.n	801497e <_dtoa_r+0x96>
 8014992:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014996:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801499a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801499e:	2200      	movs	r2, #0
 80149a0:	2300      	movs	r3, #0
 80149a2:	f7ec f869 	bl	8000a78 <__aeabi_dcmpeq>
 80149a6:	4680      	mov	r8, r0
 80149a8:	b160      	cbz	r0, 80149c4 <_dtoa_r+0xdc>
 80149aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80149ac:	2301      	movs	r3, #1
 80149ae:	6013      	str	r3, [r2, #0]
 80149b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	f000 8560 	beq.w	8015478 <_dtoa_r+0xb90>
 80149b8:	4b84      	ldr	r3, [pc, #528]	; (8014bcc <_dtoa_r+0x2e4>)
 80149ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80149bc:	6013      	str	r3, [r2, #0]
 80149be:	3b01      	subs	r3, #1
 80149c0:	9303      	str	r3, [sp, #12]
 80149c2:	e7de      	b.n	8014982 <_dtoa_r+0x9a>
 80149c4:	ab16      	add	r3, sp, #88	; 0x58
 80149c6:	9301      	str	r3, [sp, #4]
 80149c8:	ab17      	add	r3, sp, #92	; 0x5c
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	4628      	mov	r0, r5
 80149ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80149d2:	f001 f987 	bl	8015ce4 <__d2b>
 80149d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80149da:	4682      	mov	sl, r0
 80149dc:	2c00      	cmp	r4, #0
 80149de:	d07d      	beq.n	8014adc <_dtoa_r+0x1f4>
 80149e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149e2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80149e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80149ee:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80149f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80149f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80149fa:	4619      	mov	r1, r3
 80149fc:	2200      	movs	r2, #0
 80149fe:	4b74      	ldr	r3, [pc, #464]	; (8014bd0 <_dtoa_r+0x2e8>)
 8014a00:	f7eb fc1a 	bl	8000238 <__aeabi_dsub>
 8014a04:	a366      	add	r3, pc, #408	; (adr r3, 8014ba0 <_dtoa_r+0x2b8>)
 8014a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0a:	f7eb fdcd 	bl	80005a8 <__aeabi_dmul>
 8014a0e:	a366      	add	r3, pc, #408	; (adr r3, 8014ba8 <_dtoa_r+0x2c0>)
 8014a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a14:	f7eb fc12 	bl	800023c <__adddf3>
 8014a18:	4606      	mov	r6, r0
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	460f      	mov	r7, r1
 8014a1e:	f7eb fd59 	bl	80004d4 <__aeabi_i2d>
 8014a22:	a363      	add	r3, pc, #396	; (adr r3, 8014bb0 <_dtoa_r+0x2c8>)
 8014a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a28:	f7eb fdbe 	bl	80005a8 <__aeabi_dmul>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	460b      	mov	r3, r1
 8014a30:	4630      	mov	r0, r6
 8014a32:	4639      	mov	r1, r7
 8014a34:	f7eb fc02 	bl	800023c <__adddf3>
 8014a38:	4606      	mov	r6, r0
 8014a3a:	460f      	mov	r7, r1
 8014a3c:	f7ec f864 	bl	8000b08 <__aeabi_d2iz>
 8014a40:	2200      	movs	r2, #0
 8014a42:	4683      	mov	fp, r0
 8014a44:	2300      	movs	r3, #0
 8014a46:	4630      	mov	r0, r6
 8014a48:	4639      	mov	r1, r7
 8014a4a:	f7ec f81f 	bl	8000a8c <__aeabi_dcmplt>
 8014a4e:	b148      	cbz	r0, 8014a64 <_dtoa_r+0x17c>
 8014a50:	4658      	mov	r0, fp
 8014a52:	f7eb fd3f 	bl	80004d4 <__aeabi_i2d>
 8014a56:	4632      	mov	r2, r6
 8014a58:	463b      	mov	r3, r7
 8014a5a:	f7ec f80d 	bl	8000a78 <__aeabi_dcmpeq>
 8014a5e:	b908      	cbnz	r0, 8014a64 <_dtoa_r+0x17c>
 8014a60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a64:	f1bb 0f16 	cmp.w	fp, #22
 8014a68:	d856      	bhi.n	8014b18 <_dtoa_r+0x230>
 8014a6a:	4b5a      	ldr	r3, [pc, #360]	; (8014bd4 <_dtoa_r+0x2ec>)
 8014a6c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014a78:	f7ec f808 	bl	8000a8c <__aeabi_dcmplt>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	d04d      	beq.n	8014b1c <_dtoa_r+0x234>
 8014a80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a84:	2300      	movs	r3, #0
 8014a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014a8a:	1b1b      	subs	r3, r3, r4
 8014a8c:	1e5a      	subs	r2, r3, #1
 8014a8e:	bf44      	itt	mi
 8014a90:	f1c3 0901 	rsbmi	r9, r3, #1
 8014a94:	2300      	movmi	r3, #0
 8014a96:	9209      	str	r2, [sp, #36]	; 0x24
 8014a98:	bf54      	ite	pl
 8014a9a:	f04f 0900 	movpl.w	r9, #0
 8014a9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8014aa0:	f1bb 0f00 	cmp.w	fp, #0
 8014aa4:	db3c      	blt.n	8014b20 <_dtoa_r+0x238>
 8014aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aa8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8014aac:	445b      	add	r3, fp
 8014aae:	9309      	str	r3, [sp, #36]	; 0x24
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ab6:	2b09      	cmp	r3, #9
 8014ab8:	d866      	bhi.n	8014b88 <_dtoa_r+0x2a0>
 8014aba:	2b05      	cmp	r3, #5
 8014abc:	bfc4      	itt	gt
 8014abe:	3b04      	subgt	r3, #4
 8014ac0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8014ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ac4:	f1a3 0302 	sub.w	r3, r3, #2
 8014ac8:	bfcc      	ite	gt
 8014aca:	2400      	movgt	r4, #0
 8014acc:	2401      	movle	r4, #1
 8014ace:	2b03      	cmp	r3, #3
 8014ad0:	f200 8084 	bhi.w	8014bdc <_dtoa_r+0x2f4>
 8014ad4:	e8df f003 	tbb	[pc, r3]
 8014ad8:	5637392c 	.word	0x5637392c
 8014adc:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8014ae0:	441c      	add	r4, r3
 8014ae2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8014ae6:	2b20      	cmp	r3, #32
 8014ae8:	bfc1      	itttt	gt
 8014aea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014aee:	fa09 f903 	lslgt.w	r9, r9, r3
 8014af2:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8014af6:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014afa:	bfd6      	itet	le
 8014afc:	f1c3 0320 	rsble	r3, r3, #32
 8014b00:	ea49 0003 	orrgt.w	r0, r9, r3
 8014b04:	fa06 f003 	lslle.w	r0, r6, r3
 8014b08:	f7eb fcd4 	bl	80004b4 <__aeabi_ui2d>
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014b12:	3c01      	subs	r4, #1
 8014b14:	9213      	str	r2, [sp, #76]	; 0x4c
 8014b16:	e770      	b.n	80149fa <_dtoa_r+0x112>
 8014b18:	2301      	movs	r3, #1
 8014b1a:	e7b4      	b.n	8014a86 <_dtoa_r+0x19e>
 8014b1c:	900f      	str	r0, [sp, #60]	; 0x3c
 8014b1e:	e7b3      	b.n	8014a88 <_dtoa_r+0x1a0>
 8014b20:	f1cb 0300 	rsb	r3, fp, #0
 8014b24:	930a      	str	r3, [sp, #40]	; 0x28
 8014b26:	2300      	movs	r3, #0
 8014b28:	eba9 090b 	sub.w	r9, r9, fp
 8014b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8014b2e:	e7c1      	b.n	8014ab4 <_dtoa_r+0x1cc>
 8014b30:	2300      	movs	r3, #0
 8014b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	dc53      	bgt.n	8014be2 <_dtoa_r+0x2fa>
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	9306      	str	r3, [sp, #24]
 8014b3e:	9308      	str	r3, [sp, #32]
 8014b40:	461a      	mov	r2, r3
 8014b42:	9223      	str	r2, [sp, #140]	; 0x8c
 8014b44:	e00b      	b.n	8014b5e <_dtoa_r+0x276>
 8014b46:	2301      	movs	r3, #1
 8014b48:	e7f3      	b.n	8014b32 <_dtoa_r+0x24a>
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014b50:	445b      	add	r3, fp
 8014b52:	9306      	str	r3, [sp, #24]
 8014b54:	3301      	adds	r3, #1
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	9308      	str	r3, [sp, #32]
 8014b5a:	bfb8      	it	lt
 8014b5c:	2301      	movlt	r3, #1
 8014b5e:	69e8      	ldr	r0, [r5, #28]
 8014b60:	2100      	movs	r1, #0
 8014b62:	2204      	movs	r2, #4
 8014b64:	f102 0614 	add.w	r6, r2, #20
 8014b68:	429e      	cmp	r6, r3
 8014b6a:	d93e      	bls.n	8014bea <_dtoa_r+0x302>
 8014b6c:	6041      	str	r1, [r0, #4]
 8014b6e:	4628      	mov	r0, r5
 8014b70:	f000 fd98 	bl	80156a4 <_Balloc>
 8014b74:	9003      	str	r0, [sp, #12]
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d13a      	bne.n	8014bf0 <_dtoa_r+0x308>
 8014b7a:	4b17      	ldr	r3, [pc, #92]	; (8014bd8 <_dtoa_r+0x2f0>)
 8014b7c:	4602      	mov	r2, r0
 8014b7e:	f240 11af 	movw	r1, #431	; 0x1af
 8014b82:	e6c5      	b.n	8014910 <_dtoa_r+0x28>
 8014b84:	2301      	movs	r3, #1
 8014b86:	e7e1      	b.n	8014b4c <_dtoa_r+0x264>
 8014b88:	2401      	movs	r4, #1
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	9322      	str	r3, [sp, #136]	; 0x88
 8014b8e:	940b      	str	r4, [sp, #44]	; 0x2c
 8014b90:	f04f 33ff 	mov.w	r3, #4294967295
 8014b94:	9306      	str	r3, [sp, #24]
 8014b96:	9308      	str	r3, [sp, #32]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	2312      	movs	r3, #18
 8014b9c:	e7d1      	b.n	8014b42 <_dtoa_r+0x25a>
 8014b9e:	bf00      	nop
 8014ba0:	636f4361 	.word	0x636f4361
 8014ba4:	3fd287a7 	.word	0x3fd287a7
 8014ba8:	8b60c8b3 	.word	0x8b60c8b3
 8014bac:	3fc68a28 	.word	0x3fc68a28
 8014bb0:	509f79fb 	.word	0x509f79fb
 8014bb4:	3fd34413 	.word	0x3fd34413
 8014bb8:	080175b0 	.word	0x080175b0
 8014bbc:	080175c7 	.word	0x080175c7
 8014bc0:	7ff00000 	.word	0x7ff00000
 8014bc4:	080175ac 	.word	0x080175ac
 8014bc8:	080175a3 	.word	0x080175a3
 8014bcc:	08017580 	.word	0x08017580
 8014bd0:	3ff80000 	.word	0x3ff80000
 8014bd4:	080176b8 	.word	0x080176b8
 8014bd8:	0801761f 	.word	0x0801761f
 8014bdc:	2301      	movs	r3, #1
 8014bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8014be0:	e7d6      	b.n	8014b90 <_dtoa_r+0x2a8>
 8014be2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014be4:	9306      	str	r3, [sp, #24]
 8014be6:	9308      	str	r3, [sp, #32]
 8014be8:	e7b9      	b.n	8014b5e <_dtoa_r+0x276>
 8014bea:	3101      	adds	r1, #1
 8014bec:	0052      	lsls	r2, r2, #1
 8014bee:	e7b9      	b.n	8014b64 <_dtoa_r+0x27c>
 8014bf0:	69eb      	ldr	r3, [r5, #28]
 8014bf2:	9a03      	ldr	r2, [sp, #12]
 8014bf4:	601a      	str	r2, [r3, #0]
 8014bf6:	9b08      	ldr	r3, [sp, #32]
 8014bf8:	2b0e      	cmp	r3, #14
 8014bfa:	f200 80a8 	bhi.w	8014d4e <_dtoa_r+0x466>
 8014bfe:	2c00      	cmp	r4, #0
 8014c00:	f000 80a5 	beq.w	8014d4e <_dtoa_r+0x466>
 8014c04:	f1bb 0f00 	cmp.w	fp, #0
 8014c08:	dd34      	ble.n	8014c74 <_dtoa_r+0x38c>
 8014c0a:	4b9a      	ldr	r3, [pc, #616]	; (8014e74 <_dtoa_r+0x58c>)
 8014c0c:	f00b 020f 	and.w	r2, fp, #15
 8014c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014c18:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014c1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014c20:	ea4f 142b 	mov.w	r4, fp, asr #4
 8014c24:	d016      	beq.n	8014c54 <_dtoa_r+0x36c>
 8014c26:	4b94      	ldr	r3, [pc, #592]	; (8014e78 <_dtoa_r+0x590>)
 8014c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c30:	f7eb fde4 	bl	80007fc <__aeabi_ddiv>
 8014c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c38:	f004 040f 	and.w	r4, r4, #15
 8014c3c:	2703      	movs	r7, #3
 8014c3e:	4e8e      	ldr	r6, [pc, #568]	; (8014e78 <_dtoa_r+0x590>)
 8014c40:	b954      	cbnz	r4, 8014c58 <_dtoa_r+0x370>
 8014c42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c4a:	f7eb fdd7 	bl	80007fc <__aeabi_ddiv>
 8014c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c52:	e029      	b.n	8014ca8 <_dtoa_r+0x3c0>
 8014c54:	2702      	movs	r7, #2
 8014c56:	e7f2      	b.n	8014c3e <_dtoa_r+0x356>
 8014c58:	07e1      	lsls	r1, r4, #31
 8014c5a:	d508      	bpl.n	8014c6e <_dtoa_r+0x386>
 8014c5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014c60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014c64:	f7eb fca0 	bl	80005a8 <__aeabi_dmul>
 8014c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014c6c:	3701      	adds	r7, #1
 8014c6e:	1064      	asrs	r4, r4, #1
 8014c70:	3608      	adds	r6, #8
 8014c72:	e7e5      	b.n	8014c40 <_dtoa_r+0x358>
 8014c74:	f000 80a5 	beq.w	8014dc2 <_dtoa_r+0x4da>
 8014c78:	f1cb 0400 	rsb	r4, fp, #0
 8014c7c:	4b7d      	ldr	r3, [pc, #500]	; (8014e74 <_dtoa_r+0x58c>)
 8014c7e:	4e7e      	ldr	r6, [pc, #504]	; (8014e78 <_dtoa_r+0x590>)
 8014c80:	f004 020f 	and.w	r2, r4, #15
 8014c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014c90:	f7eb fc8a 	bl	80005a8 <__aeabi_dmul>
 8014c94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c98:	1124      	asrs	r4, r4, #4
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	2702      	movs	r7, #2
 8014c9e:	2c00      	cmp	r4, #0
 8014ca0:	f040 8084 	bne.w	8014dac <_dtoa_r+0x4c4>
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d1d2      	bne.n	8014c4e <_dtoa_r+0x366>
 8014ca8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014cac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f000 8087 	beq.w	8014dc6 <_dtoa_r+0x4de>
 8014cb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014cbc:	4b6f      	ldr	r3, [pc, #444]	; (8014e7c <_dtoa_r+0x594>)
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f7eb fee4 	bl	8000a8c <__aeabi_dcmplt>
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d07e      	beq.n	8014dc6 <_dtoa_r+0x4de>
 8014cc8:	9b08      	ldr	r3, [sp, #32]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d07b      	beq.n	8014dc6 <_dtoa_r+0x4de>
 8014cce:	9b06      	ldr	r3, [sp, #24]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	dd38      	ble.n	8014d46 <_dtoa_r+0x45e>
 8014cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014cd8:	4b69      	ldr	r3, [pc, #420]	; (8014e80 <_dtoa_r+0x598>)
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f7eb fc64 	bl	80005a8 <__aeabi_dmul>
 8014ce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ce4:	9c06      	ldr	r4, [sp, #24]
 8014ce6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8014cea:	3701      	adds	r7, #1
 8014cec:	4638      	mov	r0, r7
 8014cee:	f7eb fbf1 	bl	80004d4 <__aeabi_i2d>
 8014cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cf6:	f7eb fc57 	bl	80005a8 <__aeabi_dmul>
 8014cfa:	4b62      	ldr	r3, [pc, #392]	; (8014e84 <_dtoa_r+0x59c>)
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	f7eb fa9d 	bl	800023c <__adddf3>
 8014d02:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014d06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014d0a:	9611      	str	r6, [sp, #68]	; 0x44
 8014d0c:	2c00      	cmp	r4, #0
 8014d0e:	d15d      	bne.n	8014dcc <_dtoa_r+0x4e4>
 8014d10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d14:	4b5c      	ldr	r3, [pc, #368]	; (8014e88 <_dtoa_r+0x5a0>)
 8014d16:	2200      	movs	r2, #0
 8014d18:	f7eb fa8e 	bl	8000238 <__aeabi_dsub>
 8014d1c:	4602      	mov	r2, r0
 8014d1e:	460b      	mov	r3, r1
 8014d20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014d26:	4633      	mov	r3, r6
 8014d28:	f7eb fece 	bl	8000ac8 <__aeabi_dcmpgt>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	f040 8295 	bne.w	801525c <_dtoa_r+0x974>
 8014d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014d38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014d3c:	f7eb fea6 	bl	8000a8c <__aeabi_dcmplt>
 8014d40:	2800      	cmp	r0, #0
 8014d42:	f040 8289 	bne.w	8015258 <_dtoa_r+0x970>
 8014d46:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8014d4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014d4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	f2c0 8151 	blt.w	8014ff8 <_dtoa_r+0x710>
 8014d56:	f1bb 0f0e 	cmp.w	fp, #14
 8014d5a:	f300 814d 	bgt.w	8014ff8 <_dtoa_r+0x710>
 8014d5e:	4b45      	ldr	r3, [pc, #276]	; (8014e74 <_dtoa_r+0x58c>)
 8014d60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014d64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014d68:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8014d6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	f280 80da 	bge.w	8014f28 <_dtoa_r+0x640>
 8014d74:	9b08      	ldr	r3, [sp, #32]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	f300 80d6 	bgt.w	8014f28 <_dtoa_r+0x640>
 8014d7c:	f040 826b 	bne.w	8015256 <_dtoa_r+0x96e>
 8014d80:	4b41      	ldr	r3, [pc, #260]	; (8014e88 <_dtoa_r+0x5a0>)
 8014d82:	2200      	movs	r2, #0
 8014d84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d88:	f7eb fc0e 	bl	80005a8 <__aeabi_dmul>
 8014d8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d90:	f7eb fe90 	bl	8000ab4 <__aeabi_dcmpge>
 8014d94:	9c08      	ldr	r4, [sp, #32]
 8014d96:	4626      	mov	r6, r4
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	f040 8241 	bne.w	8015220 <_dtoa_r+0x938>
 8014d9e:	9f03      	ldr	r7, [sp, #12]
 8014da0:	2331      	movs	r3, #49	; 0x31
 8014da2:	f807 3b01 	strb.w	r3, [r7], #1
 8014da6:	f10b 0b01 	add.w	fp, fp, #1
 8014daa:	e23d      	b.n	8015228 <_dtoa_r+0x940>
 8014dac:	07e2      	lsls	r2, r4, #31
 8014dae:	d505      	bpl.n	8014dbc <_dtoa_r+0x4d4>
 8014db0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014db4:	f7eb fbf8 	bl	80005a8 <__aeabi_dmul>
 8014db8:	3701      	adds	r7, #1
 8014dba:	2301      	movs	r3, #1
 8014dbc:	1064      	asrs	r4, r4, #1
 8014dbe:	3608      	adds	r6, #8
 8014dc0:	e76d      	b.n	8014c9e <_dtoa_r+0x3b6>
 8014dc2:	2702      	movs	r7, #2
 8014dc4:	e770      	b.n	8014ca8 <_dtoa_r+0x3c0>
 8014dc6:	9c08      	ldr	r4, [sp, #32]
 8014dc8:	46d8      	mov	r8, fp
 8014dca:	e78f      	b.n	8014cec <_dtoa_r+0x404>
 8014dcc:	9903      	ldr	r1, [sp, #12]
 8014dce:	4b29      	ldr	r3, [pc, #164]	; (8014e74 <_dtoa_r+0x58c>)
 8014dd0:	4421      	add	r1, r4
 8014dd2:	9112      	str	r1, [sp, #72]	; 0x48
 8014dd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dd6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014dda:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014dde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014de2:	2900      	cmp	r1, #0
 8014de4:	d054      	beq.n	8014e90 <_dtoa_r+0x5a8>
 8014de6:	4929      	ldr	r1, [pc, #164]	; (8014e8c <_dtoa_r+0x5a4>)
 8014de8:	2000      	movs	r0, #0
 8014dea:	f7eb fd07 	bl	80007fc <__aeabi_ddiv>
 8014dee:	463b      	mov	r3, r7
 8014df0:	4632      	mov	r2, r6
 8014df2:	f7eb fa21 	bl	8000238 <__aeabi_dsub>
 8014df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014dfa:	9f03      	ldr	r7, [sp, #12]
 8014dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e00:	f7eb fe82 	bl	8000b08 <__aeabi_d2iz>
 8014e04:	4604      	mov	r4, r0
 8014e06:	f7eb fb65 	bl	80004d4 <__aeabi_i2d>
 8014e0a:	4602      	mov	r2, r0
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e12:	f7eb fa11 	bl	8000238 <__aeabi_dsub>
 8014e16:	3430      	adds	r4, #48	; 0x30
 8014e18:	4602      	mov	r2, r0
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e20:	f807 4b01 	strb.w	r4, [r7], #1
 8014e24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014e28:	f7eb fe30 	bl	8000a8c <__aeabi_dcmplt>
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	d173      	bne.n	8014f18 <_dtoa_r+0x630>
 8014e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e34:	4911      	ldr	r1, [pc, #68]	; (8014e7c <_dtoa_r+0x594>)
 8014e36:	2000      	movs	r0, #0
 8014e38:	f7eb f9fe 	bl	8000238 <__aeabi_dsub>
 8014e3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014e40:	f7eb fe24 	bl	8000a8c <__aeabi_dcmplt>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	f040 80b6 	bne.w	8014fb6 <_dtoa_r+0x6ce>
 8014e4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e4c:	429f      	cmp	r7, r3
 8014e4e:	f43f af7a 	beq.w	8014d46 <_dtoa_r+0x45e>
 8014e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014e56:	4b0a      	ldr	r3, [pc, #40]	; (8014e80 <_dtoa_r+0x598>)
 8014e58:	2200      	movs	r2, #0
 8014e5a:	f7eb fba5 	bl	80005a8 <__aeabi_dmul>
 8014e5e:	4b08      	ldr	r3, [pc, #32]	; (8014e80 <_dtoa_r+0x598>)
 8014e60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014e64:	2200      	movs	r2, #0
 8014e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e6a:	f7eb fb9d 	bl	80005a8 <__aeabi_dmul>
 8014e6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e72:	e7c3      	b.n	8014dfc <_dtoa_r+0x514>
 8014e74:	080176b8 	.word	0x080176b8
 8014e78:	08017690 	.word	0x08017690
 8014e7c:	3ff00000 	.word	0x3ff00000
 8014e80:	40240000 	.word	0x40240000
 8014e84:	401c0000 	.word	0x401c0000
 8014e88:	40140000 	.word	0x40140000
 8014e8c:	3fe00000 	.word	0x3fe00000
 8014e90:	4630      	mov	r0, r6
 8014e92:	4639      	mov	r1, r7
 8014e94:	f7eb fb88 	bl	80005a8 <__aeabi_dmul>
 8014e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e9e:	9c03      	ldr	r4, [sp, #12]
 8014ea0:	9314      	str	r3, [sp, #80]	; 0x50
 8014ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ea6:	f7eb fe2f 	bl	8000b08 <__aeabi_d2iz>
 8014eaa:	9015      	str	r0, [sp, #84]	; 0x54
 8014eac:	f7eb fb12 	bl	80004d4 <__aeabi_i2d>
 8014eb0:	4602      	mov	r2, r0
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014eb8:	f7eb f9be 	bl	8000238 <__aeabi_dsub>
 8014ebc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ebe:	3330      	adds	r3, #48	; 0x30
 8014ec0:	f804 3b01 	strb.w	r3, [r4], #1
 8014ec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ec6:	429c      	cmp	r4, r3
 8014ec8:	4606      	mov	r6, r0
 8014eca:	460f      	mov	r7, r1
 8014ecc:	f04f 0200 	mov.w	r2, #0
 8014ed0:	d124      	bne.n	8014f1c <_dtoa_r+0x634>
 8014ed2:	4bb0      	ldr	r3, [pc, #704]	; (8015194 <_dtoa_r+0x8ac>)
 8014ed4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ed8:	f7eb f9b0 	bl	800023c <__adddf3>
 8014edc:	4602      	mov	r2, r0
 8014ede:	460b      	mov	r3, r1
 8014ee0:	4630      	mov	r0, r6
 8014ee2:	4639      	mov	r1, r7
 8014ee4:	f7eb fdf0 	bl	8000ac8 <__aeabi_dcmpgt>
 8014ee8:	2800      	cmp	r0, #0
 8014eea:	d163      	bne.n	8014fb4 <_dtoa_r+0x6cc>
 8014eec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ef0:	49a8      	ldr	r1, [pc, #672]	; (8015194 <_dtoa_r+0x8ac>)
 8014ef2:	2000      	movs	r0, #0
 8014ef4:	f7eb f9a0 	bl	8000238 <__aeabi_dsub>
 8014ef8:	4602      	mov	r2, r0
 8014efa:	460b      	mov	r3, r1
 8014efc:	4630      	mov	r0, r6
 8014efe:	4639      	mov	r1, r7
 8014f00:	f7eb fdc4 	bl	8000a8c <__aeabi_dcmplt>
 8014f04:	2800      	cmp	r0, #0
 8014f06:	f43f af1e 	beq.w	8014d46 <_dtoa_r+0x45e>
 8014f0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014f0c:	1e7b      	subs	r3, r7, #1
 8014f0e:	9314      	str	r3, [sp, #80]	; 0x50
 8014f10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8014f14:	2b30      	cmp	r3, #48	; 0x30
 8014f16:	d0f8      	beq.n	8014f0a <_dtoa_r+0x622>
 8014f18:	46c3      	mov	fp, r8
 8014f1a:	e03b      	b.n	8014f94 <_dtoa_r+0x6ac>
 8014f1c:	4b9e      	ldr	r3, [pc, #632]	; (8015198 <_dtoa_r+0x8b0>)
 8014f1e:	f7eb fb43 	bl	80005a8 <__aeabi_dmul>
 8014f22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f26:	e7bc      	b.n	8014ea2 <_dtoa_r+0x5ba>
 8014f28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014f2c:	9f03      	ldr	r7, [sp, #12]
 8014f2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f32:	4640      	mov	r0, r8
 8014f34:	4649      	mov	r1, r9
 8014f36:	f7eb fc61 	bl	80007fc <__aeabi_ddiv>
 8014f3a:	f7eb fde5 	bl	8000b08 <__aeabi_d2iz>
 8014f3e:	4604      	mov	r4, r0
 8014f40:	f7eb fac8 	bl	80004d4 <__aeabi_i2d>
 8014f44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f48:	f7eb fb2e 	bl	80005a8 <__aeabi_dmul>
 8014f4c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014f50:	4602      	mov	r2, r0
 8014f52:	460b      	mov	r3, r1
 8014f54:	4640      	mov	r0, r8
 8014f56:	4649      	mov	r1, r9
 8014f58:	f7eb f96e 	bl	8000238 <__aeabi_dsub>
 8014f5c:	f807 6b01 	strb.w	r6, [r7], #1
 8014f60:	9e03      	ldr	r6, [sp, #12]
 8014f62:	f8dd c020 	ldr.w	ip, [sp, #32]
 8014f66:	1bbe      	subs	r6, r7, r6
 8014f68:	45b4      	cmp	ip, r6
 8014f6a:	4602      	mov	r2, r0
 8014f6c:	460b      	mov	r3, r1
 8014f6e:	d136      	bne.n	8014fde <_dtoa_r+0x6f6>
 8014f70:	f7eb f964 	bl	800023c <__adddf3>
 8014f74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f78:	4680      	mov	r8, r0
 8014f7a:	4689      	mov	r9, r1
 8014f7c:	f7eb fda4 	bl	8000ac8 <__aeabi_dcmpgt>
 8014f80:	bb58      	cbnz	r0, 8014fda <_dtoa_r+0x6f2>
 8014f82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f86:	4640      	mov	r0, r8
 8014f88:	4649      	mov	r1, r9
 8014f8a:	f7eb fd75 	bl	8000a78 <__aeabi_dcmpeq>
 8014f8e:	b108      	cbz	r0, 8014f94 <_dtoa_r+0x6ac>
 8014f90:	07e3      	lsls	r3, r4, #31
 8014f92:	d422      	bmi.n	8014fda <_dtoa_r+0x6f2>
 8014f94:	4651      	mov	r1, sl
 8014f96:	4628      	mov	r0, r5
 8014f98:	f000 fbc4 	bl	8015724 <_Bfree>
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014fa0:	703b      	strb	r3, [r7, #0]
 8014fa2:	f10b 0301 	add.w	r3, fp, #1
 8014fa6:	6013      	str	r3, [r2, #0]
 8014fa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	f43f ace9 	beq.w	8014982 <_dtoa_r+0x9a>
 8014fb0:	601f      	str	r7, [r3, #0]
 8014fb2:	e4e6      	b.n	8014982 <_dtoa_r+0x9a>
 8014fb4:	4627      	mov	r7, r4
 8014fb6:	463b      	mov	r3, r7
 8014fb8:	461f      	mov	r7, r3
 8014fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014fbe:	2a39      	cmp	r2, #57	; 0x39
 8014fc0:	d107      	bne.n	8014fd2 <_dtoa_r+0x6ea>
 8014fc2:	9a03      	ldr	r2, [sp, #12]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d1f7      	bne.n	8014fb8 <_dtoa_r+0x6d0>
 8014fc8:	9903      	ldr	r1, [sp, #12]
 8014fca:	2230      	movs	r2, #48	; 0x30
 8014fcc:	f108 0801 	add.w	r8, r8, #1
 8014fd0:	700a      	strb	r2, [r1, #0]
 8014fd2:	781a      	ldrb	r2, [r3, #0]
 8014fd4:	3201      	adds	r2, #1
 8014fd6:	701a      	strb	r2, [r3, #0]
 8014fd8:	e79e      	b.n	8014f18 <_dtoa_r+0x630>
 8014fda:	46d8      	mov	r8, fp
 8014fdc:	e7eb      	b.n	8014fb6 <_dtoa_r+0x6ce>
 8014fde:	4b6e      	ldr	r3, [pc, #440]	; (8015198 <_dtoa_r+0x8b0>)
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	f7eb fae1 	bl	80005a8 <__aeabi_dmul>
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	2300      	movs	r3, #0
 8014fea:	4680      	mov	r8, r0
 8014fec:	4689      	mov	r9, r1
 8014fee:	f7eb fd43 	bl	8000a78 <__aeabi_dcmpeq>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d09b      	beq.n	8014f2e <_dtoa_r+0x646>
 8014ff6:	e7cd      	b.n	8014f94 <_dtoa_r+0x6ac>
 8014ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ffa:	2a00      	cmp	r2, #0
 8014ffc:	f000 80c4 	beq.w	8015188 <_dtoa_r+0x8a0>
 8015000:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015002:	2a01      	cmp	r2, #1
 8015004:	f300 80a8 	bgt.w	8015158 <_dtoa_r+0x870>
 8015008:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801500a:	2a00      	cmp	r2, #0
 801500c:	f000 80a0 	beq.w	8015150 <_dtoa_r+0x868>
 8015010:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015014:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015016:	464f      	mov	r7, r9
 8015018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801501a:	2101      	movs	r1, #1
 801501c:	441a      	add	r2, r3
 801501e:	4628      	mov	r0, r5
 8015020:	4499      	add	r9, r3
 8015022:	9209      	str	r2, [sp, #36]	; 0x24
 8015024:	f000 fc34 	bl	8015890 <__i2b>
 8015028:	4606      	mov	r6, r0
 801502a:	b15f      	cbz	r7, 8015044 <_dtoa_r+0x75c>
 801502c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801502e:	2b00      	cmp	r3, #0
 8015030:	dd08      	ble.n	8015044 <_dtoa_r+0x75c>
 8015032:	42bb      	cmp	r3, r7
 8015034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015036:	bfa8      	it	ge
 8015038:	463b      	movge	r3, r7
 801503a:	eba9 0903 	sub.w	r9, r9, r3
 801503e:	1aff      	subs	r7, r7, r3
 8015040:	1ad3      	subs	r3, r2, r3
 8015042:	9309      	str	r3, [sp, #36]	; 0x24
 8015044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015046:	b1f3      	cbz	r3, 8015086 <_dtoa_r+0x79e>
 8015048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801504a:	2b00      	cmp	r3, #0
 801504c:	f000 80a0 	beq.w	8015190 <_dtoa_r+0x8a8>
 8015050:	2c00      	cmp	r4, #0
 8015052:	dd10      	ble.n	8015076 <_dtoa_r+0x78e>
 8015054:	4631      	mov	r1, r6
 8015056:	4622      	mov	r2, r4
 8015058:	4628      	mov	r0, r5
 801505a:	f000 fcd9 	bl	8015a10 <__pow5mult>
 801505e:	4652      	mov	r2, sl
 8015060:	4601      	mov	r1, r0
 8015062:	4606      	mov	r6, r0
 8015064:	4628      	mov	r0, r5
 8015066:	f000 fc29 	bl	80158bc <__multiply>
 801506a:	4651      	mov	r1, sl
 801506c:	4680      	mov	r8, r0
 801506e:	4628      	mov	r0, r5
 8015070:	f000 fb58 	bl	8015724 <_Bfree>
 8015074:	46c2      	mov	sl, r8
 8015076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015078:	1b1a      	subs	r2, r3, r4
 801507a:	d004      	beq.n	8015086 <_dtoa_r+0x79e>
 801507c:	4651      	mov	r1, sl
 801507e:	4628      	mov	r0, r5
 8015080:	f000 fcc6 	bl	8015a10 <__pow5mult>
 8015084:	4682      	mov	sl, r0
 8015086:	2101      	movs	r1, #1
 8015088:	4628      	mov	r0, r5
 801508a:	f000 fc01 	bl	8015890 <__i2b>
 801508e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015090:	2b00      	cmp	r3, #0
 8015092:	4604      	mov	r4, r0
 8015094:	f340 8082 	ble.w	801519c <_dtoa_r+0x8b4>
 8015098:	461a      	mov	r2, r3
 801509a:	4601      	mov	r1, r0
 801509c:	4628      	mov	r0, r5
 801509e:	f000 fcb7 	bl	8015a10 <__pow5mult>
 80150a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	4604      	mov	r4, r0
 80150a8:	dd7b      	ble.n	80151a2 <_dtoa_r+0x8ba>
 80150aa:	f04f 0800 	mov.w	r8, #0
 80150ae:	6923      	ldr	r3, [r4, #16]
 80150b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80150b4:	6918      	ldr	r0, [r3, #16]
 80150b6:	f000 fb9d 	bl	80157f4 <__hi0bits>
 80150ba:	f1c0 0020 	rsb	r0, r0, #32
 80150be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150c0:	4418      	add	r0, r3
 80150c2:	f010 001f 	ands.w	r0, r0, #31
 80150c6:	f000 8092 	beq.w	80151ee <_dtoa_r+0x906>
 80150ca:	f1c0 0320 	rsb	r3, r0, #32
 80150ce:	2b04      	cmp	r3, #4
 80150d0:	f340 8085 	ble.w	80151de <_dtoa_r+0x8f6>
 80150d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d6:	f1c0 001c 	rsb	r0, r0, #28
 80150da:	4403      	add	r3, r0
 80150dc:	4481      	add	r9, r0
 80150de:	4407      	add	r7, r0
 80150e0:	9309      	str	r3, [sp, #36]	; 0x24
 80150e2:	f1b9 0f00 	cmp.w	r9, #0
 80150e6:	dd05      	ble.n	80150f4 <_dtoa_r+0x80c>
 80150e8:	4651      	mov	r1, sl
 80150ea:	464a      	mov	r2, r9
 80150ec:	4628      	mov	r0, r5
 80150ee:	f000 fce9 	bl	8015ac4 <__lshift>
 80150f2:	4682      	mov	sl, r0
 80150f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	dd05      	ble.n	8015106 <_dtoa_r+0x81e>
 80150fa:	4621      	mov	r1, r4
 80150fc:	461a      	mov	r2, r3
 80150fe:	4628      	mov	r0, r5
 8015100:	f000 fce0 	bl	8015ac4 <__lshift>
 8015104:	4604      	mov	r4, r0
 8015106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015108:	2b00      	cmp	r3, #0
 801510a:	d072      	beq.n	80151f2 <_dtoa_r+0x90a>
 801510c:	4621      	mov	r1, r4
 801510e:	4650      	mov	r0, sl
 8015110:	f000 fd44 	bl	8015b9c <__mcmp>
 8015114:	2800      	cmp	r0, #0
 8015116:	da6c      	bge.n	80151f2 <_dtoa_r+0x90a>
 8015118:	2300      	movs	r3, #0
 801511a:	4651      	mov	r1, sl
 801511c:	220a      	movs	r2, #10
 801511e:	4628      	mov	r0, r5
 8015120:	f000 fb22 	bl	8015768 <__multadd>
 8015124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015126:	f10b 3bff 	add.w	fp, fp, #4294967295
 801512a:	4682      	mov	sl, r0
 801512c:	2b00      	cmp	r3, #0
 801512e:	f000 81ad 	beq.w	801548c <_dtoa_r+0xba4>
 8015132:	2300      	movs	r3, #0
 8015134:	4631      	mov	r1, r6
 8015136:	220a      	movs	r2, #10
 8015138:	4628      	mov	r0, r5
 801513a:	f000 fb15 	bl	8015768 <__multadd>
 801513e:	9b06      	ldr	r3, [sp, #24]
 8015140:	2b00      	cmp	r3, #0
 8015142:	4606      	mov	r6, r0
 8015144:	f300 8093 	bgt.w	801526e <_dtoa_r+0x986>
 8015148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801514a:	2b02      	cmp	r3, #2
 801514c:	dc59      	bgt.n	8015202 <_dtoa_r+0x91a>
 801514e:	e08e      	b.n	801526e <_dtoa_r+0x986>
 8015150:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015152:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015156:	e75d      	b.n	8015014 <_dtoa_r+0x72c>
 8015158:	9b08      	ldr	r3, [sp, #32]
 801515a:	1e5c      	subs	r4, r3, #1
 801515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801515e:	42a3      	cmp	r3, r4
 8015160:	bfbf      	itttt	lt
 8015162:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015164:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8015166:	940a      	strlt	r4, [sp, #40]	; 0x28
 8015168:	1ae3      	sublt	r3, r4, r3
 801516a:	bfb4      	ite	lt
 801516c:	18d2      	addlt	r2, r2, r3
 801516e:	1b1c      	subge	r4, r3, r4
 8015170:	9b08      	ldr	r3, [sp, #32]
 8015172:	bfbc      	itt	lt
 8015174:	920e      	strlt	r2, [sp, #56]	; 0x38
 8015176:	2400      	movlt	r4, #0
 8015178:	2b00      	cmp	r3, #0
 801517a:	bfb5      	itete	lt
 801517c:	eba9 0703 	sublt.w	r7, r9, r3
 8015180:	9b08      	ldrge	r3, [sp, #32]
 8015182:	2300      	movlt	r3, #0
 8015184:	464f      	movge	r7, r9
 8015186:	e747      	b.n	8015018 <_dtoa_r+0x730>
 8015188:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801518a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801518c:	464f      	mov	r7, r9
 801518e:	e74c      	b.n	801502a <_dtoa_r+0x742>
 8015190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015192:	e773      	b.n	801507c <_dtoa_r+0x794>
 8015194:	3fe00000 	.word	0x3fe00000
 8015198:	40240000 	.word	0x40240000
 801519c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801519e:	2b01      	cmp	r3, #1
 80151a0:	dc18      	bgt.n	80151d4 <_dtoa_r+0x8ec>
 80151a2:	9b04      	ldr	r3, [sp, #16]
 80151a4:	b9b3      	cbnz	r3, 80151d4 <_dtoa_r+0x8ec>
 80151a6:	9b05      	ldr	r3, [sp, #20]
 80151a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80151ac:	b993      	cbnz	r3, 80151d4 <_dtoa_r+0x8ec>
 80151ae:	9b05      	ldr	r3, [sp, #20]
 80151b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151b4:	0d1b      	lsrs	r3, r3, #20
 80151b6:	051b      	lsls	r3, r3, #20
 80151b8:	b17b      	cbz	r3, 80151da <_dtoa_r+0x8f2>
 80151ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151bc:	3301      	adds	r3, #1
 80151be:	f109 0901 	add.w	r9, r9, #1
 80151c2:	9309      	str	r3, [sp, #36]	; 0x24
 80151c4:	f04f 0801 	mov.w	r8, #1
 80151c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	f47f af6f 	bne.w	80150ae <_dtoa_r+0x7c6>
 80151d0:	2001      	movs	r0, #1
 80151d2:	e774      	b.n	80150be <_dtoa_r+0x7d6>
 80151d4:	f04f 0800 	mov.w	r8, #0
 80151d8:	e7f6      	b.n	80151c8 <_dtoa_r+0x8e0>
 80151da:	4698      	mov	r8, r3
 80151dc:	e7f4      	b.n	80151c8 <_dtoa_r+0x8e0>
 80151de:	d080      	beq.n	80150e2 <_dtoa_r+0x7fa>
 80151e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151e2:	331c      	adds	r3, #28
 80151e4:	441a      	add	r2, r3
 80151e6:	4499      	add	r9, r3
 80151e8:	441f      	add	r7, r3
 80151ea:	9209      	str	r2, [sp, #36]	; 0x24
 80151ec:	e779      	b.n	80150e2 <_dtoa_r+0x7fa>
 80151ee:	4603      	mov	r3, r0
 80151f0:	e7f6      	b.n	80151e0 <_dtoa_r+0x8f8>
 80151f2:	9b08      	ldr	r3, [sp, #32]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	dc34      	bgt.n	8015262 <_dtoa_r+0x97a>
 80151f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80151fa:	2b02      	cmp	r3, #2
 80151fc:	dd31      	ble.n	8015262 <_dtoa_r+0x97a>
 80151fe:	9b08      	ldr	r3, [sp, #32]
 8015200:	9306      	str	r3, [sp, #24]
 8015202:	9b06      	ldr	r3, [sp, #24]
 8015204:	b963      	cbnz	r3, 8015220 <_dtoa_r+0x938>
 8015206:	4621      	mov	r1, r4
 8015208:	2205      	movs	r2, #5
 801520a:	4628      	mov	r0, r5
 801520c:	f000 faac 	bl	8015768 <__multadd>
 8015210:	4601      	mov	r1, r0
 8015212:	4604      	mov	r4, r0
 8015214:	4650      	mov	r0, sl
 8015216:	f000 fcc1 	bl	8015b9c <__mcmp>
 801521a:	2800      	cmp	r0, #0
 801521c:	f73f adbf 	bgt.w	8014d9e <_dtoa_r+0x4b6>
 8015220:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015222:	9f03      	ldr	r7, [sp, #12]
 8015224:	ea6f 0b03 	mvn.w	fp, r3
 8015228:	f04f 0800 	mov.w	r8, #0
 801522c:	4621      	mov	r1, r4
 801522e:	4628      	mov	r0, r5
 8015230:	f000 fa78 	bl	8015724 <_Bfree>
 8015234:	2e00      	cmp	r6, #0
 8015236:	f43f aead 	beq.w	8014f94 <_dtoa_r+0x6ac>
 801523a:	f1b8 0f00 	cmp.w	r8, #0
 801523e:	d005      	beq.n	801524c <_dtoa_r+0x964>
 8015240:	45b0      	cmp	r8, r6
 8015242:	d003      	beq.n	801524c <_dtoa_r+0x964>
 8015244:	4641      	mov	r1, r8
 8015246:	4628      	mov	r0, r5
 8015248:	f000 fa6c 	bl	8015724 <_Bfree>
 801524c:	4631      	mov	r1, r6
 801524e:	4628      	mov	r0, r5
 8015250:	f000 fa68 	bl	8015724 <_Bfree>
 8015254:	e69e      	b.n	8014f94 <_dtoa_r+0x6ac>
 8015256:	2400      	movs	r4, #0
 8015258:	4626      	mov	r6, r4
 801525a:	e7e1      	b.n	8015220 <_dtoa_r+0x938>
 801525c:	46c3      	mov	fp, r8
 801525e:	4626      	mov	r6, r4
 8015260:	e59d      	b.n	8014d9e <_dtoa_r+0x4b6>
 8015262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015264:	2b00      	cmp	r3, #0
 8015266:	f000 80c8 	beq.w	80153fa <_dtoa_r+0xb12>
 801526a:	9b08      	ldr	r3, [sp, #32]
 801526c:	9306      	str	r3, [sp, #24]
 801526e:	2f00      	cmp	r7, #0
 8015270:	dd05      	ble.n	801527e <_dtoa_r+0x996>
 8015272:	4631      	mov	r1, r6
 8015274:	463a      	mov	r2, r7
 8015276:	4628      	mov	r0, r5
 8015278:	f000 fc24 	bl	8015ac4 <__lshift>
 801527c:	4606      	mov	r6, r0
 801527e:	f1b8 0f00 	cmp.w	r8, #0
 8015282:	d05b      	beq.n	801533c <_dtoa_r+0xa54>
 8015284:	6871      	ldr	r1, [r6, #4]
 8015286:	4628      	mov	r0, r5
 8015288:	f000 fa0c 	bl	80156a4 <_Balloc>
 801528c:	4607      	mov	r7, r0
 801528e:	b928      	cbnz	r0, 801529c <_dtoa_r+0x9b4>
 8015290:	4b82      	ldr	r3, [pc, #520]	; (801549c <_dtoa_r+0xbb4>)
 8015292:	4602      	mov	r2, r0
 8015294:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015298:	f7ff bb3a 	b.w	8014910 <_dtoa_r+0x28>
 801529c:	6932      	ldr	r2, [r6, #16]
 801529e:	3202      	adds	r2, #2
 80152a0:	0092      	lsls	r2, r2, #2
 80152a2:	f106 010c 	add.w	r1, r6, #12
 80152a6:	300c      	adds	r0, #12
 80152a8:	f000 fe2c 	bl	8015f04 <memcpy>
 80152ac:	2201      	movs	r2, #1
 80152ae:	4639      	mov	r1, r7
 80152b0:	4628      	mov	r0, r5
 80152b2:	f000 fc07 	bl	8015ac4 <__lshift>
 80152b6:	9b03      	ldr	r3, [sp, #12]
 80152b8:	9a03      	ldr	r2, [sp, #12]
 80152ba:	3301      	adds	r3, #1
 80152bc:	9308      	str	r3, [sp, #32]
 80152be:	9b06      	ldr	r3, [sp, #24]
 80152c0:	4413      	add	r3, r2
 80152c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80152c4:	9b04      	ldr	r3, [sp, #16]
 80152c6:	f003 0301 	and.w	r3, r3, #1
 80152ca:	46b0      	mov	r8, r6
 80152cc:	930a      	str	r3, [sp, #40]	; 0x28
 80152ce:	4606      	mov	r6, r0
 80152d0:	9b08      	ldr	r3, [sp, #32]
 80152d2:	4621      	mov	r1, r4
 80152d4:	3b01      	subs	r3, #1
 80152d6:	4650      	mov	r0, sl
 80152d8:	9304      	str	r3, [sp, #16]
 80152da:	f7ff fa7e 	bl	80147da <quorem>
 80152de:	4641      	mov	r1, r8
 80152e0:	9006      	str	r0, [sp, #24]
 80152e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80152e6:	4650      	mov	r0, sl
 80152e8:	f000 fc58 	bl	8015b9c <__mcmp>
 80152ec:	4632      	mov	r2, r6
 80152ee:	9009      	str	r0, [sp, #36]	; 0x24
 80152f0:	4621      	mov	r1, r4
 80152f2:	4628      	mov	r0, r5
 80152f4:	f000 fc6e 	bl	8015bd4 <__mdiff>
 80152f8:	68c2      	ldr	r2, [r0, #12]
 80152fa:	4607      	mov	r7, r0
 80152fc:	bb02      	cbnz	r2, 8015340 <_dtoa_r+0xa58>
 80152fe:	4601      	mov	r1, r0
 8015300:	4650      	mov	r0, sl
 8015302:	f000 fc4b 	bl	8015b9c <__mcmp>
 8015306:	4602      	mov	r2, r0
 8015308:	4639      	mov	r1, r7
 801530a:	4628      	mov	r0, r5
 801530c:	920c      	str	r2, [sp, #48]	; 0x30
 801530e:	f000 fa09 	bl	8015724 <_Bfree>
 8015312:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015316:	9f08      	ldr	r7, [sp, #32]
 8015318:	ea43 0102 	orr.w	r1, r3, r2
 801531c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801531e:	4319      	orrs	r1, r3
 8015320:	d110      	bne.n	8015344 <_dtoa_r+0xa5c>
 8015322:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015326:	d029      	beq.n	801537c <_dtoa_r+0xa94>
 8015328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801532a:	2b00      	cmp	r3, #0
 801532c:	dd02      	ble.n	8015334 <_dtoa_r+0xa4c>
 801532e:	9b06      	ldr	r3, [sp, #24]
 8015330:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8015334:	9b04      	ldr	r3, [sp, #16]
 8015336:	f883 9000 	strb.w	r9, [r3]
 801533a:	e777      	b.n	801522c <_dtoa_r+0x944>
 801533c:	4630      	mov	r0, r6
 801533e:	e7ba      	b.n	80152b6 <_dtoa_r+0x9ce>
 8015340:	2201      	movs	r2, #1
 8015342:	e7e1      	b.n	8015308 <_dtoa_r+0xa20>
 8015344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015346:	2b00      	cmp	r3, #0
 8015348:	db04      	blt.n	8015354 <_dtoa_r+0xa6c>
 801534a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801534c:	430b      	orrs	r3, r1
 801534e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015350:	430b      	orrs	r3, r1
 8015352:	d120      	bne.n	8015396 <_dtoa_r+0xaae>
 8015354:	2a00      	cmp	r2, #0
 8015356:	dded      	ble.n	8015334 <_dtoa_r+0xa4c>
 8015358:	4651      	mov	r1, sl
 801535a:	2201      	movs	r2, #1
 801535c:	4628      	mov	r0, r5
 801535e:	f000 fbb1 	bl	8015ac4 <__lshift>
 8015362:	4621      	mov	r1, r4
 8015364:	4682      	mov	sl, r0
 8015366:	f000 fc19 	bl	8015b9c <__mcmp>
 801536a:	2800      	cmp	r0, #0
 801536c:	dc03      	bgt.n	8015376 <_dtoa_r+0xa8e>
 801536e:	d1e1      	bne.n	8015334 <_dtoa_r+0xa4c>
 8015370:	f019 0f01 	tst.w	r9, #1
 8015374:	d0de      	beq.n	8015334 <_dtoa_r+0xa4c>
 8015376:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801537a:	d1d8      	bne.n	801532e <_dtoa_r+0xa46>
 801537c:	9a04      	ldr	r2, [sp, #16]
 801537e:	2339      	movs	r3, #57	; 0x39
 8015380:	7013      	strb	r3, [r2, #0]
 8015382:	463b      	mov	r3, r7
 8015384:	461f      	mov	r7, r3
 8015386:	3b01      	subs	r3, #1
 8015388:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801538c:	2a39      	cmp	r2, #57	; 0x39
 801538e:	d06c      	beq.n	801546a <_dtoa_r+0xb82>
 8015390:	3201      	adds	r2, #1
 8015392:	701a      	strb	r2, [r3, #0]
 8015394:	e74a      	b.n	801522c <_dtoa_r+0x944>
 8015396:	2a00      	cmp	r2, #0
 8015398:	dd07      	ble.n	80153aa <_dtoa_r+0xac2>
 801539a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801539e:	d0ed      	beq.n	801537c <_dtoa_r+0xa94>
 80153a0:	9a04      	ldr	r2, [sp, #16]
 80153a2:	f109 0301 	add.w	r3, r9, #1
 80153a6:	7013      	strb	r3, [r2, #0]
 80153a8:	e740      	b.n	801522c <_dtoa_r+0x944>
 80153aa:	9b08      	ldr	r3, [sp, #32]
 80153ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80153ae:	f803 9c01 	strb.w	r9, [r3, #-1]
 80153b2:	4293      	cmp	r3, r2
 80153b4:	d043      	beq.n	801543e <_dtoa_r+0xb56>
 80153b6:	4651      	mov	r1, sl
 80153b8:	2300      	movs	r3, #0
 80153ba:	220a      	movs	r2, #10
 80153bc:	4628      	mov	r0, r5
 80153be:	f000 f9d3 	bl	8015768 <__multadd>
 80153c2:	45b0      	cmp	r8, r6
 80153c4:	4682      	mov	sl, r0
 80153c6:	f04f 0300 	mov.w	r3, #0
 80153ca:	f04f 020a 	mov.w	r2, #10
 80153ce:	4641      	mov	r1, r8
 80153d0:	4628      	mov	r0, r5
 80153d2:	d107      	bne.n	80153e4 <_dtoa_r+0xafc>
 80153d4:	f000 f9c8 	bl	8015768 <__multadd>
 80153d8:	4680      	mov	r8, r0
 80153da:	4606      	mov	r6, r0
 80153dc:	9b08      	ldr	r3, [sp, #32]
 80153de:	3301      	adds	r3, #1
 80153e0:	9308      	str	r3, [sp, #32]
 80153e2:	e775      	b.n	80152d0 <_dtoa_r+0x9e8>
 80153e4:	f000 f9c0 	bl	8015768 <__multadd>
 80153e8:	4631      	mov	r1, r6
 80153ea:	4680      	mov	r8, r0
 80153ec:	2300      	movs	r3, #0
 80153ee:	220a      	movs	r2, #10
 80153f0:	4628      	mov	r0, r5
 80153f2:	f000 f9b9 	bl	8015768 <__multadd>
 80153f6:	4606      	mov	r6, r0
 80153f8:	e7f0      	b.n	80153dc <_dtoa_r+0xaf4>
 80153fa:	9b08      	ldr	r3, [sp, #32]
 80153fc:	9306      	str	r3, [sp, #24]
 80153fe:	9f03      	ldr	r7, [sp, #12]
 8015400:	4621      	mov	r1, r4
 8015402:	4650      	mov	r0, sl
 8015404:	f7ff f9e9 	bl	80147da <quorem>
 8015408:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801540c:	9b03      	ldr	r3, [sp, #12]
 801540e:	f807 9b01 	strb.w	r9, [r7], #1
 8015412:	1afa      	subs	r2, r7, r3
 8015414:	9b06      	ldr	r3, [sp, #24]
 8015416:	4293      	cmp	r3, r2
 8015418:	dd07      	ble.n	801542a <_dtoa_r+0xb42>
 801541a:	4651      	mov	r1, sl
 801541c:	2300      	movs	r3, #0
 801541e:	220a      	movs	r2, #10
 8015420:	4628      	mov	r0, r5
 8015422:	f000 f9a1 	bl	8015768 <__multadd>
 8015426:	4682      	mov	sl, r0
 8015428:	e7ea      	b.n	8015400 <_dtoa_r+0xb18>
 801542a:	9b06      	ldr	r3, [sp, #24]
 801542c:	2b00      	cmp	r3, #0
 801542e:	bfc8      	it	gt
 8015430:	461f      	movgt	r7, r3
 8015432:	9b03      	ldr	r3, [sp, #12]
 8015434:	bfd8      	it	le
 8015436:	2701      	movle	r7, #1
 8015438:	441f      	add	r7, r3
 801543a:	f04f 0800 	mov.w	r8, #0
 801543e:	4651      	mov	r1, sl
 8015440:	2201      	movs	r2, #1
 8015442:	4628      	mov	r0, r5
 8015444:	f000 fb3e 	bl	8015ac4 <__lshift>
 8015448:	4621      	mov	r1, r4
 801544a:	4682      	mov	sl, r0
 801544c:	f000 fba6 	bl	8015b9c <__mcmp>
 8015450:	2800      	cmp	r0, #0
 8015452:	dc96      	bgt.n	8015382 <_dtoa_r+0xa9a>
 8015454:	d102      	bne.n	801545c <_dtoa_r+0xb74>
 8015456:	f019 0f01 	tst.w	r9, #1
 801545a:	d192      	bne.n	8015382 <_dtoa_r+0xa9a>
 801545c:	463b      	mov	r3, r7
 801545e:	461f      	mov	r7, r3
 8015460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015464:	2a30      	cmp	r2, #48	; 0x30
 8015466:	d0fa      	beq.n	801545e <_dtoa_r+0xb76>
 8015468:	e6e0      	b.n	801522c <_dtoa_r+0x944>
 801546a:	9a03      	ldr	r2, [sp, #12]
 801546c:	429a      	cmp	r2, r3
 801546e:	d189      	bne.n	8015384 <_dtoa_r+0xa9c>
 8015470:	f10b 0b01 	add.w	fp, fp, #1
 8015474:	2331      	movs	r3, #49	; 0x31
 8015476:	e796      	b.n	80153a6 <_dtoa_r+0xabe>
 8015478:	4b09      	ldr	r3, [pc, #36]	; (80154a0 <_dtoa_r+0xbb8>)
 801547a:	f7ff baa1 	b.w	80149c0 <_dtoa_r+0xd8>
 801547e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015480:	2b00      	cmp	r3, #0
 8015482:	f47f aa79 	bne.w	8014978 <_dtoa_r+0x90>
 8015486:	4b07      	ldr	r3, [pc, #28]	; (80154a4 <_dtoa_r+0xbbc>)
 8015488:	f7ff ba9a 	b.w	80149c0 <_dtoa_r+0xd8>
 801548c:	9b06      	ldr	r3, [sp, #24]
 801548e:	2b00      	cmp	r3, #0
 8015490:	dcb5      	bgt.n	80153fe <_dtoa_r+0xb16>
 8015492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015494:	2b02      	cmp	r3, #2
 8015496:	f73f aeb4 	bgt.w	8015202 <_dtoa_r+0x91a>
 801549a:	e7b0      	b.n	80153fe <_dtoa_r+0xb16>
 801549c:	0801761f 	.word	0x0801761f
 80154a0:	0801757f 	.word	0x0801757f
 80154a4:	080175a3 	.word	0x080175a3

080154a8 <_free_r>:
 80154a8:	b538      	push	{r3, r4, r5, lr}
 80154aa:	4605      	mov	r5, r0
 80154ac:	2900      	cmp	r1, #0
 80154ae:	d041      	beq.n	8015534 <_free_r+0x8c>
 80154b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154b4:	1f0c      	subs	r4, r1, #4
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	bfb8      	it	lt
 80154ba:	18e4      	addlt	r4, r4, r3
 80154bc:	f000 f8e6 	bl	801568c <__malloc_lock>
 80154c0:	4a1d      	ldr	r2, [pc, #116]	; (8015538 <_free_r+0x90>)
 80154c2:	6813      	ldr	r3, [r2, #0]
 80154c4:	b933      	cbnz	r3, 80154d4 <_free_r+0x2c>
 80154c6:	6063      	str	r3, [r4, #4]
 80154c8:	6014      	str	r4, [r2, #0]
 80154ca:	4628      	mov	r0, r5
 80154cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154d0:	f000 b8e2 	b.w	8015698 <__malloc_unlock>
 80154d4:	42a3      	cmp	r3, r4
 80154d6:	d908      	bls.n	80154ea <_free_r+0x42>
 80154d8:	6820      	ldr	r0, [r4, #0]
 80154da:	1821      	adds	r1, r4, r0
 80154dc:	428b      	cmp	r3, r1
 80154de:	bf01      	itttt	eq
 80154e0:	6819      	ldreq	r1, [r3, #0]
 80154e2:	685b      	ldreq	r3, [r3, #4]
 80154e4:	1809      	addeq	r1, r1, r0
 80154e6:	6021      	streq	r1, [r4, #0]
 80154e8:	e7ed      	b.n	80154c6 <_free_r+0x1e>
 80154ea:	461a      	mov	r2, r3
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	b10b      	cbz	r3, 80154f4 <_free_r+0x4c>
 80154f0:	42a3      	cmp	r3, r4
 80154f2:	d9fa      	bls.n	80154ea <_free_r+0x42>
 80154f4:	6811      	ldr	r1, [r2, #0]
 80154f6:	1850      	adds	r0, r2, r1
 80154f8:	42a0      	cmp	r0, r4
 80154fa:	d10b      	bne.n	8015514 <_free_r+0x6c>
 80154fc:	6820      	ldr	r0, [r4, #0]
 80154fe:	4401      	add	r1, r0
 8015500:	1850      	adds	r0, r2, r1
 8015502:	4283      	cmp	r3, r0
 8015504:	6011      	str	r1, [r2, #0]
 8015506:	d1e0      	bne.n	80154ca <_free_r+0x22>
 8015508:	6818      	ldr	r0, [r3, #0]
 801550a:	685b      	ldr	r3, [r3, #4]
 801550c:	6053      	str	r3, [r2, #4]
 801550e:	4408      	add	r0, r1
 8015510:	6010      	str	r0, [r2, #0]
 8015512:	e7da      	b.n	80154ca <_free_r+0x22>
 8015514:	d902      	bls.n	801551c <_free_r+0x74>
 8015516:	230c      	movs	r3, #12
 8015518:	602b      	str	r3, [r5, #0]
 801551a:	e7d6      	b.n	80154ca <_free_r+0x22>
 801551c:	6820      	ldr	r0, [r4, #0]
 801551e:	1821      	adds	r1, r4, r0
 8015520:	428b      	cmp	r3, r1
 8015522:	bf04      	itt	eq
 8015524:	6819      	ldreq	r1, [r3, #0]
 8015526:	685b      	ldreq	r3, [r3, #4]
 8015528:	6063      	str	r3, [r4, #4]
 801552a:	bf04      	itt	eq
 801552c:	1809      	addeq	r1, r1, r0
 801552e:	6021      	streq	r1, [r4, #0]
 8015530:	6054      	str	r4, [r2, #4]
 8015532:	e7ca      	b.n	80154ca <_free_r+0x22>
 8015534:	bd38      	pop	{r3, r4, r5, pc}
 8015536:	bf00      	nop
 8015538:	20001a00 	.word	0x20001a00

0801553c <malloc>:
 801553c:	4b02      	ldr	r3, [pc, #8]	; (8015548 <malloc+0xc>)
 801553e:	4601      	mov	r1, r0
 8015540:	6818      	ldr	r0, [r3, #0]
 8015542:	f000 b823 	b.w	801558c <_malloc_r>
 8015546:	bf00      	nop
 8015548:	20000160 	.word	0x20000160

0801554c <sbrk_aligned>:
 801554c:	b570      	push	{r4, r5, r6, lr}
 801554e:	4e0e      	ldr	r6, [pc, #56]	; (8015588 <sbrk_aligned+0x3c>)
 8015550:	460c      	mov	r4, r1
 8015552:	6831      	ldr	r1, [r6, #0]
 8015554:	4605      	mov	r5, r0
 8015556:	b911      	cbnz	r1, 801555e <sbrk_aligned+0x12>
 8015558:	f000 fcc4 	bl	8015ee4 <_sbrk_r>
 801555c:	6030      	str	r0, [r6, #0]
 801555e:	4621      	mov	r1, r4
 8015560:	4628      	mov	r0, r5
 8015562:	f000 fcbf 	bl	8015ee4 <_sbrk_r>
 8015566:	1c43      	adds	r3, r0, #1
 8015568:	d00a      	beq.n	8015580 <sbrk_aligned+0x34>
 801556a:	1cc4      	adds	r4, r0, #3
 801556c:	f024 0403 	bic.w	r4, r4, #3
 8015570:	42a0      	cmp	r0, r4
 8015572:	d007      	beq.n	8015584 <sbrk_aligned+0x38>
 8015574:	1a21      	subs	r1, r4, r0
 8015576:	4628      	mov	r0, r5
 8015578:	f000 fcb4 	bl	8015ee4 <_sbrk_r>
 801557c:	3001      	adds	r0, #1
 801557e:	d101      	bne.n	8015584 <sbrk_aligned+0x38>
 8015580:	f04f 34ff 	mov.w	r4, #4294967295
 8015584:	4620      	mov	r0, r4
 8015586:	bd70      	pop	{r4, r5, r6, pc}
 8015588:	20001a04 	.word	0x20001a04

0801558c <_malloc_r>:
 801558c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015590:	1ccd      	adds	r5, r1, #3
 8015592:	f025 0503 	bic.w	r5, r5, #3
 8015596:	3508      	adds	r5, #8
 8015598:	2d0c      	cmp	r5, #12
 801559a:	bf38      	it	cc
 801559c:	250c      	movcc	r5, #12
 801559e:	2d00      	cmp	r5, #0
 80155a0:	4607      	mov	r7, r0
 80155a2:	db01      	blt.n	80155a8 <_malloc_r+0x1c>
 80155a4:	42a9      	cmp	r1, r5
 80155a6:	d905      	bls.n	80155b4 <_malloc_r+0x28>
 80155a8:	230c      	movs	r3, #12
 80155aa:	603b      	str	r3, [r7, #0]
 80155ac:	2600      	movs	r6, #0
 80155ae:	4630      	mov	r0, r6
 80155b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015688 <_malloc_r+0xfc>
 80155b8:	f000 f868 	bl	801568c <__malloc_lock>
 80155bc:	f8d8 3000 	ldr.w	r3, [r8]
 80155c0:	461c      	mov	r4, r3
 80155c2:	bb5c      	cbnz	r4, 801561c <_malloc_r+0x90>
 80155c4:	4629      	mov	r1, r5
 80155c6:	4638      	mov	r0, r7
 80155c8:	f7ff ffc0 	bl	801554c <sbrk_aligned>
 80155cc:	1c43      	adds	r3, r0, #1
 80155ce:	4604      	mov	r4, r0
 80155d0:	d155      	bne.n	801567e <_malloc_r+0xf2>
 80155d2:	f8d8 4000 	ldr.w	r4, [r8]
 80155d6:	4626      	mov	r6, r4
 80155d8:	2e00      	cmp	r6, #0
 80155da:	d145      	bne.n	8015668 <_malloc_r+0xdc>
 80155dc:	2c00      	cmp	r4, #0
 80155de:	d048      	beq.n	8015672 <_malloc_r+0xe6>
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	4631      	mov	r1, r6
 80155e4:	4638      	mov	r0, r7
 80155e6:	eb04 0903 	add.w	r9, r4, r3
 80155ea:	f000 fc7b 	bl	8015ee4 <_sbrk_r>
 80155ee:	4581      	cmp	r9, r0
 80155f0:	d13f      	bne.n	8015672 <_malloc_r+0xe6>
 80155f2:	6821      	ldr	r1, [r4, #0]
 80155f4:	1a6d      	subs	r5, r5, r1
 80155f6:	4629      	mov	r1, r5
 80155f8:	4638      	mov	r0, r7
 80155fa:	f7ff ffa7 	bl	801554c <sbrk_aligned>
 80155fe:	3001      	adds	r0, #1
 8015600:	d037      	beq.n	8015672 <_malloc_r+0xe6>
 8015602:	6823      	ldr	r3, [r4, #0]
 8015604:	442b      	add	r3, r5
 8015606:	6023      	str	r3, [r4, #0]
 8015608:	f8d8 3000 	ldr.w	r3, [r8]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d038      	beq.n	8015682 <_malloc_r+0xf6>
 8015610:	685a      	ldr	r2, [r3, #4]
 8015612:	42a2      	cmp	r2, r4
 8015614:	d12b      	bne.n	801566e <_malloc_r+0xe2>
 8015616:	2200      	movs	r2, #0
 8015618:	605a      	str	r2, [r3, #4]
 801561a:	e00f      	b.n	801563c <_malloc_r+0xb0>
 801561c:	6822      	ldr	r2, [r4, #0]
 801561e:	1b52      	subs	r2, r2, r5
 8015620:	d41f      	bmi.n	8015662 <_malloc_r+0xd6>
 8015622:	2a0b      	cmp	r2, #11
 8015624:	d917      	bls.n	8015656 <_malloc_r+0xca>
 8015626:	1961      	adds	r1, r4, r5
 8015628:	42a3      	cmp	r3, r4
 801562a:	6025      	str	r5, [r4, #0]
 801562c:	bf18      	it	ne
 801562e:	6059      	strne	r1, [r3, #4]
 8015630:	6863      	ldr	r3, [r4, #4]
 8015632:	bf08      	it	eq
 8015634:	f8c8 1000 	streq.w	r1, [r8]
 8015638:	5162      	str	r2, [r4, r5]
 801563a:	604b      	str	r3, [r1, #4]
 801563c:	4638      	mov	r0, r7
 801563e:	f104 060b 	add.w	r6, r4, #11
 8015642:	f000 f829 	bl	8015698 <__malloc_unlock>
 8015646:	f026 0607 	bic.w	r6, r6, #7
 801564a:	1d23      	adds	r3, r4, #4
 801564c:	1af2      	subs	r2, r6, r3
 801564e:	d0ae      	beq.n	80155ae <_malloc_r+0x22>
 8015650:	1b9b      	subs	r3, r3, r6
 8015652:	50a3      	str	r3, [r4, r2]
 8015654:	e7ab      	b.n	80155ae <_malloc_r+0x22>
 8015656:	42a3      	cmp	r3, r4
 8015658:	6862      	ldr	r2, [r4, #4]
 801565a:	d1dd      	bne.n	8015618 <_malloc_r+0x8c>
 801565c:	f8c8 2000 	str.w	r2, [r8]
 8015660:	e7ec      	b.n	801563c <_malloc_r+0xb0>
 8015662:	4623      	mov	r3, r4
 8015664:	6864      	ldr	r4, [r4, #4]
 8015666:	e7ac      	b.n	80155c2 <_malloc_r+0x36>
 8015668:	4634      	mov	r4, r6
 801566a:	6876      	ldr	r6, [r6, #4]
 801566c:	e7b4      	b.n	80155d8 <_malloc_r+0x4c>
 801566e:	4613      	mov	r3, r2
 8015670:	e7cc      	b.n	801560c <_malloc_r+0x80>
 8015672:	230c      	movs	r3, #12
 8015674:	603b      	str	r3, [r7, #0]
 8015676:	4638      	mov	r0, r7
 8015678:	f000 f80e 	bl	8015698 <__malloc_unlock>
 801567c:	e797      	b.n	80155ae <_malloc_r+0x22>
 801567e:	6025      	str	r5, [r4, #0]
 8015680:	e7dc      	b.n	801563c <_malloc_r+0xb0>
 8015682:	605b      	str	r3, [r3, #4]
 8015684:	deff      	udf	#255	; 0xff
 8015686:	bf00      	nop
 8015688:	20001a00 	.word	0x20001a00

0801568c <__malloc_lock>:
 801568c:	4801      	ldr	r0, [pc, #4]	; (8015694 <__malloc_lock+0x8>)
 801568e:	f7ff b8a2 	b.w	80147d6 <__retarget_lock_acquire_recursive>
 8015692:	bf00      	nop
 8015694:	200019fc 	.word	0x200019fc

08015698 <__malloc_unlock>:
 8015698:	4801      	ldr	r0, [pc, #4]	; (80156a0 <__malloc_unlock+0x8>)
 801569a:	f7ff b89d 	b.w	80147d8 <__retarget_lock_release_recursive>
 801569e:	bf00      	nop
 80156a0:	200019fc 	.word	0x200019fc

080156a4 <_Balloc>:
 80156a4:	b570      	push	{r4, r5, r6, lr}
 80156a6:	69c6      	ldr	r6, [r0, #28]
 80156a8:	4604      	mov	r4, r0
 80156aa:	460d      	mov	r5, r1
 80156ac:	b976      	cbnz	r6, 80156cc <_Balloc+0x28>
 80156ae:	2010      	movs	r0, #16
 80156b0:	f7ff ff44 	bl	801553c <malloc>
 80156b4:	4602      	mov	r2, r0
 80156b6:	61e0      	str	r0, [r4, #28]
 80156b8:	b920      	cbnz	r0, 80156c4 <_Balloc+0x20>
 80156ba:	4b18      	ldr	r3, [pc, #96]	; (801571c <_Balloc+0x78>)
 80156bc:	4818      	ldr	r0, [pc, #96]	; (8015720 <_Balloc+0x7c>)
 80156be:	216b      	movs	r1, #107	; 0x6b
 80156c0:	f000 fc2e 	bl	8015f20 <__assert_func>
 80156c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80156c8:	6006      	str	r6, [r0, #0]
 80156ca:	60c6      	str	r6, [r0, #12]
 80156cc:	69e6      	ldr	r6, [r4, #28]
 80156ce:	68f3      	ldr	r3, [r6, #12]
 80156d0:	b183      	cbz	r3, 80156f4 <_Balloc+0x50>
 80156d2:	69e3      	ldr	r3, [r4, #28]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80156da:	b9b8      	cbnz	r0, 801570c <_Balloc+0x68>
 80156dc:	2101      	movs	r1, #1
 80156de:	fa01 f605 	lsl.w	r6, r1, r5
 80156e2:	1d72      	adds	r2, r6, #5
 80156e4:	0092      	lsls	r2, r2, #2
 80156e6:	4620      	mov	r0, r4
 80156e8:	f000 fc38 	bl	8015f5c <_calloc_r>
 80156ec:	b160      	cbz	r0, 8015708 <_Balloc+0x64>
 80156ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80156f2:	e00e      	b.n	8015712 <_Balloc+0x6e>
 80156f4:	2221      	movs	r2, #33	; 0x21
 80156f6:	2104      	movs	r1, #4
 80156f8:	4620      	mov	r0, r4
 80156fa:	f000 fc2f 	bl	8015f5c <_calloc_r>
 80156fe:	69e3      	ldr	r3, [r4, #28]
 8015700:	60f0      	str	r0, [r6, #12]
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d1e4      	bne.n	80156d2 <_Balloc+0x2e>
 8015708:	2000      	movs	r0, #0
 801570a:	bd70      	pop	{r4, r5, r6, pc}
 801570c:	6802      	ldr	r2, [r0, #0]
 801570e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015712:	2300      	movs	r3, #0
 8015714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015718:	e7f7      	b.n	801570a <_Balloc+0x66>
 801571a:	bf00      	nop
 801571c:	080175b0 	.word	0x080175b0
 8015720:	08017630 	.word	0x08017630

08015724 <_Bfree>:
 8015724:	b570      	push	{r4, r5, r6, lr}
 8015726:	69c6      	ldr	r6, [r0, #28]
 8015728:	4605      	mov	r5, r0
 801572a:	460c      	mov	r4, r1
 801572c:	b976      	cbnz	r6, 801574c <_Bfree+0x28>
 801572e:	2010      	movs	r0, #16
 8015730:	f7ff ff04 	bl	801553c <malloc>
 8015734:	4602      	mov	r2, r0
 8015736:	61e8      	str	r0, [r5, #28]
 8015738:	b920      	cbnz	r0, 8015744 <_Bfree+0x20>
 801573a:	4b09      	ldr	r3, [pc, #36]	; (8015760 <_Bfree+0x3c>)
 801573c:	4809      	ldr	r0, [pc, #36]	; (8015764 <_Bfree+0x40>)
 801573e:	218f      	movs	r1, #143	; 0x8f
 8015740:	f000 fbee 	bl	8015f20 <__assert_func>
 8015744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015748:	6006      	str	r6, [r0, #0]
 801574a:	60c6      	str	r6, [r0, #12]
 801574c:	b13c      	cbz	r4, 801575e <_Bfree+0x3a>
 801574e:	69eb      	ldr	r3, [r5, #28]
 8015750:	6862      	ldr	r2, [r4, #4]
 8015752:	68db      	ldr	r3, [r3, #12]
 8015754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015758:	6021      	str	r1, [r4, #0]
 801575a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801575e:	bd70      	pop	{r4, r5, r6, pc}
 8015760:	080175b0 	.word	0x080175b0
 8015764:	08017630 	.word	0x08017630

08015768 <__multadd>:
 8015768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801576c:	690d      	ldr	r5, [r1, #16]
 801576e:	4607      	mov	r7, r0
 8015770:	460c      	mov	r4, r1
 8015772:	461e      	mov	r6, r3
 8015774:	f101 0c14 	add.w	ip, r1, #20
 8015778:	2000      	movs	r0, #0
 801577a:	f8dc 3000 	ldr.w	r3, [ip]
 801577e:	b299      	uxth	r1, r3
 8015780:	fb02 6101 	mla	r1, r2, r1, r6
 8015784:	0c1e      	lsrs	r6, r3, #16
 8015786:	0c0b      	lsrs	r3, r1, #16
 8015788:	fb02 3306 	mla	r3, r2, r6, r3
 801578c:	b289      	uxth	r1, r1
 801578e:	3001      	adds	r0, #1
 8015790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015794:	4285      	cmp	r5, r0
 8015796:	f84c 1b04 	str.w	r1, [ip], #4
 801579a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801579e:	dcec      	bgt.n	801577a <__multadd+0x12>
 80157a0:	b30e      	cbz	r6, 80157e6 <__multadd+0x7e>
 80157a2:	68a3      	ldr	r3, [r4, #8]
 80157a4:	42ab      	cmp	r3, r5
 80157a6:	dc19      	bgt.n	80157dc <__multadd+0x74>
 80157a8:	6861      	ldr	r1, [r4, #4]
 80157aa:	4638      	mov	r0, r7
 80157ac:	3101      	adds	r1, #1
 80157ae:	f7ff ff79 	bl	80156a4 <_Balloc>
 80157b2:	4680      	mov	r8, r0
 80157b4:	b928      	cbnz	r0, 80157c2 <__multadd+0x5a>
 80157b6:	4602      	mov	r2, r0
 80157b8:	4b0c      	ldr	r3, [pc, #48]	; (80157ec <__multadd+0x84>)
 80157ba:	480d      	ldr	r0, [pc, #52]	; (80157f0 <__multadd+0x88>)
 80157bc:	21ba      	movs	r1, #186	; 0xba
 80157be:	f000 fbaf 	bl	8015f20 <__assert_func>
 80157c2:	6922      	ldr	r2, [r4, #16]
 80157c4:	3202      	adds	r2, #2
 80157c6:	f104 010c 	add.w	r1, r4, #12
 80157ca:	0092      	lsls	r2, r2, #2
 80157cc:	300c      	adds	r0, #12
 80157ce:	f000 fb99 	bl	8015f04 <memcpy>
 80157d2:	4621      	mov	r1, r4
 80157d4:	4638      	mov	r0, r7
 80157d6:	f7ff ffa5 	bl	8015724 <_Bfree>
 80157da:	4644      	mov	r4, r8
 80157dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80157e0:	3501      	adds	r5, #1
 80157e2:	615e      	str	r6, [r3, #20]
 80157e4:	6125      	str	r5, [r4, #16]
 80157e6:	4620      	mov	r0, r4
 80157e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ec:	0801761f 	.word	0x0801761f
 80157f0:	08017630 	.word	0x08017630

080157f4 <__hi0bits>:
 80157f4:	0c02      	lsrs	r2, r0, #16
 80157f6:	0412      	lsls	r2, r2, #16
 80157f8:	4603      	mov	r3, r0
 80157fa:	b9ca      	cbnz	r2, 8015830 <__hi0bits+0x3c>
 80157fc:	0403      	lsls	r3, r0, #16
 80157fe:	2010      	movs	r0, #16
 8015800:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015804:	bf04      	itt	eq
 8015806:	021b      	lsleq	r3, r3, #8
 8015808:	3008      	addeq	r0, #8
 801580a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801580e:	bf04      	itt	eq
 8015810:	011b      	lsleq	r3, r3, #4
 8015812:	3004      	addeq	r0, #4
 8015814:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015818:	bf04      	itt	eq
 801581a:	009b      	lsleq	r3, r3, #2
 801581c:	3002      	addeq	r0, #2
 801581e:	2b00      	cmp	r3, #0
 8015820:	db05      	blt.n	801582e <__hi0bits+0x3a>
 8015822:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8015826:	f100 0001 	add.w	r0, r0, #1
 801582a:	bf08      	it	eq
 801582c:	2020      	moveq	r0, #32
 801582e:	4770      	bx	lr
 8015830:	2000      	movs	r0, #0
 8015832:	e7e5      	b.n	8015800 <__hi0bits+0xc>

08015834 <__lo0bits>:
 8015834:	6803      	ldr	r3, [r0, #0]
 8015836:	4602      	mov	r2, r0
 8015838:	f013 0007 	ands.w	r0, r3, #7
 801583c:	d00b      	beq.n	8015856 <__lo0bits+0x22>
 801583e:	07d9      	lsls	r1, r3, #31
 8015840:	d421      	bmi.n	8015886 <__lo0bits+0x52>
 8015842:	0798      	lsls	r0, r3, #30
 8015844:	bf49      	itett	mi
 8015846:	085b      	lsrmi	r3, r3, #1
 8015848:	089b      	lsrpl	r3, r3, #2
 801584a:	2001      	movmi	r0, #1
 801584c:	6013      	strmi	r3, [r2, #0]
 801584e:	bf5c      	itt	pl
 8015850:	6013      	strpl	r3, [r2, #0]
 8015852:	2002      	movpl	r0, #2
 8015854:	4770      	bx	lr
 8015856:	b299      	uxth	r1, r3
 8015858:	b909      	cbnz	r1, 801585e <__lo0bits+0x2a>
 801585a:	0c1b      	lsrs	r3, r3, #16
 801585c:	2010      	movs	r0, #16
 801585e:	b2d9      	uxtb	r1, r3
 8015860:	b909      	cbnz	r1, 8015866 <__lo0bits+0x32>
 8015862:	3008      	adds	r0, #8
 8015864:	0a1b      	lsrs	r3, r3, #8
 8015866:	0719      	lsls	r1, r3, #28
 8015868:	bf04      	itt	eq
 801586a:	091b      	lsreq	r3, r3, #4
 801586c:	3004      	addeq	r0, #4
 801586e:	0799      	lsls	r1, r3, #30
 8015870:	bf04      	itt	eq
 8015872:	089b      	lsreq	r3, r3, #2
 8015874:	3002      	addeq	r0, #2
 8015876:	07d9      	lsls	r1, r3, #31
 8015878:	d403      	bmi.n	8015882 <__lo0bits+0x4e>
 801587a:	085b      	lsrs	r3, r3, #1
 801587c:	f100 0001 	add.w	r0, r0, #1
 8015880:	d003      	beq.n	801588a <__lo0bits+0x56>
 8015882:	6013      	str	r3, [r2, #0]
 8015884:	4770      	bx	lr
 8015886:	2000      	movs	r0, #0
 8015888:	4770      	bx	lr
 801588a:	2020      	movs	r0, #32
 801588c:	4770      	bx	lr
	...

08015890 <__i2b>:
 8015890:	b510      	push	{r4, lr}
 8015892:	460c      	mov	r4, r1
 8015894:	2101      	movs	r1, #1
 8015896:	f7ff ff05 	bl	80156a4 <_Balloc>
 801589a:	4602      	mov	r2, r0
 801589c:	b928      	cbnz	r0, 80158aa <__i2b+0x1a>
 801589e:	4b05      	ldr	r3, [pc, #20]	; (80158b4 <__i2b+0x24>)
 80158a0:	4805      	ldr	r0, [pc, #20]	; (80158b8 <__i2b+0x28>)
 80158a2:	f240 1145 	movw	r1, #325	; 0x145
 80158a6:	f000 fb3b 	bl	8015f20 <__assert_func>
 80158aa:	2301      	movs	r3, #1
 80158ac:	6144      	str	r4, [r0, #20]
 80158ae:	6103      	str	r3, [r0, #16]
 80158b0:	bd10      	pop	{r4, pc}
 80158b2:	bf00      	nop
 80158b4:	0801761f 	.word	0x0801761f
 80158b8:	08017630 	.word	0x08017630

080158bc <__multiply>:
 80158bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c0:	4691      	mov	r9, r2
 80158c2:	690a      	ldr	r2, [r1, #16]
 80158c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	bfb8      	it	lt
 80158cc:	460b      	movlt	r3, r1
 80158ce:	460c      	mov	r4, r1
 80158d0:	bfbc      	itt	lt
 80158d2:	464c      	movlt	r4, r9
 80158d4:	4699      	movlt	r9, r3
 80158d6:	6927      	ldr	r7, [r4, #16]
 80158d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80158dc:	68a3      	ldr	r3, [r4, #8]
 80158de:	6861      	ldr	r1, [r4, #4]
 80158e0:	eb07 060a 	add.w	r6, r7, sl
 80158e4:	42b3      	cmp	r3, r6
 80158e6:	b085      	sub	sp, #20
 80158e8:	bfb8      	it	lt
 80158ea:	3101      	addlt	r1, #1
 80158ec:	f7ff feda 	bl	80156a4 <_Balloc>
 80158f0:	b930      	cbnz	r0, 8015900 <__multiply+0x44>
 80158f2:	4602      	mov	r2, r0
 80158f4:	4b44      	ldr	r3, [pc, #272]	; (8015a08 <__multiply+0x14c>)
 80158f6:	4845      	ldr	r0, [pc, #276]	; (8015a0c <__multiply+0x150>)
 80158f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80158fc:	f000 fb10 	bl	8015f20 <__assert_func>
 8015900:	f100 0514 	add.w	r5, r0, #20
 8015904:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015908:	462b      	mov	r3, r5
 801590a:	2200      	movs	r2, #0
 801590c:	4543      	cmp	r3, r8
 801590e:	d321      	bcc.n	8015954 <__multiply+0x98>
 8015910:	f104 0314 	add.w	r3, r4, #20
 8015914:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015918:	f109 0314 	add.w	r3, r9, #20
 801591c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015920:	9202      	str	r2, [sp, #8]
 8015922:	1b3a      	subs	r2, r7, r4
 8015924:	3a15      	subs	r2, #21
 8015926:	f022 0203 	bic.w	r2, r2, #3
 801592a:	3204      	adds	r2, #4
 801592c:	f104 0115 	add.w	r1, r4, #21
 8015930:	428f      	cmp	r7, r1
 8015932:	bf38      	it	cc
 8015934:	2204      	movcc	r2, #4
 8015936:	9201      	str	r2, [sp, #4]
 8015938:	9a02      	ldr	r2, [sp, #8]
 801593a:	9303      	str	r3, [sp, #12]
 801593c:	429a      	cmp	r2, r3
 801593e:	d80c      	bhi.n	801595a <__multiply+0x9e>
 8015940:	2e00      	cmp	r6, #0
 8015942:	dd03      	ble.n	801594c <__multiply+0x90>
 8015944:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015948:	2b00      	cmp	r3, #0
 801594a:	d05a      	beq.n	8015a02 <__multiply+0x146>
 801594c:	6106      	str	r6, [r0, #16]
 801594e:	b005      	add	sp, #20
 8015950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015954:	f843 2b04 	str.w	r2, [r3], #4
 8015958:	e7d8      	b.n	801590c <__multiply+0x50>
 801595a:	f8b3 a000 	ldrh.w	sl, [r3]
 801595e:	f1ba 0f00 	cmp.w	sl, #0
 8015962:	d023      	beq.n	80159ac <__multiply+0xf0>
 8015964:	f104 0e14 	add.w	lr, r4, #20
 8015968:	46a9      	mov	r9, r5
 801596a:	f04f 0c00 	mov.w	ip, #0
 801596e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015972:	f8d9 1000 	ldr.w	r1, [r9]
 8015976:	fa1f fb82 	uxth.w	fp, r2
 801597a:	b289      	uxth	r1, r1
 801597c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015980:	4461      	add	r1, ip
 8015982:	f8d9 c000 	ldr.w	ip, [r9]
 8015986:	0c12      	lsrs	r2, r2, #16
 8015988:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801598c:	fb0a c202 	mla	r2, sl, r2, ip
 8015990:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015994:	b289      	uxth	r1, r1
 8015996:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801599a:	4577      	cmp	r7, lr
 801599c:	f849 1b04 	str.w	r1, [r9], #4
 80159a0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80159a4:	d8e3      	bhi.n	801596e <__multiply+0xb2>
 80159a6:	9a01      	ldr	r2, [sp, #4]
 80159a8:	f845 c002 	str.w	ip, [r5, r2]
 80159ac:	9a03      	ldr	r2, [sp, #12]
 80159ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80159b2:	3304      	adds	r3, #4
 80159b4:	f1b9 0f00 	cmp.w	r9, #0
 80159b8:	d021      	beq.n	80159fe <__multiply+0x142>
 80159ba:	6829      	ldr	r1, [r5, #0]
 80159bc:	f104 0c14 	add.w	ip, r4, #20
 80159c0:	46ae      	mov	lr, r5
 80159c2:	f04f 0a00 	mov.w	sl, #0
 80159c6:	f8bc b000 	ldrh.w	fp, [ip]
 80159ca:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80159ce:	fb09 220b 	mla	r2, r9, fp, r2
 80159d2:	4452      	add	r2, sl
 80159d4:	b289      	uxth	r1, r1
 80159d6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80159da:	f84e 1b04 	str.w	r1, [lr], #4
 80159de:	f85c 1b04 	ldr.w	r1, [ip], #4
 80159e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80159e6:	f8be 1000 	ldrh.w	r1, [lr]
 80159ea:	fb09 110a 	mla	r1, r9, sl, r1
 80159ee:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80159f2:	4567      	cmp	r7, ip
 80159f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80159f8:	d8e5      	bhi.n	80159c6 <__multiply+0x10a>
 80159fa:	9a01      	ldr	r2, [sp, #4]
 80159fc:	50a9      	str	r1, [r5, r2]
 80159fe:	3504      	adds	r5, #4
 8015a00:	e79a      	b.n	8015938 <__multiply+0x7c>
 8015a02:	3e01      	subs	r6, #1
 8015a04:	e79c      	b.n	8015940 <__multiply+0x84>
 8015a06:	bf00      	nop
 8015a08:	0801761f 	.word	0x0801761f
 8015a0c:	08017630 	.word	0x08017630

08015a10 <__pow5mult>:
 8015a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a14:	4615      	mov	r5, r2
 8015a16:	f012 0203 	ands.w	r2, r2, #3
 8015a1a:	4606      	mov	r6, r0
 8015a1c:	460f      	mov	r7, r1
 8015a1e:	d007      	beq.n	8015a30 <__pow5mult+0x20>
 8015a20:	4c25      	ldr	r4, [pc, #148]	; (8015ab8 <__pow5mult+0xa8>)
 8015a22:	3a01      	subs	r2, #1
 8015a24:	2300      	movs	r3, #0
 8015a26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015a2a:	f7ff fe9d 	bl	8015768 <__multadd>
 8015a2e:	4607      	mov	r7, r0
 8015a30:	10ad      	asrs	r5, r5, #2
 8015a32:	d03d      	beq.n	8015ab0 <__pow5mult+0xa0>
 8015a34:	69f4      	ldr	r4, [r6, #28]
 8015a36:	b97c      	cbnz	r4, 8015a58 <__pow5mult+0x48>
 8015a38:	2010      	movs	r0, #16
 8015a3a:	f7ff fd7f 	bl	801553c <malloc>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	61f0      	str	r0, [r6, #28]
 8015a42:	b928      	cbnz	r0, 8015a50 <__pow5mult+0x40>
 8015a44:	4b1d      	ldr	r3, [pc, #116]	; (8015abc <__pow5mult+0xac>)
 8015a46:	481e      	ldr	r0, [pc, #120]	; (8015ac0 <__pow5mult+0xb0>)
 8015a48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015a4c:	f000 fa68 	bl	8015f20 <__assert_func>
 8015a50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015a54:	6004      	str	r4, [r0, #0]
 8015a56:	60c4      	str	r4, [r0, #12]
 8015a58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015a5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015a60:	b94c      	cbnz	r4, 8015a76 <__pow5mult+0x66>
 8015a62:	f240 2171 	movw	r1, #625	; 0x271
 8015a66:	4630      	mov	r0, r6
 8015a68:	f7ff ff12 	bl	8015890 <__i2b>
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015a72:	4604      	mov	r4, r0
 8015a74:	6003      	str	r3, [r0, #0]
 8015a76:	f04f 0900 	mov.w	r9, #0
 8015a7a:	07eb      	lsls	r3, r5, #31
 8015a7c:	d50a      	bpl.n	8015a94 <__pow5mult+0x84>
 8015a7e:	4639      	mov	r1, r7
 8015a80:	4622      	mov	r2, r4
 8015a82:	4630      	mov	r0, r6
 8015a84:	f7ff ff1a 	bl	80158bc <__multiply>
 8015a88:	4639      	mov	r1, r7
 8015a8a:	4680      	mov	r8, r0
 8015a8c:	4630      	mov	r0, r6
 8015a8e:	f7ff fe49 	bl	8015724 <_Bfree>
 8015a92:	4647      	mov	r7, r8
 8015a94:	106d      	asrs	r5, r5, #1
 8015a96:	d00b      	beq.n	8015ab0 <__pow5mult+0xa0>
 8015a98:	6820      	ldr	r0, [r4, #0]
 8015a9a:	b938      	cbnz	r0, 8015aac <__pow5mult+0x9c>
 8015a9c:	4622      	mov	r2, r4
 8015a9e:	4621      	mov	r1, r4
 8015aa0:	4630      	mov	r0, r6
 8015aa2:	f7ff ff0b 	bl	80158bc <__multiply>
 8015aa6:	6020      	str	r0, [r4, #0]
 8015aa8:	f8c0 9000 	str.w	r9, [r0]
 8015aac:	4604      	mov	r4, r0
 8015aae:	e7e4      	b.n	8015a7a <__pow5mult+0x6a>
 8015ab0:	4638      	mov	r0, r7
 8015ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ab6:	bf00      	nop
 8015ab8:	08017780 	.word	0x08017780
 8015abc:	080175b0 	.word	0x080175b0
 8015ac0:	08017630 	.word	0x08017630

08015ac4 <__lshift>:
 8015ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ac8:	460c      	mov	r4, r1
 8015aca:	6849      	ldr	r1, [r1, #4]
 8015acc:	6923      	ldr	r3, [r4, #16]
 8015ace:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015ad2:	68a3      	ldr	r3, [r4, #8]
 8015ad4:	4607      	mov	r7, r0
 8015ad6:	4691      	mov	r9, r2
 8015ad8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015adc:	f108 0601 	add.w	r6, r8, #1
 8015ae0:	42b3      	cmp	r3, r6
 8015ae2:	db0b      	blt.n	8015afc <__lshift+0x38>
 8015ae4:	4638      	mov	r0, r7
 8015ae6:	f7ff fddd 	bl	80156a4 <_Balloc>
 8015aea:	4605      	mov	r5, r0
 8015aec:	b948      	cbnz	r0, 8015b02 <__lshift+0x3e>
 8015aee:	4602      	mov	r2, r0
 8015af0:	4b28      	ldr	r3, [pc, #160]	; (8015b94 <__lshift+0xd0>)
 8015af2:	4829      	ldr	r0, [pc, #164]	; (8015b98 <__lshift+0xd4>)
 8015af4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015af8:	f000 fa12 	bl	8015f20 <__assert_func>
 8015afc:	3101      	adds	r1, #1
 8015afe:	005b      	lsls	r3, r3, #1
 8015b00:	e7ee      	b.n	8015ae0 <__lshift+0x1c>
 8015b02:	2300      	movs	r3, #0
 8015b04:	f100 0114 	add.w	r1, r0, #20
 8015b08:	f100 0210 	add.w	r2, r0, #16
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	4553      	cmp	r3, sl
 8015b10:	db33      	blt.n	8015b7a <__lshift+0xb6>
 8015b12:	6920      	ldr	r0, [r4, #16]
 8015b14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015b18:	f104 0314 	add.w	r3, r4, #20
 8015b1c:	f019 091f 	ands.w	r9, r9, #31
 8015b20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015b24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015b28:	d02b      	beq.n	8015b82 <__lshift+0xbe>
 8015b2a:	f1c9 0e20 	rsb	lr, r9, #32
 8015b2e:	468a      	mov	sl, r1
 8015b30:	2200      	movs	r2, #0
 8015b32:	6818      	ldr	r0, [r3, #0]
 8015b34:	fa00 f009 	lsl.w	r0, r0, r9
 8015b38:	4310      	orrs	r0, r2
 8015b3a:	f84a 0b04 	str.w	r0, [sl], #4
 8015b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b42:	459c      	cmp	ip, r3
 8015b44:	fa22 f20e 	lsr.w	r2, r2, lr
 8015b48:	d8f3      	bhi.n	8015b32 <__lshift+0x6e>
 8015b4a:	ebac 0304 	sub.w	r3, ip, r4
 8015b4e:	3b15      	subs	r3, #21
 8015b50:	f023 0303 	bic.w	r3, r3, #3
 8015b54:	3304      	adds	r3, #4
 8015b56:	f104 0015 	add.w	r0, r4, #21
 8015b5a:	4584      	cmp	ip, r0
 8015b5c:	bf38      	it	cc
 8015b5e:	2304      	movcc	r3, #4
 8015b60:	50ca      	str	r2, [r1, r3]
 8015b62:	b10a      	cbz	r2, 8015b68 <__lshift+0xa4>
 8015b64:	f108 0602 	add.w	r6, r8, #2
 8015b68:	3e01      	subs	r6, #1
 8015b6a:	4638      	mov	r0, r7
 8015b6c:	612e      	str	r6, [r5, #16]
 8015b6e:	4621      	mov	r1, r4
 8015b70:	f7ff fdd8 	bl	8015724 <_Bfree>
 8015b74:	4628      	mov	r0, r5
 8015b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015b7e:	3301      	adds	r3, #1
 8015b80:	e7c5      	b.n	8015b0e <__lshift+0x4a>
 8015b82:	3904      	subs	r1, #4
 8015b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b88:	f841 2f04 	str.w	r2, [r1, #4]!
 8015b8c:	459c      	cmp	ip, r3
 8015b8e:	d8f9      	bhi.n	8015b84 <__lshift+0xc0>
 8015b90:	e7ea      	b.n	8015b68 <__lshift+0xa4>
 8015b92:	bf00      	nop
 8015b94:	0801761f 	.word	0x0801761f
 8015b98:	08017630 	.word	0x08017630

08015b9c <__mcmp>:
 8015b9c:	690a      	ldr	r2, [r1, #16]
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	6900      	ldr	r0, [r0, #16]
 8015ba2:	1a80      	subs	r0, r0, r2
 8015ba4:	b530      	push	{r4, r5, lr}
 8015ba6:	d10d      	bne.n	8015bc4 <__mcmp+0x28>
 8015ba8:	3314      	adds	r3, #20
 8015baa:	3114      	adds	r1, #20
 8015bac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015bb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015bb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015bb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015bbc:	4295      	cmp	r5, r2
 8015bbe:	d002      	beq.n	8015bc6 <__mcmp+0x2a>
 8015bc0:	d304      	bcc.n	8015bcc <__mcmp+0x30>
 8015bc2:	2001      	movs	r0, #1
 8015bc4:	bd30      	pop	{r4, r5, pc}
 8015bc6:	42a3      	cmp	r3, r4
 8015bc8:	d3f4      	bcc.n	8015bb4 <__mcmp+0x18>
 8015bca:	e7fb      	b.n	8015bc4 <__mcmp+0x28>
 8015bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8015bd0:	e7f8      	b.n	8015bc4 <__mcmp+0x28>
	...

08015bd4 <__mdiff>:
 8015bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd8:	460d      	mov	r5, r1
 8015bda:	4607      	mov	r7, r0
 8015bdc:	4611      	mov	r1, r2
 8015bde:	4628      	mov	r0, r5
 8015be0:	4614      	mov	r4, r2
 8015be2:	f7ff ffdb 	bl	8015b9c <__mcmp>
 8015be6:	1e06      	subs	r6, r0, #0
 8015be8:	d111      	bne.n	8015c0e <__mdiff+0x3a>
 8015bea:	4631      	mov	r1, r6
 8015bec:	4638      	mov	r0, r7
 8015bee:	f7ff fd59 	bl	80156a4 <_Balloc>
 8015bf2:	4602      	mov	r2, r0
 8015bf4:	b928      	cbnz	r0, 8015c02 <__mdiff+0x2e>
 8015bf6:	4b39      	ldr	r3, [pc, #228]	; (8015cdc <__mdiff+0x108>)
 8015bf8:	f240 2137 	movw	r1, #567	; 0x237
 8015bfc:	4838      	ldr	r0, [pc, #224]	; (8015ce0 <__mdiff+0x10c>)
 8015bfe:	f000 f98f 	bl	8015f20 <__assert_func>
 8015c02:	2301      	movs	r3, #1
 8015c04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015c08:	4610      	mov	r0, r2
 8015c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c0e:	bfa4      	itt	ge
 8015c10:	4623      	movge	r3, r4
 8015c12:	462c      	movge	r4, r5
 8015c14:	4638      	mov	r0, r7
 8015c16:	6861      	ldr	r1, [r4, #4]
 8015c18:	bfa6      	itte	ge
 8015c1a:	461d      	movge	r5, r3
 8015c1c:	2600      	movge	r6, #0
 8015c1e:	2601      	movlt	r6, #1
 8015c20:	f7ff fd40 	bl	80156a4 <_Balloc>
 8015c24:	4602      	mov	r2, r0
 8015c26:	b918      	cbnz	r0, 8015c30 <__mdiff+0x5c>
 8015c28:	4b2c      	ldr	r3, [pc, #176]	; (8015cdc <__mdiff+0x108>)
 8015c2a:	f240 2145 	movw	r1, #581	; 0x245
 8015c2e:	e7e5      	b.n	8015bfc <__mdiff+0x28>
 8015c30:	6927      	ldr	r7, [r4, #16]
 8015c32:	60c6      	str	r6, [r0, #12]
 8015c34:	692e      	ldr	r6, [r5, #16]
 8015c36:	f104 0014 	add.w	r0, r4, #20
 8015c3a:	f105 0914 	add.w	r9, r5, #20
 8015c3e:	f102 0e14 	add.w	lr, r2, #20
 8015c42:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8015c46:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015c4a:	3410      	adds	r4, #16
 8015c4c:	46f2      	mov	sl, lr
 8015c4e:	2100      	movs	r1, #0
 8015c50:	f859 3b04 	ldr.w	r3, [r9], #4
 8015c54:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8015c58:	fa11 f88b 	uxtah	r8, r1, fp
 8015c5c:	b299      	uxth	r1, r3
 8015c5e:	0c1b      	lsrs	r3, r3, #16
 8015c60:	eba8 0801 	sub.w	r8, r8, r1
 8015c64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015c68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015c6c:	fa1f f888 	uxth.w	r8, r8
 8015c70:	1419      	asrs	r1, r3, #16
 8015c72:	454e      	cmp	r6, r9
 8015c74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015c78:	f84a 3b04 	str.w	r3, [sl], #4
 8015c7c:	d8e8      	bhi.n	8015c50 <__mdiff+0x7c>
 8015c7e:	1b73      	subs	r3, r6, r5
 8015c80:	3b15      	subs	r3, #21
 8015c82:	f023 0303 	bic.w	r3, r3, #3
 8015c86:	3304      	adds	r3, #4
 8015c88:	3515      	adds	r5, #21
 8015c8a:	42ae      	cmp	r6, r5
 8015c8c:	bf38      	it	cc
 8015c8e:	2304      	movcc	r3, #4
 8015c90:	4418      	add	r0, r3
 8015c92:	4473      	add	r3, lr
 8015c94:	469e      	mov	lr, r3
 8015c96:	4606      	mov	r6, r0
 8015c98:	4566      	cmp	r6, ip
 8015c9a:	d30e      	bcc.n	8015cba <__mdiff+0xe6>
 8015c9c:	f10c 0103 	add.w	r1, ip, #3
 8015ca0:	1a09      	subs	r1, r1, r0
 8015ca2:	f021 0103 	bic.w	r1, r1, #3
 8015ca6:	3803      	subs	r0, #3
 8015ca8:	4584      	cmp	ip, r0
 8015caa:	bf38      	it	cc
 8015cac:	2100      	movcc	r1, #0
 8015cae:	440b      	add	r3, r1
 8015cb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015cb4:	b179      	cbz	r1, 8015cd6 <__mdiff+0x102>
 8015cb6:	6117      	str	r7, [r2, #16]
 8015cb8:	e7a6      	b.n	8015c08 <__mdiff+0x34>
 8015cba:	f856 8b04 	ldr.w	r8, [r6], #4
 8015cbe:	fa11 f488 	uxtah	r4, r1, r8
 8015cc2:	1425      	asrs	r5, r4, #16
 8015cc4:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8015cc8:	b2a4      	uxth	r4, r4
 8015cca:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8015cce:	f84e 4b04 	str.w	r4, [lr], #4
 8015cd2:	1429      	asrs	r1, r5, #16
 8015cd4:	e7e0      	b.n	8015c98 <__mdiff+0xc4>
 8015cd6:	3f01      	subs	r7, #1
 8015cd8:	e7ea      	b.n	8015cb0 <__mdiff+0xdc>
 8015cda:	bf00      	nop
 8015cdc:	0801761f 	.word	0x0801761f
 8015ce0:	08017630 	.word	0x08017630

08015ce4 <__d2b>:
 8015ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ce6:	2101      	movs	r1, #1
 8015ce8:	9e08      	ldr	r6, [sp, #32]
 8015cea:	4617      	mov	r7, r2
 8015cec:	461c      	mov	r4, r3
 8015cee:	f7ff fcd9 	bl	80156a4 <_Balloc>
 8015cf2:	4605      	mov	r5, r0
 8015cf4:	b930      	cbnz	r0, 8015d04 <__d2b+0x20>
 8015cf6:	4602      	mov	r2, r0
 8015cf8:	4b23      	ldr	r3, [pc, #140]	; (8015d88 <__d2b+0xa4>)
 8015cfa:	4824      	ldr	r0, [pc, #144]	; (8015d8c <__d2b+0xa8>)
 8015cfc:	f240 310f 	movw	r1, #783	; 0x30f
 8015d00:	f000 f90e 	bl	8015f20 <__assert_func>
 8015d04:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015d08:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8015d0c:	bb24      	cbnz	r4, 8015d58 <__d2b+0x74>
 8015d0e:	2f00      	cmp	r7, #0
 8015d10:	9301      	str	r3, [sp, #4]
 8015d12:	d026      	beq.n	8015d62 <__d2b+0x7e>
 8015d14:	4668      	mov	r0, sp
 8015d16:	9700      	str	r7, [sp, #0]
 8015d18:	f7ff fd8c 	bl	8015834 <__lo0bits>
 8015d1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015d20:	b1e8      	cbz	r0, 8015d5e <__d2b+0x7a>
 8015d22:	f1c0 0320 	rsb	r3, r0, #32
 8015d26:	fa02 f303 	lsl.w	r3, r2, r3
 8015d2a:	430b      	orrs	r3, r1
 8015d2c:	40c2      	lsrs	r2, r0
 8015d2e:	616b      	str	r3, [r5, #20]
 8015d30:	9201      	str	r2, [sp, #4]
 8015d32:	9b01      	ldr	r3, [sp, #4]
 8015d34:	61ab      	str	r3, [r5, #24]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	bf14      	ite	ne
 8015d3a:	2102      	movne	r1, #2
 8015d3c:	2101      	moveq	r1, #1
 8015d3e:	6129      	str	r1, [r5, #16]
 8015d40:	b1bc      	cbz	r4, 8015d72 <__d2b+0x8e>
 8015d42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015d46:	4404      	add	r4, r0
 8015d48:	6034      	str	r4, [r6, #0]
 8015d4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d50:	6018      	str	r0, [r3, #0]
 8015d52:	4628      	mov	r0, r5
 8015d54:	b003      	add	sp, #12
 8015d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015d5c:	e7d7      	b.n	8015d0e <__d2b+0x2a>
 8015d5e:	6169      	str	r1, [r5, #20]
 8015d60:	e7e7      	b.n	8015d32 <__d2b+0x4e>
 8015d62:	a801      	add	r0, sp, #4
 8015d64:	f7ff fd66 	bl	8015834 <__lo0bits>
 8015d68:	9b01      	ldr	r3, [sp, #4]
 8015d6a:	616b      	str	r3, [r5, #20]
 8015d6c:	3020      	adds	r0, #32
 8015d6e:	2101      	movs	r1, #1
 8015d70:	e7e5      	b.n	8015d3e <__d2b+0x5a>
 8015d72:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8015d76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015d7a:	6030      	str	r0, [r6, #0]
 8015d7c:	6918      	ldr	r0, [r3, #16]
 8015d7e:	f7ff fd39 	bl	80157f4 <__hi0bits>
 8015d82:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015d86:	e7e2      	b.n	8015d4e <__d2b+0x6a>
 8015d88:	0801761f 	.word	0x0801761f
 8015d8c:	08017630 	.word	0x08017630

08015d90 <__sflush_r>:
 8015d90:	898a      	ldrh	r2, [r1, #12]
 8015d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d94:	4605      	mov	r5, r0
 8015d96:	0710      	lsls	r0, r2, #28
 8015d98:	460c      	mov	r4, r1
 8015d9a:	d457      	bmi.n	8015e4c <__sflush_r+0xbc>
 8015d9c:	684b      	ldr	r3, [r1, #4]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	dc04      	bgt.n	8015dac <__sflush_r+0x1c>
 8015da2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	dc01      	bgt.n	8015dac <__sflush_r+0x1c>
 8015da8:	2000      	movs	r0, #0
 8015daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dae:	2e00      	cmp	r6, #0
 8015db0:	d0fa      	beq.n	8015da8 <__sflush_r+0x18>
 8015db2:	2300      	movs	r3, #0
 8015db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015db8:	682f      	ldr	r7, [r5, #0]
 8015dba:	6a21      	ldr	r1, [r4, #32]
 8015dbc:	602b      	str	r3, [r5, #0]
 8015dbe:	d032      	beq.n	8015e26 <__sflush_r+0x96>
 8015dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015dc2:	89a3      	ldrh	r3, [r4, #12]
 8015dc4:	075a      	lsls	r2, r3, #29
 8015dc6:	d505      	bpl.n	8015dd4 <__sflush_r+0x44>
 8015dc8:	6863      	ldr	r3, [r4, #4]
 8015dca:	1ac0      	subs	r0, r0, r3
 8015dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015dce:	b10b      	cbz	r3, 8015dd4 <__sflush_r+0x44>
 8015dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015dd2:	1ac0      	subs	r0, r0, r3
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	4602      	mov	r2, r0
 8015dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dda:	6a21      	ldr	r1, [r4, #32]
 8015ddc:	4628      	mov	r0, r5
 8015dde:	47b0      	blx	r6
 8015de0:	1c43      	adds	r3, r0, #1
 8015de2:	89a3      	ldrh	r3, [r4, #12]
 8015de4:	d106      	bne.n	8015df4 <__sflush_r+0x64>
 8015de6:	6829      	ldr	r1, [r5, #0]
 8015de8:	291d      	cmp	r1, #29
 8015dea:	d82b      	bhi.n	8015e44 <__sflush_r+0xb4>
 8015dec:	4a28      	ldr	r2, [pc, #160]	; (8015e90 <__sflush_r+0x100>)
 8015dee:	410a      	asrs	r2, r1
 8015df0:	07d6      	lsls	r6, r2, #31
 8015df2:	d427      	bmi.n	8015e44 <__sflush_r+0xb4>
 8015df4:	2200      	movs	r2, #0
 8015df6:	6062      	str	r2, [r4, #4]
 8015df8:	04d9      	lsls	r1, r3, #19
 8015dfa:	6922      	ldr	r2, [r4, #16]
 8015dfc:	6022      	str	r2, [r4, #0]
 8015dfe:	d504      	bpl.n	8015e0a <__sflush_r+0x7a>
 8015e00:	1c42      	adds	r2, r0, #1
 8015e02:	d101      	bne.n	8015e08 <__sflush_r+0x78>
 8015e04:	682b      	ldr	r3, [r5, #0]
 8015e06:	b903      	cbnz	r3, 8015e0a <__sflush_r+0x7a>
 8015e08:	6560      	str	r0, [r4, #84]	; 0x54
 8015e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e0c:	602f      	str	r7, [r5, #0]
 8015e0e:	2900      	cmp	r1, #0
 8015e10:	d0ca      	beq.n	8015da8 <__sflush_r+0x18>
 8015e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e16:	4299      	cmp	r1, r3
 8015e18:	d002      	beq.n	8015e20 <__sflush_r+0x90>
 8015e1a:	4628      	mov	r0, r5
 8015e1c:	f7ff fb44 	bl	80154a8 <_free_r>
 8015e20:	2000      	movs	r0, #0
 8015e22:	6360      	str	r0, [r4, #52]	; 0x34
 8015e24:	e7c1      	b.n	8015daa <__sflush_r+0x1a>
 8015e26:	2301      	movs	r3, #1
 8015e28:	4628      	mov	r0, r5
 8015e2a:	47b0      	blx	r6
 8015e2c:	1c41      	adds	r1, r0, #1
 8015e2e:	d1c8      	bne.n	8015dc2 <__sflush_r+0x32>
 8015e30:	682b      	ldr	r3, [r5, #0]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d0c5      	beq.n	8015dc2 <__sflush_r+0x32>
 8015e36:	2b1d      	cmp	r3, #29
 8015e38:	d001      	beq.n	8015e3e <__sflush_r+0xae>
 8015e3a:	2b16      	cmp	r3, #22
 8015e3c:	d101      	bne.n	8015e42 <__sflush_r+0xb2>
 8015e3e:	602f      	str	r7, [r5, #0]
 8015e40:	e7b2      	b.n	8015da8 <__sflush_r+0x18>
 8015e42:	89a3      	ldrh	r3, [r4, #12]
 8015e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e48:	81a3      	strh	r3, [r4, #12]
 8015e4a:	e7ae      	b.n	8015daa <__sflush_r+0x1a>
 8015e4c:	690f      	ldr	r7, [r1, #16]
 8015e4e:	2f00      	cmp	r7, #0
 8015e50:	d0aa      	beq.n	8015da8 <__sflush_r+0x18>
 8015e52:	0793      	lsls	r3, r2, #30
 8015e54:	680e      	ldr	r6, [r1, #0]
 8015e56:	bf08      	it	eq
 8015e58:	694b      	ldreq	r3, [r1, #20]
 8015e5a:	600f      	str	r7, [r1, #0]
 8015e5c:	bf18      	it	ne
 8015e5e:	2300      	movne	r3, #0
 8015e60:	1bf6      	subs	r6, r6, r7
 8015e62:	608b      	str	r3, [r1, #8]
 8015e64:	2e00      	cmp	r6, #0
 8015e66:	dd9f      	ble.n	8015da8 <__sflush_r+0x18>
 8015e68:	6a21      	ldr	r1, [r4, #32]
 8015e6a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015e6e:	4633      	mov	r3, r6
 8015e70:	463a      	mov	r2, r7
 8015e72:	4628      	mov	r0, r5
 8015e74:	47e0      	blx	ip
 8015e76:	2800      	cmp	r0, #0
 8015e78:	dc06      	bgt.n	8015e88 <__sflush_r+0xf8>
 8015e7a:	89a3      	ldrh	r3, [r4, #12]
 8015e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e80:	81a3      	strh	r3, [r4, #12]
 8015e82:	f04f 30ff 	mov.w	r0, #4294967295
 8015e86:	e790      	b.n	8015daa <__sflush_r+0x1a>
 8015e88:	4407      	add	r7, r0
 8015e8a:	1a36      	subs	r6, r6, r0
 8015e8c:	e7ea      	b.n	8015e64 <__sflush_r+0xd4>
 8015e8e:	bf00      	nop
 8015e90:	dfbffffe 	.word	0xdfbffffe

08015e94 <_fflush_r>:
 8015e94:	b538      	push	{r3, r4, r5, lr}
 8015e96:	690b      	ldr	r3, [r1, #16]
 8015e98:	4605      	mov	r5, r0
 8015e9a:	460c      	mov	r4, r1
 8015e9c:	b913      	cbnz	r3, 8015ea4 <_fflush_r+0x10>
 8015e9e:	2500      	movs	r5, #0
 8015ea0:	4628      	mov	r0, r5
 8015ea2:	bd38      	pop	{r3, r4, r5, pc}
 8015ea4:	b118      	cbz	r0, 8015eae <_fflush_r+0x1a>
 8015ea6:	6a03      	ldr	r3, [r0, #32]
 8015ea8:	b90b      	cbnz	r3, 8015eae <_fflush_r+0x1a>
 8015eaa:	f7fe fb9d 	bl	80145e8 <__sinit>
 8015eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d0f3      	beq.n	8015e9e <_fflush_r+0xa>
 8015eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015eb8:	07d0      	lsls	r0, r2, #31
 8015eba:	d404      	bmi.n	8015ec6 <_fflush_r+0x32>
 8015ebc:	0599      	lsls	r1, r3, #22
 8015ebe:	d402      	bmi.n	8015ec6 <_fflush_r+0x32>
 8015ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ec2:	f7fe fc88 	bl	80147d6 <__retarget_lock_acquire_recursive>
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	4621      	mov	r1, r4
 8015eca:	f7ff ff61 	bl	8015d90 <__sflush_r>
 8015ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ed0:	07da      	lsls	r2, r3, #31
 8015ed2:	4605      	mov	r5, r0
 8015ed4:	d4e4      	bmi.n	8015ea0 <_fflush_r+0xc>
 8015ed6:	89a3      	ldrh	r3, [r4, #12]
 8015ed8:	059b      	lsls	r3, r3, #22
 8015eda:	d4e1      	bmi.n	8015ea0 <_fflush_r+0xc>
 8015edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ede:	f7fe fc7b 	bl	80147d8 <__retarget_lock_release_recursive>
 8015ee2:	e7dd      	b.n	8015ea0 <_fflush_r+0xc>

08015ee4 <_sbrk_r>:
 8015ee4:	b538      	push	{r3, r4, r5, lr}
 8015ee6:	4d06      	ldr	r5, [pc, #24]	; (8015f00 <_sbrk_r+0x1c>)
 8015ee8:	2300      	movs	r3, #0
 8015eea:	4604      	mov	r4, r0
 8015eec:	4608      	mov	r0, r1
 8015eee:	602b      	str	r3, [r5, #0]
 8015ef0:	f7ec f970 	bl	80021d4 <_sbrk>
 8015ef4:	1c43      	adds	r3, r0, #1
 8015ef6:	d102      	bne.n	8015efe <_sbrk_r+0x1a>
 8015ef8:	682b      	ldr	r3, [r5, #0]
 8015efa:	b103      	cbz	r3, 8015efe <_sbrk_r+0x1a>
 8015efc:	6023      	str	r3, [r4, #0]
 8015efe:	bd38      	pop	{r3, r4, r5, pc}
 8015f00:	200019f8 	.word	0x200019f8

08015f04 <memcpy>:
 8015f04:	440a      	add	r2, r1
 8015f06:	4291      	cmp	r1, r2
 8015f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f0c:	d100      	bne.n	8015f10 <memcpy+0xc>
 8015f0e:	4770      	bx	lr
 8015f10:	b510      	push	{r4, lr}
 8015f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f1a:	4291      	cmp	r1, r2
 8015f1c:	d1f9      	bne.n	8015f12 <memcpy+0xe>
 8015f1e:	bd10      	pop	{r4, pc}

08015f20 <__assert_func>:
 8015f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f22:	4614      	mov	r4, r2
 8015f24:	461a      	mov	r2, r3
 8015f26:	4b09      	ldr	r3, [pc, #36]	; (8015f4c <__assert_func+0x2c>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	4605      	mov	r5, r0
 8015f2c:	68d8      	ldr	r0, [r3, #12]
 8015f2e:	b14c      	cbz	r4, 8015f44 <__assert_func+0x24>
 8015f30:	4b07      	ldr	r3, [pc, #28]	; (8015f50 <__assert_func+0x30>)
 8015f32:	9100      	str	r1, [sp, #0]
 8015f34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f38:	4906      	ldr	r1, [pc, #24]	; (8015f54 <__assert_func+0x34>)
 8015f3a:	462b      	mov	r3, r5
 8015f3c:	f000 f842 	bl	8015fc4 <fiprintf>
 8015f40:	f000 f852 	bl	8015fe8 <abort>
 8015f44:	4b04      	ldr	r3, [pc, #16]	; (8015f58 <__assert_func+0x38>)
 8015f46:	461c      	mov	r4, r3
 8015f48:	e7f3      	b.n	8015f32 <__assert_func+0x12>
 8015f4a:	bf00      	nop
 8015f4c:	20000160 	.word	0x20000160
 8015f50:	08017796 	.word	0x08017796
 8015f54:	080177a3 	.word	0x080177a3
 8015f58:	080177d1 	.word	0x080177d1

08015f5c <_calloc_r>:
 8015f5c:	b570      	push	{r4, r5, r6, lr}
 8015f5e:	fba1 5402 	umull	r5, r4, r1, r2
 8015f62:	b934      	cbnz	r4, 8015f72 <_calloc_r+0x16>
 8015f64:	4629      	mov	r1, r5
 8015f66:	f7ff fb11 	bl	801558c <_malloc_r>
 8015f6a:	4606      	mov	r6, r0
 8015f6c:	b928      	cbnz	r0, 8015f7a <_calloc_r+0x1e>
 8015f6e:	4630      	mov	r0, r6
 8015f70:	bd70      	pop	{r4, r5, r6, pc}
 8015f72:	220c      	movs	r2, #12
 8015f74:	6002      	str	r2, [r0, #0]
 8015f76:	2600      	movs	r6, #0
 8015f78:	e7f9      	b.n	8015f6e <_calloc_r+0x12>
 8015f7a:	462a      	mov	r2, r5
 8015f7c:	4621      	mov	r1, r4
 8015f7e:	f7fe fbac 	bl	80146da <memset>
 8015f82:	e7f4      	b.n	8015f6e <_calloc_r+0x12>

08015f84 <__ascii_mbtowc>:
 8015f84:	b082      	sub	sp, #8
 8015f86:	b901      	cbnz	r1, 8015f8a <__ascii_mbtowc+0x6>
 8015f88:	a901      	add	r1, sp, #4
 8015f8a:	b142      	cbz	r2, 8015f9e <__ascii_mbtowc+0x1a>
 8015f8c:	b14b      	cbz	r3, 8015fa2 <__ascii_mbtowc+0x1e>
 8015f8e:	7813      	ldrb	r3, [r2, #0]
 8015f90:	600b      	str	r3, [r1, #0]
 8015f92:	7812      	ldrb	r2, [r2, #0]
 8015f94:	1e10      	subs	r0, r2, #0
 8015f96:	bf18      	it	ne
 8015f98:	2001      	movne	r0, #1
 8015f9a:	b002      	add	sp, #8
 8015f9c:	4770      	bx	lr
 8015f9e:	4610      	mov	r0, r2
 8015fa0:	e7fb      	b.n	8015f9a <__ascii_mbtowc+0x16>
 8015fa2:	f06f 0001 	mvn.w	r0, #1
 8015fa6:	e7f8      	b.n	8015f9a <__ascii_mbtowc+0x16>

08015fa8 <__ascii_wctomb>:
 8015fa8:	4603      	mov	r3, r0
 8015faa:	4608      	mov	r0, r1
 8015fac:	b141      	cbz	r1, 8015fc0 <__ascii_wctomb+0x18>
 8015fae:	2aff      	cmp	r2, #255	; 0xff
 8015fb0:	d904      	bls.n	8015fbc <__ascii_wctomb+0x14>
 8015fb2:	228a      	movs	r2, #138	; 0x8a
 8015fb4:	601a      	str	r2, [r3, #0]
 8015fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8015fba:	4770      	bx	lr
 8015fbc:	700a      	strb	r2, [r1, #0]
 8015fbe:	2001      	movs	r0, #1
 8015fc0:	4770      	bx	lr
	...

08015fc4 <fiprintf>:
 8015fc4:	b40e      	push	{r1, r2, r3}
 8015fc6:	b503      	push	{r0, r1, lr}
 8015fc8:	4601      	mov	r1, r0
 8015fca:	ab03      	add	r3, sp, #12
 8015fcc:	4805      	ldr	r0, [pc, #20]	; (8015fe4 <fiprintf+0x20>)
 8015fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fd2:	6800      	ldr	r0, [r0, #0]
 8015fd4:	9301      	str	r3, [sp, #4]
 8015fd6:	f000 f835 	bl	8016044 <_vfiprintf_r>
 8015fda:	b002      	add	sp, #8
 8015fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fe0:	b003      	add	sp, #12
 8015fe2:	4770      	bx	lr
 8015fe4:	20000160 	.word	0x20000160

08015fe8 <abort>:
 8015fe8:	b508      	push	{r3, lr}
 8015fea:	2006      	movs	r0, #6
 8015fec:	f000 fa02 	bl	80163f4 <raise>
 8015ff0:	2001      	movs	r0, #1
 8015ff2:	f7ec f8bf 	bl	8002174 <_exit>

08015ff6 <__sfputc_r>:
 8015ff6:	6893      	ldr	r3, [r2, #8]
 8015ff8:	3b01      	subs	r3, #1
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	b410      	push	{r4}
 8015ffe:	6093      	str	r3, [r2, #8]
 8016000:	da07      	bge.n	8016012 <__sfputc_r+0x1c>
 8016002:	6994      	ldr	r4, [r2, #24]
 8016004:	42a3      	cmp	r3, r4
 8016006:	db01      	blt.n	801600c <__sfputc_r+0x16>
 8016008:	290a      	cmp	r1, #10
 801600a:	d102      	bne.n	8016012 <__sfputc_r+0x1c>
 801600c:	bc10      	pop	{r4}
 801600e:	f000 b933 	b.w	8016278 <__swbuf_r>
 8016012:	6813      	ldr	r3, [r2, #0]
 8016014:	1c58      	adds	r0, r3, #1
 8016016:	6010      	str	r0, [r2, #0]
 8016018:	7019      	strb	r1, [r3, #0]
 801601a:	4608      	mov	r0, r1
 801601c:	bc10      	pop	{r4}
 801601e:	4770      	bx	lr

08016020 <__sfputs_r>:
 8016020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016022:	4606      	mov	r6, r0
 8016024:	460f      	mov	r7, r1
 8016026:	4614      	mov	r4, r2
 8016028:	18d5      	adds	r5, r2, r3
 801602a:	42ac      	cmp	r4, r5
 801602c:	d101      	bne.n	8016032 <__sfputs_r+0x12>
 801602e:	2000      	movs	r0, #0
 8016030:	e007      	b.n	8016042 <__sfputs_r+0x22>
 8016032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016036:	463a      	mov	r2, r7
 8016038:	4630      	mov	r0, r6
 801603a:	f7ff ffdc 	bl	8015ff6 <__sfputc_r>
 801603e:	1c43      	adds	r3, r0, #1
 8016040:	d1f3      	bne.n	801602a <__sfputs_r+0xa>
 8016042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016044 <_vfiprintf_r>:
 8016044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016048:	460d      	mov	r5, r1
 801604a:	b09d      	sub	sp, #116	; 0x74
 801604c:	4614      	mov	r4, r2
 801604e:	4698      	mov	r8, r3
 8016050:	4606      	mov	r6, r0
 8016052:	b118      	cbz	r0, 801605c <_vfiprintf_r+0x18>
 8016054:	6a03      	ldr	r3, [r0, #32]
 8016056:	b90b      	cbnz	r3, 801605c <_vfiprintf_r+0x18>
 8016058:	f7fe fac6 	bl	80145e8 <__sinit>
 801605c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801605e:	07d9      	lsls	r1, r3, #31
 8016060:	d405      	bmi.n	801606e <_vfiprintf_r+0x2a>
 8016062:	89ab      	ldrh	r3, [r5, #12]
 8016064:	059a      	lsls	r2, r3, #22
 8016066:	d402      	bmi.n	801606e <_vfiprintf_r+0x2a>
 8016068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801606a:	f7fe fbb4 	bl	80147d6 <__retarget_lock_acquire_recursive>
 801606e:	89ab      	ldrh	r3, [r5, #12]
 8016070:	071b      	lsls	r3, r3, #28
 8016072:	d501      	bpl.n	8016078 <_vfiprintf_r+0x34>
 8016074:	692b      	ldr	r3, [r5, #16]
 8016076:	b99b      	cbnz	r3, 80160a0 <_vfiprintf_r+0x5c>
 8016078:	4629      	mov	r1, r5
 801607a:	4630      	mov	r0, r6
 801607c:	f000 f93a 	bl	80162f4 <__swsetup_r>
 8016080:	b170      	cbz	r0, 80160a0 <_vfiprintf_r+0x5c>
 8016082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016084:	07dc      	lsls	r4, r3, #31
 8016086:	d504      	bpl.n	8016092 <_vfiprintf_r+0x4e>
 8016088:	f04f 30ff 	mov.w	r0, #4294967295
 801608c:	b01d      	add	sp, #116	; 0x74
 801608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016092:	89ab      	ldrh	r3, [r5, #12]
 8016094:	0598      	lsls	r0, r3, #22
 8016096:	d4f7      	bmi.n	8016088 <_vfiprintf_r+0x44>
 8016098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801609a:	f7fe fb9d 	bl	80147d8 <__retarget_lock_release_recursive>
 801609e:	e7f3      	b.n	8016088 <_vfiprintf_r+0x44>
 80160a0:	2300      	movs	r3, #0
 80160a2:	9309      	str	r3, [sp, #36]	; 0x24
 80160a4:	2320      	movs	r3, #32
 80160a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80160ae:	2330      	movs	r3, #48	; 0x30
 80160b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016264 <_vfiprintf_r+0x220>
 80160b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160b8:	f04f 0901 	mov.w	r9, #1
 80160bc:	4623      	mov	r3, r4
 80160be:	469a      	mov	sl, r3
 80160c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160c4:	b10a      	cbz	r2, 80160ca <_vfiprintf_r+0x86>
 80160c6:	2a25      	cmp	r2, #37	; 0x25
 80160c8:	d1f9      	bne.n	80160be <_vfiprintf_r+0x7a>
 80160ca:	ebba 0b04 	subs.w	fp, sl, r4
 80160ce:	d00b      	beq.n	80160e8 <_vfiprintf_r+0xa4>
 80160d0:	465b      	mov	r3, fp
 80160d2:	4622      	mov	r2, r4
 80160d4:	4629      	mov	r1, r5
 80160d6:	4630      	mov	r0, r6
 80160d8:	f7ff ffa2 	bl	8016020 <__sfputs_r>
 80160dc:	3001      	adds	r0, #1
 80160de:	f000 80a9 	beq.w	8016234 <_vfiprintf_r+0x1f0>
 80160e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160e4:	445a      	add	r2, fp
 80160e6:	9209      	str	r2, [sp, #36]	; 0x24
 80160e8:	f89a 3000 	ldrb.w	r3, [sl]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	f000 80a1 	beq.w	8016234 <_vfiprintf_r+0x1f0>
 80160f2:	2300      	movs	r3, #0
 80160f4:	f04f 32ff 	mov.w	r2, #4294967295
 80160f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80160fc:	f10a 0a01 	add.w	sl, sl, #1
 8016100:	9304      	str	r3, [sp, #16]
 8016102:	9307      	str	r3, [sp, #28]
 8016104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016108:	931a      	str	r3, [sp, #104]	; 0x68
 801610a:	4654      	mov	r4, sl
 801610c:	2205      	movs	r2, #5
 801610e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016112:	4854      	ldr	r0, [pc, #336]	; (8016264 <_vfiprintf_r+0x220>)
 8016114:	f7ea f834 	bl	8000180 <memchr>
 8016118:	9a04      	ldr	r2, [sp, #16]
 801611a:	b9d8      	cbnz	r0, 8016154 <_vfiprintf_r+0x110>
 801611c:	06d1      	lsls	r1, r2, #27
 801611e:	bf44      	itt	mi
 8016120:	2320      	movmi	r3, #32
 8016122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016126:	0713      	lsls	r3, r2, #28
 8016128:	bf44      	itt	mi
 801612a:	232b      	movmi	r3, #43	; 0x2b
 801612c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016130:	f89a 3000 	ldrb.w	r3, [sl]
 8016134:	2b2a      	cmp	r3, #42	; 0x2a
 8016136:	d015      	beq.n	8016164 <_vfiprintf_r+0x120>
 8016138:	9a07      	ldr	r2, [sp, #28]
 801613a:	4654      	mov	r4, sl
 801613c:	2000      	movs	r0, #0
 801613e:	f04f 0c0a 	mov.w	ip, #10
 8016142:	4621      	mov	r1, r4
 8016144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016148:	3b30      	subs	r3, #48	; 0x30
 801614a:	2b09      	cmp	r3, #9
 801614c:	d94d      	bls.n	80161ea <_vfiprintf_r+0x1a6>
 801614e:	b1b0      	cbz	r0, 801617e <_vfiprintf_r+0x13a>
 8016150:	9207      	str	r2, [sp, #28]
 8016152:	e014      	b.n	801617e <_vfiprintf_r+0x13a>
 8016154:	eba0 0308 	sub.w	r3, r0, r8
 8016158:	fa09 f303 	lsl.w	r3, r9, r3
 801615c:	4313      	orrs	r3, r2
 801615e:	9304      	str	r3, [sp, #16]
 8016160:	46a2      	mov	sl, r4
 8016162:	e7d2      	b.n	801610a <_vfiprintf_r+0xc6>
 8016164:	9b03      	ldr	r3, [sp, #12]
 8016166:	1d19      	adds	r1, r3, #4
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	9103      	str	r1, [sp, #12]
 801616c:	2b00      	cmp	r3, #0
 801616e:	bfbb      	ittet	lt
 8016170:	425b      	neglt	r3, r3
 8016172:	f042 0202 	orrlt.w	r2, r2, #2
 8016176:	9307      	strge	r3, [sp, #28]
 8016178:	9307      	strlt	r3, [sp, #28]
 801617a:	bfb8      	it	lt
 801617c:	9204      	strlt	r2, [sp, #16]
 801617e:	7823      	ldrb	r3, [r4, #0]
 8016180:	2b2e      	cmp	r3, #46	; 0x2e
 8016182:	d10c      	bne.n	801619e <_vfiprintf_r+0x15a>
 8016184:	7863      	ldrb	r3, [r4, #1]
 8016186:	2b2a      	cmp	r3, #42	; 0x2a
 8016188:	d134      	bne.n	80161f4 <_vfiprintf_r+0x1b0>
 801618a:	9b03      	ldr	r3, [sp, #12]
 801618c:	1d1a      	adds	r2, r3, #4
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	9203      	str	r2, [sp, #12]
 8016192:	2b00      	cmp	r3, #0
 8016194:	bfb8      	it	lt
 8016196:	f04f 33ff 	movlt.w	r3, #4294967295
 801619a:	3402      	adds	r4, #2
 801619c:	9305      	str	r3, [sp, #20]
 801619e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016268 <_vfiprintf_r+0x224>
 80161a2:	7821      	ldrb	r1, [r4, #0]
 80161a4:	2203      	movs	r2, #3
 80161a6:	4650      	mov	r0, sl
 80161a8:	f7e9 ffea 	bl	8000180 <memchr>
 80161ac:	b138      	cbz	r0, 80161be <_vfiprintf_r+0x17a>
 80161ae:	9b04      	ldr	r3, [sp, #16]
 80161b0:	eba0 000a 	sub.w	r0, r0, sl
 80161b4:	2240      	movs	r2, #64	; 0x40
 80161b6:	4082      	lsls	r2, r0
 80161b8:	4313      	orrs	r3, r2
 80161ba:	3401      	adds	r4, #1
 80161bc:	9304      	str	r3, [sp, #16]
 80161be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161c2:	482a      	ldr	r0, [pc, #168]	; (801626c <_vfiprintf_r+0x228>)
 80161c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161c8:	2206      	movs	r2, #6
 80161ca:	f7e9 ffd9 	bl	8000180 <memchr>
 80161ce:	2800      	cmp	r0, #0
 80161d0:	d03f      	beq.n	8016252 <_vfiprintf_r+0x20e>
 80161d2:	4b27      	ldr	r3, [pc, #156]	; (8016270 <_vfiprintf_r+0x22c>)
 80161d4:	bb1b      	cbnz	r3, 801621e <_vfiprintf_r+0x1da>
 80161d6:	9b03      	ldr	r3, [sp, #12]
 80161d8:	3307      	adds	r3, #7
 80161da:	f023 0307 	bic.w	r3, r3, #7
 80161de:	3308      	adds	r3, #8
 80161e0:	9303      	str	r3, [sp, #12]
 80161e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161e4:	443b      	add	r3, r7
 80161e6:	9309      	str	r3, [sp, #36]	; 0x24
 80161e8:	e768      	b.n	80160bc <_vfiprintf_r+0x78>
 80161ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80161ee:	460c      	mov	r4, r1
 80161f0:	2001      	movs	r0, #1
 80161f2:	e7a6      	b.n	8016142 <_vfiprintf_r+0xfe>
 80161f4:	2300      	movs	r3, #0
 80161f6:	3401      	adds	r4, #1
 80161f8:	9305      	str	r3, [sp, #20]
 80161fa:	4619      	mov	r1, r3
 80161fc:	f04f 0c0a 	mov.w	ip, #10
 8016200:	4620      	mov	r0, r4
 8016202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016206:	3a30      	subs	r2, #48	; 0x30
 8016208:	2a09      	cmp	r2, #9
 801620a:	d903      	bls.n	8016214 <_vfiprintf_r+0x1d0>
 801620c:	2b00      	cmp	r3, #0
 801620e:	d0c6      	beq.n	801619e <_vfiprintf_r+0x15a>
 8016210:	9105      	str	r1, [sp, #20]
 8016212:	e7c4      	b.n	801619e <_vfiprintf_r+0x15a>
 8016214:	fb0c 2101 	mla	r1, ip, r1, r2
 8016218:	4604      	mov	r4, r0
 801621a:	2301      	movs	r3, #1
 801621c:	e7f0      	b.n	8016200 <_vfiprintf_r+0x1bc>
 801621e:	ab03      	add	r3, sp, #12
 8016220:	9300      	str	r3, [sp, #0]
 8016222:	462a      	mov	r2, r5
 8016224:	4b13      	ldr	r3, [pc, #76]	; (8016274 <_vfiprintf_r+0x230>)
 8016226:	a904      	add	r1, sp, #16
 8016228:	4630      	mov	r0, r6
 801622a:	f7fd fd95 	bl	8013d58 <_printf_float>
 801622e:	4607      	mov	r7, r0
 8016230:	1c78      	adds	r0, r7, #1
 8016232:	d1d6      	bne.n	80161e2 <_vfiprintf_r+0x19e>
 8016234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016236:	07d9      	lsls	r1, r3, #31
 8016238:	d405      	bmi.n	8016246 <_vfiprintf_r+0x202>
 801623a:	89ab      	ldrh	r3, [r5, #12]
 801623c:	059a      	lsls	r2, r3, #22
 801623e:	d402      	bmi.n	8016246 <_vfiprintf_r+0x202>
 8016240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016242:	f7fe fac9 	bl	80147d8 <__retarget_lock_release_recursive>
 8016246:	89ab      	ldrh	r3, [r5, #12]
 8016248:	065b      	lsls	r3, r3, #25
 801624a:	f53f af1d 	bmi.w	8016088 <_vfiprintf_r+0x44>
 801624e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016250:	e71c      	b.n	801608c <_vfiprintf_r+0x48>
 8016252:	ab03      	add	r3, sp, #12
 8016254:	9300      	str	r3, [sp, #0]
 8016256:	462a      	mov	r2, r5
 8016258:	4b06      	ldr	r3, [pc, #24]	; (8016274 <_vfiprintf_r+0x230>)
 801625a:	a904      	add	r1, sp, #16
 801625c:	4630      	mov	r0, r6
 801625e:	f7fe f815 	bl	801428c <_printf_i>
 8016262:	e7e4      	b.n	801622e <_vfiprintf_r+0x1ea>
 8016264:	080178d3 	.word	0x080178d3
 8016268:	080178d9 	.word	0x080178d9
 801626c:	080178dd 	.word	0x080178dd
 8016270:	08013d59 	.word	0x08013d59
 8016274:	08016021 	.word	0x08016021

08016278 <__swbuf_r>:
 8016278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801627a:	460e      	mov	r6, r1
 801627c:	4614      	mov	r4, r2
 801627e:	4605      	mov	r5, r0
 8016280:	b118      	cbz	r0, 801628a <__swbuf_r+0x12>
 8016282:	6a03      	ldr	r3, [r0, #32]
 8016284:	b90b      	cbnz	r3, 801628a <__swbuf_r+0x12>
 8016286:	f7fe f9af 	bl	80145e8 <__sinit>
 801628a:	69a3      	ldr	r3, [r4, #24]
 801628c:	60a3      	str	r3, [r4, #8]
 801628e:	89a3      	ldrh	r3, [r4, #12]
 8016290:	071a      	lsls	r2, r3, #28
 8016292:	d525      	bpl.n	80162e0 <__swbuf_r+0x68>
 8016294:	6923      	ldr	r3, [r4, #16]
 8016296:	b31b      	cbz	r3, 80162e0 <__swbuf_r+0x68>
 8016298:	6823      	ldr	r3, [r4, #0]
 801629a:	6922      	ldr	r2, [r4, #16]
 801629c:	1a98      	subs	r0, r3, r2
 801629e:	6963      	ldr	r3, [r4, #20]
 80162a0:	b2f6      	uxtb	r6, r6
 80162a2:	4283      	cmp	r3, r0
 80162a4:	4637      	mov	r7, r6
 80162a6:	dc04      	bgt.n	80162b2 <__swbuf_r+0x3a>
 80162a8:	4621      	mov	r1, r4
 80162aa:	4628      	mov	r0, r5
 80162ac:	f7ff fdf2 	bl	8015e94 <_fflush_r>
 80162b0:	b9e0      	cbnz	r0, 80162ec <__swbuf_r+0x74>
 80162b2:	68a3      	ldr	r3, [r4, #8]
 80162b4:	3b01      	subs	r3, #1
 80162b6:	60a3      	str	r3, [r4, #8]
 80162b8:	6823      	ldr	r3, [r4, #0]
 80162ba:	1c5a      	adds	r2, r3, #1
 80162bc:	6022      	str	r2, [r4, #0]
 80162be:	701e      	strb	r6, [r3, #0]
 80162c0:	6962      	ldr	r2, [r4, #20]
 80162c2:	1c43      	adds	r3, r0, #1
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d004      	beq.n	80162d2 <__swbuf_r+0x5a>
 80162c8:	89a3      	ldrh	r3, [r4, #12]
 80162ca:	07db      	lsls	r3, r3, #31
 80162cc:	d506      	bpl.n	80162dc <__swbuf_r+0x64>
 80162ce:	2e0a      	cmp	r6, #10
 80162d0:	d104      	bne.n	80162dc <__swbuf_r+0x64>
 80162d2:	4621      	mov	r1, r4
 80162d4:	4628      	mov	r0, r5
 80162d6:	f7ff fddd 	bl	8015e94 <_fflush_r>
 80162da:	b938      	cbnz	r0, 80162ec <__swbuf_r+0x74>
 80162dc:	4638      	mov	r0, r7
 80162de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162e0:	4621      	mov	r1, r4
 80162e2:	4628      	mov	r0, r5
 80162e4:	f000 f806 	bl	80162f4 <__swsetup_r>
 80162e8:	2800      	cmp	r0, #0
 80162ea:	d0d5      	beq.n	8016298 <__swbuf_r+0x20>
 80162ec:	f04f 37ff 	mov.w	r7, #4294967295
 80162f0:	e7f4      	b.n	80162dc <__swbuf_r+0x64>
	...

080162f4 <__swsetup_r>:
 80162f4:	b538      	push	{r3, r4, r5, lr}
 80162f6:	4b2a      	ldr	r3, [pc, #168]	; (80163a0 <__swsetup_r+0xac>)
 80162f8:	4605      	mov	r5, r0
 80162fa:	6818      	ldr	r0, [r3, #0]
 80162fc:	460c      	mov	r4, r1
 80162fe:	b118      	cbz	r0, 8016308 <__swsetup_r+0x14>
 8016300:	6a03      	ldr	r3, [r0, #32]
 8016302:	b90b      	cbnz	r3, 8016308 <__swsetup_r+0x14>
 8016304:	f7fe f970 	bl	80145e8 <__sinit>
 8016308:	89a3      	ldrh	r3, [r4, #12]
 801630a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801630e:	0718      	lsls	r0, r3, #28
 8016310:	d422      	bmi.n	8016358 <__swsetup_r+0x64>
 8016312:	06d9      	lsls	r1, r3, #27
 8016314:	d407      	bmi.n	8016326 <__swsetup_r+0x32>
 8016316:	2309      	movs	r3, #9
 8016318:	602b      	str	r3, [r5, #0]
 801631a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801631e:	81a3      	strh	r3, [r4, #12]
 8016320:	f04f 30ff 	mov.w	r0, #4294967295
 8016324:	e034      	b.n	8016390 <__swsetup_r+0x9c>
 8016326:	0758      	lsls	r0, r3, #29
 8016328:	d512      	bpl.n	8016350 <__swsetup_r+0x5c>
 801632a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801632c:	b141      	cbz	r1, 8016340 <__swsetup_r+0x4c>
 801632e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016332:	4299      	cmp	r1, r3
 8016334:	d002      	beq.n	801633c <__swsetup_r+0x48>
 8016336:	4628      	mov	r0, r5
 8016338:	f7ff f8b6 	bl	80154a8 <_free_r>
 801633c:	2300      	movs	r3, #0
 801633e:	6363      	str	r3, [r4, #52]	; 0x34
 8016340:	89a3      	ldrh	r3, [r4, #12]
 8016342:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016346:	81a3      	strh	r3, [r4, #12]
 8016348:	2300      	movs	r3, #0
 801634a:	6063      	str	r3, [r4, #4]
 801634c:	6923      	ldr	r3, [r4, #16]
 801634e:	6023      	str	r3, [r4, #0]
 8016350:	89a3      	ldrh	r3, [r4, #12]
 8016352:	f043 0308 	orr.w	r3, r3, #8
 8016356:	81a3      	strh	r3, [r4, #12]
 8016358:	6923      	ldr	r3, [r4, #16]
 801635a:	b94b      	cbnz	r3, 8016370 <__swsetup_r+0x7c>
 801635c:	89a3      	ldrh	r3, [r4, #12]
 801635e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016366:	d003      	beq.n	8016370 <__swsetup_r+0x7c>
 8016368:	4621      	mov	r1, r4
 801636a:	4628      	mov	r0, r5
 801636c:	f000 f884 	bl	8016478 <__smakebuf_r>
 8016370:	89a0      	ldrh	r0, [r4, #12]
 8016372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016376:	f010 0301 	ands.w	r3, r0, #1
 801637a:	d00a      	beq.n	8016392 <__swsetup_r+0x9e>
 801637c:	2300      	movs	r3, #0
 801637e:	60a3      	str	r3, [r4, #8]
 8016380:	6963      	ldr	r3, [r4, #20]
 8016382:	425b      	negs	r3, r3
 8016384:	61a3      	str	r3, [r4, #24]
 8016386:	6923      	ldr	r3, [r4, #16]
 8016388:	b943      	cbnz	r3, 801639c <__swsetup_r+0xa8>
 801638a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801638e:	d1c4      	bne.n	801631a <__swsetup_r+0x26>
 8016390:	bd38      	pop	{r3, r4, r5, pc}
 8016392:	0781      	lsls	r1, r0, #30
 8016394:	bf58      	it	pl
 8016396:	6963      	ldrpl	r3, [r4, #20]
 8016398:	60a3      	str	r3, [r4, #8]
 801639a:	e7f4      	b.n	8016386 <__swsetup_r+0x92>
 801639c:	2000      	movs	r0, #0
 801639e:	e7f7      	b.n	8016390 <__swsetup_r+0x9c>
 80163a0:	20000160 	.word	0x20000160

080163a4 <_raise_r>:
 80163a4:	291f      	cmp	r1, #31
 80163a6:	b538      	push	{r3, r4, r5, lr}
 80163a8:	4604      	mov	r4, r0
 80163aa:	460d      	mov	r5, r1
 80163ac:	d904      	bls.n	80163b8 <_raise_r+0x14>
 80163ae:	2316      	movs	r3, #22
 80163b0:	6003      	str	r3, [r0, #0]
 80163b2:	f04f 30ff 	mov.w	r0, #4294967295
 80163b6:	bd38      	pop	{r3, r4, r5, pc}
 80163b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80163ba:	b112      	cbz	r2, 80163c2 <_raise_r+0x1e>
 80163bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80163c0:	b94b      	cbnz	r3, 80163d6 <_raise_r+0x32>
 80163c2:	4620      	mov	r0, r4
 80163c4:	f000 f830 	bl	8016428 <_getpid_r>
 80163c8:	462a      	mov	r2, r5
 80163ca:	4601      	mov	r1, r0
 80163cc:	4620      	mov	r0, r4
 80163ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163d2:	f000 b817 	b.w	8016404 <_kill_r>
 80163d6:	2b01      	cmp	r3, #1
 80163d8:	d00a      	beq.n	80163f0 <_raise_r+0x4c>
 80163da:	1c59      	adds	r1, r3, #1
 80163dc:	d103      	bne.n	80163e6 <_raise_r+0x42>
 80163de:	2316      	movs	r3, #22
 80163e0:	6003      	str	r3, [r0, #0]
 80163e2:	2001      	movs	r0, #1
 80163e4:	e7e7      	b.n	80163b6 <_raise_r+0x12>
 80163e6:	2400      	movs	r4, #0
 80163e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80163ec:	4628      	mov	r0, r5
 80163ee:	4798      	blx	r3
 80163f0:	2000      	movs	r0, #0
 80163f2:	e7e0      	b.n	80163b6 <_raise_r+0x12>

080163f4 <raise>:
 80163f4:	4b02      	ldr	r3, [pc, #8]	; (8016400 <raise+0xc>)
 80163f6:	4601      	mov	r1, r0
 80163f8:	6818      	ldr	r0, [r3, #0]
 80163fa:	f7ff bfd3 	b.w	80163a4 <_raise_r>
 80163fe:	bf00      	nop
 8016400:	20000160 	.word	0x20000160

08016404 <_kill_r>:
 8016404:	b538      	push	{r3, r4, r5, lr}
 8016406:	4d07      	ldr	r5, [pc, #28]	; (8016424 <_kill_r+0x20>)
 8016408:	2300      	movs	r3, #0
 801640a:	4604      	mov	r4, r0
 801640c:	4608      	mov	r0, r1
 801640e:	4611      	mov	r1, r2
 8016410:	602b      	str	r3, [r5, #0]
 8016412:	f7eb fea7 	bl	8002164 <_kill>
 8016416:	1c43      	adds	r3, r0, #1
 8016418:	d102      	bne.n	8016420 <_kill_r+0x1c>
 801641a:	682b      	ldr	r3, [r5, #0]
 801641c:	b103      	cbz	r3, 8016420 <_kill_r+0x1c>
 801641e:	6023      	str	r3, [r4, #0]
 8016420:	bd38      	pop	{r3, r4, r5, pc}
 8016422:	bf00      	nop
 8016424:	200019f8 	.word	0x200019f8

08016428 <_getpid_r>:
 8016428:	f7eb be9a 	b.w	8002160 <_getpid>

0801642c <__swhatbuf_r>:
 801642c:	b570      	push	{r4, r5, r6, lr}
 801642e:	460c      	mov	r4, r1
 8016430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016434:	2900      	cmp	r1, #0
 8016436:	b096      	sub	sp, #88	; 0x58
 8016438:	4615      	mov	r5, r2
 801643a:	461e      	mov	r6, r3
 801643c:	da0d      	bge.n	801645a <__swhatbuf_r+0x2e>
 801643e:	89a3      	ldrh	r3, [r4, #12]
 8016440:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016444:	f04f 0100 	mov.w	r1, #0
 8016448:	bf0c      	ite	eq
 801644a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801644e:	2340      	movne	r3, #64	; 0x40
 8016450:	2000      	movs	r0, #0
 8016452:	6031      	str	r1, [r6, #0]
 8016454:	602b      	str	r3, [r5, #0]
 8016456:	b016      	add	sp, #88	; 0x58
 8016458:	bd70      	pop	{r4, r5, r6, pc}
 801645a:	466a      	mov	r2, sp
 801645c:	f000 f848 	bl	80164f0 <_fstat_r>
 8016460:	2800      	cmp	r0, #0
 8016462:	dbec      	blt.n	801643e <__swhatbuf_r+0x12>
 8016464:	9901      	ldr	r1, [sp, #4]
 8016466:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801646a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801646e:	4259      	negs	r1, r3
 8016470:	4159      	adcs	r1, r3
 8016472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016476:	e7eb      	b.n	8016450 <__swhatbuf_r+0x24>

08016478 <__smakebuf_r>:
 8016478:	898b      	ldrh	r3, [r1, #12]
 801647a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801647c:	079d      	lsls	r5, r3, #30
 801647e:	4606      	mov	r6, r0
 8016480:	460c      	mov	r4, r1
 8016482:	d507      	bpl.n	8016494 <__smakebuf_r+0x1c>
 8016484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016488:	6023      	str	r3, [r4, #0]
 801648a:	6123      	str	r3, [r4, #16]
 801648c:	2301      	movs	r3, #1
 801648e:	6163      	str	r3, [r4, #20]
 8016490:	b002      	add	sp, #8
 8016492:	bd70      	pop	{r4, r5, r6, pc}
 8016494:	ab01      	add	r3, sp, #4
 8016496:	466a      	mov	r2, sp
 8016498:	f7ff ffc8 	bl	801642c <__swhatbuf_r>
 801649c:	9900      	ldr	r1, [sp, #0]
 801649e:	4605      	mov	r5, r0
 80164a0:	4630      	mov	r0, r6
 80164a2:	f7ff f873 	bl	801558c <_malloc_r>
 80164a6:	b948      	cbnz	r0, 80164bc <__smakebuf_r+0x44>
 80164a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164ac:	059a      	lsls	r2, r3, #22
 80164ae:	d4ef      	bmi.n	8016490 <__smakebuf_r+0x18>
 80164b0:	f023 0303 	bic.w	r3, r3, #3
 80164b4:	f043 0302 	orr.w	r3, r3, #2
 80164b8:	81a3      	strh	r3, [r4, #12]
 80164ba:	e7e3      	b.n	8016484 <__smakebuf_r+0xc>
 80164bc:	89a3      	ldrh	r3, [r4, #12]
 80164be:	6020      	str	r0, [r4, #0]
 80164c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164c4:	81a3      	strh	r3, [r4, #12]
 80164c6:	9b00      	ldr	r3, [sp, #0]
 80164c8:	6163      	str	r3, [r4, #20]
 80164ca:	9b01      	ldr	r3, [sp, #4]
 80164cc:	6120      	str	r0, [r4, #16]
 80164ce:	b15b      	cbz	r3, 80164e8 <__smakebuf_r+0x70>
 80164d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164d4:	4630      	mov	r0, r6
 80164d6:	f000 f81d 	bl	8016514 <_isatty_r>
 80164da:	b128      	cbz	r0, 80164e8 <__smakebuf_r+0x70>
 80164dc:	89a3      	ldrh	r3, [r4, #12]
 80164de:	f023 0303 	bic.w	r3, r3, #3
 80164e2:	f043 0301 	orr.w	r3, r3, #1
 80164e6:	81a3      	strh	r3, [r4, #12]
 80164e8:	89a3      	ldrh	r3, [r4, #12]
 80164ea:	431d      	orrs	r5, r3
 80164ec:	81a5      	strh	r5, [r4, #12]
 80164ee:	e7cf      	b.n	8016490 <__smakebuf_r+0x18>

080164f0 <_fstat_r>:
 80164f0:	b538      	push	{r3, r4, r5, lr}
 80164f2:	4d07      	ldr	r5, [pc, #28]	; (8016510 <_fstat_r+0x20>)
 80164f4:	2300      	movs	r3, #0
 80164f6:	4604      	mov	r4, r0
 80164f8:	4608      	mov	r0, r1
 80164fa:	4611      	mov	r1, r2
 80164fc:	602b      	str	r3, [r5, #0]
 80164fe:	f7eb fe60 	bl	80021c2 <_fstat>
 8016502:	1c43      	adds	r3, r0, #1
 8016504:	d102      	bne.n	801650c <_fstat_r+0x1c>
 8016506:	682b      	ldr	r3, [r5, #0]
 8016508:	b103      	cbz	r3, 801650c <_fstat_r+0x1c>
 801650a:	6023      	str	r3, [r4, #0]
 801650c:	bd38      	pop	{r3, r4, r5, pc}
 801650e:	bf00      	nop
 8016510:	200019f8 	.word	0x200019f8

08016514 <_isatty_r>:
 8016514:	b538      	push	{r3, r4, r5, lr}
 8016516:	4d06      	ldr	r5, [pc, #24]	; (8016530 <_isatty_r+0x1c>)
 8016518:	2300      	movs	r3, #0
 801651a:	4604      	mov	r4, r0
 801651c:	4608      	mov	r0, r1
 801651e:	602b      	str	r3, [r5, #0]
 8016520:	f7eb fe54 	bl	80021cc <_isatty>
 8016524:	1c43      	adds	r3, r0, #1
 8016526:	d102      	bne.n	801652e <_isatty_r+0x1a>
 8016528:	682b      	ldr	r3, [r5, #0]
 801652a:	b103      	cbz	r3, 801652e <_isatty_r+0x1a>
 801652c:	6023      	str	r3, [r4, #0]
 801652e:	bd38      	pop	{r3, r4, r5, pc}
 8016530:	200019f8 	.word	0x200019f8
 8016534:	00000000 	.word	0x00000000

08016538 <floor>:
 8016538:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801653c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016540:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016544:	2e13      	cmp	r6, #19
 8016546:	460b      	mov	r3, r1
 8016548:	4607      	mov	r7, r0
 801654a:	460c      	mov	r4, r1
 801654c:	4605      	mov	r5, r0
 801654e:	dc32      	bgt.n	80165b6 <floor+0x7e>
 8016550:	2e00      	cmp	r6, #0
 8016552:	da14      	bge.n	801657e <floor+0x46>
 8016554:	a334      	add	r3, pc, #208	; (adr r3, 8016628 <floor+0xf0>)
 8016556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801655a:	f7e9 fe6f 	bl	800023c <__adddf3>
 801655e:	2200      	movs	r2, #0
 8016560:	2300      	movs	r3, #0
 8016562:	f7ea fab1 	bl	8000ac8 <__aeabi_dcmpgt>
 8016566:	b138      	cbz	r0, 8016578 <floor+0x40>
 8016568:	2c00      	cmp	r4, #0
 801656a:	da56      	bge.n	801661a <floor+0xe2>
 801656c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8016570:	4325      	orrs	r5, r4
 8016572:	d055      	beq.n	8016620 <floor+0xe8>
 8016574:	4c2e      	ldr	r4, [pc, #184]	; (8016630 <floor+0xf8>)
 8016576:	2500      	movs	r5, #0
 8016578:	4623      	mov	r3, r4
 801657a:	462f      	mov	r7, r5
 801657c:	e025      	b.n	80165ca <floor+0x92>
 801657e:	4a2d      	ldr	r2, [pc, #180]	; (8016634 <floor+0xfc>)
 8016580:	fa42 f806 	asr.w	r8, r2, r6
 8016584:	ea01 0208 	and.w	r2, r1, r8
 8016588:	4302      	orrs	r2, r0
 801658a:	d01e      	beq.n	80165ca <floor+0x92>
 801658c:	a326      	add	r3, pc, #152	; (adr r3, 8016628 <floor+0xf0>)
 801658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016592:	f7e9 fe53 	bl	800023c <__adddf3>
 8016596:	2200      	movs	r2, #0
 8016598:	2300      	movs	r3, #0
 801659a:	f7ea fa95 	bl	8000ac8 <__aeabi_dcmpgt>
 801659e:	2800      	cmp	r0, #0
 80165a0:	d0ea      	beq.n	8016578 <floor+0x40>
 80165a2:	2c00      	cmp	r4, #0
 80165a4:	bfbe      	ittt	lt
 80165a6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80165aa:	4133      	asrlt	r3, r6
 80165ac:	18e4      	addlt	r4, r4, r3
 80165ae:	ea24 0408 	bic.w	r4, r4, r8
 80165b2:	2500      	movs	r5, #0
 80165b4:	e7e0      	b.n	8016578 <floor+0x40>
 80165b6:	2e33      	cmp	r6, #51	; 0x33
 80165b8:	dd0b      	ble.n	80165d2 <floor+0x9a>
 80165ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80165be:	d104      	bne.n	80165ca <floor+0x92>
 80165c0:	4602      	mov	r2, r0
 80165c2:	f7e9 fe3b 	bl	800023c <__adddf3>
 80165c6:	4607      	mov	r7, r0
 80165c8:	460b      	mov	r3, r1
 80165ca:	4638      	mov	r0, r7
 80165cc:	4619      	mov	r1, r3
 80165ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165d2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80165d6:	f04f 38ff 	mov.w	r8, #4294967295
 80165da:	fa28 f802 	lsr.w	r8, r8, r2
 80165de:	ea10 0f08 	tst.w	r0, r8
 80165e2:	d0f2      	beq.n	80165ca <floor+0x92>
 80165e4:	a310      	add	r3, pc, #64	; (adr r3, 8016628 <floor+0xf0>)
 80165e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ea:	f7e9 fe27 	bl	800023c <__adddf3>
 80165ee:	2200      	movs	r2, #0
 80165f0:	2300      	movs	r3, #0
 80165f2:	f7ea fa69 	bl	8000ac8 <__aeabi_dcmpgt>
 80165f6:	2800      	cmp	r0, #0
 80165f8:	d0be      	beq.n	8016578 <floor+0x40>
 80165fa:	2c00      	cmp	r4, #0
 80165fc:	da0a      	bge.n	8016614 <floor+0xdc>
 80165fe:	2e14      	cmp	r6, #20
 8016600:	d101      	bne.n	8016606 <floor+0xce>
 8016602:	3401      	adds	r4, #1
 8016604:	e006      	b.n	8016614 <floor+0xdc>
 8016606:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801660a:	2301      	movs	r3, #1
 801660c:	40b3      	lsls	r3, r6
 801660e:	441d      	add	r5, r3
 8016610:	42af      	cmp	r7, r5
 8016612:	d8f6      	bhi.n	8016602 <floor+0xca>
 8016614:	ea25 0508 	bic.w	r5, r5, r8
 8016618:	e7ae      	b.n	8016578 <floor+0x40>
 801661a:	2500      	movs	r5, #0
 801661c:	462c      	mov	r4, r5
 801661e:	e7ab      	b.n	8016578 <floor+0x40>
 8016620:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016624:	e7a8      	b.n	8016578 <floor+0x40>
 8016626:	bf00      	nop
 8016628:	8800759c 	.word	0x8800759c
 801662c:	7e37e43c 	.word	0x7e37e43c
 8016630:	bff00000 	.word	0xbff00000
 8016634:	000fffff 	.word	0x000fffff

08016638 <_init>:
 8016638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801663a:	bf00      	nop
 801663c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801663e:	bc08      	pop	{r3}
 8016640:	469e      	mov	lr, r3
 8016642:	4770      	bx	lr

08016644 <_fini>:
 8016644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016646:	bf00      	nop
 8016648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801664a:	bc08      	pop	{r3}
 801664c:	469e      	mov	lr, r3
 801664e:	4770      	bx	lr
